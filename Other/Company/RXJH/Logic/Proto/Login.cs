// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Client {

  #region Enums
  public enum enSecondLogin {
    None = 0,
    /// <summary>
    ///验证账号密码
    /// </summary>
    ReqVerifyAccountPasswd = 1,
    /// <summary>
    ///验证返回
    /// </summary>
    NtfVerifyAccountPasswd = 2,
    /// <summary>
    ///选区
    /// </summary>
    ReqChooseZone = 3,
    /// <summary>
    ///选区返回
    /// </summary>
    NtfChooseZone = 4,
    /// <summary>
    ///登录网关
    /// </summary>
    ReqLoginGateway = 5,
    /// <summary>
    ///登录网关返回
    /// </summary>
    NtfLoginGateway = 6,
    /// <summary>
    ///上行心跳
    /// </summary>
    ReqKeepHeart = 7,
    /// <summary>
    ///下行心跳
    /// </summary>
    NtfKeepHeart = 8,
    /// <summary>
    ///同步游戏时间
    /// </summary>
    NtfSyncGameTime = 9,
    /// <summary>
    ///创角
    /// </summary>
    ReqCreateRole = 10,
    /// <summary>
    ///创角返回
    /// </summary>
    NtfCreateRole = 11,
    /// <summary>
    ///选角
    /// </summary>
    ReqSelectRole = 12,
    /// <summary>
    ///进入游戏
    /// </summary>
    NtfSelectRole = 13,
    /// <summary>
    ///大退游戏(主动)
    /// </summary>
    ReqQuitGame = 14,
    /// <summary>
    ///实际最大
    /// </summary>
    RealMax = 15,
  }

  #endregion

  #region Messages
  public sealed class SecondLogin_Req_VerifyAccountPasswd : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_VerifyAccountPasswd> _parser = new pb::MessageParser<SecondLogin_Req_VerifyAccountPasswd>(() => new SecondLogin_Req_VerifyAccountPasswd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_VerifyAccountPasswd> Parser { get { return _parser; } }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_VerifyAccountPasswd : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_VerifyAccountPasswd> _parser = new pb::MessageParser<SecondLogin_Ntf_VerifyAccountPasswd>(() => new SecondLogin_Ntf_VerifyAccountPasswd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_VerifyAccountPasswd> Parser { get { return _parser; } }

    /// <summary>Field number for the "accId" field.</summary>
    public const int AccIdFieldNumber = 2;
    private ulong accId_;
    /// <summary>
    ///数字账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccId {
      get { return accId_; }
      set {
        accId_ = value;
      }
    }

    /// <summary>Field number for the "serverGameTime" field.</summary>
    public const int ServerGameTimeFieldNumber = 3;
    private ulong serverGameTime_;
    /// <summary>
    ///游戏时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerGameTime {
      get { return serverGameTime_; }
      set {
        serverGameTime_ = value;
      }
    }

    /// <summary>Field number for the "timeoutExpire" field.</summary>
    public const int TimeoutExpireFieldNumber = 4;
    private uint timeoutExpire_;
    /// <summary>
    ///超时到期(选区超时)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeoutExpire {
      get { return timeoutExpire_; }
      set {
        timeoutExpire_ = value;
      }
    }

    /// <summary>Field number for the "tabs" field.</summary>
    public const int TabsFieldNumber = 5;
    private global::Common.GameZoneAllTab tabs_;
    /// <summary>
    ///游戏区tab
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GameZoneAllTab Tabs {
      get { return tabs_; }
      set {
        tabs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AccId);
      }
      if (ServerGameTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ServerGameTime);
      }
      if (TimeoutExpire != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeoutExpire);
      }
      if (tabs_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Tabs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccId);
      }
      if (ServerGameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerGameTime);
      }
      if (TimeoutExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutExpire);
      }
      if (tabs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tabs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            AccId = input.ReadUInt64();
            break;
          }
          case 24: {
            ServerGameTime = input.ReadUInt64();
            break;
          }
          case 32: {
            TimeoutExpire = input.ReadUInt32();
            break;
          }
          case 42: {
            if (tabs_ == null) {
              tabs_ = new global::Common.GameZoneAllTab();
            }
            input.ReadMessage(tabs_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Req_ChooseZone : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_ChooseZone> _parser = new pb::MessageParser<SecondLogin_Req_ChooseZone>(() => new SecondLogin_Req_ChooseZone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_ChooseZone> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///游戏区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_ChooseZone : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_ChooseZone> _parser = new pb::MessageParser<SecondLogin_Ntf_ChooseZone>(() => new SecondLogin_Ntf_ChooseZone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_ChooseZone> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 2;
    private uint zoneId_;
    /// <summary>
    ///游戏区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "gatway" field.</summary>
    public const int GatwayFieldNumber = 3;
    private global::Common.ZoneGateway gatway_;
    /// <summary>
    ///网关信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ZoneGateway Gatway {
      get { return gatway_; }
      set {
        gatway_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ZoneId);
      }
      if (gatway_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Gatway);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      if (gatway_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gatway);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gatway_ == null) {
              gatway_ = new global::Common.ZoneGateway();
            }
            input.ReadMessage(gatway_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Req_LoginGateway : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_LoginGateway> _parser = new pb::MessageParser<SecondLogin_Req_LoginGateway>(() => new SecondLogin_Req_LoginGateway());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_LoginGateway> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankToken" field.</summary>
    public const int RankTokenFieldNumber = 1;
    private uint rankToken_;
    /// <summary>
    ///随机token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankToken {
      get { return rankToken_; }
      set {
        rankToken_ = value;
      }
    }

    /// <summary>Field number for the "accId" field.</summary>
    public const int AccIdFieldNumber = 2;
    private ulong accId_;
    /// <summary>
    ///数字账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccId {
      get { return accId_; }
      set {
        accId_ = value;
      }
    }

    /// <summary>Field number for the "clientGameTime" field.</summary>
    public const int ClientGameTimeFieldNumber = 3;
    private ulong clientGameTime_;
    /// <summary>
    ///前端游戏时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientGameTime {
      get { return clientGameTime_; }
      set {
        clientGameTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankToken != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RankToken);
      }
      if (AccId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AccId);
      }
      if (ClientGameTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ClientGameTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankToken);
      }
      if (AccId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccId);
      }
      if (ClientGameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientGameTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankToken = input.ReadUInt32();
            break;
          }
          case 16: {
            AccId = input.ReadUInt64();
            break;
          }
          case 24: {
            ClientGameTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_LoginGateway : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_LoginGateway> _parser = new pb::MessageParser<SecondLogin_Ntf_LoginGateway>(() => new SecondLogin_Ntf_LoginGateway());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_LoginGateway> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverGameTime" field.</summary>
    public const int ServerGameTimeFieldNumber = 2;
    private ulong serverGameTime_;
    /// <summary>
    ///后端游戏时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerGameTime {
      get { return serverGameTime_; }
      set {
        serverGameTime_ = value;
      }
    }

    /// <summary>Field number for the "actionExpire" field.</summary>
    public const int ActionExpireFieldNumber = 3;
    private uint actionExpire_;
    /// <summary>
    ///选区创角行为到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionExpire {
      get { return actionExpire_; }
      set {
        actionExpire_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerGameTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ServerGameTime);
      }
      if (ActionExpire != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ActionExpire);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerGameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerGameTime);
      }
      if (ActionExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionExpire);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            ServerGameTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActionExpire = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class SecondLogin_Req_KeepHeart : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_KeepHeart> _parser = new pb::MessageParser<SecondLogin_Req_KeepHeart>(() => new SecondLogin_Req_KeepHeart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_KeepHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class SecondLogin_Ntf_KeepHeart : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_KeepHeart> _parser = new pb::MessageParser<SecondLogin_Ntf_KeepHeart>(() => new SecondLogin_Ntf_KeepHeart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_KeepHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_SyncGameTime : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_SyncGameTime> _parser = new pb::MessageParser<SecondLogin_Ntf_SyncGameTime>(() => new SecondLogin_Ntf_SyncGameTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_SyncGameTime> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverGameTime" field.</summary>
    public const int ServerGameTimeFieldNumber = 1;
    private ulong serverGameTime_;
    /// <summary>
    ///游戏时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerGameTime {
      get { return serverGameTime_; }
      set {
        serverGameTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerGameTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ServerGameTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerGameTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerGameTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerGameTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Req_CreateRole : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_CreateRole> _parser = new pb::MessageParser<SecondLogin_Req_CreateRole>(() => new SecondLogin_Req_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_CreateRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Common.ZoneCreateRole role_;
    /// <summary>
    ///创角信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ZoneCreateRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (role_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (role_ == null) {
              role_ = new global::Common.ZoneCreateRole();
            }
            input.ReadMessage(role_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_CreateRole : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_CreateRole> _parser = new pb::MessageParser<SecondLogin_Ntf_CreateRole>(() => new SecondLogin_Ntf_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_CreateRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Common.ZoneRole role_;
    /// <summary>
    ///新角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ZoneRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (role_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (role_ == null) {
              role_ = new global::Common.ZoneRole();
            }
            input.ReadMessage(role_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Req_SelectRole : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_SelectRole> _parser = new pb::MessageParser<SecondLogin_Req_SelectRole>(() => new SecondLogin_Req_SelectRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_SelectRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondLogin_Ntf_SelectRole : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Ntf_SelectRole> _parser = new pb::MessageParser<SecondLogin_Ntf_SelectRole>(() => new SecondLogin_Ntf_SelectRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Ntf_SelectRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class SecondLogin_Req_QuitGame : pb::IMessage {
    private static readonly pb::MessageParser<SecondLogin_Req_QuitGame> _parser = new pb::MessageParser<SecondLogin_Req_QuitGame>(() => new SecondLogin_Req_QuitGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondLogin_Req_QuitGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
