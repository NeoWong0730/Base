// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logincommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Common {

  #region Enums
  /// <summary>
  ///区的功能性字段(bit操作,if(zoneFunc &amp; (1 &lt;&lt; enZoneFunc_New))==true即新区)
  /// </summary>
  public enum enZoneFunc {
    /// <summary>
    ///区标记-新
    /// </summary>
    New = 0,
    /// <summary>
    ///区标记-推荐
    /// </summary>
    Recommend = 1,
    /// <summary>
    ///最大
    /// </summary>
    Max = 2,
  }

  /// <summary>
  ///游戏区状态信息
  /// </summary>
  public enum enZoneState {
    /// <summary>
    ///默认(灰色)
    /// </summary>
    None = 0,
    /// <summary>
    ///维护(灰色)
    /// </summary>
    Grey = 1,
    /// <summary>
    ///拥挤(红色)
    /// </summary>
    Red = 2,
    /// <summary>
    ///次拥挤(黄色)
    /// </summary>
    Yellow = 3,
    /// <summary>
    ///正常(绿色)
    /// </summary>
    Green = 4,
    /// <summary>
    ///最大
    /// </summary>
    Max = 5,
  }

  /// <summary>
  ///性别枚举
  /// </summary>
  public enum enRoleSex {
    /// <summary>
    ///男
    /// </summary>
    Male = 0,
    /// <summary>
    ///女
    /// </summary>
    Female = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///所有Tab
  /// </summary>
  public sealed class GameZoneAllTab : pb::IMessage {
    private static readonly pb::MessageParser<GameZoneAllTab> _parser = new pb::MessageParser<GameZoneAllTab>(() => new GameZoneAllTab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameZoneAllTab> Parser { get { return _parser; } }

    /// <summary>Field number for the "tabList" field.</summary>
    public const int TabListFieldNumber = 1;
    private global::Common.GameZoneTabList tabList_;
    /// <summary>
    ///游戏区tab
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GameZoneTabList TabList {
      get { return tabList_; }
      set {
        tabList_ = value;
      }
    }

    /// <summary>Field number for the "zoneList" field.</summary>
    public const int ZoneListFieldNumber = 2;
    private global::Common.GameZoneList zoneList_;
    /// <summary>
    ///所有区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GameZoneList ZoneList {
      get { return zoneList_; }
      set {
        zoneList_ = value;
      }
    }

    /// <summary>Field number for the "roleList" field.</summary>
    public const int RoleListFieldNumber = 3;
    private global::Common.GameZoneRoleList roleList_;
    /// <summary>
    ///所有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GameZoneRoleList RoleList {
      get { return roleList_; }
      set {
        roleList_ = value;
      }
    }

    /// <summary>Field number for the "recommend" field.</summary>
    public const int RecommendFieldNumber = 4;
    private global::Common.GameRecommendTab recommend_;
    /// <summary>
    ///推荐tab
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.GameRecommendTab Recommend {
      get { return recommend_; }
      set {
        recommend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tabList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TabList);
      }
      if (zoneList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ZoneList);
      }
      if (roleList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleList);
      }
      if (recommend_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Recommend);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tabList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TabList);
      }
      if (zoneList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZoneList);
      }
      if (roleList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleList);
      }
      if (recommend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recommend);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tabList_ == null) {
              tabList_ = new global::Common.GameZoneTabList();
            }
            input.ReadMessage(tabList_);
            break;
          }
          case 18: {
            if (zoneList_ == null) {
              zoneList_ = new global::Common.GameZoneList();
            }
            input.ReadMessage(zoneList_);
            break;
          }
          case 26: {
            if (roleList_ == null) {
              roleList_ = new global::Common.GameZoneRoleList();
            }
            input.ReadMessage(roleList_);
            break;
          }
          case 34: {
            if (recommend_ == null) {
              recommend_ = new global::Common.GameRecommendTab();
            }
            input.ReadMessage(recommend_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///tab列表
  /// </summary>
  public sealed class GameZoneTabList : pb::IMessage {
    private static readonly pb::MessageParser<GameZoneTabList> _parser = new pb::MessageParser<GameZoneTabList>(() => new GameZoneTabList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameZoneTabList> Parser { get { return _parser; } }

    /// <summary>Field number for the "tabs" field.</summary>
    public const int TabsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.ZoneTab> _repeated_tabs_codec
        = pb::FieldCodec.ForMessage(10, global::Common.ZoneTab.Parser);
    private readonly pbc::RepeatedField<global::Common.ZoneTab> tabs_ = new pbc::RepeatedField<global::Common.ZoneTab>();
    /// <summary>
    ///tab列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ZoneTab> Tabs {
      get { return tabs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tabs_.WriteTo(output, _repeated_tabs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tabs_.CalculateSize(_repeated_tabs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tabs_.AddEntriesFrom(input, _repeated_tabs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏区列表
  /// </summary>
  public sealed class GameZoneList : pb::IMessage {
    private static readonly pb::MessageParser<GameZoneList> _parser = new pb::MessageParser<GameZoneList>(() => new GameZoneList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameZoneList> Parser { get { return _parser; } }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.ZoneInfo> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(10, global::Common.ZoneInfo.Parser);
    private readonly pbc::RepeatedField<global::Common.ZoneInfo> zones_ = new pbc::RepeatedField<global::Common.ZoneInfo>();
    /// <summary>
    ///游戏区列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ZoneInfo> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      zones_.WriteTo(output, _repeated_zones_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += zones_.CalculateSize(_repeated_zones_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色列表
  /// </summary>
  public sealed class GameZoneRoleList : pb::IMessage {
    private static readonly pb::MessageParser<GameZoneRoleList> _parser = new pb::MessageParser<GameZoneRoleList>(() => new GameZoneRoleList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameZoneRoleList> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.ZoneRoleList> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Common.ZoneRoleList.Parser);
    private readonly pbc::RepeatedField<global::Common.ZoneRoleList> roles_ = new pbc::RepeatedField<global::Common.ZoneRoleList>();
    /// <summary>
    ///角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ZoneRoleList> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///推荐Tab
  /// </summary>
  public sealed class GameRecommendTab : pb::IMessage {
    private static readonly pb::MessageParser<GameRecommendTab> _parser = new pb::MessageParser<GameRecommendTab>(() => new GameRecommendTab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecommendTab> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneIds" field.</summary>
    public const int ZoneIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_zoneIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> zoneIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///区Id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ZoneIds {
      get { return zoneIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      zoneIds_.WriteTo(output, _repeated_zoneIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += zoneIds_.CalculateSize(_repeated_zoneIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            zoneIds_.AddEntriesFrom(input, _repeated_zoneIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个Tab
  /// </summary>
  public sealed class ZoneTab : pb::IMessage {
    private static readonly pb::MessageParser<ZoneTab> _parser = new pb::MessageParser<ZoneTab>(() => new ZoneTab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneTab> Parser { get { return _parser; } }

    /// <summary>Field number for the "tabId" field.</summary>
    public const int TabIdFieldNumber = 1;
    private uint tabId_;
    /// <summary>
    ///页签Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TabId {
      get { return tabId_; }
      set {
        tabId_ = value;
      }
    }

    /// <summary>Field number for the "tabName" field.</summary>
    public const int TabNameFieldNumber = 2;
    private string tabName_ = "";
    /// <summary>
    ///页签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TabName {
      get { return tabName_; }
      set {
        tabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TabId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TabId);
      }
      if (TabName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TabName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TabId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TabId);
      }
      if (TabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TabName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TabId = input.ReadUInt32();
            break;
          }
          case 18: {
            TabName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏区
  /// </summary>
  public sealed class ZoneInfo : pb::IMessage {
    private static readonly pb::MessageParser<ZoneInfo> _parser = new pb::MessageParser<ZoneInfo>(() => new ZoneInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///区Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "zoneName" field.</summary>
    public const int ZoneNameFieldNumber = 2;
    private string zoneName_ = "";
    /// <summary>
    ///区名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneName {
      get { return zoneName_; }
      set {
        zoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Common.enZoneState state_ = 0;
    /// <summary>
    ///区状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.enZoneState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 4;
    private uint openTime_;
    /// <summary>
    ///开服时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "zoneFunc" field.</summary>
    public const int ZoneFuncFieldNumber = 5;
    private uint zoneFunc_;
    /// <summary>
    ///功能字段enZoneFunc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneFunc {
      get { return zoneFunc_; }
      set {
        zoneFunc_ = value;
      }
    }

    /// <summary>Field number for the "tabId" field.</summary>
    public const int TabIdFieldNumber = 6;
    private uint tabId_;
    /// <summary>
    ///所属tab
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TabId {
      get { return tabId_; }
      set {
        tabId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
      if (ZoneName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ZoneName);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OpenTime);
      }
      if (ZoneFunc != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ZoneFunc);
      }
      if (TabId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TabId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      if (ZoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (ZoneFunc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneFunc);
      }
      if (TabId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TabId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 18: {
            ZoneName = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::Common.enZoneState) input.ReadEnum();
            break;
          }
          case 32: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 40: {
            ZoneFunc = input.ReadUInt32();
            break;
          }
          case 48: {
            TabId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主角列表
  /// </summary>
  public sealed class ZoneRoleList : pb::IMessage {
    private static readonly pb::MessageParser<ZoneRoleList> _parser = new pb::MessageParser<ZoneRoleList>(() => new ZoneRoleList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneRoleList> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///区Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.ZoneRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(18, global::Common.ZoneRole.Parser);
    private readonly pbc::RepeatedField<global::Common.ZoneRole> roles_ = new pbc::RepeatedField<global::Common.ZoneRole>();
    /// <summary>
    ///主角列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ZoneRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 18: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///区列表上展示的主角简介
  /// </summary>
  public sealed class ZoneRole : pb::IMessage {
    private static readonly pb::MessageParser<ZoneRole> _parser = new pb::MessageParser<ZoneRole>(() => new ZoneRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id(Id的形式可能会是一个message对象,待定哈)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "careerId" field.</summary>
    public const int CareerIdFieldNumber = 4;
    private uint careerId_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerId {
      get { return careerId_; }
      set {
        careerId_ = value;
      }
    }

    /// <summary>Field number for the "lastLogoutTime" field.</summary>
    public const int LastLogoutTimeFieldNumber = 5;
    private uint lastLogoutTime_;
    /// <summary>
    ///上次登出时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLogoutTime {
      get { return lastLogoutTime_; }
      set {
        lastLogoutTime_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private global::Common.enRoleSex sex_ = 0;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.enRoleSex Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "partList" field.</summary>
    public const int PartListFieldNumber = 7;
    private global::Common.ModelPartList partList_;
    /// <summary>
    ///部位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ModelPartList PartList {
      get { return partList_; }
      set {
        partList_ = value;
      }
    }

    /// <summary>Field number for the "moduleShow" field.</summary>
    public const int ModuleShowFieldNumber = 8;
    private global::Common.ModuleShowInfo moduleShow_;
    /// <summary>
    ///模块展示数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ModuleShowInfo ModuleShow {
      get { return moduleShow_; }
      set {
        moduleShow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (CareerId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CareerId);
      }
      if (LastLogoutTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastLogoutTime);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Sex);
      }
      if (partList_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PartList);
      }
      if (moduleShow_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ModuleShow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (CareerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerId);
      }
      if (LastLogoutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastLogoutTime);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sex);
      }
      if (partList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartList);
      }
      if (moduleShow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleShow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            CareerId = input.ReadUInt32();
            break;
          }
          case 40: {
            LastLogoutTime = input.ReadUInt32();
            break;
          }
          case 48: {
            sex_ = (global::Common.enRoleSex) input.ReadEnum();
            break;
          }
          case 58: {
            if (partList_ == null) {
              partList_ = new global::Common.ModelPartList();
            }
            input.ReadMessage(partList_);
            break;
          }
          case 66: {
            if (moduleShow_ == null) {
              moduleShow_ = new global::Common.ModuleShowInfo();
            }
            input.ReadMessage(moduleShow_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创角时的一个主角对象
  /// </summary>
  public sealed class ZoneCreateRole : pb::IMessage {
    private static readonly pb::MessageParser<ZoneCreateRole> _parser = new pb::MessageParser<ZoneCreateRole>(() => new ZoneCreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneCreateRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "careerId" field.</summary>
    public const int CareerIdFieldNumber = 2;
    private uint careerId_;
    /// <summary>
    ///string	nickName						= 1;//昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerId {
      get { return careerId_; }
      set {
        careerId_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private global::Common.enRoleSex sex_ = 0;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.enRoleSex Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "partList" field.</summary>
    public const int PartListFieldNumber = 4;
    private global::Common.ModelPartList partList_;
    /// <summary>
    ///部位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ModelPartList PartList {
      get { return partList_; }
      set {
        partList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CareerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CareerId);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Sex);
      }
      if (partList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PartList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CareerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerId);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sex);
      }
      if (partList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            CareerId = input.ReadUInt32();
            break;
          }
          case 24: {
            sex_ = (global::Common.enRoleSex) input.ReadEnum();
            break;
          }
          case 34: {
            if (partList_ == null) {
              partList_ = new global::Common.ModelPartList();
            }
            input.ReadMessage(partList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主角模型部位信息
  /// </summary>
  public sealed class ModelPart : pb::IMessage {
    private static readonly pb::MessageParser<ModelPart> _parser = new pb::MessageParser<ModelPart>(() => new ModelPart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPart> Parser { get { return _parser; } }

    /// <summary>Field number for the "partId" field.</summary>
    public const int PartIdFieldNumber = 1;
    private uint partId_;
    /// <summary>
    ///部位Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartId {
      get { return partId_; }
      set {
        partId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    /// <summary>
    ///部位数据(捏脸数据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartId = input.ReadUInt32();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主角模型部位列表
  /// </summary>
  public sealed class ModelPartList : pb::IMessage {
    private static readonly pb::MessageParser<ModelPartList> _parser = new pb::MessageParser<ModelPartList>(() => new ModelPartList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelPartList> Parser { get { return _parser; } }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.ModelPart> _repeated_parts_codec
        = pb::FieldCodec.ForMessage(10, global::Common.ModelPart.Parser);
    private readonly pbc::RepeatedField<global::Common.ModelPart> parts_ = new pbc::RepeatedField<global::Common.ModelPart>();
    /// <summary>
    ///部位列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ModelPart> Parts {
      get { return parts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      parts_.WriteTo(output, _repeated_parts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += parts_.CalculateSize(_repeated_parts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            parts_.AddEntriesFrom(input, _repeated_parts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///区网关信息
  /// </summary>
  public sealed class ZoneGateway : pb::IMessage {
    private static readonly pb::MessageParser<ZoneGateway> _parser = new pb::MessageParser<ZoneGateway>(() => new ZoneGateway());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneGateway> Parser { get { return _parser; } }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private pb::ByteString ip_ = pb::ByteString.Empty;
    /// <summary>
    ///网关IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    ///网关端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "randToken" field.</summary>
    public const int RandTokenFieldNumber = 3;
    private uint randToken_;
    /// <summary>
    ///随机token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandToken {
      get { return randToken_; }
      set {
        randToken_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 4;
    private uint tokenExpire_;
    /// <summary>
    ///token到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "actionExpire" field.</summary>
    public const int ActionExpireFieldNumber = 5;
    private uint actionExpire_;
    /// <summary>
    ///行为到期时间(跟token同一起始时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionExpire {
      get { return actionExpire_; }
      set {
        actionExpire_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (RandToken != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RandToken);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TokenExpire);
      }
      if (ActionExpire != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ActionExpire);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (RandToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandToken);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (ActionExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionExpire);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadBytes();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            RandToken = input.ReadUInt32();
            break;
          }
          case 32: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 40: {
            ActionExpire = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主角模块展示信息
  /// </summary>
  public sealed class ModuleShowInfo : pb::IMessage {
    private static readonly pb::MessageParser<ModuleShowInfo> _parser = new pb::MessageParser<ModuleShowInfo>(() => new ModuleShowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleShowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
