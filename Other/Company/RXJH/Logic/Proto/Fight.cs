// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Client {

  #region Enums
  public enum enSecondFight {
    None = 0,
    /// <summary>
    ///请求技能前读条
    /// </summary>
    ReqSkillCharge = 1,
    /// <summary>
    ///通知技能前读条(broadcast)
    /// </summary>
    NtfSkillCharge = 2,
    /// <summary>
    ///请求释放技能
    /// </summary>
    ReqSkillCast = 3,
    /// <summary>
    ///通知释放技能(single)
    /// </summary>
    NtfSkillCast = 4,
    /// <summary>
    ///通知技能效果(broadcast)
    /// </summary>
    NtfSkillEffect = 5,
    /// <summary>
    ///通知技能冷却(single)
    /// </summary>
    NtfSkillColddown = 6,
    /// <summary>
    ///请求停止技能前读条
    /// </summary>
    ReqSkillStopCharge = 7,
    /// <summary>
    ///通知停止技能前读条(broadcast)
    /// </summary>
    NtfSkillStopCharge = 8,
    /// <summary>
    ///请求停止持续引导技能
    /// </summary>
    ReqSkillStopChannel = 9,
    /// <summary>
    ///通知停止持续引导技能(broadcast)
    /// </summary>
    NtfSkillStopChannel = 10,
    /// <summary>
    ///实际最大
    /// </summary>
    RealMax = 11,
  }

  #endregion

  #region Messages
  public sealed class SecondFight_Req_Skill_Charge : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Req_Skill_Charge> _parser = new pb::MessageParser<SecondFight_Req_Skill_Charge>(() => new SecondFight_Req_Skill_Charge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Req_Skill_Charge> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Charge : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Charge> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Charge>(() => new SecondFight_Ntf_Skill_Charge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Charge> Parser { get { return _parser; } }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Common.SkillRelatedEntity owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillRelatedEntity Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "chargebegin" field.</summary>
    public const int ChargebeginFieldNumber = 3;
    private ulong chargebegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Chargebegin {
      get { return chargebegin_; }
      set {
        chargebegin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Chargebegin != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Chargebegin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Chargebegin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Chargebegin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Common.SkillRelatedEntity();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            Chargebegin = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondFight_Req_Skill_Cast : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Req_Skill_Cast> _parser = new pb::MessageParser<SecondFight_Req_Skill_Cast>(() => new SecondFight_Req_Skill_Cast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Req_Skill_Cast> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "targetlist" field.</summary>
    public const int TargetlistFieldNumber = 3;
    private global::Common.SkillTargetList targetlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillTargetList Targetlist {
      get { return targetlist_; }
      set {
        targetlist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (targetlist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Targetlist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (targetlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetlist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 26: {
            if (targetlist_ == null) {
              targetlist_ = new global::Common.SkillTargetList();
            }
            input.ReadMessage(targetlist_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Cast : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Cast> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Cast>(() => new SecondFight_Ntf_Skill_Cast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Cast> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Effect : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Effect> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Effect>(() => new SecondFight_Ntf_Skill_Effect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Effect> Parser { get { return _parser; } }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Common.SkillRelatedEntity owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillRelatedEntity Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Common.SkillPos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillPos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "effectlist" field.</summary>
    public const int EffectlistFieldNumber = 4;
    private global::Common.SkillEffectList effectlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillEffectList Effectlist {
      get { return effectlist_; }
      set {
        effectlist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (effectlist_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Effectlist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (effectlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effectlist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Common.SkillRelatedEntity();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Common.SkillPos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (effectlist_ == null) {
              effectlist_ = new global::Common.SkillEffectList();
            }
            input.ReadMessage(effectlist_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Colddown : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Colddown> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Colddown>(() => new SecondFight_Ntf_Skill_Colddown());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Colddown> Parser { get { return _parser; } }

    /// <summary>Field number for the "colddownlist" field.</summary>
    public const int ColddownlistFieldNumber = 1;
    private global::Common.SkillColddownList colddownlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillColddownList Colddownlist {
      get { return colddownlist_; }
      set {
        colddownlist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (colddownlist_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Colddownlist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (colddownlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Colddownlist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (colddownlist_ == null) {
              colddownlist_ = new global::Common.SkillColddownList();
            }
            input.ReadMessage(colddownlist_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class SecondFight_Req_Skill_Stop_Charge : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Req_Skill_Stop_Charge> _parser = new pb::MessageParser<SecondFight_Req_Skill_Stop_Charge>(() => new SecondFight_Req_Skill_Stop_Charge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Req_Skill_Stop_Charge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Stop_Charge : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Stop_Charge> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Stop_Charge>(() => new SecondFight_Ntf_Skill_Stop_Charge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Stop_Charge> Parser { get { return _parser; } }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Common.SkillRelatedEntity owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillRelatedEntity Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Common.SkillRelatedEntity();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class SecondFight_Req_Skill_Stop_Channel : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Req_Skill_Stop_Channel> _parser = new pb::MessageParser<SecondFight_Req_Skill_Stop_Channel>(() => new SecondFight_Req_Skill_Stop_Channel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Req_Skill_Stop_Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SecondFight_Ntf_Skill_Stop_Channel : pb::IMessage {
    private static readonly pb::MessageParser<SecondFight_Ntf_Skill_Stop_Channel> _parser = new pb::MessageParser<SecondFight_Ntf_Skill_Stop_Channel>(() => new SecondFight_Ntf_Skill_Stop_Channel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondFight_Ntf_Skill_Stop_Channel> Parser { get { return _parser; } }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Common.SkillRelatedEntity owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.SkillRelatedEntity Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Common.SkillRelatedEntity();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
