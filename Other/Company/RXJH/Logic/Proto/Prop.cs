// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prop.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Client {

  #region Enums
  public enum enSecondProp {
    None = 0,
    /// <summary>
    ///刷新属性
    /// </summary>
    NtfFreshProp = 1,
    /// <summary>
    ///刷新经验
    /// </summary>
    NtfFreshExp = 2,
    /// <summary>
    ///刷新等级
    /// </summary>
    NtfFreshLevel = 3,
    /// <summary>
    ///实际最大
    /// </summary>
    RealMax = 4,
  }

  #endregion

  #region Messages
  public sealed class SecondProp_Ntf_FreshProp : pb::IMessage {
    private static readonly pb::MessageParser<SecondProp_Ntf_FreshProp> _parser = new pb::MessageParser<SecondProp_Ntf_FreshProp>(() => new SecondProp_Ntf_FreshProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondProp_Ntf_FreshProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SecondProp_Ntf_FreshExp : pb::IMessage {
    private static readonly pb::MessageParser<SecondProp_Ntf_FreshExp> _parser = new pb::MessageParser<SecondProp_Ntf_FreshExp>(() => new SecondProp_Ntf_FreshExp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondProp_Ntf_FreshExp> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondProp_Ntf_FreshLevel : pb::IMessage {
    private static readonly pb::MessageParser<SecondProp_Ntf_FreshLevel> _parser = new pb::MessageParser<SecondProp_Ntf_FreshLevel>(() => new SecondProp_Ntf_FreshLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondProp_Ntf_FreshLevel> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
