// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskcommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Common {

  #region Messages
  public sealed class TaskProgress : pb::IMessage {
    private static readonly pb::MessageParser<TaskProgress> _parser = new pb::MessageParser<TaskProgress>(() => new TaskProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskProgress> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 2;
    private bool finished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (Finished != false) {
        output.WriteRawTag(16);
        output.WriteBool(Finished);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Finished != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 16: {
            Finished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class TaskTarget : pb::IMessage {
    private static readonly pb::MessageParser<TaskTarget> _parser = new pb::MessageParser<TaskTarget>(() => new TaskTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskTarget> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 1;
    private uint targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private global::Common.TaskProgress progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.TaskProgress Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Targetid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Targetid);
      }
      if (progress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Targetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Targetid);
      }
      if (progress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Targetid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (progress_ == null) {
              progress_ = new global::Common.TaskProgress();
            }
            input.ReadMessage(progress_);
            break;
          }
        }
      }
    }

  }

  public sealed class TaskTargetSeq : pb::IMessage {
    private static readonly pb::MessageParser<TaskTargetSeq> _parser = new pb::MessageParser<TaskTargetSeq>(() => new TaskTargetSeq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskTargetSeq> Parser { get { return _parser; } }

    /// <summary>Field number for the "seqid" field.</summary>
    public const int SeqidFieldNumber = 1;
    private uint seqid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seqid {
      get { return seqid_; }
      set {
        seqid_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.TaskTarget> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Common.TaskTarget.Parser);
    private readonly pbc::RepeatedField<global::Common.TaskTarget> targets_ = new pbc::RepeatedField<global::Common.TaskTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.TaskTarget> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seqid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seqid);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seqid);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seqid = input.ReadUInt32();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Task : pb::IMessage {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private uint taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private global::Common.TaskTargetSeq seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.TaskTargetSeq Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Taskid);
      }
      if (seq_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Taskid);
      }
      if (seq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (seq_ == null) {
              seq_ = new global::Common.TaskTargetSeq();
            }
            input.ReadMessage(seq_);
            break;
          }
        }
      }
    }

  }

  public sealed class TaskProgressUpdate : pb::IMessage {
    private static readonly pb::MessageParser<TaskProgressUpdate> _parser = new pb::MessageParser<TaskProgressUpdate>(() => new TaskProgressUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskProgressUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 2;
    private bool finished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
      if (Finished != false) {
        output.WriteRawTag(16);
        output.WriteBool(Finished);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Finished != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
          case 16: {
            Finished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class TaskTargetUpdate : pb::IMessage {
    private static readonly pb::MessageParser<TaskTargetUpdate> _parser = new pb::MessageParser<TaskTargetUpdate>(() => new TaskTargetUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskTargetUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 1;
    private uint targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private global::Common.TaskProgressUpdate progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.TaskProgressUpdate Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Targetid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Targetid);
      }
      if (progress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Targetid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Targetid);
      }
      if (progress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Targetid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (progress_ == null) {
              progress_ = new global::Common.TaskProgressUpdate();
            }
            input.ReadMessage(progress_);
            break;
          }
        }
      }
    }

  }

  public sealed class TaskTargetSeqUpdate : pb::IMessage {
    private static readonly pb::MessageParser<TaskTargetSeqUpdate> _parser = new pb::MessageParser<TaskTargetSeqUpdate>(() => new TaskTargetSeqUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskTargetSeqUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "seqid" field.</summary>
    public const int SeqidFieldNumber = 1;
    private uint seqid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seqid {
      get { return seqid_; }
      set {
        seqid_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.TaskTargetUpdate> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::Common.TaskTargetUpdate.Parser);
    private readonly pbc::RepeatedField<global::Common.TaskTargetUpdate> targets_ = new pbc::RepeatedField<global::Common.TaskTargetUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.TaskTargetUpdate> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seqid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seqid);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seqid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seqid);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seqid = input.ReadUInt32();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TaskUpdate : pb::IMessage {
    private static readonly pb::MessageParser<TaskUpdate> _parser = new pb::MessageParser<TaskUpdate>(() => new TaskUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private uint taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private global::Common.TaskTargetSeqUpdate seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.TaskTargetSeqUpdate Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Taskid);
      }
      if (seq_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Taskid);
      }
      if (seq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (seq_ == null) {
              seq_ = new global::Common.TaskTargetSeqUpdate();
            }
            input.ReadMessage(seq_);
            break;
          }
        }
      }
    }

  }

  public sealed class ModuleTask : pb::IMessage {
    private static readonly pb::MessageParser<ModuleTask> _parser = new pb::MessageParser<ModuleTask>(() => new ModuleTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Common.Task> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Common.Task.Parser);
    private readonly pbc::RepeatedField<global::Common.Task> tasks_ = new pbc::RepeatedField<global::Common.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.Task> Tasks {
      get { return tasks_; }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_finished_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> finished_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Finished {
      get { return finished_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
      finished_.WriteTo(output, _repeated_finished_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      size += finished_.CalculateSize(_repeated_finished_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 18:
          case 16: {
            finished_.AddEntriesFrom(input, _repeated_finished_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
