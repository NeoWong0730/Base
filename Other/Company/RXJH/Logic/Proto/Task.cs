// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Client {

  #region Enums
  public enum enSecondTask {
    None = 0,
    ReqAccept = 1,
    NtfAccept = 2,
    ReqCommit = 3,
    NtfFinish = 4,
    NtfUpdate = 5,
    /// <summary>
    ///实际最大
    /// </summary>
    RealMax = 6,
  }

  #endregion

  #region Messages
  public sealed class SecondTask_Req_Accept : pb::IMessage {
    private static readonly pb::MessageParser<SecondTask_Req_Accept> _parser = new pb::MessageParser<SecondTask_Req_Accept>(() => new SecondTask_Req_Accept());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondTask_Req_Accept> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private uint taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Taskid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Taskid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondTask_Ntf_Accept : pb::IMessage {
    private static readonly pb::MessageParser<SecondTask_Ntf_Accept> _parser = new pb::MessageParser<SecondTask_Ntf_Accept>(() => new SecondTask_Ntf_Accept());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondTask_Ntf_Accept> Parser { get { return _parser; } }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Common.Task task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::Common.Task();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondTask_Req_Commit : pb::IMessage {
    private static readonly pb::MessageParser<SecondTask_Req_Commit> _parser = new pb::MessageParser<SecondTask_Req_Commit>(() => new SecondTask_Req_Commit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondTask_Req_Commit> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private uint taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Taskid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Taskid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondTask_Ntf_Finish : pb::IMessage {
    private static readonly pb::MessageParser<SecondTask_Ntf_Finish> _parser = new pb::MessageParser<SecondTask_Ntf_Finish>(() => new SecondTask_Ntf_Finish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondTask_Ntf_Finish> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private uint taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Taskid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Taskid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Taskid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondTask_Ntf_Update : pb::IMessage {
    private static readonly pb::MessageParser<SecondTask_Ntf_Update> _parser = new pb::MessageParser<SecondTask_Ntf_Update>(() => new SecondTask_Ntf_Update());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondTask_Ntf_Update> Parser { get { return _parser; } }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    private global::Common.TaskUpdate update_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.TaskUpdate Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (update_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (update_ == null) {
              update_ = new global::Common.TaskUpdate();
            }
            input.ReadMessage(update_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
