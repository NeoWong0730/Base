// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Client {

  #region Enums
  public enum enSecondItem {
    None = 0,
    NtfItemAdd = 1,
    NtfItemRemove = 2,
    ReqBagUpgrade = 3,
    NtfBagUpgrade = 4,
    ReqBagSort = 5,
    NtfBagSort = 6,
    ReqStore = 7,
    NtfStore = 8,
    ReqRetract = 9,
    NtfRetract = 10,
    ReqPutOn = 11,
    NtfPutOn = 12,
    ReqPutOff = 13,
    NtfPutOff = 14,
    ReqBatDecompose = 15,
    ReqBatSale = 16,
    ReqBatUse = 17,
    ReqAuthenticate = 18,
    NtfCurrencyUpdate = 19,
    ReqTempBagPop = 20,
    NtfTempBagPop = 21,
    NtfColddownUpdate = 22,
    /// <summary>
    ///实际最大
    /// </summary>
    RealMax = 23,
  }

  #endregion

  #region Messages
  public sealed class SecondItem_Ntf_Item_Add : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Item_Add> _parser = new pb::MessageParser<SecondItem_Ntf_Item_Add>(() => new SecondItem_Ntf_Item_Add());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Item_Add> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private uint reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Common.ItemUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(18, global::Common.ItemUpdate.Parser);
    private readonly pbc::RepeatedField<global::Common.ItemUpdate> updates_ = new pbc::RepeatedField<global::Common.ItemUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ItemUpdate> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "adds" field.</summary>
    public const int AddsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Common.ItemAdd> _repeated_adds_codec
        = pb::FieldCodec.ForMessage(26, global::Common.ItemAdd.Parser);
    private readonly pbc::RepeatedField<global::Common.ItemAdd> adds_ = new pbc::RepeatedField<global::Common.ItemAdd>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ItemAdd> Adds {
      get { return adds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Reason);
      }
      updates_.WriteTo(output, _repeated_updates_codec);
      adds_.WriteTo(output, _repeated_adds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      size += updates_.CalculateSize(_repeated_updates_codec);
      size += adds_.CalculateSize(_repeated_adds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadUInt32();
            break;
          }
          case 18: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 26: {
            adds_.AddEntriesFrom(input, _repeated_adds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Item_Remove : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Item_Remove> _parser = new pb::MessageParser<SecondItem_Ntf_Item_Remove>(() => new SecondItem_Ntf_Item_Remove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Item_Remove> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private uint reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "removes" field.</summary>
    public const int RemovesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_removes_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> removes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Removes {
      get { return removes_; }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Common.ItemUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(26, global::Common.ItemUpdate.Parser);
    private readonly pbc::RepeatedField<global::Common.ItemUpdate> updates_ = new pbc::RepeatedField<global::Common.ItemUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ItemUpdate> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Reason);
      }
      removes_.WriteTo(output, _repeated_removes_codec);
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      size += removes_.CalculateSize(_repeated_removes_codec);
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            removes_.AddEntriesFrom(input, _repeated_removes_codec);
            break;
          }
          case 26: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_Bag_Upgrade : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_Bag_Upgrade> _parser = new pb::MessageParser<SecondItem_Req_Bag_Upgrade>(() => new SecondItem_Req_Bag_Upgrade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_Bag_Upgrade> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Bag_Upgrade : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Bag_Upgrade> _parser = new pb::MessageParser<SecondItem_Ntf_Bag_Upgrade>(() => new SecondItem_Ntf_Bag_Upgrade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Bag_Upgrade> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_Bag_Sort : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_Bag_Sort> _parser = new pb::MessageParser<SecondItem_Req_Bag_Sort>(() => new SecondItem_Req_Bag_Sort());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_Bag_Sort> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Bag_Sort : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Bag_Sort> _parser = new pb::MessageParser<SecondItem_Ntf_Bag_Sort>(() => new SecondItem_Ntf_Bag_Sort());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Bag_Sort> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sortcd" field.</summary>
    public const int SortcdFieldNumber = 2;
    private uint sortcd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sortcd {
      get { return sortcd_; }
      set {
        sortcd_ = value;
      }
    }

    /// <summary>Field number for the "removes" field.</summary>
    public const int RemovesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_removes_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> removes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Removes {
      get { return removes_; }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Common.ItemUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(34, global::Common.ItemUpdate.Parser);
    private readonly pbc::RepeatedField<global::Common.ItemUpdate> updates_ = new pbc::RepeatedField<global::Common.ItemUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ItemUpdate> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "moves" field.</summary>
    public const int MovesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Common.ItemMove> _repeated_moves_codec
        = pb::FieldCodec.ForMessage(42, global::Common.ItemMove.Parser);
    private readonly pbc::RepeatedField<global::Common.ItemMove> moves_ = new pbc::RepeatedField<global::Common.ItemMove>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Common.ItemMove> Moves {
      get { return moves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Sortcd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sortcd);
      }
      removes_.WriteTo(output, _repeated_removes_codec);
      updates_.WriteTo(output, _repeated_updates_codec);
      moves_.WriteTo(output, _repeated_moves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Sortcd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sortcd);
      }
      size += removes_.CalculateSize(_repeated_removes_codec);
      size += updates_.CalculateSize(_repeated_updates_codec);
      size += moves_.CalculateSize(_repeated_moves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Sortcd = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            removes_.AddEntriesFrom(input, _repeated_removes_codec);
            break;
          }
          case 34: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 42: {
            moves_.AddEntriesFrom(input, _repeated_moves_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_Store : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_Store> _parser = new pb::MessageParser<SecondItem_Req_Store>(() => new SecondItem_Req_Store());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_Store> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Store : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Store> _parser = new pb::MessageParser<SecondItem_Ntf_Store>(() => new SecondItem_Ntf_Store());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Store> Parser { get { return _parser; } }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private global::Common.ItemOperations ops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemOperations Ops {
      get { return ops_; }
      set {
        ops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ops_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ops);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ops_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ops);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ops_ == null) {
              ops_ = new global::Common.ItemOperations();
            }
            input.ReadMessage(ops_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_Retract : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_Retract> _parser = new pb::MessageParser<SecondItem_Req_Retract>(() => new SecondItem_Req_Retract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_Retract> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Retract : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Retract> _parser = new pb::MessageParser<SecondItem_Ntf_Retract>(() => new SecondItem_Ntf_Retract());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Retract> Parser { get { return _parser; } }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private global::Common.ItemOperations ops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemOperations Ops {
      get { return ops_; }
      set {
        ops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ops_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ops);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ops_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ops);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ops_ == null) {
              ops_ = new global::Common.ItemOperations();
            }
            input.ReadMessage(ops_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_PutOn : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_PutOn> _parser = new pb::MessageParser<SecondItem_Req_PutOn>(() => new SecondItem_Req_PutOn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_PutOn> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_PutOn : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_PutOn> _parser = new pb::MessageParser<SecondItem_Ntf_PutOn>(() => new SecondItem_Ntf_PutOn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_PutOn> Parser { get { return _parser; } }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private global::Common.ItemOperations ops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemOperations Ops {
      get { return ops_; }
      set {
        ops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ops_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ops);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ops_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ops);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ops_ == null) {
              ops_ = new global::Common.ItemOperations();
            }
            input.ReadMessage(ops_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_PutOff : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_PutOff> _parser = new pb::MessageParser<SecondItem_Req_PutOff>(() => new SecondItem_Req_PutOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_PutOff> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_PutOff : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_PutOff> _parser = new pb::MessageParser<SecondItem_Ntf_PutOff>(() => new SecondItem_Ntf_PutOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_PutOff> Parser { get { return _parser; } }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private global::Common.ItemOperations ops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemOperations Ops {
      get { return ops_; }
      set {
        ops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ops_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ops);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ops_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ops);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ops_ == null) {
              ops_ = new global::Common.ItemOperations();
            }
            input.ReadMessage(ops_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_BatDecompose : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_BatDecompose> _parser = new pb::MessageParser<SecondItem_Req_BatDecompose>(() => new SecondItem_Req_BatDecompose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_BatDecompose> Parser { get { return _parser; } }

    /// <summary>Field number for the "uids" field.</summary>
    public const int UidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uids {
      get { return uids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _repeated_uids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uids_.CalculateSize(_repeated_uids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uids_.AddEntriesFrom(input, _repeated_uids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_BatSale : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_BatSale> _parser = new pb::MessageParser<SecondItem_Req_BatSale>(() => new SecondItem_Req_BatSale());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_BatSale> Parser { get { return _parser; } }

    /// <summary>Field number for the "uids" field.</summary>
    public const int UidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uids {
      get { return uids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _repeated_uids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uids_.CalculateSize(_repeated_uids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uids_.AddEntriesFrom(input, _repeated_uids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_BatUse : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_BatUse> _parser = new pb::MessageParser<SecondItem_Req_BatUse>(() => new SecondItem_Req_BatUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_BatUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Req_Authenticate : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_Authenticate> _parser = new pb::MessageParser<SecondItem_Req_Authenticate>(() => new SecondItem_Req_Authenticate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_Authenticate> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Currency_Update : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Currency_Update> _parser = new pb::MessageParser<SecondItem_Ntf_Currency_Update>(() => new SecondItem_Ntf_Currency_Update());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Currency_Update> Parser { get { return _parser; } }

    /// <summary>Field number for the "currencyid" field.</summary>
    public const int CurrencyidFieldNumber = 1;
    private uint currencyid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currencyid {
      get { return currencyid_; }
      set {
        currencyid_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private uint reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "former" field.</summary>
    public const int FormerFieldNumber = 3;
    private long former_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Former {
      get { return former_; }
      set {
        former_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 4;
    private long current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currencyid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Currencyid);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reason);
      }
      if (Former != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Former);
      }
      if (Current != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Current);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currencyid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currencyid);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      if (Former != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Former);
      }
      if (Current != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Current);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Currencyid = input.ReadUInt32();
            break;
          }
          case 16: {
            Reason = input.ReadUInt32();
            break;
          }
          case 24: {
            Former = input.ReadInt64();
            break;
          }
          case 32: {
            Current = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class SecondItem_Req_TempBag_Pop : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Req_TempBag_Pop> _parser = new pb::MessageParser<SecondItem_Req_TempBag_Pop>(() => new SecondItem_Req_TempBag_Pop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Req_TempBag_Pop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_TempBag_Pop : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_TempBag_Pop> _parser = new pb::MessageParser<SecondItem_Ntf_TempBag_Pop>(() => new SecondItem_Ntf_TempBag_Pop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_TempBag_Pop> Parser { get { return _parser; } }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 1;
    private global::Common.ItemOperations ops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemOperations Ops {
      get { return ops_; }
      set {
        ops_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ops_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ops);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ops_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ops);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ops_ == null) {
              ops_ = new global::Common.ItemOperations();
            }
            input.ReadMessage(ops_);
            break;
          }
        }
      }
    }

  }

  public sealed class SecondItem_Ntf_Colddown_Update : pb::IMessage {
    private static readonly pb::MessageParser<SecondItem_Ntf_Colddown_Update> _parser = new pb::MessageParser<SecondItem_Ntf_Colddown_Update>(() => new SecondItem_Ntf_Colddown_Update());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecondItem_Ntf_Colddown_Update> Parser { get { return _parser; } }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 1;
    private global::Common.ItemColddown cd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Common.ItemColddown Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cd_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cd_ == null) {
              cd_ = new global::Common.ItemColddown();
            }
            input.ReadMessage(cd_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
