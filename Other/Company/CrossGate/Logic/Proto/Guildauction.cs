// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildauction.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdGuildAuction {
    None = 0,
    /// <summary>
    ///请求拍卖列表
    /// </summary>
    ListReq = 6501,
    ListAck = 6502,
    /// <summary>
    ///关注 or 取消关注
    /// </summary>
    WatchReq = 6503,
    WatchAck = 6504,
    /// <summary>
    ///列表信息变动
    /// </summary>
    ListUpdateNtf = 6505,
    /// <summary>
    ///新开启拍卖
    /// </summary>
    NewNtf = 6506,
    /// <summary>
    ///请求我的拍卖信息(废弃)
    /// </summary>
    MyInfoReq = 6507,
    /// <summary>
    ///(废弃)
    /// </summary>
    MyInfoAck = 6508,
    /// <summary>
    ///请求拍卖记录
    /// </summary>
    RecordReq = 6509,
    RecordAck = 6510,
    /// <summary>
    ///拍卖竞价
    /// </summary>
    BidReq = 6511,
    BidAck = 6512,
    /// <summary>
    ///拍卖一口价
    /// </summary>
    OnePriceReq = 6513,
    OnePriceAck = 6514,
    /// <summary>
    ///给关注了的玩家推送我的拍卖更新
    /// </summary>
    MyInfoUpdateNtf = 6515,
  }

  public enum ErrorGuildAuction {
    None = 0,
    /// <summary>
    ///该活动拍卖未开始
    /// </summary>
    ActiveNotOpen = 6501,
    /// <summary>
    ///拍卖服务异常
    /// </summary>
    Unavailable = 6503,
    /// <summary>
    ///拍卖活动已关闭（或即将关闭）
    /// </summary>
    ActiveIsClose = 6504,
    /// <summary>
    ///不支持该拍卖活动
    /// </summary>
    ActiveNotSupport = 6505,
    /// <summary>
    ///拍卖品表格未找到
    /// </summary>
    ItemCsvnotFound = 6506,
    /// <summary>
    ///不能重复竞拍
    /// </summary>
    CannotBidRepeated = 6507,
    /// <summary>
    ///物品信息已过期,请刷新(被一口价买走，)
    /// </summary>
    ItemInfoExpired = 6598,
    /// <summary>
    ///物品价格变动，请刷新
    /// </summary>
    PriceChangeBidFailed = 6599,
  }

  public enum GuildAuctionActiveReason {
    None = 0,
    /// <summary>
    ///竞价
    /// </summary>
    Bid = 6501,
    /// <summary>
    ///一口价
    /// </summary>
    OnePrice = 6502,
    /// <summary>
    ///拍卖失败，恢复扣款
    /// </summary>
    Recover = 6503,
  }

  /// <summary>
  ///拍卖活动类型
  /// </summary>
  public enum GuildAuctionType {
    None = 0,
    /// <summary>
    ///家族boss
    /// </summary>
    Boss = 1,
    /// <summary>
    ///家族资源站
    /// </summary>
    GuildBattle = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求拍卖列表
  /// </summary>
  public sealed class CmdGuildAuctionListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionListReq> _parser = new pb::MessageParser<CmdGuildAuctionListReq>(() => new CmdGuildAuctionListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class GuildAuction : pb::IMessage {
    private static readonly pb::MessageParser<GuildAuction> _parser = new pb::MessageParser<GuildAuction>(() => new GuildAuction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildAuction> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    /// <summary>
    ///拍卖活动类型，见GuildAuctionType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.GuildAuction.Types.AuctionItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.GuildAuction.Types.AuctionItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildAuction.Types.AuctionItem> items_ = new pbc::RepeatedField<global::Packet.GuildAuction.Types.AuctionItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildAuction.Types.AuctionItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 4;
    private long bonus_;
    /// <summary>
    ///预计分红 (=0表示没资格)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTime);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (Bonus != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Bonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (Bonus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 32: {
            Bonus = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GuildAuction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AuctionItem : pb::IMessage {
        private static readonly pb::MessageParser<AuctionItem> _parser = new pb::MessageParser<AuctionItem>(() => new AuctionItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuctionItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        /// <summary>
        ///物品编号
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 2;
        private uint infoId_;
        /// <summary>
        ///拍卖奖励表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 3;
        private uint price_;
        /// <summary>
        ///当前价格
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 5;
        private uint count_;
        /// <summary>
        ///物品数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "unowned" field.</summary>
        public const int UnownedFieldNumber = 4;
        private bool unowned_;
        /// <summary>
        ///还未有人出价
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unowned {
          get { return unowned_; }
          set {
            unowned_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (InfoId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(InfoId);
          }
          if (Price != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Price);
          }
          if (Unowned != false) {
            output.WriteRawTag(32);
            output.WriteBool(Unowned);
          }
          if (Count != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Price != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (Unowned != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 24: {
                Price = input.ReadUInt32();
                break;
              }
              case 32: {
                Unowned = input.ReadBool();
                break;
              }
              case 40: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildAuctionListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionListAck> _parser = new pb::MessageParser<CmdGuildAuctionListAck>(() => new CmdGuildAuctionListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "auctions" field.</summary>
    public const int AuctionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildAuction> _repeated_auctions_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildAuction.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildAuction> auctions_ = new pbc::RepeatedField<global::Packet.GuildAuction>();
    /// <summary>
    ///所有拍卖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildAuction> Auctions {
      get { return auctions_; }
    }

    /// <summary>Field number for the "myAuctions" field.</summary>
    public const int MyAuctionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GuildAuctionMyInfo> _repeated_myAuctions_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GuildAuctionMyInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildAuctionMyInfo> myAuctions_ = new pbc::RepeatedField<global::Packet.GuildAuctionMyInfo>();
    /// <summary>
    /// 我的拍卖数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildAuctionMyInfo> MyAuctions {
      get { return myAuctions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      auctions_.WriteTo(output, _repeated_auctions_codec);
      myAuctions_.WriteTo(output, _repeated_myAuctions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += auctions_.CalculateSize(_repeated_auctions_codec);
      size += myAuctions_.CalculateSize(_repeated_myAuctions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            auctions_.AddEntriesFrom(input, _repeated_auctions_codec);
            break;
          }
          case 18: {
            myAuctions_.AddEntriesFrom(input, _repeated_myAuctions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///关注 or 取消关注
  ///例如打开界面时watch=true， 关闭后watch=false
  /// </summary>
  public sealed class CmdGuildAuctionWatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionWatchReq> _parser = new pb::MessageParser<CmdGuildAuctionWatchReq>(() => new CmdGuildAuctionWatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionWatchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 1;
    private bool watch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Watch != false) {
        output.WriteRawTag(8);
        output.WriteBool(Watch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Watch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Watch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildAuctionWatchAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionWatchAck> _parser = new pb::MessageParser<CmdGuildAuctionWatchAck>(() => new CmdGuildAuctionWatchAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionWatchAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 1;
    private bool watch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Watch != false) {
        output.WriteRawTag(8);
        output.WriteBool(Watch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Watch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Watch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家Watch后服务器会推送变动信息
  /// 新增拍卖、拍卖结束、物品价格变动、物品被一口价买走、我的拍卖数据更新
  /// </summary>
  public sealed class CmdGuildAuctionListUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionListUpdateNtf> _parser = new pb::MessageParser<CmdGuildAuctionListUpdateNtf>(() => new CmdGuildAuctionListUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionListUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "newAuction" field.</summary>
    public const int NewAuctionFieldNumber = 2;
    private global::Packet.GuildAuction newAuction_;
    /// <summary>
    ///下列字段可能部分被填充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildAuction NewAuction {
      get { return newAuction_; }
      set {
        newAuction_ = value;
      }
    }

    /// <summary>Field number for the "endActiveId" field.</summary>
    public const int EndActiveIdFieldNumber = 3;
    private global::Packet.UInt32Value endActiveId_;
    /// <summary>
    ///结束的拍卖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value EndActiveId {
      get { return endActiveId_; }
      set {
        endActiveId_ = value;
      }
    }

    /// <summary>Field number for the "updateItem" field.</summary>
    public const int UpdateItemFieldNumber = 4;
    private global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate updateItem_;
    /// <summary>
    ///当前价格变动（需要设置unowned=false）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate UpdateItem {
      get { return updateItem_; }
      set {
        updateItem_ = value;
      }
    }

    /// <summary>Field number for the "delItem" field.</summary>
    public const int DelItemFieldNumber = 5;
    private global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate delItem_;
    /// <summary>
    ///被一口价买走
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate DelItem {
      get { return delItem_; }
      set {
        delItem_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 6;
    private global::Packet.Int64Value bonus_;
    /// <summary>
    ///分红变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Int64Value Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (newAuction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewAuction);
      }
      if (endActiveId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndActiveId);
      }
      if (updateItem_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdateItem);
      }
      if (delItem_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DelItem);
      }
      if (bonus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Bonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (newAuction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewAuction);
      }
      if (endActiveId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndActiveId);
      }
      if (updateItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateItem);
      }
      if (delItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelItem);
      }
      if (bonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (newAuction_ == null) {
              newAuction_ = new global::Packet.GuildAuction();
            }
            input.ReadMessage(newAuction_);
            break;
          }
          case 26: {
            if (endActiveId_ == null) {
              endActiveId_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(endActiveId_);
            break;
          }
          case 34: {
            if (updateItem_ == null) {
              updateItem_ = new global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate();
            }
            input.ReadMessage(updateItem_);
            break;
          }
          case 42: {
            if (delItem_ == null) {
              delItem_ = new global::Packet.CmdGuildAuctionListUpdateNtf.Types.ItemUpdate();
            }
            input.ReadMessage(delItem_);
            break;
          }
          case 50: {
            if (bonus_ == null) {
              bonus_ = new global::Packet.Int64Value();
            }
            input.ReadMessage(bonus_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildAuctionListUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemUpdate : pb::IMessage {
        private static readonly pb::MessageParser<ItemUpdate> _parser = new pb::MessageParser<ItemUpdate>(() => new ItemUpdate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemUpdate> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 2;
        private uint price_;
        /// <summary>
        ///删除时未填充
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Price != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Price);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Price != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Price = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///新开启拍卖
  /// </summary>
  public sealed class CmdGuildAuctionNewNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionNewNtf> _parser = new pb::MessageParser<CmdGuildAuctionNewNtf>(() => new CmdGuildAuctionNewNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionNewNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "briefs" field.</summary>
    public const int BriefsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.AuctionBrief> _repeated_briefs_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildDetailInfo.Types.AuctionBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief> briefs_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief>();
    /// <summary>
    ///common.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief> Briefs {
      get { return briefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      briefs_.WriteTo(output, _repeated_briefs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += briefs_.CalculateSize(_repeated_briefs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            briefs_.AddEntriesFrom(input, _repeated_briefs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求我的拍卖
  /// </summary>
  public sealed class CmdGuildAuctionMyInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionMyInfoReq> _parser = new pb::MessageParser<CmdGuildAuctionMyInfoReq>(() => new CmdGuildAuctionMyInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionMyInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildAuctionMyInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionMyInfoAck> _parser = new pb::MessageParser<CmdGuildAuctionMyInfoAck>(() => new CmdGuildAuctionMyInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionMyInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "myAuctions" field.</summary>
    public const int MyAuctionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildAuctionMyInfo> _repeated_myAuctions_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildAuctionMyInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildAuctionMyInfo> myAuctions_ = new pbc::RepeatedField<global::Packet.GuildAuctionMyInfo>();
    /// <summary>
    /// common.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildAuctionMyInfo> MyAuctions {
      get { return myAuctions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      myAuctions_.WriteTo(output, _repeated_myAuctions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += myAuctions_.CalculateSize(_repeated_myAuctions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            myAuctions_.AddEntriesFrom(input, _repeated_myAuctions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求拍卖记录
  /// </summary>
  public sealed class CmdGuildAuctionRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionRecordReq> _parser = new pb::MessageParser<CmdGuildAuctionRecordReq>(() => new CmdGuildAuctionRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildAuctionRecordAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionRecordAck> _parser = new pb::MessageParser<CmdGuildAuctionRecordAck>(() => new CmdGuildAuctionRecordAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionRecordAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "reocords" field.</summary>
    public const int ReocordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildAuctionRecord> _repeated_reocords_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildAuctionRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildAuctionRecord> reocords_ = new pbc::RepeatedField<global::Packet.GuildAuctionRecord>();
    /// <summary>
    ///common.proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildAuctionRecord> Reocords {
      get { return reocords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reocords_.WriteTo(output, _repeated_reocords_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reocords_.CalculateSize(_repeated_reocords_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reocords_.AddEntriesFrom(input, _repeated_reocords_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拍卖竞价
  /// </summary>
  public sealed class CmdGuildAuctionBidReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionBidReq> _parser = new pb::MessageParser<CmdGuildAuctionBidReq>(() => new CmdGuildAuctionBidReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionBidReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///竞拍价格， 需要是起拍加价的整数倍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildAuctionBidAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionBidAck> _parser = new pb::MessageParser<CmdGuildAuctionBidAck>(() => new CmdGuildAuctionBidAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionBidAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///ret=0表示出价成功，
    ///ret = ErrorGuildAuction_PriceChangeBidFailed 时说明价格发生变动，可以再请求一次List
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 2;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 4;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private uint price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (ActiveId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActiveId);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (InfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(InfoId);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 32: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 40: {
            Price = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///拍卖一口价
  /// </summary>
  public sealed class CmdGuildAuctionOnePriceReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionOnePriceReq> _parser = new pb::MessageParser<CmdGuildAuctionOnePriceReq>(() => new CmdGuildAuctionOnePriceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionOnePriceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildAuctionOnePriceAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionOnePriceAck> _parser = new pb::MessageParser<CmdGuildAuctionOnePriceAck>(() => new CmdGuildAuctionOnePriceAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionOnePriceAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 4;
    private int ret_;
    /// <summary>
    ///ret=0表示出价成功，
    ///ret = ErrorGuildAuction_ItemInfoExpired 时说明可能已被别人购买，可以再请求一次List
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildAuctionMyInfoUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAuctionMyInfoUpdateNtf> _parser = new pb::MessageParser<CmdGuildAuctionMyInfoUpdateNtf>(() => new CmdGuildAuctionMyInfoUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAuctionMyInfoUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "newMyInfo" field.</summary>
    public const int NewMyInfoFieldNumber = 7;
    private global::Packet.GuildAuctionMyInfo newMyInfo_;
    /// <summary>
    ///我的拍卖变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildAuctionMyInfo NewMyInfo {
      get { return newMyInfo_; }
      set {
        newMyInfo_ = value;
      }
    }

    /// <summary>Field number for the "updateMyInfo" field.</summary>
    public const int UpdateMyInfoFieldNumber = 8;
    private global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate updateMyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate UpdateMyInfo {
      get { return updateMyInfo_; }
      set {
        updateMyInfo_ = value;
      }
    }

    /// <summary>Field number for the "delMyInfo" field.</summary>
    public const int DelMyInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate> _repeated_delMyInfo_codec
        = pb::FieldCodec.ForMessage(74, global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate> delMyInfo_ = new pbc::RepeatedField<global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate> DelMyInfo {
      get { return delMyInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newMyInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(NewMyInfo);
      }
      if (updateMyInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateMyInfo);
      }
      delMyInfo_.WriteTo(output, _repeated_delMyInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newMyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewMyInfo);
      }
      if (updateMyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMyInfo);
      }
      size += delMyInfo_.CalculateSize(_repeated_delMyInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 58: {
            if (newMyInfo_ == null) {
              newMyInfo_ = new global::Packet.GuildAuctionMyInfo();
            }
            input.ReadMessage(newMyInfo_);
            break;
          }
          case 66: {
            if (updateMyInfo_ == null) {
              updateMyInfo_ = new global::Packet.CmdGuildAuctionMyInfoUpdateNtf.Types.MyInfoUpdate();
            }
            input.ReadMessage(updateMyInfo_);
            break;
          }
          case 74: {
            delMyInfo_.AddEntriesFrom(input, _repeated_delMyInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildAuctionMyInfoUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MyInfoUpdate : pb::IMessage {
        private static readonly pb::MessageParser<MyInfoUpdate> _parser = new pb::MessageParser<MyInfoUpdate>(() => new MyInfoUpdate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MyInfoUpdate> Parser { get { return _parser; } }

        /// <summary>Field number for the "activeId" field.</summary>
        public const int ActiveIdFieldNumber = 1;
        private uint activeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActiveId {
          get { return activeId_; }
          set {
            activeId_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "price" field.</summary>
        public const int PriceFieldNumber = 3;
        private uint price_;
        /// <summary>
        ///下列删除时不填充
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        /// <summary>Field number for the "myPrice" field.</summary>
        public const int MyPriceFieldNumber = 4;
        private uint myPrice_;
        /// <summary>
        ///我的出价
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MyPrice {
          get { return myPrice_; }
          set {
            myPrice_ = value;
          }
        }

        /// <summary>Field number for the "owned" field.</summary>
        public const int OwnedFieldNumber = 5;
        private bool owned_;
        /// <summary>
        ///是否归属自己
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Owned {
          get { return owned_; }
          set {
            owned_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ActiveId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ActiveId);
          }
          if (Id != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Id);
          }
          if (Price != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Price);
          }
          if (MyPrice != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MyPrice);
          }
          if (Owned != false) {
            output.WriteRawTag(40);
            output.WriteBool(Owned);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ActiveId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Price != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
          }
          if (MyPrice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyPrice);
          }
          if (Owned != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ActiveId = input.ReadUInt32();
                break;
              }
              case 16: {
                Id = input.ReadUInt32();
                break;
              }
              case 24: {
                Price = input.ReadUInt32();
                break;
              }
              case 32: {
                MyPrice = input.ReadUInt32();
                break;
              }
              case 40: {
                Owned = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
