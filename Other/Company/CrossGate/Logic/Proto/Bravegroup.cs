// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bravegroup.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdBraveGroup {
    None = 0,
    /// <summary>
    ///我的勇者团
    /// </summary>
    BraveGroupMineInfoNtf = 8401,
    /// <summary>
    ///请求创建勇者团
    /// </summary>
    CreateBraveGroupReq = 8402,
    /// <summary>
    ///加入勇者团(自己接收)
    /// </summary>
    JoinBraveGroupNtf = 8403,
    /// <summary>
    ///退出勇者团(自己接收)
    /// </summary>
    QuitBraveGroupNtf = 8404,
    /// <summary>
    ///添加团成员(其他成员接收)
    /// </summary>
    AddMemberNtf = 8405,
    /// <summary>
    ///删除团成员(其他成员接收)
    /// </summary>
    RemoveMemberNtf = 8406,
    /// <summary>
    ///刷新团成员基础信息
    /// </summary>
    FreshMemberBaseInfoNtf = 8407,
    /// <summary>
    ///刷新团宣言
    /// </summary>
    FreshBriefNtf = 8408,
    /// <summary>
    ///刷新团名字
    /// </summary>
    FreshNameNtf = 8409,
    /// <summary>
    ///添加动态
    /// </summary>
    AddDynamicNtf = 8410,
    /// <summary>
    ///请求转移团长
    /// </summary>
    ResetLeaderReq = 8420,
    /// <summary>
    ///刷新团长
    /// </summary>
    FreshLeaderNtf = 8421,
    /// <summary>
    ///团长邀请好友入团
    /// </summary>
    LeaderInviteFriendReq = 8422,
    /// <summary>
    ///添加一个被邀请
    /// </summary>
    AddInvitedNtf = 8423,
    /// <summary>
    ///删除一个被邀请(超时和加入团时需要自己清理)
    /// </summary>
    RemoveInvitedNtf = 8424,
    /// <summary>
    ///同意邀请
    /// </summary>
    AgreeInviteReq = 8425,
    /// <summary>
    ///拒绝邀请
    /// </summary>
    RefuseInviteReq = 8426,
    /// <summary>
    ///一键邀请组队
    /// </summary>
    FastInviteTeamReq = 8427,
    /// <summary>
    ///第一次请求离开团
    /// </summary>
    FirstQuitReq = 8441,
    /// <summary>
    ///取消第一次离开团
    /// </summary>
    CancelFirstQuitReq = 8442,
    /// <summary>
    ///刷新离开时间
    /// </summary>
    FreshQuitTimeNtf = 8443,
    /// <summary>
    ///请求创建会议
    /// </summary>
    CreateMeetingReq = 8461,
    /// <summary>
    ///添加一个进行中的会议
    /// </summary>
    AddDoingMeetingNtf = 8462,
    /// <summary>
    ///删除一个进行中的会议
    /// </summary>
    RemoveDoingMeetingNtf = 8463,
    /// <summary>
    ///添加一个完成的会议
    /// </summary>
    AddFinishMeetingNtf = 8464,
    /// <summary>
    ///删除一个完成的会议
    /// </summary>
    RemoveFinishMeetingNtf = 8465,
    /// <summary>
    ///请求对会议投赞成票
    /// </summary>
    MeetingVoteAgreeReq = 8481,
    /// <summary>
    ///请求对会议投反对票
    /// </summary>
    MeetingVoteRefuseReq = 8482,
    /// <summary>
    ///刷新成员的投票结果
    /// </summary>
    FreshMemberVoteResultNtf = 8483,
  }

  public enum ErrorBraveGroup {
    None = 0,
    /// <summary>
    ///是机器人
    /// </summary>
    IsRobot = 8401,
    /// <summary>
    ///未知角色
    /// </summary>
    NotExistRole = 8402,
    /// <summary>
    ///角色不在线
    /// </summary>
    NotOnlineRole = 8403,
    /// <summary>
    ///未知勇者团
    /// </summary>
    NotExistBgroup = 8404,
    /// <summary>
    ///未知邀请书
    /// </summary>
    NotExistInvite = 8405,
    /// <summary>
    ///未知表格Id
    /// </summary>
    NotExistTableId = 8406,
    /// <summary>
    ///未知会议Id
    /// </summary>
    NotExistMeeting = 8407,
    /// <summary>
    ///不是团长
    /// </summary>
    NotLeader = 8408,
    /// <summary>
    ///不是成员
    /// </summary>
    NotMember = 8409,
    /// <summary>
    ///禁止成员操作
    /// </summary>
    BanMember = 8410,
    /// <summary>
    ///禁止团长操作
    /// </summary>
    BanLeader = 8411,
    /// <summary>
    ///不在同一个团
    /// </summary>
    NotSameBgroup = 8412,
    /// <summary>
    ///超过一次允许邀请的好友个数
    /// </summary>
    OnceInviteFriendMax = 8413,
    /// <summary>
    ///已经处于冷静期
    /// </summary>
    IsThinkingTime = 8414,
    /// <summary>
    ///不处于冷静期
    /// </summary>
    IsNotThinkingTime = 8415,
    /// <summary>
    ///成员当前不能创建会议
    /// </summary>
    MemberCanNotCreateMeeting = 8416,
    /// <summary>
    ///团组织当前不能创建会议
    /// </summary>
    BgroupCanNotCreateMeeting = 8417,
    /// <summary>
    ///重复投票
    /// </summary>
    RepeatedVote = 8418,
    /// <summary>
    ///成员超额
    /// </summary>
    MemberMax = 8419,
    /// <summary>
    ///重复请求创建团
    /// </summary>
    RepeatedCreateReq = 8420,
    /// <summary>
    ///scene消耗建团道具超时
    /// </summary>
    SceneResTimeout = 8421,
    /// <summary>
    ///scene消耗建团道具失败
    /// </summary>
    RemoveCreateItemErr = 8422,
    /// <summary>
    ///团Id分配失败
    /// </summary>
    BgroupIdGenerateErr = 8423,
    /// <summary>
    ///团名字不满足规则
    /// </summary>
    NameLength = 8424,
    /// <summary>
    ///团名字不满足规则
    /// </summary>
    NameUtf8 = 8425,
    /// <summary>
    ///团名字重复
    /// </summary>
    RepeatedName = 8426,
    /// <summary>
    ///团名字带屏蔽字
    /// </summary>
    NameMaskRuler = 8427,
    /// <summary>
    ///团名字屏蔽字检查超时
    /// </summary>
    NameMaskTimeout = 8428,
    /// <summary>
    ///团创建失败
    /// </summary>
    CreateBgroupFail = 8429,
    /// <summary>
    ///会议参数错误
    /// </summary>
    MeetingParamErr = 8430,
    /// <summary>
    ///会议条件错误
    /// </summary>
    MeetingCondErr = 8431,
    /// <summary>
    ///团宣言不满足规则
    /// </summary>
    BriefLength = 8432,
    /// <summary>
    ///团宣言不满足规则
    /// </summary>
    BriefUtf8 = 8433,
    /// <summary>
    ///团宣言带屏蔽字
    /// </summary>
    BriefMaskRuler = 8434,
    /// <summary>
    ///团宣言屏蔽字检查超时
    /// </summary>
    BriefMaskTimeout = 8435,
    /// <summary>
    ///主角等级不满足功能开启
    /// </summary>
    OpenFuncRoleLevel = 8436,
    /// <summary>
    ///世界等级不满足功能开启
    /// </summary>
    OpenFuncWorldLevel = 8437,
    /// <summary>
    ///主角最大亲密度不满足功能开启
    /// </summary>
    OpenFuncMaxFriendVal = 8438,
    /// <summary>
    ///处于一健邀请组队冷却期
    /// </summary>
    IsFastInviteTeamTime = 8439,
    /// <summary>
    ///自荐原因不满足规则
    /// </summary>
    SelfReasonLength = 8440,
    /// <summary>
    ///自荐原因不满足规则
    /// </summary>
    SelfReasonUtf8 = 8441,
    /// <summary>
    ///自荐原因带屏蔽字
    /// </summary>
    SelfReasonMaskRuler = 8442,
    /// <summary>
    ///自荐原因屏蔽字检查超时
    /// </summary>
    SelfReasonMaskTimeout = 8443,
    /// <summary>
    ///超过服务器允许创建的团数量
    /// </summary>
    BraveGroupSizeMax = 8444,
    /// <summary>
    ///不满足勇者团聊天等级限制
    /// </summary>
    BraveGroupChatLevel = 8445,
    /// <summary>
    ///不能一键邀请组队
    /// </summary>
    CanNotFastInviteTeam = 8446,
    /// <summary>
    ///不能被邀请
    /// </summary>
    CanNotInvite = 8447,
    /// <summary>
    ///好友度不够不能被邀请
    /// </summary>
    CanNotInviteFriendVal = 8448,
    /// <summary>
    ///好友等级不够不能被邀请
    /// </summary>
    CanNotInviteLevel = 8449,
    /// <summary>
    ///成员数量不满足条件
    /// </summary>
    NeedMemberSize = 8450,
    /// <summary>
    ///团长离线时间不满足
    /// </summary>
    LeaderOfflineTime = 8451,
    /// <summary>
    ///系统错误
    /// </summary>
    SystemError = 8452,
    /// <summary>
    ///对方已有勇者团
    /// </summary>
    BraveGroupMember = 8453,
  }

  public enum BraveGroupActiveReason {
    None = 0,
    /// <summary>
    ///创建消耗
    /// </summary>
    CreateCost = 8401,
  }

  /// <summary>
  ///团成员基础信息枚举
  /// </summary>
  public enum enBraveGroupMemberBase {
    /// <summary>
    ///默认
    /// </summary>
    BraveGroupMemberBaseNone = 0,
    /// <summary>
    ///昵称
    /// </summary>
    BraveGroupMemberBaseName = 1,
    /// <summary>
    ///等级
    /// </summary>
    BraveGroupMemberBaseLevel = 2,
    /// <summary>
    ///角色Id
    /// </summary>
    BraveGroupMemberBaseHeroId = 3,
    /// <summary>
    ///头像框Id
    /// </summary>
    BraveGroupMemberBaseFrame = 4,
    /// <summary>
    ///武器Id
    /// </summary>
    BraveGroupMemberBaseWeapon = 5,
    /// <summary>
    ///头像Id
    /// </summary>
    BraveGroupMemberBaseHeadPhoto = 6,
    /// <summary>
    ///职业
    /// </summary>
    BraveGroupMemberBaseCareer = 7,
    /// <summary>
    ///职业等级
    /// </summary>
    BraveGroupMemberBaseCareerRank = 8,
    /// <summary>
    ///时装
    /// </summary>
    BraveGroupMemberBaseFashion = 9,
    /// <summary>
    ///离线时间(为0在线，非0就是离线时间)
    /// </summary>
    BraveGroupMemberBaseLastOffline = 10,
    /// <summary>
    ///头衔
    /// </summary>
    BraveGroupMemberBaseTitle = 11,
    /// <summary>
    ///最大
    /// </summary>
    BraveGroupMemberBaseMax = 12,
  }

  /// <summary>
  ///时间相关枚举
  /// </summary>
  public enum enBraveGroupMemberTime {
    /// <summary>
    ///默认
    /// </summary>
    BraveGroupMemberTimeNone = 0,
    /// <summary>
    ///退出前的冷静时间
    /// </summary>
    BraveGroupMemberTimeQuitBeforeThikingTime = 1,
    /// <summary>
    ///下次创建会议的到期时间
    /// </summary>
    BraveGroupMemberTimeNextCreateMeetingTime = 2,
    /// <summary>
    ///一键邀请组队到期时间
    /// </summary>
    BraveGroupMemberTimeFastInviteTeamTime = 3,
    /// <summary>
    ///最大
    /// </summary>
    BraveGroupMemberTimeMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///勇者团全量信息
  /// </summary>
  public sealed class BraveGroupInfo : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupInfo> _parser = new pb::MessageParser<BraveGroupInfo>(() => new BraveGroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.BraveGroupBase base_;
    /// <summary>
    ///团基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "memberList" field.</summary>
    public const int MemberListFieldNumber = 2;
    private global::Packet.BraveGroupMemberList memberList_;
    /// <summary>
    ///团成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMemberList MemberList {
      get { return memberList_; }
      set {
        memberList_ = value;
      }
    }

    /// <summary>Field number for the "dynamicList" field.</summary>
    public const int DynamicListFieldNumber = 3;
    private global::Packet.BraveGroupDynamicList dynamicList_;
    /// <summary>
    ///团动态列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupDynamicList DynamicList {
      get { return dynamicList_; }
      set {
        dynamicList_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 4;
    private global::Packet.BraveGroupFinishMeetingList finish_;
    /// <summary>
    ///团已完成会议列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupFinishMeetingList Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    /// <summary>Field number for the "doing" field.</summary>
    public const int DoingFieldNumber = 5;
    private global::Packet.BraveGroupDoingMeetingList doing_;
    /// <summary>
    ///团进行中会议列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupDoingMeetingList Doing {
      get { return doing_; }
      set {
        doing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (memberList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberList);
      }
      if (dynamicList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicList);
      }
      if (finish_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Finish);
      }
      if (doing_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Doing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (memberList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberList);
      }
      if (dynamicList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicList);
      }
      if (finish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finish);
      }
      if (doing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Doing);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.BraveGroupBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (memberList_ == null) {
              memberList_ = new global::Packet.BraveGroupMemberList();
            }
            input.ReadMessage(memberList_);
            break;
          }
          case 26: {
            if (dynamicList_ == null) {
              dynamicList_ = new global::Packet.BraveGroupDynamicList();
            }
            input.ReadMessage(dynamicList_);
            break;
          }
          case 34: {
            if (finish_ == null) {
              finish_ = new global::Packet.BraveGroupFinishMeetingList();
            }
            input.ReadMessage(finish_);
            break;
          }
          case 42: {
            if (doing_ == null) {
              doing_ = new global::Packet.BraveGroupDoingMeetingList();
            }
            input.ReadMessage(doing_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的勇者团信息
  /// </summary>
  public sealed class BraveGroupMine : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMine> _parser = new pb::MessageParser<BraveGroupMine>(() => new BraveGroupMine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMine> Parser { get { return _parser; } }

    /// <summary>Field number for the "memPrivate" field.</summary>
    public const int MemPrivateFieldNumber = 1;
    private global::Packet.BraveGroupMemberPrivate memPrivate_;
    /// <summary>
    ///我作为成员的私有信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMemberPrivate MemPrivate {
      get { return memPrivate_; }
      set {
        memPrivate_ = value;
      }
    }

    /// <summary>Field number for the "notMemInvite" field.</summary>
    public const int NotMemInviteFieldNumber = 2;
    private global::Packet.BraveGroupInvitedList notMemInvite_;
    /// <summary>
    ///我不是成员的被邀请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupInvitedList NotMemInvite {
      get { return notMemInvite_; }
      set {
        notMemInvite_ = value;
      }
    }

    /// <summary>Field number for the "notMemPrivate" field.</summary>
    public const int NotMemPrivateFieldNumber = 3;
    private global::Packet.BraveGroupNotMemberPrivate notMemPrivate_;
    /// <summary>
    ///我不是成员的私有信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupNotMemberPrivate NotMemPrivate {
      get { return notMemPrivate_; }
      set {
        notMemPrivate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (memPrivate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MemPrivate);
      }
      if (notMemInvite_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NotMemInvite);
      }
      if (notMemPrivate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NotMemPrivate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (memPrivate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemPrivate);
      }
      if (notMemInvite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotMemInvite);
      }
      if (notMemPrivate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotMemPrivate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (memPrivate_ == null) {
              memPrivate_ = new global::Packet.BraveGroupMemberPrivate();
            }
            input.ReadMessage(memPrivate_);
            break;
          }
          case 18: {
            if (notMemInvite_ == null) {
              notMemInvite_ = new global::Packet.BraveGroupInvitedList();
            }
            input.ReadMessage(notMemInvite_);
            break;
          }
          case 26: {
            if (notMemPrivate_ == null) {
              notMemPrivate_ = new global::Packet.BraveGroupNotMemberPrivate();
            }
            input.ReadMessage(notMemPrivate_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团基础信息
  /// </summary>
  public sealed class BraveGroupBase : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupBase> _parser = new pb::MessageParser<BraveGroupBase>(() => new BraveGroupBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "braveGroupId" field.</summary>
    public const int BraveGroupIdFieldNumber = 1;
    private ulong braveGroupId_;
    /// <summary>
    ///勇者团Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BraveGroupId {
      get { return braveGroupId_; }
      set {
        braveGroupId_ = value;
      }
    }

    /// <summary>Field number for the "braveGroupName" field.</summary>
    public const int BraveGroupNameFieldNumber = 2;
    private pb::ByteString braveGroupName_ = pb::ByteString.Empty;
    /// <summary>
    ///勇者团昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BraveGroupName {
      get { return braveGroupName_; }
      set {
        braveGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "braveGroupBrief" field.</summary>
    public const int BraveGroupBriefFieldNumber = 3;
    private pb::ByteString braveGroupBrief_ = pb::ByteString.Empty;
    /// <summary>
    ///勇者团宣言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BraveGroupBrief {
      get { return braveGroupBrief_; }
      set {
        braveGroupBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 4;
    private ulong leaderId_;
    /// <summary>
    ///团长Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BraveGroupId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BraveGroupId);
      }
      if (BraveGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BraveGroupName);
      }
      if (BraveGroupBrief.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BraveGroupBrief);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LeaderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BraveGroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BraveGroupId);
      }
      if (BraveGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BraveGroupName);
      }
      if (BraveGroupBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BraveGroupBrief);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BraveGroupId = input.ReadUInt64();
            break;
          }
          case 18: {
            BraveGroupName = input.ReadBytes();
            break;
          }
          case 26: {
            BraveGroupBrief = input.ReadBytes();
            break;
          }
          case 32: {
            LeaderId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团成员列表
  /// </summary>
  public sealed class BraveGroupMemberList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberList> _parser = new pb::MessageParser<BraveGroupMemberList>(() => new BraveGroupMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberList> Parser { get { return _parser; } }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupMember.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupMember> members_ = new pbc::RepeatedField<global::Packet.BraveGroupMember>();
    /// <summary>
    ///成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团动态列表
  /// </summary>
  public sealed class BraveGroupDynamicList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupDynamicList> _parser = new pb::MessageParser<BraveGroupDynamicList>(() => new BraveGroupDynamicList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupDynamicList> Parser { get { return _parser; } }

    /// <summary>Field number for the "dynamics" field.</summary>
    public const int DynamicsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupDynamic> _repeated_dynamics_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupDynamic.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupDynamic> dynamics_ = new pbc::RepeatedField<global::Packet.BraveGroupDynamic>();
    /// <summary>
    ///动态列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupDynamic> Dynamics {
      get { return dynamics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dynamics_.WriteTo(output, _repeated_dynamics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dynamics_.CalculateSize(_repeated_dynamics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dynamics_.AddEntriesFrom(input, _repeated_dynamics_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团已完成会议列表
  /// </summary>
  public sealed class BraveGroupFinishMeetingList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupFinishMeetingList> _parser = new pb::MessageParser<BraveGroupFinishMeetingList>(() => new BraveGroupFinishMeetingList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupFinishMeetingList> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetings" field.</summary>
    public const int MeetingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupFinishMeeting> _repeated_meetings_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupFinishMeeting.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupFinishMeeting> meetings_ = new pbc::RepeatedField<global::Packet.BraveGroupFinishMeeting>();
    /// <summary>
    ///会议列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupFinishMeeting> Meetings {
      get { return meetings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      meetings_.WriteTo(output, _repeated_meetings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += meetings_.CalculateSize(_repeated_meetings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            meetings_.AddEntriesFrom(input, _repeated_meetings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团进行中会议列表
  /// </summary>
  public sealed class BraveGroupDoingMeetingList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupDoingMeetingList> _parser = new pb::MessageParser<BraveGroupDoingMeetingList>(() => new BraveGroupDoingMeetingList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupDoingMeetingList> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetings" field.</summary>
    public const int MeetingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupDoingMeeting> _repeated_meetings_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupDoingMeeting.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupDoingMeeting> meetings_ = new pbc::RepeatedField<global::Packet.BraveGroupDoingMeeting>();
    /// <summary>
    ///会议列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupDoingMeeting> Meetings {
      get { return meetings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      meetings_.WriteTo(output, _repeated_meetings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += meetings_.CalculateSize(_repeated_meetings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            meetings_.AddEntriesFrom(input, _repeated_meetings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团成员
  /// </summary>
  public sealed class BraveGroupMember : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMember> _parser = new pb::MessageParser<BraveGroupMember>(() => new BraveGroupMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.BraveGroupMemberBase base_;
    /// <summary>
    ///成员基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMemberBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.BraveGroupMemberBase();
            }
            input.ReadMessage(base_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团成员基础信息
  /// </summary>
  public sealed class BraveGroupMemberBase : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberBase> _parser = new pb::MessageParser<BraveGroupMemberBase>(() => new BraveGroupMemberBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///成员Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///成员昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///成员等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    /// <summary>
    ///成员职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "lastOffline" field.</summary>
    public const int LastOfflineFieldNumber = 5;
    private uint lastOffline_;
    /// <summary>
    ///最后离线时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffline {
      get { return lastOffline_; }
      set {
        lastOffline_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 6;
    private uint frame_;
    /// <summary>
    ///头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 7;
    private uint weapon_;
    /// <summary>
    ///武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    /// <summary>Field number for the "headPhoto" field.</summary>
    public const int HeadPhotoFieldNumber = 8;
    private uint headPhoto_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadPhoto {
      get { return headPhoto_; }
      set {
        headPhoto_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 9;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 10;
    private uint careerRank_;
    /// <summary>
    ///职业等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "fashion" field.</summary>
    public const int FashionFieldNumber = 11;
    private global::Packet.MapFashionList fashion_;
    /// <summary>
    ///时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapFashionList Fashion {
      get { return fashion_; }
      set {
        fashion_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 12;
    private bool online_;
    /// <summary>
    ///是否在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 13;
    private uint titleId_;
    /// <summary>
    ///称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (LastOffline != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastOffline);
      }
      if (Frame != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Frame);
      }
      if (Weapon != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Weapon);
      }
      if (HeadPhoto != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HeadPhoto);
      }
      if (Career != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Career);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CareerRank);
      }
      if (fashion_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Fashion);
      }
      if (Online != false) {
        output.WriteRawTag(96);
        output.WriteBool(Online);
      }
      if (TitleId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (LastOffline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffline);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (Weapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weapon);
      }
      if (HeadPhoto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadPhoto);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (fashion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fashion);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            LastOffline = input.ReadUInt32();
            break;
          }
          case 48: {
            Frame = input.ReadUInt32();
            break;
          }
          case 56: {
            Weapon = input.ReadUInt32();
            break;
          }
          case 64: {
            HeadPhoto = input.ReadUInt32();
            break;
          }
          case 72: {
            Career = input.ReadUInt32();
            break;
          }
          case 80: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 90: {
            if (fashion_ == null) {
              fashion_ = new global::Packet.MapFashionList();
            }
            input.ReadMessage(fashion_);
            break;
          }
          case 96: {
            Online = input.ReadBool();
            break;
          }
          case 104: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团已完成会议
  /// </summary>
  public sealed class BraveGroupFinishMeeting : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupFinishMeeting> _parser = new pb::MessageParser<BraveGroupFinishMeeting>(() => new BraveGroupFinishMeeting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupFinishMeeting> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.BraveGroupMeetingBase base_;
    /// <summary>
    ///会议基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMeetingBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "paramList" field.</summary>
    public const int ParamListFieldNumber = 2;
    private global::Packet.BraveGroupMeetingParamList paramList_;
    /// <summary>
    ///会议参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMeetingParamList ParamList {
      get { return paramList_; }
      set {
        paramList_ = value;
      }
    }

    /// <summary>Field number for the "agreeList" field.</summary>
    public const int AgreeListFieldNumber = 3;
    private global::Packet.BraveGroupVoteMemberList agreeList_;
    /// <summary>
    ///同意列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupVoteMemberList AgreeList {
      get { return agreeList_; }
      set {
        agreeList_ = value;
      }
    }

    /// <summary>Field number for the "refuseList" field.</summary>
    public const int RefuseListFieldNumber = 4;
    private global::Packet.BraveGroupVoteMemberList refuseList_;
    /// <summary>
    ///拒绝列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupVoteMemberList RefuseList {
      get { return refuseList_; }
      set {
        refuseList_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 5;
    private bool result_;
    /// <summary>
    ///会议结论(true通过false未通过)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 6;
    private uint finishTime_;
    /// <summary>
    ///完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (paramList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParamList);
      }
      if (agreeList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AgreeList);
      }
      if (refuseList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RefuseList);
      }
      if (Result != false) {
        output.WriteRawTag(40);
        output.WriteBool(Result);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(FinishTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (paramList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParamList);
      }
      if (agreeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AgreeList);
      }
      if (refuseList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RefuseList);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.BraveGroupMeetingBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (paramList_ == null) {
              paramList_ = new global::Packet.BraveGroupMeetingParamList();
            }
            input.ReadMessage(paramList_);
            break;
          }
          case 26: {
            if (agreeList_ == null) {
              agreeList_ = new global::Packet.BraveGroupVoteMemberList();
            }
            input.ReadMessage(agreeList_);
            break;
          }
          case 34: {
            if (refuseList_ == null) {
              refuseList_ = new global::Packet.BraveGroupVoteMemberList();
            }
            input.ReadMessage(refuseList_);
            break;
          }
          case 40: {
            Result = input.ReadBool();
            break;
          }
          case 48: {
            FinishTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团进行中会议
  /// </summary>
  public sealed class BraveGroupDoingMeeting : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupDoingMeeting> _parser = new pb::MessageParser<BraveGroupDoingMeeting>(() => new BraveGroupDoingMeeting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupDoingMeeting> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.BraveGroupMeetingBase base_;
    /// <summary>
    ///会议基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMeetingBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "paramList" field.</summary>
    public const int ParamListFieldNumber = 2;
    private global::Packet.BraveGroupMeetingParamList paramList_;
    /// <summary>
    ///会议参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMeetingParamList ParamList {
      get { return paramList_; }
      set {
        paramList_ = value;
      }
    }

    /// <summary>Field number for the "agreeList" field.</summary>
    public const int AgreeListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_agreeList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> agreeList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///同意列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AgreeList {
      get { return agreeList_; }
    }

    /// <summary>Field number for the "refuseList" field.</summary>
    public const int RefuseListFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_refuseList_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> refuseList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///拒绝列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RefuseList {
      get { return refuseList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (paramList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParamList);
      }
      agreeList_.WriteTo(output, _repeated_agreeList_codec);
      refuseList_.WriteTo(output, _repeated_refuseList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (paramList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParamList);
      }
      size += agreeList_.CalculateSize(_repeated_agreeList_codec);
      size += refuseList_.CalculateSize(_repeated_refuseList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.BraveGroupMeetingBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (paramList_ == null) {
              paramList_ = new global::Packet.BraveGroupMeetingParamList();
            }
            input.ReadMessage(paramList_);
            break;
          }
          case 26:
          case 24: {
            agreeList_.AddEntriesFrom(input, _repeated_agreeList_codec);
            break;
          }
          case 34:
          case 32: {
            refuseList_.AddEntriesFrom(input, _repeated_refuseList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团会议基础信息
  /// </summary>
  public sealed class BraveGroupMeetingBase : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMeetingBase> _parser = new pb::MessageParser<BraveGroupMeetingBase>(() => new BraveGroupMeetingBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMeetingBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 1;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private uint tableId_;
    /// <summary>
    ///会议表格Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private uint createTime_;
    /// <summary>
    ///会议创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "createRoleId" field.</summary>
    public const int CreateRoleIdFieldNumber = 4;
    private ulong createRoleId_;
    /// <summary>
    ///会议发起者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateRoleId {
      get { return createRoleId_; }
      set {
        createRoleId_ = value;
      }
    }

    /// <summary>Field number for the "createRoleName" field.</summary>
    public const int CreateRoleNameFieldNumber = 5;
    private pb::ByteString createRoleName_ = pb::ByteString.Empty;
    /// <summary>
    ///会议发起者昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CreateRoleName {
      get { return createRoleName_; }
      set {
        createRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeetingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MeetingId);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableId);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CreateTime);
      }
      if (CreateRoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CreateRoleId);
      }
      if (CreateRoleName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(CreateRoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableId);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (CreateRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateRoleId);
      }
      if (CreateRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CreateRoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeetingId = input.ReadUInt32();
            break;
          }
          case 16: {
            TableId = input.ReadUInt32();
            break;
          }
          case 24: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 32: {
            CreateRoleId = input.ReadUInt64();
            break;
          }
          case 42: {
            CreateRoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团会议参数列表
  /// </summary>
  public sealed class BraveGroupMeetingParamList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMeetingParamList> _parser = new pb::MessageParser<BraveGroupMeetingParamList>(() => new BraveGroupMeetingParamList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMeetingParamList> Parser { get { return _parser; } }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupParam.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupParam> params_ = new pbc::RepeatedField<global::Packet.BraveGroupParam>();
    /// <summary>
    ///参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团投票对象列表
  /// </summary>
  public sealed class BraveGroupVoteMemberList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupVoteMemberList> _parser = new pb::MessageParser<BraveGroupVoteMemberList>(() => new BraveGroupVoteMemberList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupVoteMemberList> Parser { get { return _parser; } }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupVoteMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupVoteMember.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupVoteMember> members_ = new pbc::RepeatedField<global::Packet.BraveGroupVoteMember>();
    /// <summary>
    ///投票对象列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupVoteMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团投票对象
  /// </summary>
  public sealed class BraveGroupVoteMember : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupVoteMember> _parser = new pb::MessageParser<BraveGroupVoteMember>(() => new BraveGroupVoteMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupVoteMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///投票对象Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///投票对象昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团动态
  /// </summary>
  public sealed class BraveGroupDynamic : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupDynamic> _parser = new pb::MessageParser<BraveGroupDynamic>(() => new BraveGroupDynamic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupDynamic> Parser { get { return _parser; } }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 1;
    private uint createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private uint tableId_;
    /// <summary>
    ///表格Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "paramList" field.</summary>
    public const int ParamListFieldNumber = 3;
    private global::Packet.BraveGroupDynamicParamList paramList_;
    /// <summary>
    ///参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupDynamicParamList ParamList {
      get { return paramList_; }
      set {
        paramList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateTime);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TableId);
      }
      if (paramList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ParamList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableId);
      }
      if (paramList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParamList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 16: {
            TableId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (paramList_ == null) {
              paramList_ = new global::Packet.BraveGroupDynamicParamList();
            }
            input.ReadMessage(paramList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团动态的参数列表
  /// </summary>
  public sealed class BraveGroupDynamicParamList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupDynamicParamList> _parser = new pb::MessageParser<BraveGroupDynamicParamList>(() => new BraveGroupDynamicParamList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupDynamicParamList> Parser { get { return _parser; } }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupParam.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupParam> params_ = new pbc::RepeatedField<global::Packet.BraveGroupParam>();
    /// <summary>
    ///参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团公共参数
  /// </summary>
  public sealed class BraveGroupParam : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupParam> _parser = new pb::MessageParser<BraveGroupParam>(() => new BraveGroupParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "strParam" field.</summary>
    public const int StrParamFieldNumber = 1;
    private pb::ByteString strParam_ = pb::ByteString.Empty;
    /// <summary>
    ///str参数信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StrParam {
      get { return strParam_; }
      set {
        strParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intParam" field.</summary>
    public const int IntParamFieldNumber = 2;
    private ulong intParam_;
    /// <summary>
    ///int参数信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IntParam {
      get { return intParam_; }
      set {
        intParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrParam.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(StrParam);
      }
      if (IntParam != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IntParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StrParam);
      }
      if (IntParam != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IntParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StrParam = input.ReadBytes();
            break;
          }
          case 16: {
            IntParam = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///团成员基础信息列表
  /// </summary>
  public sealed class BraveGroupMemberBaseElementList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberBaseElementList> _parser = new pb::MessageParser<BraveGroupMemberBaseElementList>(() => new BraveGroupMemberBaseElementList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberBaseElementList> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///成员Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupMemberBaseElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BraveGroupMemberBaseElement.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupMemberBaseElement> elements_ = new pbc::RepeatedField<global::Packet.BraveGroupMemberBaseElement>();
    /// <summary>
    ///单元列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupMemberBaseElement> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      elements_.WriteTo(output, _repeated_elements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      size += elements_.CalculateSize(_repeated_elements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///团成员基础信息单元
  /// </summary>
  public sealed class BraveGroupMemberBaseElement : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberBaseElement> _parser = new pb::MessageParser<BraveGroupMemberBaseElement>(() => new BraveGroupMemberBaseElement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberBaseElement> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Packet.enBraveGroupMemberBase type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.enBraveGroupMemberBase Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private global::Packet.BraveGroupParam param_;
    /// <summary>
    ///参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupParam Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (param_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (param_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Packet.enBraveGroupMemberBase) input.ReadEnum();
            break;
          }
          case 18: {
            if (param_ == null) {
              param_ = new global::Packet.BraveGroupParam();
            }
            input.ReadMessage(param_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时间单元
  /// </summary>
  public sealed class BraveGroupMemberTimeElement : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberTimeElement> _parser = new pb::MessageParser<BraveGroupMemberTimeElement>(() => new BraveGroupMemberTimeElement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberTimeElement> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Packet.enBraveGroupMemberTime type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.enBraveGroupMemberTime Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Packet.enBraveGroupMemberTime) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的勇者团被邀请列表
  /// </summary>
  public sealed class BraveGroupInvitedList : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupInvitedList> _parser = new pb::MessageParser<BraveGroupInvitedList>(() => new BraveGroupInvitedList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupInvitedList> Parser { get { return _parser; } }

    /// <summary>Field number for the "inviteds" field.</summary>
    public const int InvitedsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupInvited> _repeated_inviteds_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupInvited.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupInvited> inviteds_ = new pbc::RepeatedField<global::Packet.BraveGroupInvited>();
    /// <summary>
    ///被邀请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupInvited> Inviteds {
      get { return inviteds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inviteds_.WriteTo(output, _repeated_inviteds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inviteds_.CalculateSize(_repeated_inviteds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            inviteds_.AddEntriesFrom(input, _repeated_inviteds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的勇者团被邀请信息
  /// </summary>
  public sealed class BraveGroupInvited : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupInvited> _parser = new pb::MessageParser<BraveGroupInvited>(() => new BraveGroupInvited());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupInvited> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///邀请者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "inviteTime" field.</summary>
    public const int InviteTimeFieldNumber = 2;
    private uint inviteTime_;
    /// <summary>
    ///邀请到期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InviteTime {
      get { return inviteTime_; }
      set {
        inviteTime_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 3;
    private global::Packet.BraveGroupBase base_;
    /// <summary>
    ///团基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupMemberBase> _repeated_members_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BraveGroupMemberBase.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupMemberBase> members_ = new pbc::RepeatedField<global::Packet.BraveGroupMemberBase>();
    /// <summary>
    ///团成员基础信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupMemberBase> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (InviteTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InviteTime);
      }
      if (base_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Base);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (InviteTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InviteTime);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            InviteTime = input.ReadUInt32();
            break;
          }
          case 26: {
            if (base_ == null) {
              base_ = new global::Packet.BraveGroupBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我作为团成员的私有信息
  /// </summary>
  public sealed class BraveGroupMemberPrivate : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupMemberPrivate> _parser = new pb::MessageParser<BraveGroupMemberPrivate>(() => new BraveGroupMemberPrivate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupMemberPrivate> Parser { get { return _parser; } }

    /// <summary>Field number for the "joinBraveGroupTime" field.</summary>
    public const int JoinBraveGroupTimeFieldNumber = 1;
    private uint joinBraveGroupTime_;
    /// <summary>
    ///入团时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinBraveGroupTime {
      get { return joinBraveGroupTime_; }
      set {
        joinBraveGroupTime_ = value;
      }
    }

    /// <summary>Field number for the "quitBeforeThinkingTime" field.</summary>
    public const int QuitBeforeThinkingTimeFieldNumber = 2;
    private uint quitBeforeThinkingTime_;
    /// <summary>
    ///退出前的冷静时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuitBeforeThinkingTime {
      get { return quitBeforeThinkingTime_; }
      set {
        quitBeforeThinkingTime_ = value;
      }
    }

    /// <summary>Field number for the "nextCreateMeetingTime" field.</summary>
    public const int NextCreateMeetingTimeFieldNumber = 3;
    private uint nextCreateMeetingTime_;
    /// <summary>
    ///下次创建会议的到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextCreateMeetingTime {
      get { return nextCreateMeetingTime_; }
      set {
        nextCreateMeetingTime_ = value;
      }
    }

    /// <summary>Field number for the "fastInviteTeamTime" field.</summary>
    public const int FastInviteTeamTimeFieldNumber = 4;
    private uint fastInviteTeamTime_;
    /// <summary>
    ///一键邀请组队到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FastInviteTeamTime {
      get { return fastInviteTeamTime_; }
      set {
        fastInviteTeamTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoinBraveGroupTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(JoinBraveGroupTime);
      }
      if (QuitBeforeThinkingTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(QuitBeforeThinkingTime);
      }
      if (NextCreateMeetingTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextCreateMeetingTime);
      }
      if (FastInviteTeamTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FastInviteTeamTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoinBraveGroupTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinBraveGroupTime);
      }
      if (QuitBeforeThinkingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuitBeforeThinkingTime);
      }
      if (NextCreateMeetingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextCreateMeetingTime);
      }
      if (FastInviteTeamTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FastInviteTeamTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JoinBraveGroupTime = input.ReadUInt32();
            break;
          }
          case 16: {
            QuitBeforeThinkingTime = input.ReadUInt32();
            break;
          }
          case 24: {
            NextCreateMeetingTime = input.ReadUInt32();
            break;
          }
          case 32: {
            FastInviteTeamTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我不是团成员的私有信息
  /// </summary>
  public sealed class BraveGroupNotMemberPrivate : pb::IMessage {
    private static readonly pb::MessageParser<BraveGroupNotMemberPrivate> _parser = new pb::MessageParser<BraveGroupNotMemberPrivate>(() => new BraveGroupNotMemberPrivate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BraveGroupNotMemberPrivate> Parser { get { return _parser; } }

    /// <summary>Field number for the "quitAfterColdTime" field.</summary>
    public const int QuitAfterColdTimeFieldNumber = 1;
    private uint quitAfterColdTime_;
    /// <summary>
    ///退团后的冷却时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuitAfterColdTime {
      get { return quitAfterColdTime_; }
      set {
        quitAfterColdTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuitAfterColdTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuitAfterColdTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuitAfterColdTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuitAfterColdTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QuitAfterColdTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupBraveGroupMineInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupBraveGroupMineInfoNtf> _parser = new pb::MessageParser<CmdBraveGroupBraveGroupMineInfoNtf>(() => new CmdBraveGroupBraveGroupMineInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupBraveGroupMineInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bgroup" field.</summary>
    public const int BgroupFieldNumber = 1;
    private global::Packet.BraveGroupInfo bgroup_;
    /// <summary>
    ///勇者团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupInfo Bgroup {
      get { return bgroup_; }
      set {
        bgroup_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.BraveGroupMine info_;
    /// <summary>
    ///我的勇者团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMine Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bgroup_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bgroup);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bgroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bgroup);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bgroup_ == null) {
              bgroup_ = new global::Packet.BraveGroupInfo();
            }
            input.ReadMessage(bgroup_);
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.BraveGroupMine();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupCreateBraveGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupCreateBraveGroupReq> _parser = new pb::MessageParser<CmdBraveGroupCreateBraveGroupReq>(() => new CmdBraveGroupCreateBraveGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupCreateBraveGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private ulong itemId_;
    /// <summary>
    ///物品唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "braveGroupName" field.</summary>
    public const int BraveGroupNameFieldNumber = 2;
    private pb::ByteString braveGroupName_ = pb::ByteString.Empty;
    /// <summary>
    ///勇者团昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BraveGroupName {
      get { return braveGroupName_; }
      set {
        braveGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemId);
      }
      if (BraveGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BraveGroupName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      if (BraveGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BraveGroupName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt64();
            break;
          }
          case 18: {
            BraveGroupName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupJoinBraveGroupNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupJoinBraveGroupNtf> _parser = new pb::MessageParser<CmdBraveGroupJoinBraveGroupNtf>(() => new CmdBraveGroupJoinBraveGroupNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupJoinBraveGroupNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.BraveGroupInfo info_;
    /// <summary>
    ///勇者团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "mine" field.</summary>
    public const int MineFieldNumber = 2;
    private global::Packet.BraveGroupMine mine_;
    /// <summary>
    ///我的勇者团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMine Mine {
      get { return mine_; }
      set {
        mine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (mine_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (mine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.BraveGroupInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (mine_ == null) {
              mine_ = new global::Packet.BraveGroupMine();
            }
            input.ReadMessage(mine_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupQuitBraveGroupNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupQuitBraveGroupNtf> _parser = new pb::MessageParser<CmdBraveGroupQuitBraveGroupNtf>(() => new CmdBraveGroupQuitBraveGroupNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupQuitBraveGroupNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "quitAfterColdTime" field.</summary>
    public const int QuitAfterColdTimeFieldNumber = 1;
    private uint quitAfterColdTime_;
    /// <summary>
    ///退团后的冷却时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuitAfterColdTime {
      get { return quitAfterColdTime_; }
      set {
        quitAfterColdTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuitAfterColdTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuitAfterColdTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuitAfterColdTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuitAfterColdTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QuitAfterColdTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAddMemberNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAddMemberNtf> _parser = new pb::MessageParser<CmdBraveGroupAddMemberNtf>(() => new CmdBraveGroupAddMemberNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAddMemberNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 1;
    private global::Packet.BraveGroupMember member_;
    /// <summary>
    ///团成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMember Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (member_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Member);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (member_ == null) {
              member_ = new global::Packet.BraveGroupMember();
            }
            input.ReadMessage(member_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupRemoveMemberNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupRemoveMemberNtf> _parser = new pb::MessageParser<CmdBraveGroupRemoveMemberNtf>(() => new CmdBraveGroupRemoveMemberNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupRemoveMemberNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///团成员Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshMemberBaseInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshMemberBaseInfoNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshMemberBaseInfoNtf>(() => new CmdBraveGroupFreshMemberBaseInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshMemberBaseInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "elementList" field.</summary>
    public const int ElementListFieldNumber = 1;
    private global::Packet.BraveGroupMemberBaseElementList elementList_;
    /// <summary>
    ///改变的单元列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMemberBaseElementList ElementList {
      get { return elementList_; }
      set {
        elementList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (elementList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ElementList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (elementList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (elementList_ == null) {
              elementList_ = new global::Packet.BraveGroupMemberBaseElementList();
            }
            input.ReadMessage(elementList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshBriefNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshBriefNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshBriefNtf>(() => new CmdBraveGroupFreshBriefNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshBriefNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "braveGroupBrief" field.</summary>
    public const int BraveGroupBriefFieldNumber = 1;
    private pb::ByteString braveGroupBrief_ = pb::ByteString.Empty;
    /// <summary>
    ///宣言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BraveGroupBrief {
      get { return braveGroupBrief_; }
      set {
        braveGroupBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BraveGroupBrief.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BraveGroupBrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BraveGroupBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BraveGroupBrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BraveGroupBrief = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshNameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshNameNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshNameNtf>(() => new CmdBraveGroupFreshNameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshNameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "braveGroupName" field.</summary>
    public const int BraveGroupNameFieldNumber = 1;
    private pb::ByteString braveGroupName_ = pb::ByteString.Empty;
    /// <summary>
    ///团昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BraveGroupName {
      get { return braveGroupName_; }
      set {
        braveGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BraveGroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BraveGroupName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BraveGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BraveGroupName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BraveGroupName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAddDynamicNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAddDynamicNtf> _parser = new pb::MessageParser<CmdBraveGroupAddDynamicNtf>(() => new CmdBraveGroupAddDynamicNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAddDynamicNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "dynamicList" field.</summary>
    public const int DynamicListFieldNumber = 1;
    private global::Packet.BraveGroupDynamicList dynamicList_;
    /// <summary>
    ///团动态列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupDynamicList DynamicList {
      get { return dynamicList_; }
      set {
        dynamicList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dynamicList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DynamicList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dynamicList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dynamicList_ == null) {
              dynamicList_ = new global::Packet.BraveGroupDynamicList();
            }
            input.ReadMessage(dynamicList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupResetLeaderReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupResetLeaderReq> _parser = new pb::MessageParser<CmdBraveGroupResetLeaderReq>(() => new CmdBraveGroupResetLeaderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupResetLeaderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "newLeaderId" field.</summary>
    public const int NewLeaderIdFieldNumber = 1;
    private ulong newLeaderId_;
    /// <summary>
    ///新团长Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NewLeaderId {
      get { return newLeaderId_; }
      set {
        newLeaderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewLeaderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NewLeaderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewLeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NewLeaderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewLeaderId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupLeaderInviteFriendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupLeaderInviteFriendReq> _parser = new pb::MessageParser<CmdBraveGroupLeaderInviteFriendReq>(() => new CmdBraveGroupLeaderInviteFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupLeaderInviteFriendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_friendIds_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> friendIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///好友Id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FriendIds {
      get { return friendIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAddInvitedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAddInvitedNtf> _parser = new pb::MessageParser<CmdBraveGroupAddInvitedNtf>(() => new CmdBraveGroupAddInvitedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAddInvitedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "invited" field.</summary>
    public const int InvitedFieldNumber = 1;
    private global::Packet.BraveGroupInvited invited_;
    /// <summary>
    ///被邀请信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupInvited Invited {
      get { return invited_; }
      set {
        invited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (invited_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Invited);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (invited_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invited);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (invited_ == null) {
              invited_ = new global::Packet.BraveGroupInvited();
            }
            input.ReadMessage(invited_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupRemoveInvitedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupRemoveInvitedNtf> _parser = new pb::MessageParser<CmdBraveGroupRemoveInvitedNtf>(() => new CmdBraveGroupRemoveInvitedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupRemoveInvitedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///邀请者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "braveGroupId" field.</summary>
    public const int BraveGroupIdFieldNumber = 2;
    private ulong braveGroupId_;
    /// <summary>
    ///勇者团Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BraveGroupId {
      get { return braveGroupId_; }
      set {
        braveGroupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (BraveGroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BraveGroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (BraveGroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BraveGroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            BraveGroupId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshLeaderNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshLeaderNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshLeaderNtf>(() => new CmdBraveGroupFreshLeaderNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshLeaderNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 1;
    private ulong leaderId_;
    /// <summary>
    ///新团长Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LeaderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeaderId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAgreeInviteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAgreeInviteReq> _parser = new pb::MessageParser<CmdBraveGroupAgreeInviteReq>(() => new CmdBraveGroupAgreeInviteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAgreeInviteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///邀请者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "braveGroupId" field.</summary>
    public const int BraveGroupIdFieldNumber = 2;
    private ulong braveGroupId_;
    /// <summary>
    ///勇者团Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BraveGroupId {
      get { return braveGroupId_; }
      set {
        braveGroupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (BraveGroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BraveGroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (BraveGroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BraveGroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            BraveGroupId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupRefuseInviteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupRefuseInviteReq> _parser = new pb::MessageParser<CmdBraveGroupRefuseInviteReq>(() => new CmdBraveGroupRefuseInviteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupRefuseInviteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///邀请者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "braveGroupId" field.</summary>
    public const int BraveGroupIdFieldNumber = 2;
    private ulong braveGroupId_;
    /// <summary>
    ///勇者团Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BraveGroupId {
      get { return braveGroupId_; }
      set {
        braveGroupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (BraveGroupId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BraveGroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (BraveGroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BraveGroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            BraveGroupId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdBraveGroupFastInviteTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFastInviteTeamReq> _parser = new pb::MessageParser<CmdBraveGroupFastInviteTeamReq>(() => new CmdBraveGroupFastInviteTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFastInviteTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdBraveGroupFirstQuitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFirstQuitReq> _parser = new pb::MessageParser<CmdBraveGroupFirstQuitReq>(() => new CmdBraveGroupFirstQuitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFirstQuitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdBraveGroupCancelFirstQuitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupCancelFirstQuitReq> _parser = new pb::MessageParser<CmdBraveGroupCancelFirstQuitReq>(() => new CmdBraveGroupCancelFirstQuitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupCancelFirstQuitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshQuitTimeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshQuitTimeNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshQuitTimeNtf>(() => new CmdBraveGroupFreshQuitTimeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshQuitTimeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BraveGroupMemberTimeElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BraveGroupMemberTimeElement.Parser);
    private readonly pbc::RepeatedField<global::Packet.BraveGroupMemberTimeElement> elements_ = new pbc::RepeatedField<global::Packet.BraveGroupMemberTimeElement>();
    /// <summary>
    ///相关时间key/value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BraveGroupMemberTimeElement> Elements {
      get { return elements_; }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elements_.WriteTo(output, _repeated_elements_codec);
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupCreateMeetingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupCreateMeetingReq> _parser = new pb::MessageParser<CmdBraveGroupCreateMeetingReq>(() => new CmdBraveGroupCreateMeetingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupCreateMeetingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 1;
    private uint tableId_;
    /// <summary>
    ///会议表格Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "paramList" field.</summary>
    public const int ParamListFieldNumber = 2;
    private global::Packet.BraveGroupMeetingParamList paramList_;
    /// <summary>
    ///会议参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupMeetingParamList ParamList {
      get { return paramList_; }
      set {
        paramList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TableId);
      }
      if (paramList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParamList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TableId);
      }
      if (paramList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParamList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TableId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (paramList_ == null) {
              paramList_ = new global::Packet.BraveGroupMeetingParamList();
            }
            input.ReadMessage(paramList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAddDoingMeetingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAddDoingMeetingNtf> _parser = new pb::MessageParser<CmdBraveGroupAddDoingMeetingNtf>(() => new CmdBraveGroupAddDoingMeetingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAddDoingMeetingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "meeting" field.</summary>
    public const int MeetingFieldNumber = 1;
    private global::Packet.BraveGroupDoingMeeting meeting_;
    /// <summary>
    ///会议
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupDoingMeeting Meeting {
      get { return meeting_; }
      set {
        meeting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (meeting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meeting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (meeting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meeting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (meeting_ == null) {
              meeting_ = new global::Packet.BraveGroupDoingMeeting();
            }
            input.ReadMessage(meeting_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupRemoveDoingMeetingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupRemoveDoingMeetingNtf> _parser = new pb::MessageParser<CmdBraveGroupRemoveDoingMeetingNtf>(() => new CmdBraveGroupRemoveDoingMeetingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupRemoveDoingMeetingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 1;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeetingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MeetingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeetingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupAddFinishMeetingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupAddFinishMeetingNtf> _parser = new pb::MessageParser<CmdBraveGroupAddFinishMeetingNtf>(() => new CmdBraveGroupAddFinishMeetingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupAddFinishMeetingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "meeting" field.</summary>
    public const int MeetingFieldNumber = 1;
    private global::Packet.BraveGroupFinishMeeting meeting_;
    /// <summary>
    ///会议
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BraveGroupFinishMeeting Meeting {
      get { return meeting_; }
      set {
        meeting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (meeting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meeting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (meeting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meeting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (meeting_ == null) {
              meeting_ = new global::Packet.BraveGroupFinishMeeting();
            }
            input.ReadMessage(meeting_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupRemoveFinishMeetingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupRemoveFinishMeetingNtf> _parser = new pb::MessageParser<CmdBraveGroupRemoveFinishMeetingNtf>(() => new CmdBraveGroupRemoveFinishMeetingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupRemoveFinishMeetingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 1;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeetingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MeetingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeetingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupMeetingVoteAgreeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupMeetingVoteAgreeReq> _parser = new pb::MessageParser<CmdBraveGroupMeetingVoteAgreeReq>(() => new CmdBraveGroupMeetingVoteAgreeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupMeetingVoteAgreeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 1;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeetingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MeetingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeetingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupMeetingVoteRefuseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupMeetingVoteRefuseReq> _parser = new pb::MessageParser<CmdBraveGroupMeetingVoteRefuseReq>(() => new CmdBraveGroupMeetingVoteRefuseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupMeetingVoteRefuseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 1;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MeetingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MeetingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MeetingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBraveGroupFreshMemberVoteResultNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBraveGroupFreshMemberVoteResultNtf> _parser = new pb::MessageParser<CmdBraveGroupFreshMemberVoteResultNtf>(() => new CmdBraveGroupFreshMemberVoteResultNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBraveGroupFreshMemberVoteResultNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///团成员Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "meetingId" field.</summary>
    public const int MeetingIdFieldNumber = 2;
    private uint meetingId_;
    /// <summary>
    ///会议Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MeetingId {
      get { return meetingId_; }
      set {
        meetingId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    /// <summary>
    ///true赞成false反对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (MeetingId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MeetingId);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (MeetingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MeetingId);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            MeetingId = input.ReadUInt32();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
