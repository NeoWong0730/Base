// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activityruler.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7600+
  /// </summary>
  public enum CmdActivityRuler {
    None = 0,
    /// <summary>
    ///当日开启活动列表
    /// </summary>
    ActivityListNtf = 7601,
    /// <summary>
    ///总的活动数据 客户端最好有个统一的数据管理器
    /// </summary>
    CmdActivityDataNtf = 7602,
    /// <summary>
    ///上边ntf有个时间字段， 客户端时间超过了上边的时间发这条协议请求
    /// </summary>
    CmdActivityDataReq = 7603,
    /// <summary>
    ///单个领取还是用单个的返回吧
    /// </summary>
    CmdActivitySignTakeReq = 7604,
    CmdActivitySignTakeRes = 7605,
    /// <summary>
    ///领取活动达成人物奖励
    /// </summary>
    CmdActivityMissonAwardTakeReq = 7606,
    /// <summary>
    ///领取返回还有 服务器达成更新都走这个协议
    /// </summary>
    CmdActivityMissonAwardTakeNtf = 7607,
    CmdActivityExchangeTakeReq = 7608,
    CmdActivityExchangeTakeRes = 7609,
    /// <summary>
    ///活动商店信息请求
    /// </summary>
    CmdActivityShopDataReq = 7610,
    /// <summary>
    ///活动商店信息返回
    /// </summary>
    CmdActivityShopDataRes = 7611,
    /// <summary>
    ///活动商店购买请求
    /// </summary>
    CmdActivityShopBuyReq = 7612,
    /// <summary>
    ///活动商店购买返回
    /// </summary>
    CmdActivityShopBuyRes = 7613,
    /// <summary>
    /// 存钱罐信息请求
    /// </summary>
    CmdActivityPiggyBankDataReq = 7614,
    /// <summary>
    /// 存钱罐信息返回
    /// </summary>
    CmdActivityPiggyBankDataRes = 7615,
    /// <summary>
    /// 存钱罐存入请求
    /// </summary>
    CmdActivityPiggyBankSaveReq = 7616,
    /// <summary>
    /// 存钱罐存入返回
    /// </summary>
    CmdActivityPiggyBankSaveRes = 7617,
    /// <summary>
    /// 存钱罐领奖请求
    /// </summary>
    CmdActivityPiggyBankRewardGetReq = 7618,
    /// <summary>
    /// 存钱罐领奖返回
    /// </summary>
    CmdActivityPiggyBankRewardGetRes = 7619,
    /// <summary>
    /// 活动累充信息请求
    /// </summary>
    CmdActivityChargeCumulateDataReq = 7620,
    /// <summary>
    ///CmdActivity_ChargeCumulateDataRes   = 7621; // 活动累充信息返回
    /// </summary>
    CmdActivityChargeCumulateDataNtf = 7622,
    /// <summary>
    /// 活动累充领奖请求
    /// </summary>
    CmdActivityChargeCumulateRewardReq = 7623,
    /// <summary>
    /// 活动累充领奖返回
    /// </summary>
    CmdActivityChargeCumulateRewardRes = 7624,
    /// <summary>
    /// 单笔充值信息请求
    /// </summary>
    CmdActivitySinglePayDataReq = 7625,
    CmdActivitySinglePayDataRes = 7626,
    /// <summary>
    /// 单笔充值领奖请求，返回CmdActivity_SinglePayUpdateNtf
    /// </summary>
    CmdActivitySinglePayRewardReq = 7627,
    /// <summary>
    /// 单笔充值信息同步，玩家充值时服务器会主动发
    /// </summary>
    CmdActivitySinglePayUpdateNtf = 7628,
    /// <summary>
    /// 魔力大合体(2048小游戏)数据请求
    /// </summary>
    CmdActivityMagic2048DataReq = 7630,
    CmdActivityMagic2048DataRes = 7631,
    /// <summary>
    /// 魔力大合体(2048小游戏)提交成绩请求
    /// </summary>
    CmdActivityMagic2048ReportTimeReq = 7632,
    /// <summary>
    /// 成绩更新通知
    /// </summary>
    CmdActivityMagic2048UpdateTimeNtf = 7633,
    /// <summary>
    /// 魔力大合体(2048小游戏)领取奖励请求
    /// </summary>
    CmdActivityMagic2048GetAwardReq = 7634,
    /// <summary>
    /// 奖励状态更新通知
    /// </summary>
    CmdActivityMagic2048UpdateAwardStatusNtf = 7635,
    /// <summary>
    /// 活动累计类信息请求
    /// </summary>
    CmdActivityCumulateDataReq = 7636,
    /// <summary>
    /// 活动累计类信息同步
    /// </summary>
    CmdActivityCumulateDataNtf = 7637,
    /// <summary>
    /// 活动累计类奖励请求
    /// </summary>
    CmdActivityCumulateRewardReq = 7638,
    /// <summary>
    /// 活动累计类奖励返回
    /// </summary>
    CmdActivityCumulateRewardRes = 7639,
    /// <summary>
    /// 合服单笔充值信息请求
    /// </summary>
    CmdActivitySinglePay2DataReq = 7640,
    CmdActivitySinglePay2DataRes = 7641,
    /// <summary>
    /// 合服单笔充值领奖请求，返回CmdActivity_SinglePay2UpdateNtf
    /// </summary>
    CmdActivitySinglePay2RewardReq = 7642,
    /// <summary>
    /// 合服单笔充值信息同步，玩家充值时服务器会主动发
    /// </summary>
    CmdActivitySinglePay2UpdateNtf = 7643,
    /// <summary>
    ///合服任务领取任务奖励
    /// </summary>
    CmdActivityMissonAwardTake2Req = 7644,
    CmdActivityMissonAwardTake2Ntf = 7645,
    /// <summary>
    ///合服道具兑换
    /// </summary>
    CmdActivityExchangeTake2Req = 7646,
    CmdActivityExchangeTake2Res = 7647,
    /// <summary>
    ///合服签到
    /// </summary>
    CmdActivitySignTake2Req = 7648,
    CmdActivitySignTake2Res = 7649,
  }

  public enum ErrorActivityRuler {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///配置错误
    /// </summary>
    CsvErr = 7601,
    /// <summary>
    /// 活动未开启
    /// </summary>
    NotOpen = 7602,
    /// <summary>
    /// 活动ID无效
    /// </summary>
    ActivityIdNotFind = 7603,
    /// <summary>
    ///活动已结束
    /// </summary>
    ActEnd = 7604,
    /// <summary>
    ///请求签到数据错误
    /// </summary>
    SignErr = 7605,
    /// <summary>
    ///无法领取签到
    /// </summary>
    TakeSign = 7606,
    /// <summary>
    ///请求兑换数据错误
    /// </summary>
    ExchangeErr = 7607,
    /// <summary>
    ///兑换次数已满
    /// </summary>
    ExchangeMax = 7608,
    /// <summary>
    ///请求任务数据错误
    /// </summary>
    MissErr = 7609,
    /// <summary>
    ///无任务奖励可领取
    /// </summary>
    MissTake = 7610,
    /// <summary>
    ///存钱罐已领取
    /// </summary>
    PiggyBankGot = 7611,
    /// <summary>
    ///存钱罐是空的
    /// </summary>
    PiggyBankNone = 7612,
    /// <summary>
    ///存钱阶段已结束
    /// </summary>
    PiggyBankSaveEnd = 7613,
    /// <summary>
    ///活动累充选礼奖励已领取
    /// </summary>
    ChargeCumulateGot = 7614,
    /// <summary>
    ///活动累充选礼奖励未解锁
    /// </summary>
    ChargeCumulateUnlock = 7615,
    /// <summary>
    ///请求参数错误
    /// </summary>
    ParamReqErr = 7616,
    /// <summary>
    ///活动单笔充值-可领取奖励次数不足
    /// </summary>
    SinglePayCount = 7617,
    /// <summary>
    ///活动单笔充值-领取次数已到上限
    /// </summary>
    SinglePayMax = 7618,
    /// <summary>
    ///魔力大合体(2048小游戏)-奖励的index错误
    /// </summary>
    Magic2048GameAwardIndex = 7620,
    /// <summary>
    ///魔力大合体(2048小游戏)-奖励已经被领取
    /// </summary>
    Magic2048GameAwardGeted = 7621,
    /// <summary>
    ///魔力大合体(2048小游戏)-奖励添加到背包失败
    /// </summary>
    Magic2048GameAwardAddBag = 7622,
    /// <summary>
    ///魔力大合体(2048小游戏)-成绩不满足要求
    /// </summary>
    Magic2048GameTimeNotMeet = 7623,
    /// <summary>
    ///魔力大合体(2048小游戏)-上报成绩不应为0
    /// </summary>
    Magic2048GameTimeZero = 7624,
    /// <summary>
    ///奖励未解锁
    /// </summary>
    RewardNotUnlock = 7625,
    /// <summary>
    ///奖励已领取
    /// </summary>
    RewardGot = 7626,
    /// <summary>
    ///魔力大合体(2048小游戏)-跨服不允许操作
    /// </summary>
    Magic2048GameCrossSvr = 7627,
  }

  public enum ActivityRulerActiveReason {
    None = 0,
    /// <summary>
    ///运营活动签到
    /// </summary>
    Sign = 7601,
    /// <summary>
    ///活动道具兑换
    /// </summary>
    Exchange = 7602,
    /// <summary>
    ///活动任务奖励
    /// </summary>
    Mission = 7603,
    /// <summary>
    ///活动结束货币兑换
    /// </summary>
    EndCoinExchange = 7604,
    /// <summary>
    /// 存钱罐奖励
    /// </summary>
    PiggyBank = 7605,
    /// <summary>
    /// 活动累充选礼
    /// </summary>
    ChargeCumulate = 7606,
    /// <summary>
    ///活动单笔充值
    /// </summary>
    SinglePay = 7607,
    /// <summary>
    ///魔力大合体(2048小游戏)
    /// </summary>
    Magic2048Game = 7608,
    /// <summary>
    ///累计活动获得
    /// </summary>
    CumulateGet = 7609,
    /// <summary>
    ///累计活动消耗
    /// </summary>
    CumulateCost = 7610,
  }

  public enum ActivityRulerType {
    None = 0,
    /// <summary>
    ///天降红包
    /// </summary>
    RedRain = 1,
    /// <summary>
    ///活动道具兑换
    /// </summary>
    Exchange = 8,
    /// <summary>
    ///活动任务
    /// </summary>
    Task = 9,
    /// <summary>
    ///运营活动签到
    /// </summary>
    Sign = 11,
    /// <summary>
    ///鼠王存钱罐
    /// </summary>
    PiggyBank = 13,
    /// <summary>
    ///活动累充选礼
    /// </summary>
    ChargeCumulate = 14,
    /// <summary>
    ///单笔充值
    /// </summary>
    SinglePay = 15,
    /// <summary>
    ///魔力大合体(2048小游戏)
    /// </summary>
    Magic2048Game = 17,
    /// <summary>
    ///年兽
    /// </summary>
    MonsterNian = 19,
    /// <summary>
    ///合服活动任务
    /// </summary>
    Task2 = 103,
    /// <summary>
    ///合服活动道具兑换
    /// </summary>
    Exchange2 = 104,
    /// <summary>
    ///合服单笔充值
    /// </summary>
    SinglePay2 = 105,
  }

  #endregion

  #region Messages
  /// <summary>
  ///当日开启活动列表
  /// </summary>
  public sealed class CmdActivityRulerActivityListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityRulerActivityListNtf> _parser = new pb::MessageParser<CmdActivityRulerActivityListNtf>(() => new CmdActivityRulerActivityListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityRulerActivityListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityInfo" field.</summary>
    public const int ActivityInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdActivityRulerActivityListNtf.Types.ActivityInfo> _repeated_activityInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdActivityRulerActivityListNtf.Types.ActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivityRulerActivityListNtf.Types.ActivityInfo> activityInfo_ = new pbc::RepeatedField<global::Packet.CmdActivityRulerActivityListNtf.Types.ActivityInfo>();
    /// <summary>
    ///当日开启活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivityRulerActivityListNtf.Types.ActivityInfo> ActivityInfo {
      get { return activityInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activityInfo_.WriteTo(output, _repeated_activityInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activityInfo_.CalculateSize(_repeated_activityInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityInfo_.AddEntriesFrom(input, _repeated_activityInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivityRulerActivityListNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ActivityInfo : pb::IMessage {
        private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        ///活动id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "currDay" field.</summary>
        public const int CurrDayFieldNumber = 2;
        private uint currDay_;
        /// <summary>
        ///当前处于活动的第几天
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CurrDay {
          get { return currDay_; }
          set {
            currDay_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (CurrDay != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(CurrDay);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (CurrDay != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrDay);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                CurrDay = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class ACExchangeData : pb::IMessage {
    private static readonly pb::MessageParser<ACExchangeData> _parser = new pb::MessageParser<ACExchangeData>(() => new ACExchangeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACExchangeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "exNums" field.</summary>
    public const int ExNumsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_exNums_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> exNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///兑换的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ExNums {
      get { return exNums_; }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_ids_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> ids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///对应上边的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 3;
    private uint openTime_;
    /// <summary>
    ///活动开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 4;
    private uint lastTime_;
    /// <summary>
    ///上次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      exNums_.WriteTo(output, _repeated_exNums_codec);
      ids_.WriteTo(output, _repeated_ids_codec);
      if (OpenTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OpenTime);
      }
      if (LastTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += exNums_.CalculateSize(_repeated_exNums_codec);
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            exNums_.AddEntriesFrom(input, _repeated_exNums_codec);
            break;
          }
          case 18:
          case 16: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 24: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 32: {
            LastTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ACMissionAward : pb::IMessage {
    private static readonly pb::MessageParser<ACMissionAward> _parser = new pb::MessageParser<ACMissionAward>(() => new ACMissionAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACMissionAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "completeNums" field.</summary>
    public const int CompleteNumsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_completeNums_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> completeNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///完成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CompleteNums {
      get { return completeNums_; }
    }

    /// <summary>Field number for the "missionIds" field.</summary>
    public const int MissionIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_missionIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> missionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///对应上边的数量 missionIds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> MissionIds {
      get { return missionIds_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_state_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> state_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 状态 0 没完成 1 已经完成还没领取 2 已经领取  > 2 表示可以完成多次还没领得次数+3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> State {
      get { return state_; }
    }

    /// <summary>Field number for the "todayMissons" field.</summary>
    public const int TodayMissonsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_todayMissons_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> todayMissons_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///当天随机出来的任务id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodayMissons {
      get { return todayMissons_; }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 5;
    private uint openTime_;
    /// <summary>
    ///活动开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 6;
    private uint lastTime_;
    /// <summary>
    ///上次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      completeNums_.WriteTo(output, _repeated_completeNums_codec);
      missionIds_.WriteTo(output, _repeated_missionIds_codec);
      state_.WriteTo(output, _repeated_state_codec);
      todayMissons_.WriteTo(output, _repeated_todayMissons_codec);
      if (OpenTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(OpenTime);
      }
      if (LastTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += completeNums_.CalculateSize(_repeated_completeNums_codec);
      size += missionIds_.CalculateSize(_repeated_missionIds_codec);
      size += state_.CalculateSize(_repeated_state_codec);
      size += todayMissons_.CalculateSize(_repeated_todayMissons_codec);
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            completeNums_.AddEntriesFrom(input, _repeated_completeNums_codec);
            break;
          }
          case 18:
          case 16: {
            missionIds_.AddEntriesFrom(input, _repeated_missionIds_codec);
            break;
          }
          case 26:
          case 24: {
            state_.AddEntriesFrom(input, _repeated_state_codec);
            break;
          }
          case 34:
          case 32: {
            todayMissons_.AddEntriesFrom(input, _repeated_todayMissons_codec);
            break;
          }
          case 40: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 48: {
            LastTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ACSignData : pb::IMessage {
    private static readonly pb::MessageParser<ACSignData> _parser = new pb::MessageParser<ACSignData>(() => new ACSignData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACSignData> Parser { get { return _parser; } }

    /// <summary>Field number for the "dayState" field.</summary>
    public const int DayStateFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_dayState_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> dayState_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 1 表示可以领取 2 表示 已经领取
    /// 为了客户端方便 数组长度就是签到长度吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DayState {
      get { return dayState_; }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 2;
    private uint openTime_;
    /// <summary>
    ///活动开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 3;
    private uint lastTime_;
    /// <summary>
    ///上次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dayState_.WriteTo(output, _repeated_dayState_codec);
      if (OpenTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OpenTime);
      }
      if (LastTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dayState_.CalculateSize(_repeated_dayState_codec);
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dayState_.AddEntriesFrom(input, _repeated_dayState_codec);
            break;
          }
          case 16: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 24: {
            LastTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityDataNtf> _parser = new pb::MessageParser<CmdActivityDataNtf>(() => new CmdActivityDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 1;
    private uint refreshTime_;
    /// <summary>
    ///客户端不要做刷新逻辑 客户端打开面板的时候，本地时间过了这个时间重新请求一下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "exData" field.</summary>
    public const int ExDataFieldNumber = 2;
    private global::Packet.ACExchangeData exData_;
    /// <summary>
    ///兑换数据 不能保证这个字段一定有 客户端先判断对象有没有再处理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACExchangeData ExData {
      get { return exData_; }
      set {
        exData_ = value;
      }
    }

    /// <summary>Field number for the "signData" field.</summary>
    public const int SignDataFieldNumber = 3;
    private global::Packet.ACSignData signData_;
    /// <summary>
    ///签到数据 不能保证这个字段一定有 客户端先判断对象有没有再处理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACSignData SignData {
      get { return signData_; }
      set {
        signData_ = value;
      }
    }

    /// <summary>Field number for the "missAward" field.</summary>
    public const int MissAwardFieldNumber = 4;
    private global::Packet.ACMissionAward missAward_;
    /// <summary>
    ///活动任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACMissionAward MissAward {
      get { return missAward_; }
      set {
        missAward_ = value;
      }
    }

    /// <summary>Field number for the "exData2" field.</summary>
    public const int ExData2FieldNumber = 5;
    private global::Packet.ACExchangeData exData2_;
    /// <summary>
    ///合服兑换数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACExchangeData ExData2 {
      get { return exData2_; }
      set {
        exData2_ = value;
      }
    }

    /// <summary>Field number for the "missAward2" field.</summary>
    public const int MissAward2FieldNumber = 6;
    private global::Packet.ACMissionAward missAward2_;
    /// <summary>
    ///合服活动任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACMissionAward MissAward2 {
      get { return missAward2_; }
      set {
        missAward2_ = value;
      }
    }

    /// <summary>Field number for the "signData2" field.</summary>
    public const int SignData2FieldNumber = 7;
    private global::Packet.ACSignData signData2_;
    /// <summary>
    ///合服签到数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ACSignData SignData2 {
      get { return signData2_; }
      set {
        signData2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RefreshTime);
      }
      if (exData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExData);
      }
      if (signData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SignData);
      }
      if (missAward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MissAward);
      }
      if (exData2_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExData2);
      }
      if (missAward2_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MissAward2);
      }
      if (signData2_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SignData2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      if (exData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExData);
      }
      if (signData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignData);
      }
      if (missAward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissAward);
      }
      if (exData2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExData2);
      }
      if (missAward2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissAward2);
      }
      if (signData2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignData2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RefreshTime = input.ReadUInt32();
            break;
          }
          case 18: {
            if (exData_ == null) {
              exData_ = new global::Packet.ACExchangeData();
            }
            input.ReadMessage(exData_);
            break;
          }
          case 26: {
            if (signData_ == null) {
              signData_ = new global::Packet.ACSignData();
            }
            input.ReadMessage(signData_);
            break;
          }
          case 34: {
            if (missAward_ == null) {
              missAward_ = new global::Packet.ACMissionAward();
            }
            input.ReadMessage(missAward_);
            break;
          }
          case 42: {
            if (exData2_ == null) {
              exData2_ = new global::Packet.ACExchangeData();
            }
            input.ReadMessage(exData2_);
            break;
          }
          case 50: {
            if (missAward2_ == null) {
              missAward2_ = new global::Packet.ACMissionAward();
            }
            input.ReadMessage(missAward2_);
            break;
          }
          case 58: {
            if (signData2_ == null) {
              signData2_ = new global::Packet.ACSignData();
            }
            input.ReadMessage(signData2_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivitySignTakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySignTakeReq> _parser = new pb::MessageParser<CmdActivitySignTakeReq>(() => new CmdActivitySignTakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySignTakeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "signDay" field.</summary>
    public const int SignDayFieldNumber = 1;
    private uint signDay_;
    /// <summary>
    ///1 第一天 2 第二天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignDay {
      get { return signDay_; }
      set {
        signDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivitySignTakeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySignTakeRes> _parser = new pb::MessageParser<CmdActivitySignTakeRes>(() => new CmdActivitySignTakeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySignTakeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "signDay" field.</summary>
    public const int SignDayFieldNumber = 1;
    private uint signDay_;
    /// <summary>
    ///把天数再返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignDay {
      get { return signDay_; }
      set {
        signDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivitySignTake2Req : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySignTake2Req> _parser = new pb::MessageParser<CmdActivitySignTake2Req>(() => new CmdActivitySignTake2Req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySignTake2Req> Parser { get { return _parser; } }

    /// <summary>Field number for the "signDay" field.</summary>
    public const int SignDayFieldNumber = 1;
    private uint signDay_;
    /// <summary>
    ///1 第一天 2 第二天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignDay {
      get { return signDay_; }
      set {
        signDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivitySignTake2Res : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySignTake2Res> _parser = new pb::MessageParser<CmdActivitySignTake2Res>(() => new CmdActivitySignTake2Res());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySignTake2Res> Parser { get { return _parser; } }

    /// <summary>Field number for the "signDay" field.</summary>
    public const int SignDayFieldNumber = 1;
    private uint signDay_;
    /// <summary>
    ///把天数再返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignDay {
      get { return signDay_; }
      set {
        signDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityMissonAwardTakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMissonAwardTakeReq> _parser = new pb::MessageParser<CmdActivityMissonAwardTakeReq>(() => new CmdActivityMissonAwardTakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMissonAwardTakeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "missonId" field.</summary>
    public const int MissonIdFieldNumber = 1;
    private uint missonId_;
    /// <summary>
    ///达成任务得任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MissonId {
      get { return missonId_; }
      set {
        missonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MissonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MissonId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityMissonAwardTakeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMissonAwardTakeNtf> _parser = new pb::MessageParser<CmdActivityMissonAwardTakeNtf>(() => new CmdActivityMissonAwardTakeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMissonAwardTakeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "missonId" field.</summary>
    public const int MissonIdFieldNumber = 1;
    private uint missonId_;
    /// <summary>
    ///达成任务得任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MissonId {
      get { return missonId_; }
      set {
        missonId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    /// <summary>
    ///状态返回一下吧
    /// 状态 0 没完成 1 已经完成还没领取 2 已经领取  > 2 表示可以完成多次还没领得次数+3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "completeNums" field.</summary>
    public const int CompleteNumsFieldNumber = 3;
    private uint completeNums_;
    /// <summary>
    ///完成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CompleteNums {
      get { return completeNums_; }
      set {
        completeNums_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissonId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if (CompleteNums != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CompleteNums);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MissonId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (CompleteNums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CompleteNums);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MissonId = input.ReadUInt32();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 24: {
            CompleteNums = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityExchangeTakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityExchangeTakeReq> _parser = new pb::MessageParser<CmdActivityExchangeTakeReq>(() => new CmdActivityExchangeTakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityExchangeTakeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "exId" field.</summary>
    public const int ExIdFieldNumber = 1;
    private uint exId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExId {
      get { return exId_; }
      set {
        exId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityExchangeTakeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityExchangeTakeRes> _parser = new pb::MessageParser<CmdActivityExchangeTakeRes>(() => new CmdActivityExchangeTakeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityExchangeTakeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "exId" field.</summary>
    public const int ExIdFieldNumber = 1;
    private uint exId_;
    /// <summary>
    ///兑换的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExId {
      get { return exId_; }
      set {
        exId_ = value;
      }
    }

    /// <summary>Field number for the "exNum" field.</summary>
    public const int ExNumFieldNumber = 2;
    private uint exNum_;
    /// <summary>
    ///兑换的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExNum {
      get { return exNum_; }
      set {
        exNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExId);
      }
      if (ExNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExId);
      }
      if (ExNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityDataReq> _parser = new pb::MessageParser<CmdActivityDataReq>(() => new CmdActivityDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 活动商店商品信息
  /// </summary>
  public sealed class ShopGoods : pb::IMessage {
    private static readonly pb::MessageParser<ShopGoods> _parser = new pb::MessageParser<ShopGoods>(() => new ShopGoods());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopGoods> Parser { get { return _parser; } }

    /// <summary>Field number for the "goodsId" field.</summary>
    public const int GoodsIdFieldNumber = 1;
    private uint goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "selfCount" field.</summary>
    public const int SelfCountFieldNumber = 2;
    private uint selfCount_;
    /// <summary>
    ///个人已购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfCount {
      get { return selfCount_; }
      set {
        selfCount_ = value;
      }
    }

    /// <summary>Field number for the "globalCount" field.</summary>
    public const int GlobalCountFieldNumber = 3;
    private uint globalCount_;
    /// <summary>
    ///全服已购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalCount {
      get { return globalCount_; }
      set {
        globalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoodsId);
      }
      if (SelfCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SelfCount);
      }
      if (GlobalCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GlobalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsId);
      }
      if (SelfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelfCount);
      }
      if (GlobalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadUInt32();
            break;
          }
          case 16: {
            SelfCount = input.ReadUInt32();
            break;
          }
          case 24: {
            GlobalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动商店信息请求
  /// </summary>
  public sealed class CmdActivityShopDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityShopDataReq> _parser = new pb::MessageParser<CmdActivityShopDataReq>(() => new CmdActivityShopDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityShopDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动商店信息返回
  /// </summary>
  public sealed class CmdActivityShopDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityShopDataRes> _parser = new pb::MessageParser<CmdActivityShopDataRes>(() => new CmdActivityShopDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityShopDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "goodsList" field.</summary>
    public const int GoodsListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ShopGoods> _repeated_goodsList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ShopGoods.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShopGoods> goodsList_ = new pbc::RepeatedField<global::Packet.ShopGoods>();
    /// <summary>
    /// 活动商店商品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShopGoods> GoodsList {
      get { return goodsList_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 3;
    private uint refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      goodsList_.WriteTo(output, _repeated_goodsList_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RefreshTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += goodsList_.CalculateSize(_repeated_goodsList_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 18: {
            goodsList_.AddEntriesFrom(input, _repeated_goodsList_codec);
            break;
          }
          case 24: {
            RefreshTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动商店购买请求
  /// </summary>
  public sealed class CmdActivityShopBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityShopBuyReq> _parser = new pb::MessageParser<CmdActivityShopBuyReq>(() => new CmdActivityShopBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityShopBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "goodsId" field.</summary>
    public const int GoodsIdFieldNumber = 1;
    private uint goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 2;
    private uint buyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoodsId);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BuyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsId);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadUInt32();
            break;
          }
          case 16: {
            BuyCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动商店购买返回
  /// </summary>
  public sealed class CmdActivityShopBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityShopBuyRes> _parser = new pb::MessageParser<CmdActivityShopBuyRes>(() => new CmdActivityShopBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityShopBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ShopGoods> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ShopGoods.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShopGoods> goods_ = new pbc::RepeatedField<global::Packet.ShopGoods>();
    /// <summary>
    /// 商品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShopGoods> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    /// <summary>
    ///返回值 0成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goods_.WriteTo(output, _repeated_goods_codec);
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 存钱罐信息请求
  /// </summary>
  public sealed class CmdActivityPiggyBankDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankDataReq> _parser = new pb::MessageParser<CmdActivityPiggyBankDataReq>(() => new CmdActivityPiggyBankDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class PiggyBankData : pb::IMessage {
    private static readonly pb::MessageParser<PiggyBankData> _parser = new pb::MessageParser<PiggyBankData>(() => new PiggyBankData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PiggyBankData> Parser { get { return _parser; } }

    /// <summary>Field number for the "isGet" field.</summary>
    public const int IsGetFieldNumber = 1;
    private bool isGet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    /// <summary>Field number for the "coinList" field.</summary>
    public const int CoinListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PiggyBankData.Types.PiggyBankCoinData> _repeated_coinList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PiggyBankData.Types.PiggyBankCoinData.Parser);
    private readonly pbc::RepeatedField<global::Packet.PiggyBankData.Types.PiggyBankCoinData> coinList_ = new pbc::RepeatedField<global::Packet.PiggyBankData.Types.PiggyBankCoinData>();
    /// <summary>
    /// 货币列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PiggyBankData.Types.PiggyBankCoinData> CoinList {
      get { return coinList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGet != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGet);
      }
      coinList_.WriteTo(output, _repeated_coinList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsGet != false) {
        size += 1 + 1;
      }
      size += coinList_.CalculateSize(_repeated_coinList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGet = input.ReadBool();
            break;
          }
          case 18: {
            coinList_.AddEntriesFrom(input, _repeated_coinList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PiggyBankData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PiggyBankCoinData : pb::IMessage {
        private static readonly pb::MessageParser<PiggyBankCoinData> _parser = new pb::MessageParser<PiggyBankCoinData>(() => new PiggyBankCoinData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PiggyBankCoinData> Parser { get { return _parser; } }

        /// <summary>Field number for the "coinId" field.</summary>
        public const int CoinIdFieldNumber = 1;
        private uint coinId_;
        /// <summary>
        /// 货币ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CoinId {
          get { return coinId_; }
          set {
            coinId_ = value;
          }
        }

        /// <summary>Field number for the "consumeCount" field.</summary>
        public const int ConsumeCountFieldNumber = 2;
        private ulong consumeCount_;
        /// <summary>
        /// 消耗的货币数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ConsumeCount {
          get { return consumeCount_; }
          set {
            consumeCount_ = value;
          }
        }

        /// <summary>Field number for the "saveCount" field.</summary>
        public const int SaveCountFieldNumber = 3;
        private uint saveCount_;
        /// <summary>
        /// 存入的代币数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SaveCount {
          get { return saveCount_; }
          set {
            saveCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CoinId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CoinId);
          }
          if (ConsumeCount != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(ConsumeCount);
          }
          if (SaveCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(SaveCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CoinId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoinId);
          }
          if (ConsumeCount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumeCount);
          }
          if (SaveCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                CoinId = input.ReadUInt32();
                break;
              }
              case 16: {
                ConsumeCount = input.ReadUInt64();
                break;
              }
              case 24: {
                SaveCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 存钱罐信息返回
  /// </summary>
  public sealed class CmdActivityPiggyBankDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankDataRes> _parser = new pb::MessageParser<CmdActivityPiggyBankDataRes>(() => new CmdActivityPiggyBankDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "piggyBankData" field.</summary>
    public const int PiggyBankDataFieldNumber = 1;
    private global::Packet.PiggyBankData piggyBankData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PiggyBankData PiggyBankData {
      get { return piggyBankData_; }
      set {
        piggyBankData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (piggyBankData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PiggyBankData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (piggyBankData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PiggyBankData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (piggyBankData_ == null) {
              piggyBankData_ = new global::Packet.PiggyBankData();
            }
            input.ReadMessage(piggyBankData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 存钱罐存入请求
  /// </summary>
  public sealed class CmdActivityPiggyBankSaveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankSaveReq> _parser = new pb::MessageParser<CmdActivityPiggyBankSaveReq>(() => new CmdActivityPiggyBankSaveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankSaveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 存钱罐存入返回 
  /// </summary>
  public sealed class CmdActivityPiggyBankSaveRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankSaveRes> _parser = new pb::MessageParser<CmdActivityPiggyBankSaveRes>(() => new CmdActivityPiggyBankSaveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankSaveRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "piggyBankData" field.</summary>
    public const int PiggyBankDataFieldNumber = 1;
    private global::Packet.PiggyBankData piggyBankData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PiggyBankData PiggyBankData {
      get { return piggyBankData_; }
      set {
        piggyBankData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (piggyBankData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PiggyBankData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (piggyBankData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PiggyBankData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (piggyBankData_ == null) {
              piggyBankData_ = new global::Packet.PiggyBankData();
            }
            input.ReadMessage(piggyBankData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 存钱罐领奖请求
  /// </summary>
  public sealed class CmdActivityPiggyBankRewardGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankRewardGetReq> _parser = new pb::MessageParser<CmdActivityPiggyBankRewardGetReq>(() => new CmdActivityPiggyBankRewardGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankRewardGetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 存钱罐领奖返回
  /// </summary>
  public sealed class CmdActivityPiggyBankRewardGetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityPiggyBankRewardGetRes> _parser = new pb::MessageParser<CmdActivityPiggyBankRewardGetRes>(() => new CmdActivityPiggyBankRewardGetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityPiggyBankRewardGetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdActivityPiggyBankRewardGetRes.Types.PiggyBankReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdActivityPiggyBankRewardGetRes.Types.PiggyBankReward.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivityPiggyBankRewardGetRes.Types.PiggyBankReward> rewards_ = new pbc::RepeatedField<global::Packet.CmdActivityPiggyBankRewardGetRes.Types.PiggyBankReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivityPiggyBankRewardGetRes.Types.PiggyBankReward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivityPiggyBankRewardGetRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PiggyBankReward : pb::IMessage {
        private static readonly pb::MessageParser<PiggyBankReward> _parser = new pb::MessageParser<PiggyBankReward>(() => new PiggyBankReward());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PiggyBankReward> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private uint num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Num = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 活动累充信息请求    
  /// </summary>
  public sealed class CmdActivityChargeCumulateDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityChargeCumulateDataReq> _parser = new pb::MessageParser<CmdActivityChargeCumulateDataReq>(() => new CmdActivityChargeCumulateDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityChargeCumulateDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累充信息同步
  /// </summary>
  public sealed class CmdActivityChargeCumulateDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityChargeCumulateDataNtf> _parser = new pb::MessageParser<CmdActivityChargeCumulateDataNtf>(() => new CmdActivityChargeCumulateDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityChargeCumulateDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "cumulateValue" field.</summary>
    public const int CumulateValueFieldNumber = 2;
    private uint cumulateValue_;
    /// <summary>
    /// 累计值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CumulateValue {
      get { return cumulateValue_; }
      set {
        cumulateValue_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_rewards_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> rewards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 奖励选取index 0=未领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (CumulateValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CumulateValue);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (CumulateValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CumulateValue);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            CumulateValue = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累充领奖请求
  /// </summary>
  public sealed class CmdActivityChargeCumulateRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityChargeCumulateRewardReq> _parser = new pb::MessageParser<CmdActivityChargeCumulateRewardReq>(() => new CmdActivityChargeCumulateRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityChargeCumulateRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累充领奖返回
  /// </summary>
  public sealed class CmdActivityChargeCumulateRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityChargeCumulateRewardRes> _parser = new pb::MessageParser<CmdActivityChargeCumulateRewardRes>(() => new CmdActivityChargeCumulateRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityChargeCumulateRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累计类信息请求
  /// </summary>
  public sealed class CmdActivityCumulateDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityCumulateDataReq> _parser = new pb::MessageParser<CmdActivityCumulateDataReq>(() => new CmdActivityCumulateDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityCumulateDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累计类信息同步
  /// </summary>
  public sealed class CmdActivityCumulateDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityCumulateDataNtf> _parser = new pb::MessageParser<CmdActivityCumulateDataNtf>(() => new CmdActivityCumulateDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityCumulateDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdActivityCumulateDataNtf.Types.keyValue> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdActivityCumulateDataNtf.Types.keyValue.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivityCumulateDataNtf.Types.keyValue> datas_ = new pbc::RepeatedField<global::Packet.CmdActivityCumulateDataNtf.Types.keyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivityCumulateDataNtf.Types.keyValue> Datas {
      get { return datas_; }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_rewards_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> rewards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已领列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      datas_.WriteTo(output, _repeated_datas_codec);
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += datas_.CalculateSize(_repeated_datas_codec);
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 18: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 26:
          case 24: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivityCumulateDataNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class keyValue : pb::IMessage {
        private static readonly pb::MessageParser<keyValue> _parser = new pb::MessageParser<keyValue>(() => new keyValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<keyValue> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 活动累计类奖励请求
  /// </summary>
  public sealed class CmdActivityCumulateRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityCumulateRewardReq> _parser = new pb::MessageParser<CmdActivityCumulateRewardReq>(() => new CmdActivityCumulateRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityCumulateRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 2;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (RewardIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活动累计类奖励返回
  /// </summary>
  public sealed class CmdActivityCumulateRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityCumulateRewardRes> _parser = new pb::MessageParser<CmdActivityCumulateRewardRes>(() => new CmdActivityCumulateRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityCumulateRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 2;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (RewardIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 单笔充值信息请求
  /// </summary>
  public sealed class CmdActivitySinglePayDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePayDataReq> _parser = new pb::MessageParser<CmdActivitySinglePayDataReq>(() => new CmdActivitySinglePayDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePayDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdActivitySinglePayDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePayDataRes> _parser = new pb::MessageParser<CmdActivitySinglePayDataRes>(() => new CmdActivitySinglePayDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePayDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdActivitySinglePayDataRes.Types.RewardItem> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdActivitySinglePayDataRes.Types.RewardItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivitySinglePayDataRes.Types.RewardItem> rewardList_ = new pbc::RepeatedField<global::Packet.CmdActivitySinglePayDataRes.Types.RewardItem>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivitySinglePayDataRes.Types.RewardItem> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivitySinglePayDataRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RewardItem : pb::IMessage {
        private static readonly pb::MessageParser<RewardItem> _parser = new pb::MessageParser<RewardItem>(() => new RewardItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RewardItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        ///表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "rewardCount" field.</summary>
        public const int RewardCountFieldNumber = 2;
        private uint rewardCount_;
        /// <summary>
        ///可领取次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RewardCount {
          get { return rewardCount_; }
          set {
            rewardCount_ = value;
          }
        }

        /// <summary>Field number for the "takeCount" field.</summary>
        public const int TakeCountFieldNumber = 3;
        private uint takeCount_;
        /// <summary>
        ///已领取次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TakeCount {
          get { return takeCount_; }
          set {
            takeCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (RewardCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RewardCount);
          }
          if (TakeCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TakeCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (RewardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardCount);
          }
          if (TakeCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TakeCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                RewardCount = input.ReadUInt32();
                break;
              }
              case 24: {
                TakeCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 单笔充值领奖请求，返回CmdActivity_SinglePayUpdateNtf
  /// </summary>
  public sealed class CmdActivitySinglePayRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePayRewardReq> _parser = new pb::MessageParser<CmdActivitySinglePayRewardReq>(() => new CmdActivitySinglePayRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePayRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单笔充值信息同步，玩家充值时会主动发
  /// </summary>
  public sealed class CmdActivitySinglePayUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePayUpdateNtf> _parser = new pb::MessageParser<CmdActivitySinglePayUpdateNtf>(() => new CmdActivitySinglePayUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePayUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "rewardCount" field.</summary>
    public const int RewardCountFieldNumber = 2;
    private uint rewardCount_;
    /// <summary>
    ///可领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    /// <summary>Field number for the "takeCount" field.</summary>
    public const int TakeCountFieldNumber = 3;
    private uint takeCount_;
    /// <summary>
    ///已领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TakeCount {
      get { return takeCount_; }
      set {
        takeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardCount);
      }
      if (TakeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TakeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardCount);
      }
      if (TakeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TakeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardCount = input.ReadUInt32();
            break;
          }
          case 24: {
            TakeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048DataReq = 7630; // 魔力大合体(2048小游戏)数据请求
  /// </summary>
  public sealed class CmdActivityMagic2048DataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048DataReq> _parser = new pb::MessageParser<CmdActivityMagic2048DataReq>(() => new CmdActivityMagic2048DataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048DataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048DataRes = 7631;
  /// </summary>
  public sealed class CmdActivityMagic2048DataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048DataRes> _parser = new pb::MessageParser<CmdActivityMagic2048DataRes>(() => new CmdActivityMagic2048DataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048DataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///当前最好的成绩 初始值默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private uint award_;
    /// <summary>
    ///奖励领取状态 bit 低位->高位 表示成绩由最差到最好 0表示未领取 1表示已领取  可领取客户端用time去判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (Award != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Award);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Award);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 24: {
            Award = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048ReportTimeReq = 7632; // 魔力大合体(2048小游戏)提交成绩请求
  /// </summary>
  public sealed class CmdActivityMagic2048ReportTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048ReportTimeReq> _parser = new pb::MessageParser<CmdActivityMagic2048ReportTimeReq>(() => new CmdActivityMagic2048ReportTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048ReportTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///本次的成绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048UpdateTimeNtf = 7633; // 成绩更新通知
  /// </summary>
  public sealed class CmdActivityMagic2048UpdateTimeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048UpdateTimeNtf> _parser = new pb::MessageParser<CmdActivityMagic2048UpdateTimeNtf>(() => new CmdActivityMagic2048UpdateTimeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048UpdateTimeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///当天最好的成绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048GetAwardReq = 7634; // 魔力大合体(2048小游戏)领取奖励请求
  /// </summary>
  public sealed class CmdActivityMagic2048GetAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048GetAwardReq> _parser = new pb::MessageParser<CmdActivityMagic2048GetAwardReq>(() => new CmdActivityMagic2048GetAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048GetAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///奖励由差到好对应的index  0 1 2 3.....
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdActivity_Magic2048UpdateAwardStatusNtf = 7635; // 奖励状态更新通知
  /// </summary>
  public sealed class CmdActivityMagic2048UpdateAwardStatusNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMagic2048UpdateAwardStatusNtf> _parser = new pb::MessageParser<CmdActivityMagic2048UpdateAwardStatusNtf>(() => new CmdActivityMagic2048UpdateAwardStatusNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMagic2048UpdateAwardStatusNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///当前的活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private uint award_;
    /// <summary>
    ///奖励领取状态 bit 低位->高位 表示成绩由最差到最好 0表示未领取 1表示已领取  可领取客户端用time去判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Award != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Award);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Award);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 24: {
            Award = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 合服单笔充值信息请求
  /// </summary>
  public sealed class CmdActivitySinglePay2DataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePay2DataReq> _parser = new pb::MessageParser<CmdActivitySinglePay2DataReq>(() => new CmdActivitySinglePay2DataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePay2DataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdActivitySinglePay2DataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePay2DataRes> _parser = new pb::MessageParser<CmdActivitySinglePay2DataRes>(() => new CmdActivitySinglePay2DataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePay2DataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdActivitySinglePay2DataRes.Types.RewardItem> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdActivitySinglePay2DataRes.Types.RewardItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivitySinglePay2DataRes.Types.RewardItem> rewardList_ = new pbc::RepeatedField<global::Packet.CmdActivitySinglePay2DataRes.Types.RewardItem>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivitySinglePay2DataRes.Types.RewardItem> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivitySinglePay2DataRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RewardItem : pb::IMessage {
        private static readonly pb::MessageParser<RewardItem> _parser = new pb::MessageParser<RewardItem>(() => new RewardItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RewardItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        ///表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "rewardCount" field.</summary>
        public const int RewardCountFieldNumber = 2;
        private uint rewardCount_;
        /// <summary>
        ///可领取次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RewardCount {
          get { return rewardCount_; }
          set {
            rewardCount_ = value;
          }
        }

        /// <summary>Field number for the "takeCount" field.</summary>
        public const int TakeCountFieldNumber = 3;
        private uint takeCount_;
        /// <summary>
        ///已领取次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TakeCount {
          get { return takeCount_; }
          set {
            takeCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (RewardCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RewardCount);
          }
          if (TakeCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TakeCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (RewardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardCount);
          }
          if (TakeCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TakeCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                RewardCount = input.ReadUInt32();
                break;
              }
              case 24: {
                TakeCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 合服单笔充值领奖请求，返回CmdActivity_SinglePay2UpdateNtf
  /// </summary>
  public sealed class CmdActivitySinglePay2RewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePay2RewardReq> _parser = new pb::MessageParser<CmdActivitySinglePay2RewardReq>(() => new CmdActivitySinglePay2RewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePay2RewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///合服单笔充值信息同步，玩家充值时会主动发
  /// </summary>
  public sealed class CmdActivitySinglePay2UpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySinglePay2UpdateNtf> _parser = new pb::MessageParser<CmdActivitySinglePay2UpdateNtf>(() => new CmdActivitySinglePay2UpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySinglePay2UpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "rewardCount" field.</summary>
    public const int RewardCountFieldNumber = 2;
    private uint rewardCount_;
    /// <summary>
    ///可领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardCount {
      get { return rewardCount_; }
      set {
        rewardCount_ = value;
      }
    }

    /// <summary>Field number for the "takeCount" field.</summary>
    public const int TakeCountFieldNumber = 3;
    private uint takeCount_;
    /// <summary>
    ///已领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TakeCount {
      get { return takeCount_; }
      set {
        takeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (RewardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardCount);
      }
      if (TakeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TakeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (RewardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardCount);
      }
      if (TakeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TakeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardCount = input.ReadUInt32();
            break;
          }
          case 24: {
            TakeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityMissonAwardTake2Req : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMissonAwardTake2Req> _parser = new pb::MessageParser<CmdActivityMissonAwardTake2Req>(() => new CmdActivityMissonAwardTake2Req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMissonAwardTake2Req> Parser { get { return _parser; } }

    /// <summary>Field number for the "missonId" field.</summary>
    public const int MissonIdFieldNumber = 1;
    private uint missonId_;
    /// <summary>
    ///达成任务得任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MissonId {
      get { return missonId_; }
      set {
        missonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MissonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MissonId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityMissonAwardTake2Ntf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityMissonAwardTake2Ntf> _parser = new pb::MessageParser<CmdActivityMissonAwardTake2Ntf>(() => new CmdActivityMissonAwardTake2Ntf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityMissonAwardTake2Ntf> Parser { get { return _parser; } }

    /// <summary>Field number for the "missonId" field.</summary>
    public const int MissonIdFieldNumber = 1;
    private uint missonId_;
    /// <summary>
    ///达成任务得任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MissonId {
      get { return missonId_; }
      set {
        missonId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    /// <summary>
    ///状态返回一下吧
    /// 状态 0 没完成 1 已经完成还没领取 2 已经领取  > 2 表示可以完成多次还没领得次数+3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "completeNums" field.</summary>
    public const int CompleteNumsFieldNumber = 3;
    private uint completeNums_;
    /// <summary>
    ///完成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CompleteNums {
      get { return completeNums_; }
      set {
        completeNums_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MissonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissonId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if (CompleteNums != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CompleteNums);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MissonId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (CompleteNums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CompleteNums);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MissonId = input.ReadUInt32();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 24: {
            CompleteNums = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityExchangeTake2Req : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityExchangeTake2Req> _parser = new pb::MessageParser<CmdActivityExchangeTake2Req>(() => new CmdActivityExchangeTake2Req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityExchangeTake2Req> Parser { get { return _parser; } }

    /// <summary>Field number for the "exId" field.</summary>
    public const int ExIdFieldNumber = 1;
    private uint exId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExId {
      get { return exId_; }
      set {
        exId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityExchangeTake2Res : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityExchangeTake2Res> _parser = new pb::MessageParser<CmdActivityExchangeTake2Res>(() => new CmdActivityExchangeTake2Res());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityExchangeTake2Res> Parser { get { return _parser; } }

    /// <summary>Field number for the "exId" field.</summary>
    public const int ExIdFieldNumber = 1;
    private uint exId_;
    /// <summary>
    ///兑换的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExId {
      get { return exId_; }
      set {
        exId_ = value;
      }
    }

    /// <summary>Field number for the "exNum" field.</summary>
    public const int ExNumFieldNumber = 2;
    private uint exNum_;
    /// <summary>
    ///兑换的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExNum {
      get { return exNum_; }
      set {
        exNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExId);
      }
      if (ExNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExId);
      }
      if (ExNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
