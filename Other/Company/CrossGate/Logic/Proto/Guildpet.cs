// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildpet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7100+
  /// </summary>
  public enum CmdGuildPet {
    None = 0,
    /// <summary>
    ///获取家族兽信息
    /// </summary>
    GetInfoReq = 7100,
    GetInfoRes = 7101,
    /// <summary>
    ///获取某只家族兽信息
    /// </summary>
    UpdatePetInfoReq = 7102,
    UpdatePetInfoRes = 7103,
    /// <summary>
    ///设置训练
    /// </summary>
    SetTrainingReq = 7104,
    SetTrainingRes = 7105,
    /// <summary>
    ///领取家族兽
    /// </summary>
    GetGuildPetReq = 7106,
    GetGuildPetRes = 7107,
    /// <summary>
    ///获取喂食家族兽信息
    /// </summary>
    GetFeedInfoReq = 7108,
    GetFeedInfoRes = 7109,
    /// <summary>
    ///喂食家族兽
    /// </summary>
    FeedReq = 7110,
    FeedRes = 7111,
    /// <summary>
    ///改名
    /// </summary>
    ChangeNameReq = 7112,
    ChangeNameRes = 7113,
    /// <summary>
    ///获取家族兽通知
    /// </summary>
    GetNoticeReq = 7114,
    GetNoticeRes = 7115,
    /// <summary>
    ///修改家族兽通知
    /// </summary>
    ChangeNoticeReq = 7116,
    ChangeNoticeRes = 7117,
    /// <summary>
    ///获取训练积分
    /// </summary>
    GetTrainingScoreReq = 7118,
    GetTrainingScoreRes = 7119,
    /// <summary>
    ///训练
    /// </summary>
    EnterBattleReq = 7120,
    /// <summary>
    ///查询排行榜
    /// </summary>
    QueryRankReq = 7121,
    QueryRankRes = 7122,
    /// <summary>
    ///家族兽训练结束通知
    /// </summary>
    FightEndNtf = 7123,
  }

  public enum ErrorGuildPet {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///配置不存在
    /// </summary>
    CfgErr = 7100,
    /// <summary>
    ///设置训练每日可修改一次
    /// </summary>
    SetTrainingMax = 7101,
    /// <summary>
    ///设置训练时间错误
    /// </summary>
    SetTrainingTime = 7102,
    /// <summary>
    ///不是训练日
    /// </summary>
    TrainingDay = 7103,
    /// <summary>
    ///设置训练条件错误
    /// </summary>
    SetTrainingCondition = 7104,
    /// <summary>
    ///领取家族兽条件错误
    /// </summary>
    GetGuildPetCondition = 7105,
    /// <summary>
    ///未找到该家族兽
    /// </summary>
    GuildPetIdErr = 7106,
    /// <summary>
    ///剩余喂食次数不足
    /// </summary>
    FeedCount = 7107,
    /// <summary>
    ///不在训练时间
    /// </summary>
    TrainingTime = 7108,
    /// <summary>
    ///家族兽睡眠中
    /// </summary>
    Sleep = 7109,
  }

  public enum GuildPetActiveReason {
    None = 0,
    /// <summary>
    ///喂食家族兽
    /// </summary>
    FeedGuildPet = 7100,
  }

  #endregion

  #region Messages
  /// <summary>
  ///家族兽信息
  /// </summary>
  public sealed class GuildPetUnit : pb::IMessage {
    private static readonly pb::MessageParser<GuildPetUnit> _parser = new pb::MessageParser<GuildPetUnit>(() => new GuildPetUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildPetUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    /// <summary>
    ///阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeTime" field.</summary>
    public const int ActiveTimeFieldNumber = 4;
    private uint activeTime_;
    /// <summary>
    ///激活时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveTime {
      get { return activeTime_; }
      set {
        activeTime_ = value;
      }
    }

    /// <summary>Field number for the "mood" field.</summary>
    public const int MoodFieldNumber = 5;
    private uint mood_;
    /// <summary>
    ///心情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mood {
      get { return mood_; }
      set {
        mood_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 6;
    private uint health_;
    /// <summary>
    ///健康
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "loveFoods" field.</summary>
    public const int LoveFoodsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_loveFoods_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> loveFoods_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///目前想要吃的食物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LoveFoods {
      get { return loveFoods_; }
    }

    /// <summary>Field number for the "growth" field.</summary>
    public const int GrowthFieldNumber = 8;
    private uint growth_;
    /// <summary>
    ///成长值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Growth {
      get { return growth_; }
      set {
        growth_ = value;
      }
    }

    /// <summary>Field number for the "dailyGrowth" field.</summary>
    public const int DailyGrowthFieldNumber = 9;
    private uint dailyGrowth_;
    /// <summary>
    ///今日成长值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DailyGrowth {
      get { return dailyGrowth_; }
      set {
        dailyGrowth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (ActiveTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActiveTime);
      }
      if (Mood != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Mood);
      }
      if (Health != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Health);
      }
      loveFoods_.WriteTo(output, _repeated_loveFoods_codec);
      if (Growth != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Growth);
      }
      if (DailyGrowth != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DailyGrowth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (ActiveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveTime);
      }
      if (Mood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mood);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Health);
      }
      size += loveFoods_.CalculateSize(_repeated_loveFoods_codec);
      if (Growth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Growth);
      }
      if (DailyGrowth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DailyGrowth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            ActiveTime = input.ReadUInt32();
            break;
          }
          case 40: {
            Mood = input.ReadUInt32();
            break;
          }
          case 48: {
            Health = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            loveFoods_.AddEntriesFrom(input, _repeated_loveFoods_codec);
            break;
          }
          case 64: {
            Growth = input.ReadUInt32();
            break;
          }
          case 72: {
            DailyGrowth = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///训练信息
  /// </summary>
  public sealed class GuildPetTraining : pb::IMessage {
    private static readonly pb::MessageParser<GuildPetTraining> _parser = new pb::MessageParser<GuildPetTraining>(() => new GuildPetTraining());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildPetTraining> Parser { get { return _parser; } }

    /// <summary>Field number for the "trainingStage" field.</summary>
    public const int TrainingStageFieldNumber = 1;
    private uint trainingStage_;
    /// <summary>
    ///设置的训练阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrainingStage {
      get { return trainingStage_; }
      set {
        trainingStage_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "bSet" field.</summary>
    public const int BSetFieldNumber = 3;
    private bool bSet_;
    /// <summary>
    ///今日是否设置过训练时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BSet {
      get { return bSet_; }
      set {
        bSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrainingStage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TrainingStage);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (BSet != false) {
        output.WriteRawTag(24);
        output.WriteBool(BSet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrainingStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrainingStage);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (BSet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TrainingStage = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            BSet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取家族兽信息
  /// </summary>
  public sealed class CmdGuildPetGetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetInfoReq> _parser = new pb::MessageParser<CmdGuildPetGetInfoReq>(() => new CmdGuildPetGetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildPetGetInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetInfoRes> _parser = new pb::MessageParser<CmdGuildPetGetInfoRes>(() => new CmdGuildPetGetInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildPet" field.</summary>
    public const int GuildPetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildPetUnit> _repeated_guildPet_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildPetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildPetUnit> guildPet_ = new pbc::RepeatedField<global::Packet.GuildPetUnit>();
    /// <summary>
    ///家族兽信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildPetUnit> GuildPet {
      get { return guildPet_; }
    }

    /// <summary>Field number for the "trainingInfo" field.</summary>
    public const int TrainingInfoFieldNumber = 2;
    private global::Packet.GuildPetTraining trainingInfo_;
    /// <summary>
    ///训练信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetTraining TrainingInfo {
      get { return trainingInfo_; }
      set {
        trainingInfo_ = value;
      }
    }

    /// <summary>Field number for the "noticeVer" field.</summary>
    public const int NoticeVerFieldNumber = 3;
    private uint noticeVer_;
    /// <summary>
    ///公告版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoticeVer {
      get { return noticeVer_; }
      set {
        noticeVer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guildPet_.WriteTo(output, _repeated_guildPet_codec);
      if (trainingInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainingInfo);
      }
      if (NoticeVer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NoticeVer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guildPet_.CalculateSize(_repeated_guildPet_codec);
      if (trainingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingInfo);
      }
      if (NoticeVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoticeVer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guildPet_.AddEntriesFrom(input, _repeated_guildPet_codec);
            break;
          }
          case 18: {
            if (trainingInfo_ == null) {
              trainingInfo_ = new global::Packet.GuildPetTraining();
            }
            input.ReadMessage(trainingInfo_);
            break;
          }
          case 24: {
            NoticeVer = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取某只家族兽信息
  /// </summary>
  public sealed class CmdGuildPetUpdatePetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetUpdatePetInfoReq> _parser = new pb::MessageParser<CmdGuildPetUpdatePetInfoReq>(() => new CmdGuildPetUpdatePetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetUpdatePetInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetUpdatePetInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetUpdatePetInfoRes> _parser = new pb::MessageParser<CmdGuildPetUpdatePetInfoRes>(() => new CmdGuildPetUpdatePetInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetUpdatePetInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildPet" field.</summary>
    public const int GuildPetFieldNumber = 1;
    private global::Packet.GuildPetUnit guildPet_;
    /// <summary>
    ///家族兽信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetUnit GuildPet {
      get { return guildPet_; }
      set {
        guildPet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildPet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildPet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildPet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildPet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guildPet_ == null) {
              guildPet_ = new global::Packet.GuildPetUnit();
            }
            input.ReadMessage(guildPet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置训练
  /// </summary>
  public sealed class CmdGuildPetSetTrainingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetSetTrainingReq> _parser = new pb::MessageParser<CmdGuildPetSetTrainingReq>(() => new CmdGuildPetSetTrainingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetSetTrainingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "trainingInfo" field.</summary>
    public const int TrainingInfoFieldNumber = 1;
    private global::Packet.GuildPetTraining trainingInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetTraining TrainingInfo {
      get { return trainingInfo_; }
      set {
        trainingInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trainingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrainingInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trainingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (trainingInfo_ == null) {
              trainingInfo_ = new global::Packet.GuildPetTraining();
            }
            input.ReadMessage(trainingInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetSetTrainingRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetSetTrainingRes> _parser = new pb::MessageParser<CmdGuildPetSetTrainingRes>(() => new CmdGuildPetSetTrainingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetSetTrainingRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "trainingInfo" field.</summary>
    public const int TrainingInfoFieldNumber = 1;
    private global::Packet.GuildPetTraining trainingInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetTraining TrainingInfo {
      get { return trainingInfo_; }
      set {
        trainingInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trainingInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TrainingInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trainingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (trainingInfo_ == null) {
              trainingInfo_ = new global::Packet.GuildPetTraining();
            }
            input.ReadMessage(trainingInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取家族兽
  /// </summary>
  public sealed class CmdGuildPetGetGuildPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetGuildPetReq> _parser = new pb::MessageParser<CmdGuildPetGetGuildPetReq>(() => new CmdGuildPetGetGuildPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetGuildPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetGetGuildPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetGuildPetRes> _parser = new pb::MessageParser<CmdGuildPetGetGuildPetRes>(() => new CmdGuildPetGetGuildPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetGuildPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildPet" field.</summary>
    public const int GuildPetFieldNumber = 1;
    private global::Packet.GuildPetUnit guildPet_;
    /// <summary>
    ///家族兽信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetUnit GuildPet {
      get { return guildPet_; }
      set {
        guildPet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildPet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildPet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildPet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildPet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guildPet_ == null) {
              guildPet_ = new global::Packet.GuildPetUnit();
            }
            input.ReadMessage(guildPet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取喂食家族兽信息
  /// </summary>
  public sealed class CmdGuildPetGetFeedInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetFeedInfoReq> _parser = new pb::MessageParser<CmdGuildPetGetFeedInfoReq>(() => new CmdGuildPetGetFeedInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetFeedInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildPetGetFeedInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetFeedInfoRes> _parser = new pb::MessageParser<CmdGuildPetGetFeedInfoRes>(() => new CmdGuildPetGetFeedInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetFeedInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hungerCount" field.</summary>
    public const int HungerCountFieldNumber = 1;
    private uint hungerCount_;
    /// <summary>
    ///饥饿奖励次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HungerCount {
      get { return hungerCount_; }
      set {
        hungerCount_ = value;
      }
    }

    /// <summary>Field number for the "feedCount" field.</summary>
    public const int FeedCountFieldNumber = 2;
    private uint feedCount_;
    /// <summary>
    ///剩余喂食次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeedCount {
      get { return feedCount_; }
      set {
        feedCount_ = value;
      }
    }

    /// <summary>Field number for the "dailyFeedCount" field.</summary>
    public const int DailyFeedCountFieldNumber = 3;
    private uint dailyFeedCount_;
    /// <summary>
    ///当天已喂食次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DailyFeedCount {
      get { return dailyFeedCount_; }
      set {
        dailyFeedCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HungerCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HungerCount);
      }
      if (FeedCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FeedCount);
      }
      if (DailyFeedCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DailyFeedCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HungerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HungerCount);
      }
      if (FeedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeedCount);
      }
      if (DailyFeedCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DailyFeedCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HungerCount = input.ReadUInt32();
            break;
          }
          case 16: {
            FeedCount = input.ReadUInt32();
            break;
          }
          case 24: {
            DailyFeedCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///喂食家族兽
  /// </summary>
  public sealed class CmdGuildPetFeedReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetFeedReq> _parser = new pb::MessageParser<CmdGuildPetFeedReq>(() => new CmdGuildPetFeedReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetFeedReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetFeedRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetFeedRes> _parser = new pb::MessageParser<CmdGuildPetFeedRes>(() => new CmdGuildPetFeedRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetFeedRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildPet" field.</summary>
    public const int GuildPetFieldNumber = 1;
    private global::Packet.GuildPetUnit guildPet_;
    /// <summary>
    ///家族兽信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildPetUnit GuildPet {
      get { return guildPet_; }
      set {
        guildPet_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "addmood" field.</summary>
    public const int AddmoodFieldNumber = 3;
    private uint addmood_;
    /// <summary>
    ///本次增加心情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Addmood {
      get { return addmood_; }
      set {
        addmood_ = value;
      }
    }

    /// <summary>Field number for the "addhealth" field.</summary>
    public const int AddhealthFieldNumber = 4;
    private uint addhealth_;
    /// <summary>
    ///本次增加健康
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Addhealth {
      get { return addhealth_; }
      set {
        addhealth_ = value;
      }
    }

    /// <summary>Field number for the "addgrowth" field.</summary>
    public const int AddgrowthFieldNumber = 5;
    private uint addgrowth_;
    /// <summary>
    ///本次增加成长值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Addgrowth {
      get { return addgrowth_; }
      set {
        addgrowth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildPet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildPet);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (Addmood != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Addmood);
      }
      if (Addhealth != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Addhealth);
      }
      if (Addgrowth != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Addgrowth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildPet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildPet);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Addmood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Addmood);
      }
      if (Addhealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Addhealth);
      }
      if (Addgrowth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Addgrowth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guildPet_ == null) {
              guildPet_ = new global::Packet.GuildPetUnit();
            }
            input.ReadMessage(guildPet_);
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            Addmood = input.ReadUInt32();
            break;
          }
          case 32: {
            Addhealth = input.ReadUInt32();
            break;
          }
          case 40: {
            Addgrowth = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改名
  /// </summary>
  public sealed class CmdGuildPetChangeNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetChangeNameReq> _parser = new pb::MessageParser<CmdGuildPetChangeNameReq>(() => new CmdGuildPetChangeNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetChangeNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetChangeNameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetChangeNameRes> _parser = new pb::MessageParser<CmdGuildPetChangeNameRes>(() => new CmdGuildPetChangeNameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetChangeNameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取家族兽通知
  /// </summary>
  public sealed class CmdGuildPetGetNoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetNoticeReq> _parser = new pb::MessageParser<CmdGuildPetGetNoticeReq>(() => new CmdGuildPetGetNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetNoticeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildPetGetNoticeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetNoticeRes> _parser = new pb::MessageParser<CmdGuildPetGetNoticeRes>(() => new CmdGuildPetGetNoticeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetNoticeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeVer" field.</summary>
    public const int NoticeVerFieldNumber = 2;
    private uint noticeVer_;
    /// <summary>
    ///公告版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoticeVer {
      get { return noticeVer_; }
      set {
        noticeVer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
      if (NoticeVer != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NoticeVer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      if (NoticeVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoticeVer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
          case 16: {
            NoticeVer = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改家族兽通知
  /// </summary>
  public sealed class CmdGuildPetChangeNoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetChangeNoticeReq> _parser = new pb::MessageParser<CmdGuildPetChangeNoticeReq>(() => new CmdGuildPetChangeNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetChangeNoticeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPetChangeNoticeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetChangeNoticeRes> _parser = new pb::MessageParser<CmdGuildPetChangeNoticeRes>(() => new CmdGuildPetChangeNoticeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetChangeNoticeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "noticeVer" field.</summary>
    public const int NoticeVerFieldNumber = 2;
    private uint noticeVer_;
    /// <summary>
    ///公告版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoticeVer {
      get { return noticeVer_; }
      set {
        noticeVer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
      if (NoticeVer != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NoticeVer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      if (NoticeVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoticeVer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
          case 16: {
            NoticeVer = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取训练积分
  /// </summary>
  public sealed class CmdGuildPetGetTrainingScoreReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetTrainingScoreReq> _parser = new pb::MessageParser<CmdGuildPetGetTrainingScoreReq>(() => new CmdGuildPetGetTrainingScoreReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetTrainingScoreReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildPetGetTrainingScoreRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetGetTrainingScoreRes> _parser = new pb::MessageParser<CmdGuildPetGetTrainingScoreRes>(() => new CmdGuildPetGetTrainingScoreRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetGetTrainingScoreRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 1;
    private uint totalScore_;
    /// <summary>
    ///家族总积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///个人积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "guildPetFightCount" field.</summary>
    public const int GuildPetFightCountFieldNumber = 3;
    private uint guildPetFightCount_;
    /// <summary>
    ///今日家族兽训练次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPetFightCount {
      get { return guildPetFightCount_; }
      set {
        guildPetFightCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalScore != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalScore);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (GuildPetFightCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildPetFightCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (GuildPetFightCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPetFightCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalScore = input.ReadUInt32();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildPetFightCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///训练
  /// </summary>
  public sealed class CmdGuildPetEnterBattleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetEnterBattleReq> _parser = new pb::MessageParser<CmdGuildPetEnterBattleReq>(() => new CmdGuildPetEnterBattleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetEnterBattleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///查询排行榜
  /// </summary>
  public sealed class CmdGuildPetQueryRankReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetQueryRankReq> _parser = new pb::MessageParser<CmdGuildPetQueryRankReq>(() => new CmdGuildPetQueryRankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetQueryRankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildPetQueryRankRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetQueryRankRes> _parser = new pb::MessageParser<CmdGuildPetQueryRankRes>(() => new CmdGuildPetQueryRankRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetQueryRankRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildPetQueryRankRes.Types.RankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildPetQueryRankRes.Types.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildPetQueryRankRes.Types.RankInfo> rankInfo_ = new pbc::RepeatedField<global::Packet.CmdGuildPetQueryRankRes.Types.RankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildPetQueryRankRes.Types.RankInfo> RankInfo {
      get { return rankInfo_; }
    }

    /// <summary>Field number for the "myselfScore" field.</summary>
    public const int MyselfScoreFieldNumber = 2;
    private uint myselfScore_;
    /// <summary>
    ///自己的积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyselfScore {
      get { return myselfScore_; }
      set {
        myselfScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
      if (MyselfScore != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MyselfScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      if (MyselfScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyselfScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
          case 16: {
            MyselfScore = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildPetQueryRankRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RankInfo : pb::IMessage {
        private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        /// <summary>
        ///角色id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private pb::ByteString name_ = pb::ByteString.Empty;
        /// <summary>
        ///角色名
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 3;
        private uint score_;
        /// <summary>
        ///积分
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Name);
          }
          if (Score != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Score);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                Name = input.ReadBytes();
                break;
              }
              case 24: {
                Score = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///家族兽训练结束通知
  /// </summary>
  public sealed class CmdGuildPetFightEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPetFightEndNtf> _parser = new pb::MessageParser<CmdGuildPetFightEndNtf>(() => new CmdGuildPetFightEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPetFightEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "maxScore" field.</summary>
    public const int MaxScoreFieldNumber = 1;
    private uint maxScore_;
    /// <summary>
    ///个人最高积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "currScore" field.</summary>
    public const int CurrScoreFieldNumber = 2;
    private uint currScore_;
    /// <summary>
    ///本次积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrScore {
      get { return currScore_; }
      set {
        currScore_ = value;
      }
    }

    /// <summary>Field number for the "guildPetFightCount" field.</summary>
    public const int GuildPetFightCountFieldNumber = 3;
    private uint guildPetFightCount_;
    /// <summary>
    ///今日家族兽训练次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPetFightCount {
      get { return guildPetFightCount_; }
      set {
        guildPetFightCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxScore != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxScore);
      }
      if (CurrScore != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrScore);
      }
      if (GuildPetFightCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildPetFightCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxScore);
      }
      if (CurrScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrScore);
      }
      if (GuildPetFightCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPetFightCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxScore = input.ReadUInt32();
            break;
          }
          case 16: {
            CurrScore = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildPetFightCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
