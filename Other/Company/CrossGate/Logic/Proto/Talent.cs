// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 3100+
  /// </summary>
  public enum CmdTalent {
    None = 0,
    /// <summary>
    ///升级天赋等级请求
    /// </summary>
    UpdateTalentLevelReq = 3100,
    /// <summary>
    ///升级天赋等级请求应答
    /// </summary>
    UpdateTalentLevelRes = 3101,
    /// <summary>
    ///重置天赋请求
    /// </summary>
    ResetTalentPointReq = 3102,
    /// <summary>
    ///重置天赋请求应答
    /// </summary>
    ResetTalentPointRes = 3103,
    /// <summary>
    ///天赋兑换请求
    /// </summary>
    ExchangeTalentPointReq = 3104,
    /// <summary>
    ///天赋兑换请求应答
    /// </summary>
    ExchangeTalentPointRes = 3105,
    /// <summary>
    ///天赋兑换到期请求
    /// </summary>
    EtpexpireTimeReq = 3106,
    /// <summary>
    ///天赋兑换到期请求应答
    /// </summary>
    EtpexpireTimeRes = 3107,
    /// <summary>
    ///天赋列表信息
    /// </summary>
    TalentListNtf = 3108,
    /// <summary>
    ///天赋点上限更新通知
    /// </summary>
    UpdateTalentLimitNtf = 3109,
    /// <summary>
    ///剩余天赋点更新
    /// </summary>
    UpdateFreePointNtf = 3110,
    /// <summary>
    ///创建天赋方案
    /// </summary>
    CreateTalentSchemeReq = 3111,
    /// <summary>
    ///创建天赋方案
    /// </summary>
    CreateTalentSchemeRes = 3112,
    /// <summary>
    ///切换天赋方案
    /// </summary>
    SwitchSchemeReq = 3113,
    /// <summary>
    ///切换天赋方案
    /// </summary>
    SwitchSchemeRes = 3114,
    /// <summary>
    ///天赋方案改名
    /// </summary>
    ModifyNameReq = 3115,
    /// <summary>
    ///天赋方案改名
    /// </summary>
    ModifyNameRes = 3116,
  }

  public enum ErrorTalent {
    None = 0,
    /// <summary>
    ///计算玩家属性失败
    /// </summary>
    CalcAttr = 3100,
    /// <summary>
    ///表为记录为空
    /// </summary>
    Csvnull = 3101,
    /// <summary>
    ///已经达到最大等级
    /// </summary>
    LevelMax = 3102,
    /// <summary>
    ///没有剩余的天赋点
    /// </summary>
    NoFreePoint = 3103,
    /// <summary>
    ///前置条件不满足
    /// </summary>
    PreTalent = 3104,
    /// <summary>
    ///职业不匹配
    /// </summary>
    Career = 3105,
    /// <summary>
    ///没有可以兑换的天赋点
    /// </summary>
    NoCanExPoint = 3106,
    /// <summary>
    ///达到最大兑换数量
    /// </summary>
    ExPointMaxNum = 3107,
    /// <summary>
    ///兑换的经验不足
    /// </summary>
    ExExpNotEnough = 3108,
    /// <summary>
    ///兑换的道具不足
    /// </summary>
    ExCostItemNotEnough = 3109,
    /// <summary>
    ///消耗道具失败
    /// </summary>
    CostItem = 3110,
    /// <summary>
    ///前置天赋分支使用点数不满足
    /// </summary>
    PreBranchPoint = 3111,
    /// <summary>
    ///兑换的天赋点队列为空
    /// </summary>
    ExchangePointEmpty = 3112,
    /// <summary>
    ///玩家等级不满足兑换条件
    /// </summary>
    ExchangeRoleLevel = 3113,
    /// <summary>
    ///兑换的金币不足
    /// </summary>
    ExGoldNotEnough = 3114,
    /// <summary>
    ///没有使用天赋点 不需要重置
    /// </summary>
    NotUsePoint = 3115,
    /// <summary>
    ///天赋方案序列号错误
    /// </summary>
    SchemeIndex = 3116,
  }

  public enum TalentActiveReason {
    None = 0,
    /// <summary>
    ///天赋
    /// </summary>
    ExchangePoint = 3100,
    /// <summary>
    ///天赋重置
    /// </summary>
    TalentPointReset = 3101,
  }

  #endregion

  #region Messages
  /// <summary>
  ///天赋信息
  /// </summary>
  public sealed class TalentInfo : pb::IMessage {
    private static readonly pb::MessageParser<TalentInfo> _parser = new pb::MessageParser<TalentInfo>(() => new TalentInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalentInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "talentId" field.</summary>
    public const int TalentIdFieldNumber = 1;
    private uint talentId_;
    /// <summary>
    ///天赋id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    /// <summary>Field number for the "talentLevel" field.</summary>
    public const int TalentLevelFieldNumber = 2;
    private uint talentLevel_;
    /// <summary>
    ///天赋等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentLevel {
      get { return talentLevel_; }
      set {
        talentLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalentId);
      }
      if (TalentLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TalentLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentId);
      }
      if (TalentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentId = input.ReadUInt32();
            break;
          }
          case 16: {
            TalentLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋方案
  /// </summary>
  public sealed class TalentScheme : pb::IMessage {
    private static readonly pb::MessageParser<TalentScheme> _parser = new pb::MessageParser<TalentScheme>(() => new TalentScheme());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalentScheme> Parser { get { return _parser; } }

    /// <summary>Field number for the "freePointNum" field.</summary>
    public const int FreePointNumFieldNumber = 1;
    private int freePointNum_;
    /// <summary>
    ///剩余天赋点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreePointNum {
      get { return freePointNum_; }
      set {
        freePointNum_ = value;
      }
    }

    /// <summary>Field number for the "talentList" field.</summary>
    public const int TalentListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TalentInfo> _repeated_talentList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TalentInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TalentInfo> talentList_ = new pbc::RepeatedField<global::Packet.TalentInfo>();
    /// <summary>
    ///天赋列表信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TalentInfo> TalentList {
      get { return talentList_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字 为空表示默认方案名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreePointNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreePointNum);
      }
      talentList_.WriteTo(output, _repeated_talentList_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreePointNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreePointNum);
      }
      size += talentList_.CalculateSize(_repeated_talentList_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreePointNum = input.ReadInt32();
            break;
          }
          case 18: {
            talentList_.AddEntriesFrom(input, _repeated_talentList_codec);
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级天赋等级请求
  /// </summary>
  public sealed class CmdTalentUpdateTalentLevelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentUpdateTalentLevelReq> _parser = new pb::MessageParser<CmdTalentUpdateTalentLevelReq>(() => new CmdTalentUpdateTalentLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentUpdateTalentLevelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "talentId" field.</summary>
    public const int TalentIdFieldNumber = 1;
    private uint talentId_;
    /// <summary>
    /// 天赋id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalentId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级天赋等级请求应答
  /// </summary>
  public sealed class CmdTalentUpdateTalentLevelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentUpdateTalentLevelRes> _parser = new pb::MessageParser<CmdTalentUpdateTalentLevelRes>(() => new CmdTalentUpdateTalentLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentUpdateTalentLevelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "talentId" field.</summary>
    public const int TalentIdFieldNumber = 1;
    private uint talentId_;
    /// <summary>
    ///天赋id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 2;
    private uint skillLevel_;
    /// <summary>
    ///升级后的天赋等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalentId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillLevel);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentId = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置天赋请求
  /// </summary>
  public sealed class CmdTalentResetTalentPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentResetTalentPointReq> _parser = new pb::MessageParser<CmdTalentResetTalentPointReq>(() => new CmdTalentResetTalentPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentResetTalentPointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置天赋请求应答
  /// </summary>
  public sealed class CmdTalentResetTalentPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentResetTalentPointRes> _parser = new pb::MessageParser<CmdTalentResetTalentPointRes>(() => new CmdTalentResetTalentPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentResetTalentPointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋兑换请求
  /// </summary>
  public sealed class CmdTalentExchangeTalentPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentExchangeTalentPointReq> _parser = new pb::MessageParser<CmdTalentExchangeTalentPointReq>(() => new CmdTalentExchangeTalentPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentExchangeTalentPointReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///天赋兑换请求应答
  /// </summary>
  public sealed class CmdTalentExchangeTalentPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentExchangeTalentPointRes> _parser = new pb::MessageParser<CmdTalentExchangeTalentPointRes>(() => new CmdTalentExchangeTalentPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentExchangeTalentPointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "exchangeTalentPoint" field.</summary>
    public const int ExchangeTalentPointFieldNumber = 1;
    private uint exchangeTalentPoint_;
    /// <summary>
    ///提交的所有兑换点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExchangeTalentPoint {
      get { return exchangeTalentPoint_; }
      set {
        exchangeTalentPoint_ = value;
      }
    }

    /// <summary>Field number for the "exchangeExpireTime" field.</summary>
    public const int ExchangeExpireTimeFieldNumber = 2;
    private uint exchangeExpireTime_;
    /// <summary>
    ///提交的所有兑换点数到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExchangeExpireTime {
      get { return exchangeExpireTime_; }
      set {
        exchangeExpireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExchangeTalentPoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExchangeTalentPoint);
      }
      if (ExchangeExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExchangeExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExchangeTalentPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExchangeTalentPoint);
      }
      if (ExchangeExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExchangeExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExchangeTalentPoint = input.ReadUInt32();
            break;
          }
          case 16: {
            ExchangeExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋兑换到期请求
  /// </summary>
  public sealed class CmdTalentETPExpireTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentETPExpireTimeReq> _parser = new pb::MessageParser<CmdTalentETPExpireTimeReq>(() => new CmdTalentETPExpireTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentETPExpireTimeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///天赋兑换到期请求应答
  /// </summary>
  public sealed class CmdTalentETPExpireTimeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentETPExpireTimeRes> _parser = new pb::MessageParser<CmdTalentETPExpireTimeRes>(() => new CmdTalentETPExpireTimeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentETPExpireTimeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "exchangeExpireTime" field.</summary>
    public const int ExchangeExpireTimeFieldNumber = 1;
    private uint exchangeExpireTime_;
    /// <summary>
    ///正确的到期时间,如果兑换成功 则为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExchangeExpireTime {
      get { return exchangeExpireTime_; }
      set {
        exchangeExpireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExchangeExpireTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExchangeExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExchangeExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExchangeExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExchangeExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋点上限更新通知
  /// </summary>
  public sealed class CmdTalentUpdateTalentLimitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentUpdateTalentLimitNtf> _parser = new pb::MessageParser<CmdTalentUpdateTalentLimitNtf>(() => new CmdTalentUpdateTalentLimitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentUpdateTalentLimitNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "talentPointLimit" field.</summary>
    public const int TalentPointLimitFieldNumber = 1;
    private uint talentPointLimit_;
    /// <summary>
    ///天赋点上限 在线玩家所有的天赋方案均会增加上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentPointLimit {
      get { return talentPointLimit_; }
      set {
        talentPointLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentPointLimit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalentPointLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentPointLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentPointLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentPointLimit = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdTalent_UpdateFreePointNtf    = 3110;//剩余天赋点更新
  /// </summary>
  public sealed class CmdTalentUpdateFreePointNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentUpdateFreePointNtf> _parser = new pb::MessageParser<CmdTalentUpdateFreePointNtf>(() => new CmdTalentUpdateFreePointNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentUpdateFreePointNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "addPoint" field.</summary>
    public const int AddPointFieldNumber = 1;
    private int addPoint_;
    /// <summary>
    ///本次增加的天赋点(可能为负值)  在线玩家所有的天赋方案更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddPoint {
      get { return addPoint_; }
      set {
        addPoint_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///是否来自于GMT修改导致的更新 0 不是 1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AddPoint);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddPoint);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddPoint = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天赋列表信息
  /// </summary>
  public sealed class CmdTalentTalentListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentTalentListNtf> _parser = new pb::MessageParser<CmdTalentTalentListNtf>(() => new CmdTalentTalentListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentTalentListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "talentPointLimit" field.</summary>
    public const int TalentPointLimitFieldNumber = 1;
    private uint talentPointLimit_;
    /// <summary>
    ///天赋点数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalentPointLimit {
      get { return talentPointLimit_; }
      set {
        talentPointLimit_ = value;
      }
    }

    /// <summary>Field number for the "talentSchemeList" field.</summary>
    public const int TalentSchemeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TalentScheme> _repeated_talentSchemeList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TalentScheme.Parser);
    private readonly pbc::RepeatedField<global::Packet.TalentScheme> talentSchemeList_ = new pbc::RepeatedField<global::Packet.TalentScheme>();
    /// <summary>
    ///天赋方案列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TalentScheme> TalentSchemeList {
      get { return talentSchemeList_; }
    }

    /// <summary>Field number for the "exchangeTalentList" field.</summary>
    public const int ExchangeTalentListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_exchangeTalentList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> exchangeTalentList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///兑换天赋点到期列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ExchangeTalentList {
      get { return exchangeTalentList_; }
    }

    /// <summary>Field number for the "curIndex" field.</summary>
    public const int CurIndexFieldNumber = 4;
    private uint curIndex_;
    /// <summary>
    ///当前使用的天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurIndex {
      get { return curIndex_; }
      set {
        curIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentPointLimit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalentPointLimit);
      }
      talentSchemeList_.WriteTo(output, _repeated_talentSchemeList_codec);
      exchangeTalentList_.WriteTo(output, _repeated_exchangeTalentList_codec);
      if (CurIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentPointLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalentPointLimit);
      }
      size += talentSchemeList_.CalculateSize(_repeated_talentSchemeList_codec);
      size += exchangeTalentList_.CalculateSize(_repeated_exchangeTalentList_codec);
      if (CurIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalentPointLimit = input.ReadUInt32();
            break;
          }
          case 18: {
            talentSchemeList_.AddEntriesFrom(input, _repeated_talentSchemeList_codec);
            break;
          }
          case 26:
          case 24: {
            exchangeTalentList_.AddEntriesFrom(input, _repeated_exchangeTalentList_codec);
            break;
          }
          case 32: {
            CurIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_CreateTalentSchemeReq    = 3111;//创建天赋方案
  /// </summary>
  public sealed class CmdTalentCreateTalentSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentCreateTalentSchemeReq> _parser = new pb::MessageParser<CmdTalentCreateTalentSchemeReq>(() => new CmdTalentCreateTalentSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentCreateTalentSchemeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_CreateTalentSchemeRes    = 3112;//创建天赋方案
  /// </summary>
  public sealed class CmdTalentCreateTalentSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentCreateTalentSchemeRes> _parser = new pb::MessageParser<CmdTalentCreateTalentSchemeRes>(() => new CmdTalentCreateTalentSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentCreateTalentSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///天赋方案对应的index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_SwitchSchemeReq    = 3113;//切换天赋方案
  /// </summary>
  public sealed class CmdTalentSwitchSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentSwitchSchemeReq> _parser = new pb::MessageParser<CmdTalentSwitchSchemeReq>(() => new CmdTalentSwitchSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentSwitchSchemeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///要切换到的天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_SwitchSchemeRes    = 3114;//切换天赋方案
  /// </summary>
  public sealed class CmdTalentSwitchSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentSwitchSchemeRes> _parser = new pb::MessageParser<CmdTalentSwitchSchemeRes>(() => new CmdTalentSwitchSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentSwitchSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///要切换到的天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_ModifyNameReq    = 3115;//天赋方案改名
  /// </summary>
  public sealed class CmdTalentModifyNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentModifyNameReq> _parser = new pb::MessageParser<CmdTalentModifyNameReq>(() => new CmdTalentModifyNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentModifyNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdTalent_ModifyNameRes    = 3116;//天赋方案改名
  /// </summary>
  public sealed class CmdTalentModifyNameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTalentModifyNameRes> _parser = new pb::MessageParser<CmdTalentModifyNameRes>(() => new CmdTalentModifyNameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTalentModifyNameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///天赋方案index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
