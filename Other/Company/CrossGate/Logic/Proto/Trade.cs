// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///4400+
  /// </summary>
  public enum CmdTrade {
    /// <summary>
    /// 4400 ~ 4450
    /// </summary>
    None = 0,
    /// <summary>
    ///占位
    /// </summary>
    Start = 4400,
    /// <summary>
    ///登录数据通知
    /// </summary>
    DataNtf = 4401,
    /// <summary>
    ///最大摊位数量更新
    /// </summary>
    MaxPosNtf = 4402,
    /// <summary>
    ///上架物品更新通知
    /// </summary>
    OnSaleUpdateNtf = 4403,
    /// <summary>
    ///获取交易记录
    /// </summary>
    GetRecordReq = 4404,
    GetRecordRes = 4405,
    /// <summary>
    ///取回售卖冻结金币
    /// </summary>
    GetSaleCoinReq = 4406,
    GetSaleCoinRes = 4407,
    /// <summary>
    ///获取审核信息
    /// </summary>
    CheckInfoReq = 4408,
    CheckInfoRes = 4409,
    /// <summary>
    ///限制交易变更通知
    /// </summary>
    LimitTradeNtf = 4410,
    /// <summary>
    ///请求某分类在售数量
    /// </summary>
    SaleCountReq = 4411,
    SaleCountRes = 4412,
    /// <summary>
    ///查看某商品在售
    /// </summary>
    ListReq = 4413,
    ListRes = 4414,
    /// <summary>
    ///获取某唯一商品具体信息
    /// </summary>
    DetailInfoReq = 4415,
    DetailInfoRes = 4416,
    /// <summary>
    ///查看某商品在售比价信息
    /// </summary>
    ComparePriceReq = 4417,
    ComparePriceRes = 4418,
    /// <summary>
    ///上架出售
    /// </summary>
    OnSaleReq = 4419,
    OnSaleRes = 4420,
    /// <summary>
    ///购买
    /// </summary>
    BuyReq = 4421,
    BuyRes = 4422,
    /// <summary>
    ///关注，取消关注
    /// </summary>
    WatchItemReq = 4423,
    WatchItemRes = 4424,
    /// <summary>
    ///下架商品
    /// </summary>
    OffSaleReq = 4427,
    OffSaleRes = 4428,
    /// <summary>
    ///重新上架
    /// </summary>
    ReSaleReq = 4429,
    ReSaleRes = 4430,
    /// <summary>
    ///请求关注列表
    /// </summary>
    WatchListReq = 4431,
    WatchListRes = 4432,
    /// <summary>
    ///公示出价，取消出价请求
    /// </summary>
    OfferPriceReq = 4433,
    OfferPriceRes = 4434,
    /// <summary>
    ///公示期出价， 购买结果
    /// </summary>
    OfferPriceResultNtf = 4435,
    /// <summary>
    ///珍品订单申诉请求
    /// </summary>
    SaleReviewReq = 4436,
    /// <summary>
    ///珍品订单申诉请求返回
    /// </summary>
    SaleReviewRes = 4437,
    /// <summary>
    ///CmdTrade_SaleRecordUpdateNtf = 4438; //订单状态更新(废弃)
    /// </summary>
    AdvanceOfferReq = 4439,
    AdvanceOfferRes = 4440,
    /// <summary>
    ///预购次数通知
    /// </summary>
    AdvanceOfferTimesNtf = 4441,
    /// <summary>
    ///交易记录更新
    /// </summary>
    RecordUpdateNtf = 4442,
    /// <summary>
    ///领取购买记录中商品
    /// </summary>
    TakeOutGoodsReq = 4443,
    TakeOutGoodsRes = 4444,
    /// <summary>
    ///取消特权预购
    /// </summary>
    CancelAdvanceOfferReq = 4445,
    CancelAdvanceOfferRes = 4446,
  }

  public enum ErrorTrade {
    None = 0,
    /// <summary>
    ///系统忙
    /// </summary>
    Busy = 4401,
    /// <summary>
    ///交易行暂不可用
    /// </summary>
    ServiceUnAvailable = 4402,
    /// <summary>
    ///非法物品
    /// </summary>
    ForbiddenItem = 4403,
    /// <summary>
    ///该商品未找到，可能已过期
    /// </summary>
    GoodsNotExist = 4404,
    /// <summary>
    ///相关表格未找到
    /// </summary>
    CsvnotFound = 4405,
    /// <summary>
    ///数量不足无法购买
    /// </summary>
    CountNotEnough = 4406,
    /// <summary>
    ///数据内部错误
    /// </summary>
    DataError = 4407,
    /// <summary>
    ///下架失败
    /// </summary>
    OffSaleFailed = 4408,
    /// <summary>
    ///冻结期道具无法上架
    /// </summary>
    CannotSaleMarketLock = 4409,
    /// <summary>
    ///限制定价商品推荐价格有变动
    /// </summary>
    LimitItemRecommendChanged = 4410,
    /// <summary>
    ///操作时参数有误
    /// </summary>
    ParamInvalid = 4411,
    /// <summary>
    ///摊位费不足无法上架
    /// </summary>
    FeeNotEnough = 4412,
    /// <summary>
    ///上架商品已满
    /// </summary>
    OnSaleIsFull = 4413,
    /// <summary>
    ///关注商品已满
    /// </summary>
    WatchGoodsIsFull = 4414,
    /// <summary>
    ///正在上架，不能重上架
    /// </summary>
    AlreadyOnSaleCannotReSale = 4415,
    /// <summary>
    ///不能购买自己的商品
    /// </summary>
    CannotBuySelfGoods = 4416,
    /// <summary>
    ///金币不足无法购买
    /// </summary>
    CannotBuyCoinNotEnough = 4417,
    /// <summary>
    ///指定购买时间过期
    /// </summary>
    TargetTimeOut = 4418,
    /// <summary>
    ///公示期竞价太早
    /// </summary>
    OfferPriceTooEarly = 4419,
    /// <summary>
    ///公示期竞价太晚
    /// </summary>
    OfferPriceTooLate = 4420,
    /// <summary>
    ///不能上架出战宠物
    /// </summary>
    CannotOnSaleFightPet = 4421,
    /// <summary>
    ///跨服交易行未开启
    /// </summary>
    TradeCrossLocked = 4422,
    /// <summary>
    ///限制定价商品上架等级限制
    /// </summary>
    LimitPriceOnSaleLvNotEnough = 4423,
    /// <summary>
    ///自由定价商品上架等级限制
    /// </summary>
    FreePriceOnSaleLvNotEnough = 4424,
    /// <summary>
    ///限制定价商品购买等级限制
    /// </summary>
    LimitPriceBuyLvNotEnough = 4425,
    /// <summary>
    ///自由定价商品购买等级限制
    /// </summary>
    FreePriceBuyLvNotEnough = 4426,
    /// <summary>
    ///没有剩余冻结金币可领取
    /// </summary>
    NoRemainCoin = 4427,
    /// <summary>
    ///不能关注自己上架的商品
    /// </summary>
    CannotWatchSelfGoods = 4428,
    /// <summary>
    ///不能上架镶嵌了宝石的商品
    /// </summary>
    CannotOnSaleEquipWithJewel = 4429,
    /// <summary>
    ///公示期不能购买
    /// </summary>
    OnPublicityCannotBuy = 4430,
    /// <summary>
    ///议价商品不能购买
    /// </summary>
    DiscussCannotBuy = 4431,
    /// <summary>
    ///该类商品不能重新上架
    /// </summary>
    GoodsCannotReSale = 4432,
    /// <summary>
    ///服务器时间差异过大
    /// </summary>
    SvrTimeDiffHuge = 4433,
    /// <summary>
    ///搜索商品未找到
    /// </summary>
    SearchGoodsNotFound = 4434,
    /// <summary>
    ///该商品不在跨服上架
    /// </summary>
    GoodsOnlyInLocalTrade = 4435,
    /// <summary>
    ///限制交易中
    /// </summary>
    TradeLimit = 4436,
    /// <summary>
    ///最后一个宠物不能上架
    /// </summary>
    CannotTradeLastPet = 4437,
    /// <summary>
    ///点击购买太快
    /// </summary>
    BuyTooFast = 4438,
    /// <summary>
    ///自由定价上架时间限制
    /// </summary>
    FreePriceOnSaleTimeLimit = 4439,
    /// <summary>
    ///没有此珍品订单
    /// </summary>
    NoTreasureDealId = 4440,
    /// <summary>
    ///此珍品订单正在申诉中
    /// </summary>
    InReviewTreasureDealId = 4441,
    /// <summary>
    ///此珍品订单无法申诉
    /// </summary>
    DealIdNotReview = 4442,
    /// <summary>
    ///被系统下架商品不能重新上架
    /// </summary>
    DeniedGoodsCannotReSale = 4443,
    /// <summary>
    ///分享的商品信息已过期
    /// </summary>
    ShareGoodsOverdue = 4444,
    /// <summary>
    ///不能翻页的商品不在第一页不能购买
    /// </summary>
    NotInFirstPageCannotBuy = 4445,
    /// <summary>
    ///上架装备时卸下宝石， 背包格子不够
    /// </summary>
    UnloadAllJewelBagFull = 4446,
    /// <summary>
    ///处于下架流程，不能重上架
    /// </summary>
    OffSaleGoodsCannotReSale = 4447,
    /// <summary>
    ///背包满
    /// </summary>
    BagIsFull = 4448,
    /// <summary>
    ///推荐价格为0
    /// </summary>
    ItemRecommendZero = 4449,
    /// <summary>
    ///高级搜索冷却时间没到
    /// </summary>
    AdvanceSearchCdlimit = 4450,
    /// <summary>
    ///预购时间已过,请重新出价
    /// </summary>
    AdvanceOfferTimeOver = 4451,
    /// <summary>
    ///特权预购， 不能重复预约
    /// </summary>
    AlreadyAdvanceOffered = 4452,
    /// <summary>
    ///交易记录已过期
    /// </summary>
    RecordIsOverdue = 4453,
    /// <summary>
    ///无可领取物品
    /// </summary>
    NoGoodsTakeOut = 4454,
    /// <summary>
    ///物品已领取
    /// </summary>
    GoodsHasTookOut = 4455,
    /// <summary>
    ///特权预购次数已用完
    /// </summary>
    AdvanceOfferTimesUsedUp = 4456,
    /// <summary>
    ///商品在黑名单中无法上架/重上架
    /// </summary>
    GoodsInBlockListCannotOnSale = 4457,
    /// <summary>
    ///商品在黑名单中无法购买/预购
    /// </summary>
    GoodsInBlockListCannotBuy = 4458,
    /// <summary>
    ///跨服商品最低售价限制
    /// </summary>
    CrossMinPriceLimit = 4459,
    /// <summary>
    ///宠物正在探险不能上架
    /// </summary>
    PetIsExploring = 4460,
    /// <summary>
    /// 宠物装备了元核的宠物不能上架
    /// </summary>
    PetHasEquipCannotOnSale = 4461,
    /// <summary>
    ///在其他坐骑契约位上的宠物不能上架
    /// </summary>
    PetHasContractCannotOnSale = 4462,
    /// <summary>
    ///该商品预约次数已达上限
    /// </summary>
    TradeAdvanceOfferTimesMax = 4463,
    /// <summary>
    ///特权预购已取消
    /// </summary>
    AdvanceOfferHasCancelled = 4464,
    /// <summary>
    ///世界等级条件不满足，不能上架
    /// </summary>
    OnSaleWorldLevelLimit = 4465,
  }

  public enum TradeActiveReason {
    None = 0,
    /// <summary>
    ///尝试上架
    /// </summary>
    TryOnSale = 4401,
    /// <summary>
    ///上架失败恢复
    /// </summary>
    OnSaleRecover = 4402,
    /// <summary>
    ///购买操作
    /// </summary>
    TryBuy = 4403,
    /// <summary>
    ///购买
    /// </summary>
    Buy = 4404,
    /// <summary>
    ///购买失败恢复
    /// </summary>
    BuyRecover = 4405,
    /// <summary>
    ///尝试重新上架
    /// </summary>
    TryReSale = 4406,
    /// <summary>
    ///上架恢复
    /// </summary>
    ReSaleRecover = 4407,
    /// <summary>
    ///成功出售
    /// </summary>
    Sold = 4408,
    /// <summary>
    ///下架
    /// </summary>
    OffSale = 4409,
    /// <summary>
    ///自动购买最低价返还金币（无）
    /// </summary>
    BuyCheapBackCoin = 4410,
    /// <summary>
    ///公示期审核被拒，退回
    /// </summary>
    PublicityDenied = 4411,
    /// <summary>
    ///非珍品审核惩罚扣除
    /// </summary>
    NormalCheckPunish = 4412,
    /// <summary>
    ///高级搜索消耗
    /// </summary>
    SearchCost = 4413,
    /// <summary>
    ///特权预购
    /// </summary>
    AdvanceOffer = 4414,
    /// <summary>
    ///特权预购失败退钱
    /// </summary>
    AdvanceOfferBack = 4415,
    /// <summary>
    ///特权预购取消退钱
    /// </summary>
    AdvanceOfferCancel = 4416,
  }

  /// <summary>
  ///同info中定义
  /// </summary>
  public enum TradeGoodsType {
    /// <summary>
    ///无效
    /// </summary>
    None = 0,
    /// <summary>
    ///道具
    /// </summary>
    Item = 1,
    /// <summary>
    ///宠物
    /// </summary>
    Pet = 2,
    /// <summary>
    ///装备
    /// </summary>
    Equip = 3,
    /// <summary>
    ///饰品
    /// </summary>
    Ornament = 4,
    /// <summary>
    /// = 5; 保留，用于type=1 道具的时候，上报埋点区分珍品非珍品，珍品为5
    /// </summary>
    PetEquip = 6,
  }

  public enum TradeShowType {
    /// <summary>
    ///在售
    /// </summary>
    OnSale = 0,
    /// <summary>
    ///公示
    /// </summary>
    Publicity = 1,
    /// <summary>
    ///议价
    /// </summary>
    Discuss = 2,
    /// <summary>
    ///在售+议价
    /// </summary>
    OnSaleAndDiscuss = 3,
  }

  public enum TradeSearchType {
    /// <summary>
    ///按分类-子类
    /// </summary>
    Category = 0,
    /// <summary>
    ///按商品id
    /// </summary>
    InfoId = 1,
    /// <summary>
    ///装备
    /// </summary>
    Equip = 2,
    /// <summary>
    ///宠物
    /// </summary>
    Pet = 3,
    /// <summary>
    ///宠物元核
    /// </summary>
    PetEquip = 4,
    /// <summary>
    ///饰品
    /// </summary>
    Ornament = 5,
  }

  /// <summary>
  ///特权预购购买记录 状态
  /// </summary>
  public enum TradeAdvanceBuyState {
    /// <summary>
    ///无可领取
    /// </summary>
    None = 0,
    /// <summary>
    ///成功拍到， 物品未领取
    /// </summary>
    ToReceive = 1,
    /// <summary>
    ///成功拍到，且已领取
    /// </summary>
    Received = 2,
    /// <summary>
    ///预购结果：失败
    /// </summary>
    Failed = 3,
    /// <summary>
    ///已预购
    /// </summary>
    Offered = 4,
    /// <summary>
    ///取消预购
    /// </summary>
    CancelOffered = 5,
  }

  /// <summary>
  ///交易审核状态
  /// </summary>
  public enum TradeCheckStatus {
    /// <summary>
    ///不需审核
    /// </summary>
    TradeCheckNoCheck = 0,
    /// <summary>
    ///审核待定
    /// </summary>
    TradeCheckUndecided = 1,
    /// <summary>
    ///审核通过
    /// </summary>
    TradeCheckPass = 2,
    /// <summary>
    ///未通过，冻结（可按时领取）
    /// </summary>
    TradeCheckFreeze = 3,
    /// <summary>
    ///未通过，扣除
    /// </summary>
    TradeCheckPunish = 4,
    /// <summary>
    ///审核延期
    /// </summary>
    TradeCheckPutOff = 5,
    /// <summary>
    ///kdip2.0 冻结（实际在背包内冻结，交易记录中不可手动领取)
    /// </summary>
    TradeCheckKdipFreeze = 6,
    /// <summary>
    ///kdip2.0 未通过，扣除
    /// </summary>
    TradeCheckKdipPunish = 7,
  }

  /// <summary>
  ///交易复审状态
  /// </summary>
  public enum TradeCheckReviewStatus {
    /// <summary>
    ///无复审
    /// </summary>
    TradeCheckReviewNoReview = 0,
    /// <summary>
    ///申诉(复审)中
    /// </summary>
    TradeCheckReviewReview = 1,
    /// <summary>
    ///申诉(复审)结束
    /// </summary>
    TradeCheckReviewReviewEnd = 2,
    /// <summary>
    /// </summary>
    TradeCheckReviewMax = 3,
  }

  public enum TradeSaleReceiveStep {
    /// <summary>
    ///未领取
    /// </summary>
    None = 0,
    /// <summary>
    ///第一部分领取
    /// </summary>
    FstPart = 1,
    /// <summary>
    ///全领取
    /// </summary>
    All = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///商品简略信息
  /// </summary>
  public sealed class TradeBrief : pb::IMessage {
    private static readonly pb::MessageParser<TradeBrief> _parser = new pb::MessageParser<TradeBrief>(() => new TradeBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    /// <summary>
    ///是否跨服商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    /// <summary>
    ///商品唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "onSaleId" field.</summary>
    public const int OnSaleIdFieldNumber = 18;
    private ulong onSaleId_;
    /// <summary>
    ///上架id(服务器用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OnSaleId {
      get { return onSaleId_; }
      set {
        onSaleId_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///单价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 6;
    private ulong targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetName" field.</summary>
    public const int TargetNameFieldNumber = 11;
    private pb::ByteString targetName_ = pb::ByteString.Empty;
    /// <summary>
    ///指定交易玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetTime" field.</summary>
    public const int TargetTimeFieldNumber = 7;
    private uint targetTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetTime {
      get { return targetTime_; }
      set {
        targetTime_ = value;
      }
    }

    /// <summary>Field number for the "targetPrice" field.</summary>
    public const int TargetPriceFieldNumber = 8;
    private uint targetPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetPrice {
      get { return targetPrice_; }
      set {
        targetPrice_ = value;
      }
    }

    /// <summary>Field number for the "watchTimes" field.</summary>
    public const int WatchTimesFieldNumber = 9;
    private uint watchTimes_;
    /// <summary>
    ///被收藏次数(红心)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WatchTimes {
      get { return watchTimes_; }
      set {
        watchTimes_ = value;
      }
    }

    /// <summary>Field number for the "onsaleTime" field.</summary>
    public const int OnsaleTimeFieldNumber = 10;
    private uint onsaleTime_;
    /// <summary>
    ///上架在售时间(若处于公示期，则该时间是未来时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnsaleTime {
      get { return onsaleTime_; }
      set {
        onsaleTime_ = value;
      }
    }

    /// <summary>Field number for the "goodsType" field.</summary>
    public const int GoodsTypeFieldNumber = 15;
    private uint goodsType_;
    /// <summary>
    ///表格中商品类型， 见(TradeGoodsType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoodsType {
      get { return goodsType_; }
      set {
        goodsType_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 12;
    private uint color_;
    /// <summary>
    ///装备 or 宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 14;
    private uint score_;
    /// <summary>
    /// 评分，若该商品为装备或者宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "petlv" field.</summary>
    public const int PetlvFieldNumber = 13;
    private uint petlv_;
    /// <summary>
    ///宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petlv {
      get { return petlv_; }
      set {
        petlv_ = value;
      }
    }

    /// <summary>Field number for the "domestication" field.</summary>
    public const int DomesticationFieldNumber = 16;
    private bool domestication_;
    /// <summary>
    ///是否被驯化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Domestication {
      get { return domestication_; }
      set {
        domestication_ = value;
      }
    }

    /// <summary>Field number for the "lostGrade" field.</summary>
    public const int LostGradeFieldNumber = 19;
    private uint lostGrade_;
    /// <summary>
    ///掉档数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LostGrade {
      get { return lostGrade_; }
      set {
        lostGrade_ = value;
      }
    }

    /// <summary>Field number for the "isDenied" field.</summary>
    public const int IsDeniedFieldNumber = 17;
    private bool isDenied_;
    /// <summary>
    ///是否被系统下架
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDenied {
      get { return isDenied_; }
      set {
        isDenied_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TargetId);
      }
      if (TargetTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TargetTime);
      }
      if (TargetPrice != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TargetPrice);
      }
      if (WatchTimes != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(WatchTimes);
      }
      if (OnsaleTime != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(OnsaleTime);
      }
      if (TargetName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(TargetName);
      }
      if (Color != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Color);
      }
      if (Petlv != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Petlv);
      }
      if (Score != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Score);
      }
      if (GoodsType != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(GoodsType);
      }
      if (Domestication != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Domestication);
      }
      if (IsDenied != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsDenied);
      }
      if (OnSaleId != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(OnSaleId);
      }
      if (LostGrade != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(LostGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (OnSaleId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OnSaleId);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetName);
      }
      if (TargetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetTime);
      }
      if (TargetPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPrice);
      }
      if (WatchTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WatchTimes);
      }
      if (OnsaleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnsaleTime);
      }
      if (GoodsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsType);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Petlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petlv);
      }
      if (Domestication != false) {
        size += 2 + 1;
      }
      if (LostGrade != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LostGrade);
      }
      if (IsDenied != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            TargetId = input.ReadUInt64();
            break;
          }
          case 56: {
            TargetTime = input.ReadUInt32();
            break;
          }
          case 64: {
            TargetPrice = input.ReadUInt32();
            break;
          }
          case 72: {
            WatchTimes = input.ReadUInt32();
            break;
          }
          case 80: {
            OnsaleTime = input.ReadUInt32();
            break;
          }
          case 90: {
            TargetName = input.ReadBytes();
            break;
          }
          case 96: {
            Color = input.ReadUInt32();
            break;
          }
          case 104: {
            Petlv = input.ReadUInt32();
            break;
          }
          case 112: {
            Score = input.ReadUInt32();
            break;
          }
          case 120: {
            GoodsType = input.ReadUInt32();
            break;
          }
          case 128: {
            Domestication = input.ReadBool();
            break;
          }
          case 136: {
            IsDenied = input.ReadBool();
            break;
          }
          case 144: {
            OnSaleId = input.ReadUInt64();
            break;
          }
          case 152: {
            LostGrade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商品详细信息
  /// </summary>
  public sealed class TradeItem : pb::IMessage {
    private static readonly pb::MessageParser<TradeItem> _parser = new pb::MessageParser<TradeItem>(() => new TradeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    /// <summary>
    ///是否跨服商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "goodsType" field.</summary>
    public const int GoodsTypeFieldNumber = 4;
    private uint goodsType_;
    /// <summary>
    ///表格中商品类型， 见(TradeGoodsType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoodsType {
      get { return goodsType_; }
      set {
        goodsType_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 5;
    private global::Packet.Item item_;
    /// <summary>
    /// 泛指packet.Item, 包括普通道具，装备，饰品，宠物元核等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 6;
    private global::Packet.PetUnit pet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private uint price_;
    /// <summary>
    ///单价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private uint count_;
    /// <summary>
    ///道具数量，对于特定类型固定为1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 9;
    private ulong targetId_;
    /// <summary>
    ///指定交易有效，表示指定交易的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetName" field.</summary>
    public const int TargetNameFieldNumber = 14;
    private pb::ByteString targetName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetPrice" field.</summary>
    public const int TargetPriceFieldNumber = 10;
    private uint targetPrice_;
    /// <summary>
    ///指定交易价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetPrice {
      get { return targetPrice_; }
      set {
        targetPrice_ = value;
      }
    }

    /// <summary>Field number for the "targetTime" field.</summary>
    public const int TargetTimeFieldNumber = 11;
    private uint targetTime_;
    /// <summary>
    ///指定交易截至时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetTime {
      get { return targetTime_; }
      set {
        targetTime_ = value;
      }
    }

    /// <summary>Field number for the "watchTimes" field.</summary>
    public const int WatchTimesFieldNumber = 12;
    private uint watchTimes_;
    /// <summary>
    ///被收藏次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WatchTimes {
      get { return watchTimes_; }
      set {
        watchTimes_ = value;
      }
    }

    /// <summary>Field number for the "onsaleTime" field.</summary>
    public const int OnsaleTimeFieldNumber = 13;
    private uint onsaleTime_;
    /// <summary>
    ///上架在售时间(若处于公示期，则该时间是未来时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnsaleTime {
      get { return onsaleTime_; }
      set {
        onsaleTime_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 15;
    private uint heroId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "sellerName" field.</summary>
    public const int SellerNameFieldNumber = 16;
    private pb::ByteString sellerName_ = pb::ByteString.Empty;
    /// <summary>
    ///卖家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SellerName {
      get { return sellerName_; }
      set {
        sellerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sellerId" field.</summary>
    public const int SellerIdFieldNumber = 17;
    private ulong sellerId_;
    /// <summary>
    ///卖家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SellerId {
      get { return sellerId_; }
      set {
        sellerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (GoodsType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GoodsType);
      }
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (pet_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pet);
      }
      if (Price != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Count);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(TargetId);
      }
      if (TargetPrice != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TargetPrice);
      }
      if (TargetTime != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TargetTime);
      }
      if (WatchTimes != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(WatchTimes);
      }
      if (OnsaleTime != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(OnsaleTime);
      }
      if (TargetName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(TargetName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(HeroId);
      }
      if (SellerName.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SellerName);
      }
      if (SellerId != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SellerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (GoodsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsType);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetName);
      }
      if (TargetPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPrice);
      }
      if (TargetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetTime);
      }
      if (WatchTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WatchTimes);
      }
      if (OnsaleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnsaleTime);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (SellerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SellerName);
      }
      if (SellerId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SellerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            GoodsType = input.ReadUInt32();
            break;
          }
          case 42: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 50: {
            if (pet_ == null) {
              pet_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(pet_);
            break;
          }
          case 56: {
            Price = input.ReadUInt32();
            break;
          }
          case 64: {
            Count = input.ReadUInt32();
            break;
          }
          case 72: {
            TargetId = input.ReadUInt64();
            break;
          }
          case 80: {
            TargetPrice = input.ReadUInt32();
            break;
          }
          case 88: {
            TargetTime = input.ReadUInt32();
            break;
          }
          case 96: {
            WatchTimes = input.ReadUInt32();
            break;
          }
          case 104: {
            OnsaleTime = input.ReadUInt32();
            break;
          }
          case 114: {
            TargetName = input.ReadBytes();
            break;
          }
          case 120: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 130: {
            SellerName = input.ReadBytes();
            break;
          }
          case 136: {
            SellerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class TradeBuyRecord : pb::IMessage {
    private static readonly pb::MessageParser<TradeBuyRecord> _parser = new pb::MessageParser<TradeBuyRecord>(() => new TradeBuyRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeBuyRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 5;
    private uint recordUid_;
    /// <summary>
    ///交易记录id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = value;
      }
    }

    /// <summary>Field number for the "treasure" field.</summary>
    public const int TreasureFieldNumber = 7;
    private bool treasure_;
    /// <summary>
    ///是否珍品记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Treasure {
      get { return treasure_; }
      set {
        treasure_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 2;
    private ulong coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "recordTime" field.</summary>
    public const int RecordTimeFieldNumber = 3;
    private uint recordTime_;
    /// <summary>
    ///交易时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordTime {
      get { return recordTime_; }
      set {
        recordTime_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "receiveState" field.</summary>
    public const int ReceiveStateFieldNumber = 6;
    private uint receiveState_;
    /// <summary>
    ///特权预购结果状态, 对应枚举：TradeAdvanceBuyState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceiveState {
      get { return receiveState_; }
      set {
        receiveState_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 9;
    private ulong goodsUid_;
    /// <summary>
    ///特权预购的商品uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "reqUid" field.</summary>
    public const int ReqUidFieldNumber = 10;
    private ulong reqUid_;
    /// <summary>
    ///特权预购有效，客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReqUid {
      get { return reqUid_; }
      set {
        reqUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (Coin != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Coin);
      }
      if (RecordTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RecordTime);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Color);
      }
      if (RecordUid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RecordUid);
      }
      if (ReceiveState != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ReceiveState);
      }
      if (Treasure != false) {
        output.WriteRawTag(56);
        output.WriteBool(Treasure);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Count);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(GoodsUid);
      }
      if (ReqUid != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(ReqUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordUid);
      }
      if (Treasure != false) {
        size += 1 + 1;
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Coin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
      }
      if (RecordTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordTime);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (ReceiveState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceiveState);
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (ReqUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReqUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Coin = input.ReadUInt64();
            break;
          }
          case 24: {
            RecordTime = input.ReadUInt32();
            break;
          }
          case 32: {
            Color = input.ReadUInt32();
            break;
          }
          case 40: {
            RecordUid = input.ReadUInt32();
            break;
          }
          case 48: {
            ReceiveState = input.ReadUInt32();
            break;
          }
          case 56: {
            Treasure = input.ReadBool();
            break;
          }
          case 64: {
            Count = input.ReadUInt32();
            break;
          }
          case 72: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 80: {
            ReqUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class TradeSaleRecord : pb::IMessage {
    private static readonly pb::MessageParser<TradeSaleRecord> _parser = new pb::MessageParser<TradeSaleRecord>(() => new TradeSaleRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeSaleRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 6;
    private uint recordUid_;
    /// <summary>
    ///交易记录id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = value;
      }
    }

    /// <summary>Field number for the "treasure" field.</summary>
    public const int TreasureFieldNumber = 7;
    private bool treasure_;
    /// <summary>
    ///是否珍品记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Treasure {
      get { return treasure_; }
      set {
        treasure_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 16;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 2;
    private ulong coin_;
    /// <summary>
    ///交易价格（扣税前）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "recordTime" field.</summary>
    public const int RecordTimeFieldNumber = 3;
    private uint recordTime_;
    /// <summary>
    ///交易时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordTime {
      get { return recordTime_; }
      set {
        recordTime_ = value;
      }
    }

    /// <summary>Field number for the "dealId" field.</summary>
    public const int DealIdFieldNumber = 4;
    private ulong dealId_;
    /// <summary>
    ///交易流水号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    /// <summary>Field number for the "checkStatus" field.</summary>
    public const int CheckStatusFieldNumber = 5;
    private uint checkStatus_;
    /// <summary>
    ///审核状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheckStatus {
      get { return checkStatus_; }
      set {
        checkStatus_ = value;
      }
    }

    /// <summary>Field number for the "firstDay" field.</summary>
    public const int FirstDayFieldNumber = 12;
    private uint firstDay_;
    /// <summary>
    ///一阶段解锁天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstDay {
      get { return firstDay_; }
      set {
        firstDay_ = value;
      }
    }

    /// <summary>Field number for the "totalDay" field.</summary>
    public const int TotalDayFieldNumber = 13;
    private uint totalDay_;
    /// <summary>
    ///全部解锁天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalDay {
      get { return totalDay_; }
      set {
        totalDay_ = value;
      }
    }

    /// <summary>Field number for the "firstPer" field.</summary>
    public const int FirstPerFieldNumber = 8;
    private uint firstPer_;
    /// <summary>
    ///一阶段领取百分比(0-100)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstPer {
      get { return firstPer_; }
      set {
        firstPer_ = value;
      }
    }

    /// <summary>Field number for the "receiveStep" field.</summary>
    public const int ReceiveStepFieldNumber = 9;
    private uint receiveStep_;
    /// <summary>
    ///领取状态(0-未领取, 1-已领取1阶段, 2-已领取全部)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceiveStep {
      get { return receiveStep_; }
      set {
        receiveStep_ = value;
      }
    }

    /// <summary>Field number for the "realCoin" field.</summary>
    public const int RealCoinFieldNumber = 10;
    private ulong realCoin_;
    /// <summary>
    ///实际得到金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RealCoin {
      get { return realCoin_; }
      set {
        realCoin_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 11;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "checkTime" field.</summary>
    public const int CheckTimeFieldNumber = 14;
    private uint checkTime_;
    /// <summary>
    ///订单审核时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CheckTime {
      get { return checkTime_; }
      set {
        checkTime_ = value;
      }
    }

    /// <summary>Field number for the "markStatus" field.</summary>
    public const int MarkStatusFieldNumber = 15;
    private uint markStatus_;
    /// <summary>
    ///暂时用作 申诉(复审)状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MarkStatus {
      get { return markStatus_; }
      set {
        markStatus_ = value;
      }
    }

    /// <summary>Field number for the "banmoneytime" field.</summary>
    public const int BanmoneytimeFieldNumber = 17;
    private uint banmoneytime_;
    /// <summary>
    ///kdip2.0 冻结金币时间(s) (不需展示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Banmoneytime {
      get { return banmoneytime_; }
      set {
        banmoneytime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (Coin != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Coin);
      }
      if (RecordTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RecordTime);
      }
      if (DealId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(DealId);
      }
      if (CheckStatus != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CheckStatus);
      }
      if (RecordUid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RecordUid);
      }
      if (Treasure != false) {
        output.WriteRawTag(56);
        output.WriteBool(Treasure);
      }
      if (FirstPer != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FirstPer);
      }
      if (ReceiveStep != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ReceiveStep);
      }
      if (RealCoin != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RealCoin);
      }
      if (Color != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Color);
      }
      if (FirstDay != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FirstDay);
      }
      if (TotalDay != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TotalDay);
      }
      if (CheckTime != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CheckTime);
      }
      if (MarkStatus != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MarkStatus);
      }
      if (Count != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Count);
      }
      if (Banmoneytime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Banmoneytime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordUid);
      }
      if (Treasure != false) {
        size += 1 + 1;
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Count != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Coin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
      }
      if (RecordTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordTime);
      }
      if (DealId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DealId);
      }
      if (CheckStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheckStatus);
      }
      if (FirstDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstDay);
      }
      if (TotalDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalDay);
      }
      if (FirstPer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstPer);
      }
      if (ReceiveStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceiveStep);
      }
      if (RealCoin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RealCoin);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (CheckTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheckTime);
      }
      if (MarkStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarkStatus);
      }
      if (Banmoneytime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Banmoneytime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Coin = input.ReadUInt64();
            break;
          }
          case 24: {
            RecordTime = input.ReadUInt32();
            break;
          }
          case 32: {
            DealId = input.ReadUInt64();
            break;
          }
          case 40: {
            CheckStatus = input.ReadUInt32();
            break;
          }
          case 48: {
            RecordUid = input.ReadUInt32();
            break;
          }
          case 56: {
            Treasure = input.ReadBool();
            break;
          }
          case 64: {
            FirstPer = input.ReadUInt32();
            break;
          }
          case 72: {
            ReceiveStep = input.ReadUInt32();
            break;
          }
          case 80: {
            RealCoin = input.ReadUInt64();
            break;
          }
          case 88: {
            Color = input.ReadUInt32();
            break;
          }
          case 96: {
            FirstDay = input.ReadUInt32();
            break;
          }
          case 104: {
            TotalDay = input.ReadUInt32();
            break;
          }
          case 112: {
            CheckTime = input.ReadUInt32();
            break;
          }
          case 120: {
            MarkStatus = input.ReadUInt32();
            break;
          }
          case 128: {
            Count = input.ReadUInt32();
            break;
          }
          case 136: {
            Banmoneytime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TradeAdvanceOfferData : pb::IMessage {
    private static readonly pb::MessageParser<TradeAdvanceOfferData> _parser = new pb::MessageParser<TradeAdvanceOfferData>(() => new TradeAdvanceOfferData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeAdvanceOfferData> Parser { get { return _parser; } }

    /// <summary>Field number for the "maxAdvanceOfferTimes" field.</summary>
    public const int MaxAdvanceOfferTimesFieldNumber = 4;
    private uint maxAdvanceOfferTimes_;
    /// <summary>
    ///最大预购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAdvanceOfferTimes {
      get { return maxAdvanceOfferTimes_; }
      set {
        maxAdvanceOfferTimes_ = value;
      }
    }

    /// <summary>Field number for the "lastAdvanceOfferTime" field.</summary>
    public const int LastAdvanceOfferTimeFieldNumber = 5;
    private uint lastAdvanceOfferTime_;
    /// <summary>
    ///上次预购时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastAdvanceOfferTime {
      get { return lastAdvanceOfferTime_; }
      set {
        lastAdvanceOfferTime_ = value;
      }
    }

    /// <summary>Field number for the "usedAdvanceOfferTimes" field.</summary>
    public const int UsedAdvanceOfferTimesFieldNumber = 6;
    private uint usedAdvanceOfferTimes_;
    /// <summary>
    ///已使用预购次数(过天清0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedAdvanceOfferTimes {
      get { return usedAdvanceOfferTimes_; }
      set {
        usedAdvanceOfferTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxAdvanceOfferTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxAdvanceOfferTimes);
      }
      if (LastAdvanceOfferTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastAdvanceOfferTime);
      }
      if (UsedAdvanceOfferTimes != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UsedAdvanceOfferTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxAdvanceOfferTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAdvanceOfferTimes);
      }
      if (LastAdvanceOfferTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastAdvanceOfferTime);
      }
      if (UsedAdvanceOfferTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedAdvanceOfferTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            MaxAdvanceOfferTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            LastAdvanceOfferTime = input.ReadUInt32();
            break;
          }
          case 48: {
            UsedAdvanceOfferTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上线通知玩家数据
  /// </summary>
  public sealed class CmdTradeDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeDataNtf> _parser = new pb::MessageParser<CmdTradeDataNtf>(() => new CmdTradeDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "saleGoods" field.</summary>
    public const int SaleGoodsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TradeBrief> _repeated_saleGoods_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TradeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBrief> saleGoods_ = new pbc::RepeatedField<global::Packet.TradeBrief>();
    /// <summary>
    ///自己的摊位上架信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBrief> SaleGoods {
      get { return saleGoods_; }
    }

    /// <summary>Field number for the "maxPos" field.</summary>
    public const int MaxPosFieldNumber = 3;
    private uint maxPos_;
    /// <summary>
    ///repeated TradeBrief watchGoods = 2;	//关注的商品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPos {
      get { return maxPos_; }
      set {
        maxPos_ = value;
      }
    }

    /// <summary>Field number for the "advanceOfferData" field.</summary>
    public const int AdvanceOfferDataFieldNumber = 4;
    private global::Packet.TradeAdvanceOfferData advanceOfferData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeAdvanceOfferData AdvanceOfferData {
      get { return advanceOfferData_; }
      set {
        advanceOfferData_ = value;
      }
    }

    /// <summary>Field number for the "recordVer" field.</summary>
    public const int RecordVerFieldNumber = 5;
    private uint recordVer_;
    /// <summary>
    ///交易记录版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordVer {
      get { return recordVer_; }
      set {
        recordVer_ = value;
      }
    }

    /// <summary>Field number for the "reviewUrl" field.</summary>
    public const int ReviewUrlFieldNumber = 6;
    private pb::ByteString reviewUrl_ = pb::ByteString.Empty;
    /// <summary>
    ///订单申诉接口地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReviewUrl {
      get { return reviewUrl_; }
      set {
        reviewUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      saleGoods_.WriteTo(output, _repeated_saleGoods_codec);
      if (MaxPos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPos);
      }
      if (advanceOfferData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AdvanceOfferData);
      }
      if (RecordVer != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RecordVer);
      }
      if (ReviewUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ReviewUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += saleGoods_.CalculateSize(_repeated_saleGoods_codec);
      if (MaxPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPos);
      }
      if (advanceOfferData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvanceOfferData);
      }
      if (RecordVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordVer);
      }
      if (ReviewUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReviewUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            saleGoods_.AddEntriesFrom(input, _repeated_saleGoods_codec);
            break;
          }
          case 24: {
            MaxPos = input.ReadUInt32();
            break;
          }
          case 34: {
            if (advanceOfferData_ == null) {
              advanceOfferData_ = new global::Packet.TradeAdvanceOfferData();
            }
            input.ReadMessage(advanceOfferData_);
            break;
          }
          case 40: {
            RecordVer = input.ReadUInt32();
            break;
          }
          case 50: {
            ReviewUrl = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本地版本号不一致时,获取完整交易记录
  /// </summary>
  public sealed class CmdTradeGetRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeGetRecordReq> _parser = new pb::MessageParser<CmdTradeGetRecordReq>(() => new CmdTradeGetRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeGetRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTradeGetRecordRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeGetRecordRes> _parser = new pb::MessageParser<CmdTradeGetRecordRes>(() => new CmdTradeGetRecordRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeGetRecordRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "saleRecord" field.</summary>
    public const int SaleRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TradeSaleRecord> _repeated_saleRecord_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TradeSaleRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeSaleRecord> saleRecord_ = new pbc::RepeatedField<global::Packet.TradeSaleRecord>();
    /// <summary>
    ///所有交易记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeSaleRecord> SaleRecord {
      get { return saleRecord_; }
    }

    /// <summary>Field number for the "buyRecord" field.</summary>
    public const int BuyRecordFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TradeBuyRecord> _repeated_buyRecord_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TradeBuyRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBuyRecord> buyRecord_ = new pbc::RepeatedField<global::Packet.TradeBuyRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBuyRecord> BuyRecord {
      get { return buyRecord_; }
    }

    /// <summary>Field number for the "recordVer" field.</summary>
    public const int RecordVerFieldNumber = 3;
    private uint recordVer_;
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordVer {
      get { return recordVer_; }
      set {
        recordVer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      saleRecord_.WriteTo(output, _repeated_saleRecord_codec);
      buyRecord_.WriteTo(output, _repeated_buyRecord_codec);
      if (RecordVer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RecordVer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += saleRecord_.CalculateSize(_repeated_saleRecord_codec);
      size += buyRecord_.CalculateSize(_repeated_buyRecord_codec);
      if (RecordVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordVer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            saleRecord_.AddEntriesFrom(input, _repeated_saleRecord_codec);
            break;
          }
          case 18: {
            buyRecord_.AddEntriesFrom(input, _repeated_buyRecord_codec);
            break;
          }
          case 24: {
            RecordVer = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeRecordUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeRecordUpdateNtf> _parser = new pb::MessageParser<CmdTradeRecordUpdateNtf>(() => new CmdTradeRecordUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeRecordUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "recordVer" field.</summary>
    public const int RecordVerFieldNumber = 1;
    private uint recordVer_;
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordVer {
      get { return recordVer_; }
      set {
        recordVer_ = value;
      }
    }

    /// <summary>Field number for the "updateList" field.</summary>
    public const int UpdateListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdTradeRecordUpdateNtf.Types.RecordUpdate> _repeated_updateList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdTradeRecordUpdateNtf.Types.RecordUpdate.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdTradeRecordUpdateNtf.Types.RecordUpdate> updateList_ = new pbc::RepeatedField<global::Packet.CmdTradeRecordUpdateNtf.Types.RecordUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdTradeRecordUpdateNtf.Types.RecordUpdate> UpdateList {
      get { return updateList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordVer != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordVer);
      }
      updateList_.WriteTo(output, _repeated_updateList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordVer);
      }
      size += updateList_.CalculateSize(_repeated_updateList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordVer = input.ReadUInt32();
            break;
          }
          case 18: {
            updateList_.AddEntriesFrom(input, _repeated_updateList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTradeRecordUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum Type {
        Add = 0,
        Mod = 1,
        Remove = 2,
      }

      public sealed class RecordUpdate : pb::IMessage {
        private static readonly pb::MessageParser<RecordUpdate> _parser = new pb::MessageParser<RecordUpdate>(() => new RecordUpdate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordUpdate> Parser { get { return _parser; } }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Packet.CmdTradeRecordUpdateNtf.Types.Type type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.CmdTradeRecordUpdateNtf.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "saleRecord" field.</summary>
        public const int SaleRecordFieldNumber = 2;
        private global::Packet.TradeSaleRecord saleRecord_;
        /// <summary>
        ///下列记录只有一条有效, remove时只填充其中recordUid和treasure字段
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.TradeSaleRecord SaleRecord {
          get { return saleRecord_; }
          set {
            saleRecord_ = value;
          }
        }

        /// <summary>Field number for the "buyRecord" field.</summary>
        public const int BuyRecordFieldNumber = 4;
        private global::Packet.TradeBuyRecord buyRecord_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.TradeBuyRecord BuyRecord {
          get { return buyRecord_; }
          set {
            buyRecord_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (saleRecord_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SaleRecord);
          }
          if (buyRecord_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(BuyRecord);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (saleRecord_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SaleRecord);
          }
          if (buyRecord_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuyRecord);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::Packet.CmdTradeRecordUpdateNtf.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                if (saleRecord_ == null) {
                  saleRecord_ = new global::Packet.TradeSaleRecord();
                }
                input.ReadMessage(saleRecord_);
                break;
              }
              case 34: {
                if (buyRecord_ == null) {
                  buyRecord_ = new global::Packet.TradeBuyRecord();
                }
                input.ReadMessage(buyRecord_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///取回售卖冻结金币
  /// </summary>
  public sealed class CmdTradeGetSaleCoinReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeGetSaleCoinReq> _parser = new pb::MessageParser<CmdTradeGetSaleCoinReq>(() => new CmdTradeGetSaleCoinReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeGetSaleCoinReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dealId" field.</summary>
    public const int DealIdFieldNumber = 1;
    private ulong dealId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DealId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DealId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DealId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DealId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DealId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeGetSaleCoinRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeGetSaleCoinRes> _parser = new pb::MessageParser<CmdTradeGetSaleCoinRes>(() => new CmdTradeGetSaleCoinRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeGetSaleCoinRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "dealId" field.</summary>
    public const int DealIdFieldNumber = 1;
    private ulong dealId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    /// <summary>Field number for the "receiveStep" field.</summary>
    public const int ReceiveStepFieldNumber = 2;
    private uint receiveStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceiveStep {
      get { return receiveStep_; }
      set {
        receiveStep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DealId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DealId);
      }
      if (ReceiveStep != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReceiveStep);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DealId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DealId);
      }
      if (ReceiveStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceiveStep);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DealId = input.ReadUInt64();
            break;
          }
          case 16: {
            ReceiveStep = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeCheckInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeCheckInfoReq> _parser = new pb::MessageParser<CmdTradeCheckInfoReq>(() => new CmdTradeCheckInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeCheckInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTradeCheckInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeCheckInfoRes> _parser = new pb::MessageParser<CmdTradeCheckInfoRes>(() => new CmdTradeCheckInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeCheckInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasCheckGoods" field.</summary>
    public const int HasCheckGoodsFieldNumber = 1;
    private bool hasCheckGoods_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCheckGoods {
      get { return hasCheckGoods_; }
      set {
        hasCheckGoods_ = value;
      }
    }

    /// <summary>Field number for the "tradeLimitEndTime" field.</summary>
    public const int TradeLimitEndTimeFieldNumber = 2;
    private uint tradeLimitEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeLimitEndTime {
      get { return tradeLimitEndTime_; }
      set {
        tradeLimitEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCheckGoods != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasCheckGoods);
      }
      if (TradeLimitEndTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TradeLimitEndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCheckGoods != false) {
        size += 1 + 1;
      }
      if (TradeLimitEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeLimitEndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasCheckGoods = input.ReadBool();
            break;
          }
          case 16: {
            TradeLimitEndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeLimitTradeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeLimitTradeNtf> _parser = new pb::MessageParser<CmdTradeLimitTradeNtf>(() => new CmdTradeLimitTradeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeLimitTradeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "tradeLimitEndTime" field.</summary>
    public const int TradeLimitEndTimeFieldNumber = 1;
    private uint tradeLimitEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeLimitEndTime {
      get { return tradeLimitEndTime_; }
      set {
        tradeLimitEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeLimitEndTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TradeLimitEndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeLimitEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeLimitEndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TradeLimitEndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeMaxPosNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeMaxPosNtf> _parser = new pb::MessageParser<CmdTradeMaxPosNtf>(() => new CmdTradeMaxPosNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeMaxPosNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "maxPos" field.</summary>
    public const int MaxPosFieldNumber = 1;
    private uint maxPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPos {
      get { return maxPos_; }
      set {
        maxPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上架物品更新通知
  /// </summary>
  public sealed class CmdTradeOnSaleUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOnSaleUpdateNtf> _parser = new pb::MessageParser<CmdTradeOnSaleUpdateNtf>(() => new CmdTradeOnSaleUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOnSaleUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Packet.CmdTradeOnSaleUpdateNtf.Types.Op op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTradeOnSaleUpdateNtf.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 2;
    private global::Packet.TradeBrief goods_;
    /// <summary>
    ///Remove时只填充goodsUid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeBrief Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (goods_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            op_ = (global::Packet.CmdTradeOnSaleUpdateNtf.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (goods_ == null) {
              goods_ = new global::Packet.TradeBrief();
            }
            input.ReadMessage(goods_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTradeOnSaleUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum Op {
        Add = 0,
        Update = 1,
        Remove = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///查询某列表具体(在售,议价)or公示数量
  /// </summary>
  public sealed class CmdTradeSaleCountReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeSaleCountReq> _parser = new pb::MessageParser<CmdTradeSaleCountReq>(() => new CmdTradeSaleCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeSaleCountReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "listId" field.</summary>
    public const int ListIdFieldNumber = 2;
    private uint listId_;
    /// <summary>
    ///商品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ListId {
      get { return listId_; }
      set {
        listId_ = value;
      }
    }

    /// <summary>Field number for the "publicity" field.</summary>
    public const int PublicityFieldNumber = 3;
    private bool publicity_;
    /// <summary>
    /// false:在售+议价, true:公示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Publicity {
      get { return publicity_; }
      set {
        publicity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (ListId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ListId);
      }
      if (Publicity != false) {
        output.WriteRawTag(24);
        output.WriteBool(Publicity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (ListId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListId);
      }
      if (Publicity != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            ListId = input.ReadUInt32();
            break;
          }
          case 24: {
            Publicity = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeSaleCountRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeSaleCountRes> _parser = new pb::MessageParser<CmdTradeSaleCountRes>(() => new CmdTradeSaleCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeSaleCountRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "listId" field.</summary>
    public const int ListIdFieldNumber = 2;
    private uint listId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ListId {
      get { return listId_; }
      set {
        listId_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.CmdTradeSaleCountRes.Types.Info> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.CmdTradeSaleCountRes.Types.Info.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdTradeSaleCountRes.Types.Info> infos_ = new pbc::RepeatedField<global::Packet.CmdTradeSaleCountRes.Types.Info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdTradeSaleCountRes.Types.Info> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "publicity" field.</summary>
    public const int PublicityFieldNumber = 4;
    private bool publicity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Publicity {
      get { return publicity_; }
      set {
        publicity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (ListId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ListId);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (Publicity != false) {
        output.WriteRawTag(32);
        output.WriteBool(Publicity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (ListId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListId);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (Publicity != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            ListId = input.ReadUInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 32: {
            Publicity = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTradeSaleCountRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Info : pb::IMessage {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        /// <summary>Field number for the "category" field.</summary>
        public const int CategoryFieldNumber = 1;
        private uint category_;
        /// <summary>
        ///商品分类
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Category {
          get { return category_; }
          set {
            category_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Category != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Category);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Category != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Category = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///查询某列表具体(在售,议价)or公示数量
  /// </summary>
  public sealed class CmdTradeSaleReviewReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeSaleReviewReq> _parser = new pb::MessageParser<CmdTradeSaleReviewReq>(() => new CmdTradeSaleReviewReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeSaleReviewReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "sellerId" field.</summary>
    public const int SellerIdFieldNumber = 1;
    private ulong sellerId_;
    /// <summary>
    ///卖家roleId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SellerId {
      get { return sellerId_; }
      set {
        sellerId_ = value;
      }
    }

    /// <summary>Field number for the "dealId" field.</summary>
    public const int DealIdFieldNumber = 2;
    private ulong dealId_;
    /// <summary>
    ///订单id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SellerId);
      }
      if (DealId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DealId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SellerId);
      }
      if (DealId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DealId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SellerId = input.ReadUInt64();
            break;
          }
          case 16: {
            DealId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeSaleReviewRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeSaleReviewRes> _parser = new pb::MessageParser<CmdTradeSaleReviewRes>(() => new CmdTradeSaleReviewRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeSaleReviewRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "dealId" field.</summary>
    public const int DealIdFieldNumber = 1;
    private ulong dealId_;
    /// <summary>
    ///订单id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    /// <summary>Field number for the "reviewStatus" field.</summary>
    public const int ReviewStatusFieldNumber = 2;
    private uint reviewStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReviewStatus {
      get { return reviewStatus_; }
      set {
        reviewStatus_ = value;
      }
    }

    /// <summary>Field number for the "reviewUrl" field.</summary>
    public const int ReviewUrlFieldNumber = 3;
    private pb::ByteString reviewUrl_ = pb::ByteString.Empty;
    /// <summary>
    ///订单申诉接口地址 已废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReviewUrl {
      get { return reviewUrl_; }
      set {
        reviewUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DealId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DealId);
      }
      if (ReviewStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReviewStatus);
      }
      if (ReviewUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ReviewUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DealId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DealId);
      }
      if (ReviewStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReviewStatus);
      }
      if (ReviewUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReviewUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DealId = input.ReadUInt64();
            break;
          }
          case 16: {
            ReviewStatus = input.ReadUInt32();
            break;
          }
          case 26: {
            ReviewUrl = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备属性>=
  /// </summary>
  public sealed class SearchAttrParam : pb::IMessage {
    private static readonly pb::MessageParser<SearchAttrParam> _parser = new pb::MessageParser<SearchAttrParam>(() => new SearchAttrParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchAttrParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private uint attrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "addSmelt" field.</summary>
    public const int AddSmeltFieldNumber = 3;
    private bool addSmelt_;
    /// <summary>
    ///是否包含熔炼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AddSmelt {
      get { return addSmelt_; }
      set {
        addSmelt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (AddSmelt != false) {
        output.WriteRawTag(24);
        output.WriteBool(AddSmelt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (AddSmelt != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrId = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            AddSmelt = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备绿字属性之和>=
  /// </summary>
  public sealed class SearchGreenParam : pb::IMessage {
    private static readonly pb::MessageParser<SearchGreenParam> _parser = new pb::MessageParser<SearchGreenParam>(() => new SearchGreenParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchGreenParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_attrId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> attrId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AttrId {
      get { return attrId_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "addSmelt" field.</summary>
    public const int AddSmeltFieldNumber = 3;
    private bool addSmelt_;
    /// <summary>
    ///是否包含熔炼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AddSmelt {
      get { return addSmelt_; }
      set {
        addSmelt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attrId_.WriteTo(output, _repeated_attrId_codec);
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (AddSmelt != false) {
        output.WriteRawTag(24);
        output.WriteBool(AddSmelt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attrId_.CalculateSize(_repeated_attrId_codec);
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (AddSmelt != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            attrId_.AddEntriesFrom(input, _repeated_attrId_codec);
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            AddSmelt = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///搜索
  /// </summary>
  public sealed class TradeSearchEquipParam : pb::IMessage {
    private static readonly pb::MessageParser<TradeSearchEquipParam> _parser = new pb::MessageParser<TradeSearchEquipParam>(() => new TradeSearchEquipParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeSearchEquipParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "minPrice" field.</summary>
    public const int MinPriceFieldNumber = 2;
    private global::Packet.UInt32Value minPrice_;
    /// <summary>
    ///uint32 infoId = 1; //商品表id 填充在listReq中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MinPrice {
      get { return minPrice_; }
      set {
        minPrice_ = value;
      }
    }

    /// <summary>Field number for the "maxPrice" field.</summary>
    public const int MaxPriceFieldNumber = 3;
    private global::Packet.UInt32Value maxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    /// <summary>Field number for the "effectPassiveId" field.</summary>
    public const int EffectPassiveIdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_effectPassiveId_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> effectPassiveId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///特效属性（被动技能id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EffectPassiveId {
      get { return effectPassiveId_; }
    }

    /// <summary>Field number for the "baseParams" field.</summary>
    public const int BaseParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.SearchAttrParam> _repeated_baseParams_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.SearchAttrParam.Parser);
    private readonly pbc::RepeatedField<global::Packet.SearchAttrParam> baseParams_ = new pbc::RepeatedField<global::Packet.SearchAttrParam>();
    /// <summary>
    ///基本属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SearchAttrParam> BaseParams {
      get { return baseParams_; }
    }

    /// <summary>Field number for the "greeParams" field.</summary>
    public const int GreeParamsFieldNumber = 6;
    private global::Packet.SearchGreenParam greeParams_;
    /// <summary>
    ///绿字属性(附加属性)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SearchGreenParam GreeParams {
      get { return greeParams_; }
      set {
        greeParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minPrice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinPrice);
      }
      if (maxPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxPrice);
      }
      effectPassiveId_.WriteTo(output, _repeated_effectPassiveId_codec);
      baseParams_.WriteTo(output, _repeated_baseParams_codec);
      if (greeParams_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GreeParams);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPrice);
      }
      if (maxPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPrice);
      }
      size += effectPassiveId_.CalculateSize(_repeated_effectPassiveId_codec);
      size += baseParams_.CalculateSize(_repeated_baseParams_codec);
      if (greeParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GreeParams);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (minPrice_ == null) {
              minPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(minPrice_);
            break;
          }
          case 26: {
            if (maxPrice_ == null) {
              maxPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(maxPrice_);
            break;
          }
          case 34:
          case 32: {
            effectPassiveId_.AddEntriesFrom(input, _repeated_effectPassiveId_codec);
            break;
          }
          case 42: {
            baseParams_.AddEntriesFrom(input, _repeated_baseParams_codec);
            break;
          }
          case 50: {
            if (greeParams_ == null) {
              greeParams_ = new global::Packet.SearchGreenParam();
            }
            input.ReadMessage(greeParams_);
            break;
          }
        }
      }
    }

  }

  public sealed class TradeSearchPetParam : pb::IMessage {
    private static readonly pb::MessageParser<TradeSearchPetParam> _parser = new pb::MessageParser<TradeSearchPetParam>(() => new TradeSearchPetParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeSearchPetParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "minPrice" field.</summary>
    public const int MinPriceFieldNumber = 2;
    private global::Packet.UInt32Value minPrice_;
    /// <summary>
    ///bool rare = 1;	//是否稀有宠物 //废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MinPrice {
      get { return minPrice_; }
      set {
        minPrice_ = value;
      }
    }

    /// <summary>Field number for the "maxPrice" field.</summary>
    public const int MaxPriceFieldNumber = 3;
    private global::Packet.UInt32Value maxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    /// <summary>Field number for the "lostGrade" field.</summary>
    public const int LostGradeFieldNumber = 14;
    private global::Packet.UInt32Value lostGrade_;
    /// <summary>
    ///UInt32Value growth = 4; //废弃
    ///UInt32Value vitGrade = 5; //废弃
    ///UInt32Value snhGrade = 6; //废弃
    ///UInt32Value intenGrade = 7; //废弃
    ///UInt32Value speedGrade = 8; //废弃
    ///UInt32Value magicGrade = 9; //废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value LostGrade {
      get { return lostGrade_; }
      set {
        lostGrade_ = value;
      }
    }

    /// <summary>Field number for the "containSkills" field.</summary>
    public const int ContainSkillsFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_containSkills_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> containSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///改造技能(带等级信息,完整id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ContainSkills {
      get { return containSkills_; }
    }

    /// <summary>Field number for the "petSkills" field.</summary>
    public const int PetSkillsFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_petSkills_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> petSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///宠物技能(不带等级信息的id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PetSkills {
      get { return petSkills_; }
    }

    /// <summary>Field number for the "skillCount" field.</summary>
    public const int SkillCountFieldNumber = 11;
    private global::Packet.UInt32Value skillCount_;
    /// <summary>
    ///技能总数>=
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value SkillCount {
      get { return skillCount_; }
      set {
        skillCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minPrice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinPrice);
      }
      if (maxPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxPrice);
      }
      containSkills_.WriteTo(output, _repeated_containSkills_codec);
      if (skillCount_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SkillCount);
      }
      petSkills_.WriteTo(output, _repeated_petSkills_codec);
      if (lostGrade_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LostGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPrice);
      }
      if (maxPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPrice);
      }
      if (lostGrade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LostGrade);
      }
      size += containSkills_.CalculateSize(_repeated_containSkills_codec);
      size += petSkills_.CalculateSize(_repeated_petSkills_codec);
      if (skillCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkillCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (minPrice_ == null) {
              minPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(minPrice_);
            break;
          }
          case 26: {
            if (maxPrice_ == null) {
              maxPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(maxPrice_);
            break;
          }
          case 82:
          case 80: {
            containSkills_.AddEntriesFrom(input, _repeated_containSkills_codec);
            break;
          }
          case 90: {
            if (skillCount_ == null) {
              skillCount_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(skillCount_);
            break;
          }
          case 106:
          case 104: {
            petSkills_.AddEntriesFrom(input, _repeated_petSkills_codec);
            break;
          }
          case 114: {
            if (lostGrade_ == null) {
              lostGrade_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(lostGrade_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物元核搜索参数
  /// </summary>
  public sealed class TradeSearchPetEquipParam : pb::IMessage {
    private static readonly pb::MessageParser<TradeSearchPetEquipParam> _parser = new pb::MessageParser<TradeSearchPetEquipParam>(() => new TradeSearchPetEquipParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeSearchPetEquipParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "minPrice" field.</summary>
    public const int MinPriceFieldNumber = 2;
    private global::Packet.UInt32Value minPrice_;
    /// <summary>
    ///不填为不限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MinPrice {
      get { return minPrice_; }
      set {
        minPrice_ = value;
      }
    }

    /// <summary>Field number for the "maxPrice" field.</summary>
    public const int MaxPriceFieldNumber = 3;
    private global::Packet.UInt32Value maxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    /// <summary>Field number for the "baseParams" field.</summary>
    public const int BaseParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TradeSearchPetEquipParam.Types.AttrParam> _repeated_baseParams_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TradeSearchPetEquipParam.Types.AttrParam.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeSearchPetEquipParam.Types.AttrParam> baseParams_ = new pbc::RepeatedField<global::Packet.TradeSearchPetEquipParam.Types.AttrParam>();
    /// <summary>
    ///基础属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeSearchPetEquipParam.Types.AttrParam> BaseParams {
      get { return baseParams_; }
    }

    /// <summary>Field number for the "suitSkill" field.</summary>
    public const int SuitSkillFieldNumber = 5;
    private global::Packet.UInt32Value suitSkill_;
    /// <summary>
    /// 套装技能id选择后，外观id只能选对应的或留空
    /// 外观id选择后，不能再选套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value SuitSkill {
      get { return suitSkill_; }
      set {
        suitSkill_ = value;
      }
    }

    /// <summary>Field number for the "suitAppearance" field.</summary>
    public const int SuitAppearanceFieldNumber = 6;
    private global::Packet.UInt32Value suitAppearance_;
    /// <summary>
    ///套装外观id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value SuitAppearance {
      get { return suitAppearance_; }
      set {
        suitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "effectPassiveId" field.</summary>
    public const int EffectPassiveIdFieldNumber = 7;
    private global::Packet.UInt32Value effectPassiveId_;
    /// <summary>
    ///特效技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value EffectPassiveId {
      get { return effectPassiveId_; }
      set {
        effectPassiveId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minPrice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinPrice);
      }
      if (maxPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxPrice);
      }
      baseParams_.WriteTo(output, _repeated_baseParams_codec);
      if (suitSkill_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SuitSkill);
      }
      if (suitAppearance_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SuitAppearance);
      }
      if (effectPassiveId_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EffectPassiveId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPrice);
      }
      if (maxPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPrice);
      }
      size += baseParams_.CalculateSize(_repeated_baseParams_codec);
      if (suitSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuitSkill);
      }
      if (suitAppearance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuitAppearance);
      }
      if (effectPassiveId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectPassiveId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (minPrice_ == null) {
              minPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(minPrice_);
            break;
          }
          case 26: {
            if (maxPrice_ == null) {
              maxPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(maxPrice_);
            break;
          }
          case 34: {
            baseParams_.AddEntriesFrom(input, _repeated_baseParams_codec);
            break;
          }
          case 42: {
            if (suitSkill_ == null) {
              suitSkill_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(suitSkill_);
            break;
          }
          case 50: {
            if (suitAppearance_ == null) {
              suitAppearance_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(suitAppearance_);
            break;
          }
          case 58: {
            if (effectPassiveId_ == null) {
              effectPassiveId_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(effectPassiveId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TradeSearchPetEquipParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AttrParam : pb::IMessage {
        private static readonly pb::MessageParser<AttrParam> _parser = new pb::MessageParser<AttrParam>(() => new AttrParam());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttrParam> Parser { get { return _parser; } }

        /// <summary>Field number for the "attrId" field.</summary>
        public const int AttrIdFieldNumber = 1;
        private uint attrId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrId {
          get { return attrId_; }
          set {
            attrId_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private int value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AttrId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AttrId);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AttrId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AttrId = input.ReadUInt32();
                break;
              }
              case 16: {
                Value = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///饰品搜索参数
  /// </summary>
  public sealed class TradeSearchOrnamentParam : pb::IMessage {
    private static readonly pb::MessageParser<TradeSearchOrnamentParam> _parser = new pb::MessageParser<TradeSearchOrnamentParam>(() => new TradeSearchOrnamentParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeSearchOrnamentParam> Parser { get { return _parser; } }

    /// <summary>Field number for the "minPrice" field.</summary>
    public const int MinPriceFieldNumber = 2;
    private global::Packet.UInt32Value minPrice_;
    /// <summary>
    ///不填为不限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MinPrice {
      get { return minPrice_; }
      set {
        minPrice_ = value;
      }
    }

    /// <summary>Field number for the "maxPrice" field.</summary>
    public const int MaxPriceFieldNumber = 3;
    private global::Packet.UInt32Value maxPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    /// <summary>Field number for the "extParams" field.</summary>
    public const int ExtParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TradeSearchOrnamentParam.Types.ExtParam> _repeated_extParams_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TradeSearchOrnamentParam.Types.ExtParam.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeSearchOrnamentParam.Types.ExtParam> extParams_ = new pbc::RepeatedField<global::Packet.TradeSearchOrnamentParam.Types.ExtParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeSearchOrnamentParam.Types.ExtParam> ExtParams {
      get { return extParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minPrice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinPrice);
      }
      if (maxPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaxPrice);
      }
      extParams_.WriteTo(output, _repeated_extParams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPrice);
      }
      if (maxPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPrice);
      }
      size += extParams_.CalculateSize(_repeated_extParams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (minPrice_ == null) {
              minPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(minPrice_);
            break;
          }
          case 26: {
            if (maxPrice_ == null) {
              maxPrice_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(maxPrice_);
            break;
          }
          case 34: {
            extParams_.AddEntriesFrom(input, _repeated_extParams_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TradeSearchOrnamentParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ExtParam : pb::IMessage {
        private static readonly pb::MessageParser<ExtParam> _parser = new pb::MessageParser<ExtParam>(() => new ExtParam());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExtParam> Parser { get { return _parser; } }

        /// <summary>Field number for the "isSkill" field.</summary>
        public const int IsSkillFieldNumber = 1;
        private bool isSkill_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSkill {
          get { return isSkill_; }
          set {
            isSkill_ = value;
          }
        }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 2;
        private uint infoId_;
        /// <summary>
        ///属性id 或 技能id(不带等级)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private int value_;
        /// <summary>
        ///普通数值，或千分比数值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (IsSkill != false) {
            output.WriteRawTag(8);
            output.WriteBool(IsSkill);
          }
          if (InfoId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(InfoId);
          }
          if (Value != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IsSkill != false) {
            size += 1 + 1;
          }
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                IsSkill = input.ReadBool();
                break;
              }
              case 16: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 24: {
                Value = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///某商品具体在售列表
  /// </summary>
  public sealed class CmdTradeListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeListReq> _parser = new pb::MessageParser<CmdTradeListReq>(() => new CmdTradeListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    /// <summary>
    ///本服or跨服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "showType" field.</summary>
    public const int ShowTypeFieldNumber = 2;
    private uint showType_;
    /// <summary>
    ///在售，公示，议价 (TradeShowType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowType {
      get { return showType_; }
      set {
        showType_ = value;
      }
    }

    /// <summary>Field number for the "downRank" field.</summary>
    public const int DownRankFieldNumber = 3;
    private bool downRank_;
    /// <summary>
    ///是否降序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DownRank {
      get { return downRank_; }
      set {
        downRank_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 4;
    private uint page_;
    /// <summary>
    ///页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "searchType" field.</summary>
    public const int SearchTypeFieldNumber = 7;
    private uint searchType_;
    /// <summary>
    ///搜索类型 (TradeSearchType)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SearchType {
      get { return searchType_; }
      set {
        searchType_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 8;
    private uint infoId_;
    /// <summary>
    /// 按infoId搜索参数, 或高级搜索填充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 5;
    private uint category_;
    /// <summary>
    /// 按分类-子类搜索参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "subclass" field.</summary>
    public const int SubclassFieldNumber = 6;
    private uint subclass_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subclass {
      get { return subclass_; }
      set {
        subclass_ = value;
      }
    }

    /// <summary>Field number for the "shareUid" field.</summary>
    public const int ShareUidFieldNumber = 11;
    private ulong shareUid_;
    /// <summary>
    /// 分享的商品goodsUid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShareUid {
      get { return shareUid_; }
      set {
        shareUid_ = value;
      }
    }

    /// <summary>Field number for the "equipParam" field.</summary>
    public const int EquipParamFieldNumber = 9;
    private global::Packet.TradeSearchEquipParam equipParam_;
    /// <summary>
    ///高级搜索参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeSearchEquipParam EquipParam {
      get { return equipParam_; }
      set {
        equipParam_ = value;
      }
    }

    /// <summary>Field number for the "petParam" field.</summary>
    public const int PetParamFieldNumber = 10;
    private global::Packet.TradeSearchPetParam petParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeSearchPetParam PetParam {
      get { return petParam_; }
      set {
        petParam_ = value;
      }
    }

    /// <summary>Field number for the "petEquipParam" field.</summary>
    public const int PetEquipParamFieldNumber = 12;
    private global::Packet.TradeSearchPetEquipParam petEquipParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeSearchPetEquipParam PetEquipParam {
      get { return petEquipParam_; }
      set {
        petEquipParam_ = value;
      }
    }

    /// <summary>Field number for the "ornamentParam" field.</summary>
    public const int OrnamentParamFieldNumber = 13;
    private global::Packet.TradeSearchOrnamentParam ornamentParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeSearchOrnamentParam OrnamentParam {
      get { return ornamentParam_; }
      set {
        ornamentParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (ShowType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShowType);
      }
      if (DownRank != false) {
        output.WriteRawTag(24);
        output.WriteBool(DownRank);
      }
      if (Page != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Page);
      }
      if (Category != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Category);
      }
      if (Subclass != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Subclass);
      }
      if (SearchType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SearchType);
      }
      if (InfoId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(InfoId);
      }
      if (equipParam_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EquipParam);
      }
      if (petParam_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(PetParam);
      }
      if (ShareUid != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(ShareUid);
      }
      if (petEquipParam_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PetEquipParam);
      }
      if (ornamentParam_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(OrnamentParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (ShowType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowType);
      }
      if (DownRank != false) {
        size += 1 + 1;
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (SearchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SearchType);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
      }
      if (Subclass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Subclass);
      }
      if (ShareUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShareUid);
      }
      if (equipParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipParam);
      }
      if (petParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetParam);
      }
      if (petEquipParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetEquipParam);
      }
      if (ornamentParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrnamentParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            ShowType = input.ReadUInt32();
            break;
          }
          case 24: {
            DownRank = input.ReadBool();
            break;
          }
          case 32: {
            Page = input.ReadUInt32();
            break;
          }
          case 40: {
            Category = input.ReadUInt32();
            break;
          }
          case 48: {
            Subclass = input.ReadUInt32();
            break;
          }
          case 56: {
            SearchType = input.ReadUInt32();
            break;
          }
          case 64: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 74: {
            if (equipParam_ == null) {
              equipParam_ = new global::Packet.TradeSearchEquipParam();
            }
            input.ReadMessage(equipParam_);
            break;
          }
          case 82: {
            if (petParam_ == null) {
              petParam_ = new global::Packet.TradeSearchPetParam();
            }
            input.ReadMessage(petParam_);
            break;
          }
          case 88: {
            ShareUid = input.ReadUInt64();
            break;
          }
          case 98: {
            if (petEquipParam_ == null) {
              petEquipParam_ = new global::Packet.TradeSearchPetEquipParam();
            }
            input.ReadMessage(petEquipParam_);
            break;
          }
          case 106: {
            if (ornamentParam_ == null) {
              ornamentParam_ = new global::Packet.TradeSearchOrnamentParam();
            }
            input.ReadMessage(ornamentParam_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeListRes> _parser = new pb::MessageParser<CmdTradeListRes>(() => new CmdTradeListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "maxPage" field.</summary>
    public const int MaxPageFieldNumber = 3;
    private uint maxPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPage {
      get { return maxPage_; }
      set {
        maxPage_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.TradeBrief> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.TradeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBrief> goods_ = new pbc::RepeatedField<global::Packet.TradeBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBrief> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "searchType" field.</summary>
    public const int SearchTypeFieldNumber = 9;
    private uint searchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SearchType {
      get { return searchType_; }
      set {
        searchType_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 10;
    private uint infoId_;
    /// <summary>
    /// 按infoId搜索参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 5;
    private uint category_;
    /// <summary>
    ///商品分类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "subclass" field.</summary>
    public const int SubclassFieldNumber = 6;
    private uint subclass_;
    /// <summary>
    ///子类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subclass {
      get { return subclass_; }
      set {
        subclass_ = value;
      }
    }

    /// <summary>Field number for the "shareUid" field.</summary>
    public const int ShareUidFieldNumber = 11;
    private ulong shareUid_;
    /// <summary>
    /// 分享的商品goodsUid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShareUid {
      get { return shareUid_; }
      set {
        shareUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Page);
      }
      if (MaxPage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPage);
      }
      if (Category != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Category);
      }
      if (Subclass != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Subclass);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      if (SearchType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SearchType);
      }
      if (InfoId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(InfoId);
      }
      if (ShareUid != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(ShareUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (MaxPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPage);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (SearchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SearchType);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
      }
      if (Subclass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Subclass);
      }
      if (ShareUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShareUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            Page = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxPage = input.ReadUInt32();
            break;
          }
          case 40: {
            Category = input.ReadUInt32();
            break;
          }
          case 48: {
            Subclass = input.ReadUInt32();
            break;
          }
          case 58: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 72: {
            SearchType = input.ReadUInt32();
            break;
          }
          case 80: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 88: {
            ShareUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取商品详细信息
  /// </summary>
  public sealed class CmdTradeDetailInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeDetailInfoReq> _parser = new pb::MessageParser<CmdTradeDetailInfoReq>(() => new CmdTradeDetailInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeDetailInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeDetailInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeDetailInfoRes> _parser = new pb::MessageParser<CmdTradeDetailInfoRes>(() => new CmdTradeDetailInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeDetailInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 1;
    private global::Packet.TradeItem goods_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeItem Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (goods_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (goods_ == null) {
              goods_ = new global::Packet.TradeItem();
            }
            input.ReadMessage(goods_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查看商品比价信息（最低5个售价)
  /// </summary>
  public sealed class CmdTradeComparePriceReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeComparePriceReq> _parser = new pb::MessageParser<CmdTradeComparePriceReq>(() => new CmdTradeComparePriceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeComparePriceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeComparePriceRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeComparePriceRes> _parser = new pb::MessageParser<CmdTradeComparePriceRes>(() => new CmdTradeComparePriceRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeComparePriceRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "recommendPrice" field.</summary>
    public const int RecommendPriceFieldNumber = 2;
    private uint recommendPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecommendPrice {
      get { return recommendPrice_; }
      set {
        recommendPrice_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.TradeBrief> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.TradeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBrief> goods_ = new pbc::RepeatedField<global::Packet.TradeBrief>();
    /// <summary>
    ///5条在售信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBrief> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "publicGoods" field.</summary>
    public const int PublicGoodsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TradeBrief> _repeated_publicGoods_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TradeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBrief> publicGoods_ = new pbc::RepeatedField<global::Packet.TradeBrief>();
    /// <summary>
    ///5条公示信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBrief> PublicGoods {
      get { return publicGoods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (RecommendPrice != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecommendPrice);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      publicGoods_.WriteTo(output, _repeated_publicGoods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (RecommendPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecommendPrice);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      size += publicGoods_.CalculateSize(_repeated_publicGoods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            RecommendPrice = input.ReadUInt32();
            break;
          }
          case 26: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 34: {
            publicGoods_.AddEntriesFrom(input, _repeated_publicGoods_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上架商品
  /// </summary>
  public sealed class CmdTradeOnSaleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOnSaleReq> _parser = new pb::MessageParser<CmdTradeOnSaleReq>(() => new CmdTradeOnSaleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOnSaleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private ulong uid_;
    /// <summary>
    ///对应道具或宠物的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "salePrice" field.</summary>
    public const int SalePriceFieldNumber = 4;
    private uint salePrice_;
    /// <summary>
    ///上架价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SalePrice {
      get { return salePrice_; }
      set {
        salePrice_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    /// <summary>
    ///上架数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "discuss" field.</summary>
    public const int DiscussFieldNumber = 6;
    private bool discuss_;
    /// <summary>
    ///以下为特殊上架的参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Discuss {
      get { return discuss_; }
      set {
        discuss_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 7;
    private ulong targetId_;
    /// <summary>
    ///指定交易的对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "targetPrice" field.</summary>
    public const int TargetPriceFieldNumber = 8;
    private uint targetPrice_;
    /// <summary>
    ///指定交易价格(此时salePrice为一口价价格)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetPrice {
      get { return targetPrice_; }
      set {
        targetPrice_ = value;
      }
    }

    /// <summary>Field number for the "targetLast" field.</summary>
    public const int TargetLastFieldNumber = 9;
    private uint targetLast_;
    /// <summary>
    ///指定交易持续时间(天)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetLast {
      get { return targetLast_; }
      set {
        targetLast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uid);
      }
      if (SalePrice != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SalePrice);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (Discuss != false) {
        output.WriteRawTag(48);
        output.WriteBool(Discuss);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TargetId);
      }
      if (TargetPrice != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TargetPrice);
      }
      if (TargetLast != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TargetLast);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (SalePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SalePrice);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Discuss != false) {
        size += 1 + 1;
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      if (TargetPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPrice);
      }
      if (TargetLast != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetLast);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Uid = input.ReadUInt64();
            break;
          }
          case 32: {
            SalePrice = input.ReadUInt32();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            Discuss = input.ReadBool();
            break;
          }
          case 56: {
            TargetId = input.ReadUInt64();
            break;
          }
          case 64: {
            TargetPrice = input.ReadUInt32();
            break;
          }
          case 72: {
            TargetLast = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeOnSaleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOnSaleRes> _parser = new pb::MessageParser<CmdTradeOnSaleRes>(() => new CmdTradeOnSaleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOnSaleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 1;
    private global::Packet.TradeBrief goods_;
    /// <summary>
    ///成功上架的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeBrief Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (goods_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (goods_ == null) {
              goods_ = new global::Packet.TradeBrief();
            }
            input.ReadMessage(goods_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买请求
  /// </summary>
  public sealed class CmdTradeBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeBuyReq> _parser = new pb::MessageParser<CmdTradeBuyReq>(() => new CmdTradeBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 3;
    private ulong goodsUid_;
    /// <summary>
    ///商品唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///物品单价(原始单价or一口价)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GoodsUid);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeBuyRes> _parser = new pb::MessageParser<CmdTradeBuyRes>(() => new CmdTradeBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private int ret_;
    /// <summary>
    ///ret!=0表示购买失败
    ///ret=ErrorTrade_GoodsNotExist 需要刷新列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "buyCheap" field.</summary>
    public const int BuyCheapFieldNumber = 1;
    private bool buyCheap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuyCheap {
      get { return buyCheap_; }
      set {
        buyCheap_ = value;
      }
    }

    /// <summary>Field number for the "realCoin" field.</summary>
    public const int RealCoinFieldNumber = 2;
    private ulong realCoin_;
    /// <summary>
    ///实际扣除金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RealCoin {
      get { return realCoin_; }
      set {
        realCoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuyCheap != false) {
        output.WriteRawTag(8);
        output.WriteBool(BuyCheap);
      }
      if (RealCoin != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RealCoin);
      }
      if (Ret != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (BuyCheap != false) {
        size += 1 + 1;
      }
      if (RealCoin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RealCoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuyCheap = input.ReadBool();
            break;
          }
          case 16: {
            RealCoin = input.ReadUInt64();
            break;
          }
          case 24: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下架商品
  /// </summary>
  public sealed class CmdTradeOffSaleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOffSaleReq> _parser = new pb::MessageParser<CmdTradeOffSaleReq>(() => new CmdTradeOffSaleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOffSaleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeOffSaleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOffSaleRes> _parser = new pb::MessageParser<CmdTradeOffSaleRes>(() => new CmdTradeOffSaleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOffSaleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    /// <summary>
    ///成功下架
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重上架
  /// </summary>
  public sealed class CmdTradeReSaleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeReSaleReq> _parser = new pb::MessageParser<CmdTradeReSaleReq>(() => new CmdTradeReSaleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeReSaleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private uint price_;
    /// <summary>
    ///单价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            Price = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeReSaleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeReSaleRes> _parser = new pb::MessageParser<CmdTradeReSaleRes>(() => new CmdTradeReSaleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeReSaleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 1;
    private global::Packet.TradeBrief goods_;
    /// <summary>
    ///成功上架的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeBrief Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (goods_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Goods);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (goods_ == null) {
              goods_ = new global::Packet.TradeBrief();
            }
            input.ReadMessage(goods_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取关注列表
  /// </summary>
  public sealed class CmdTradeWatchListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeWatchListReq> _parser = new pb::MessageParser<CmdTradeWatchListReq>(() => new CmdTradeWatchListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeWatchListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTradeWatchListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeWatchListRes> _parser = new pb::MessageParser<CmdTradeWatchListRes>(() => new CmdTradeWatchListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeWatchListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "watchGoods" field.</summary>
    public const int WatchGoodsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TradeBrief> _repeated_watchGoods_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TradeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TradeBrief> watchGoods_ = new pbc::RepeatedField<global::Packet.TradeBrief>();
    /// <summary>
    ///bool bCross = 1;(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TradeBrief> WatchGoods {
      get { return watchGoods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      watchGoods_.WriteTo(output, _repeated_watchGoods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += watchGoods_.CalculateSize(_repeated_watchGoods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            watchGoods_.AddEntriesFrom(input, _repeated_watchGoods_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///关注，取消关注商品
  /// </summary>
  public sealed class CmdTradeWatchItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeWatchItemReq> _parser = new pb::MessageParser<CmdTradeWatchItemReq>(() => new CmdTradeWatchItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeWatchItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    /// <summary>
    ///商品唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 3;
    private bool watch_;
    /// <summary>
    ///关注or取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (Watch != false) {
        output.WriteRawTag(24);
        output.WriteBool(Watch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (Watch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            Watch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeWatchItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeWatchItemRes> _parser = new pb::MessageParser<CmdTradeWatchItemRes>(() => new CmdTradeWatchItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeWatchItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 1;
    private bool watch_;
    /// <summary>
    ///关注or取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 3;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 2;
    private global::Packet.TradeBrief goods_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeBrief Goods {
      get { return goods_; }
      set {
        goods_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Watch != false) {
        output.WriteRawTag(8);
        output.WriteBool(Watch);
      }
      if (goods_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Goods);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GoodsUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Watch != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (goods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Goods);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Watch = input.ReadBool();
            break;
          }
          case 18: {
            if (goods_ == null) {
              goods_ = new global::Packet.TradeBrief();
            }
            input.ReadMessage(goods_);
            break;
          }
          case 24: {
            GoodsUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeOfferPriceReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOfferPriceReq> _parser = new pb::MessageParser<CmdTradeOfferPriceReq>(() => new CmdTradeOfferPriceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOfferPriceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    /// <summary>
    ///是否跨服商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    /// <summary>
    ///商品表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///单价 (做粗略检查用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 5;
    private bool offer_;
    /// <summary>
    ///出价、取消出价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
      if (Offer != false) {
        output.WriteRawTag(40);
        output.WriteBool(Offer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Offer != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
          case 40: {
            Offer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeOfferPriceRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOfferPriceRes> _parser = new pb::MessageParser<CmdTradeOfferPriceRes>(() => new CmdTradeOfferPriceRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOfferPriceRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 4;
    private int ret_;
    /// <summary>
    ///ret !=0 为出价失败
    ///ret=ErrorTrade_OfferPriceTooLate 需要刷新列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "bCross" field.</summary>
    public const int BCrossFieldNumber = 1;
    private bool bCross_;
    /// <summary>
    ///是否跨服商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCross {
      get { return bCross_; }
      set {
        bCross_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 3;
    private bool offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCross != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCross);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (Offer != false) {
        output.WriteRawTag(24);
        output.WriteBool(Offer);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (BCross != false) {
        size += 1 + 1;
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (Offer != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCross = input.ReadBool();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 24: {
            Offer = input.ReadBool();
            break;
          }
          case 32: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeOfferPriceResultNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeOfferPriceResultNtf> _parser = new pb::MessageParser<CmdTradeOfferPriceResultNtf>(() => new CmdTradeOfferPriceResultNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeOfferPriceResultNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///true=自己购买到了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公示期预购
  /// </summary>
  public sealed class CmdTradeAdvanceOfferReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeAdvanceOfferReq> _parser = new pb::MessageParser<CmdTradeAdvanceOfferReq>(() => new CmdTradeAdvanceOfferReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeAdvanceOfferReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 1;
    private ulong goodsUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private uint price_;
    /// <summary>
    ///单价(做粗略检查用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GoodsUid);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Price);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 16: {
            Price = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeAdvanceOfferRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeAdvanceOfferRes> _parser = new pb::MessageParser<CmdTradeAdvanceOfferRes>(() => new CmdTradeAdvanceOfferRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeAdvanceOfferRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "goodsUid" field.</summary>
    public const int GoodsUidFieldNumber = 2;
    private ulong goodsUid_;
    /// <summary>
    ///若ret=ErrorTrade_AdvanceOfferTimeOver， 按策划需求要关闭界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodsUid {
      get { return goodsUid_; }
      set {
        goodsUid_ = value;
      }
    }

    /// <summary>Field number for the "advanceOfferData" field.</summary>
    public const int AdvanceOfferDataFieldNumber = 3;
    private global::Packet.TradeAdvanceOfferData advanceOfferData_;
    /// <summary>
    ///ret=0时下列数据填充：
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeAdvanceOfferData AdvanceOfferData {
      get { return advanceOfferData_; }
      set {
        advanceOfferData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (GoodsUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GoodsUid);
      }
      if (advanceOfferData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AdvanceOfferData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (GoodsUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodsUid);
      }
      if (advanceOfferData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvanceOfferData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsUid = input.ReadUInt64();
            break;
          }
          case 26: {
            if (advanceOfferData_ == null) {
              advanceOfferData_ = new global::Packet.TradeAdvanceOfferData();
            }
            input.ReadMessage(advanceOfferData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公示期预购次数更新(特权更新时)
  /// </summary>
  public sealed class CmdTradeAdvanceOfferTimesNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeAdvanceOfferTimesNtf> _parser = new pb::MessageParser<CmdTradeAdvanceOfferTimesNtf>(() => new CmdTradeAdvanceOfferTimesNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeAdvanceOfferTimesNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "advanceOfferData" field.</summary>
    public const int AdvanceOfferDataFieldNumber = 1;
    private global::Packet.TradeAdvanceOfferData advanceOfferData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TradeAdvanceOfferData AdvanceOfferData {
      get { return advanceOfferData_; }
      set {
        advanceOfferData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (advanceOfferData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AdvanceOfferData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (advanceOfferData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvanceOfferData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (advanceOfferData_ == null) {
              advanceOfferData_ = new global::Packet.TradeAdvanceOfferData();
            }
            input.ReadMessage(advanceOfferData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeTakeOutGoodsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeTakeOutGoodsReq> _parser = new pb::MessageParser<CmdTradeTakeOutGoodsReq>(() => new CmdTradeTakeOutGoodsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeTakeOutGoodsReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private uint recordUid_;
    /// <summary>
    ///购买记录uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeTakeOutGoodsRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeTakeOutGoodsRes> _parser = new pb::MessageParser<CmdTradeTakeOutGoodsRes>(() => new CmdTradeTakeOutGoodsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeTakeOutGoodsRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTradeCancelAdvanceOfferReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeCancelAdvanceOfferReq> _parser = new pb::MessageParser<CmdTradeCancelAdvanceOfferReq>(() => new CmdTradeCancelAdvanceOfferReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeCancelAdvanceOfferReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recordUid" field.</summary>
    public const int RecordUidFieldNumber = 1;
    private uint recordUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecordUid {
      get { return recordUid_; }
      set {
        recordUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RecordUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecordUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTradeCancelAdvanceOfferRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTradeCancelAdvanceOfferRes> _parser = new pb::MessageParser<CmdTradeCancelAdvanceOfferRes>(() => new CmdTradeCancelAdvanceOfferRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTradeCancelAdvanceOfferRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
