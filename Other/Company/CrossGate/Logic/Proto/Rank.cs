// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdRank {
    None = 0,
    /// <summary>
    ///查询排行榜
    /// </summary>
    QueryReq = 4901,
    /// <summary>
    ///查询排行榜
    /// </summary>
    QueryRes = 4902,
    /// <summary>
    ///详细信息查询
    /// </summary>
    UnitDescReq = 4903,
    /// <summary>
    ///详细信息查询
    /// </summary>
    UnitDescRes = 4904,
    /// <summary>
    ///获取榜单设置状态
    /// </summary>
    GetSetStateReq = 4905,
    /// <summary>
    ///获取榜单设置状态
    /// </summary>
    GetSetStateRes = 4906,
    /// <summary>
    ///设置榜单状态(是否上榜)
    /// </summary>
    SetStateReq = 4907,
    /// <summary>
    ///设置榜单状态(是否上榜)
    /// </summary>
    SetStateRes = 4908,
    /// <summary>
    ///批量获取指定榜指定名次区间的单元详情
    /// </summary>
    BatUnitDescReq = 4909,
    /// <summary>
    ///批量获取指定榜指定名次区间的单元详情
    /// </summary>
    BatUnitDescRes = 4910,
    /// <summary>
    ///榜缓存过期
    /// </summary>
    CacheExpireNtf = 4911,
  }

  public enum ErrorRank {
    None = 0,
    /// <summary>
    ///错误的榜单类型
    /// </summary>
    ErrType = 4901,
    /// <summary>
    ///redis配置错误
    /// </summary>
    ErrRedisConn = 4902,
    /// <summary>
    ///功能未开启
    /// </summary>
    FuncNotOpen = 4903,
    /// <summary>
    ///等级段配置错误
    /// </summary>
    ErrCfg = 4904,
    /// <summary>
    ///被禁止上榜
    /// </summary>
    Ban = 4905,
    /// <summary>
    ///频繁设置榜
    /// </summary>
    FastSet = 4906,
    /// <summary>
    ///频繁请求榜
    /// </summary>
    FastReq = 4907,
  }

  /// <summary>
  /// 排行大类
  /// </summary>
  public enum RankType {
    None = 0,
    /// <summary>
    ///个人信息
    /// </summary>
    Role = 1,
    /// <summary>
    ///职业
    /// </summary>
    Career = 2,
    /// <summary>
    ///装备
    /// </summary>
    Equip = 3,
    /// <summary>
    ///属性
    /// </summary>
    Attr = 4,
    /// <summary>
    ///荣耀竞技场
    /// </summary>
    Arena = 5,
    /// <summary>
    ///成长之路
    /// </summary>
    Growth = 6,
    /// <summary>
    ///生存竞技场
    /// </summary>
    Survival = 7,
    /// <summary>
    ///红包
    /// </summary>
    RedEnv = 8,
    /// <summary>
    ///休闲玩法
    /// </summary>
    Leisure = 9,
    /// <summary>
    ///亲密度
    /// </summary>
    Lovely = 10,
    /// <summary>
    ///家族
    /// </summary>
    Guild = 11,
    /// <summary>
    ///世界boss
    /// </summary>
    WildBoss = 12,
    /// <summary>
    ///地下竞技场
    /// </summary>
    UnderGround = 13,
    /// <summary>
    ///成就
    /// </summary>
    Achievement = 14,
    /// <summary>
    ///天梯竞技场
    /// </summary>
    TianTi = 15,
    /// <summary>
    ///试炼之门
    /// </summary>
    TrialGate = 16,
    /// <summary>
    ///年兽
    /// </summary>
    MonsterNian = 17,
    /// <summary>
    ///boss资格挑战赛
    /// </summary>
    BossTower = 18,
    Max = 19,
  }

  /// <summary>
  /// 个人排行类型
  /// </summary>
  public enum RankTypeRole {
    None = 0,
    /// <summary>
    ///综合评分
    /// </summary>
    Total = 1,
    /// <summary>
    ///等级
    /// </summary>
    Level = 2,
    /// <summary>
    ///人物
    /// </summary>
    Role = 3,
    /// <summary>
    ///宠物
    /// </summary>
    Pet = 4,
    Max = 5,
  }

  /// <summary>
  /// 职业排行类型
  /// </summary>
  public enum RankTypeCareer {
    None = 0,
    /// <summary>
    ///弓箭手
    /// </summary>
    _1 = 1,
    /// <summary>
    ///法师
    /// </summary>
    _2 = 2,
    /// <summary>
    ///剑士
    /// </summary>
    _3 = 3,
    /// <summary>
    ///传教士
    /// </summary>
    _4 = 4,
    /// <summary>
    ///战斧
    /// </summary>
    _5 = 5,
    /// <summary>
    ///咒术
    /// </summary>
    _6 = 6,
    Max = 7,
  }

  /// <summary>
  /// 装备排行类型
  /// </summary>
  public enum RankTypeEquip {
    None = 0,
    /// <summary>
    ///双手武器
    /// </summary>
    _1 = 1,
    /// <summary>
    ///单手武器
    /// </summary>
    _2 = 2,
    /// <summary>
    ///头盔
    /// </summary>
    _3 = 3,
    /// <summary>
    ///衣服
    /// </summary>
    _4 = 4,
    /// <summary>
    ///鞋
    /// </summary>
    _5 = 5,
    /// <summary>
    ///盾牌
    /// </summary>
    _6 = 6,
    /// <summary>
    ///护符
    /// </summary>
    _7 = 7,
    Max = 8,
  }

  /// <summary>
  /// 属性排行类型
  /// </summary>
  public enum RankTypeAttr {
    None = 0,
    /// <summary>
    ///生命
    /// </summary>
    Hp = 1,
    /// <summary>
    ///攻击
    /// </summary>
    Atk = 2,
    /// <summary>
    ///防御
    /// </summary>
    Def = 3,
    /// <summary>
    ///敏捷
    /// </summary>
    Agi = 4,
    /// <summary>
    ///精神
    /// </summary>
    Mnd = 5,
    /// <summary>
    ///魔攻
    /// </summary>
    Mgk = 6,
    /// <summary>
    ///忽视控制抗性
    /// </summary>
    IgnoreCtrl = 7,
    Max = 8,
  }

  /// <summary>
  /// 荣耀竞技场排行类型
  /// </summary>
  public enum RankTypeArena {
    None = 0,
    /// <summary>
    ///本服
    /// </summary>
    Cur = 1,
    /// <summary>
    ///全区全服
    /// </summary>
    Kf = 2,
    Max = 3,
  }

  /// <summary>
  /// 成长之路
  /// </summary>
  public enum RankTypeGrowth {
    None = 0,
    /// <summary>
    ///声望
    /// </summary>
    Reputation = 1,
    /// <summary>
    ///驯养
    /// </summary>
    Domestication = 2,
    Max = 3,
  }

  /// <summary>
  /// 生存竞技场
  /// </summary>
  public enum RankTypeSurvival {
    None = 0,
    /// <summary>
    ///本服
    /// </summary>
    Score = 1,
    /// <summary>
    ///跨组
    /// </summary>
    Group = 2,
    Max = 3,
  }

  /// <summary>
  ///红包
  /// </summary>
  public enum RankTypeRedEnv {
    None = 0,
    /// <summary>
    ///家族红包
    /// </summary>
    Family = 1,
    /// <summary>
    ///个人红包
    /// </summary>
    Role = 2,
    Max = 3,
  }

  /// <summary>
  ///休闲玩法
  /// </summary>
  public enum RankTypeLeisure {
    None = 0,
    /// <summary>
    ///烹饪积分
    /// </summary>
    Cookie = 1,
    /// <summary>
    ///时裳值
    /// </summary>
    FashionValue = 2,
    Max = 3,
  }

  /// <summary>
  ///亲密度
  /// </summary>
  public enum RankTypeLovely {
    None = 0,
    /// <summary>
    ///总亲密度
    /// </summary>
    Total = 1,
    /// <summary>
    ///赠送礼物
    /// </summary>
    Send = 2,
    /// <summary>
    ///接受礼物
    /// </summary>
    Recv = 3,
    Max = 4,
  }

  /// <summary>
  ///家族
  /// </summary>
  public enum RankTypeGuild {
    None = 0,
    /// <summary>
    ///资源战
    /// </summary>
    ResFight = 1,
  }

  /// <summary>
  ///成就
  /// </summary>
  public enum RankTypeAchievement {
    None = 0,
    /// <summary>
    ///总稀有度榜
    /// </summary>
    Rare = 1,
    Max = 2,
  }

  /// <summary>
  ///天梯竞技场
  /// </summary>
  public enum RankTypeTianTi {
    None = 0,
    /// <summary>
    ///本服
    /// </summary>
    Cur = 1,
    /// <summary>
    ///全区全服
    /// </summary>
    Kf = 2,
    Max = 3,
  }

  /// <summary>
  ///年兽
  /// </summary>
  public enum RankTypeMonsterNian {
    None = 0,
    /// <summary>
    ///累积伤害
    /// </summary>
    Damage = 1,
    Max = 2,
  }

  /// <summary>
  ///boss资格挑战赛
  /// </summary>
  public enum RankTypeBossTower {
    None = 0,
    /// <summary>
    ///资格赛
    /// </summary>
    Pre = 1,
    /// <summary>
    ///boss赛
    /// </summary>
    Boss = 2,
    Max = 3,
  }

  /// <summary>
  /// 排行榜详情显示类型
  /// </summary>
  public enum RankDescType {
    None = 0,
    /// <summary>
    ///角色
    /// </summary>
    Role = 1,
    /// <summary>
    ///宠物
    /// </summary>
    Pet = 2,
    /// <summary>
    ///装备
    /// </summary>
    Equip = 3,
    /// <summary>
    ///荣耀竞技场
    /// </summary>
    Arena = 4,
    /// <summary>
    ///生存竞技场
    /// </summary>
    Survival = 5,
    /// <summary>
    ///天梯竞技场
    /// </summary>
    TianTi = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 个人排行数据
  /// </summary>
  public sealed class RankDataRole : pb::IMessage {
    private static readonly pb::MessageParser<RankDataRole> _parser = new pb::MessageParser<RankDataRole>(() => new RankDataRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 5;
    private uint petId_;
    /// <summary>
    ///宠物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 6;
    private uint petUid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "petName" field.</summary>
    public const int PetNameFieldNumber = 7;
    private pb::ByteString petName_ = pb::ByteString.Empty;
    /// <summary>
    ///宠物名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PetName {
      get { return petName_; }
      set {
        petName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (PetId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PetId);
      }
      if (PetUid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PetUid);
      }
      if (PetName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(PetName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PetName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            PetId = input.ReadUInt32();
            break;
          }
          case 48: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 58: {
            PetName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 职业排行数据
  /// </summary>
  public sealed class RankDataCareer : pb::IMessage {
    private static readonly pb::MessageParser<RankDataCareer> _parser = new pb::MessageParser<RankDataCareer>(() => new RankDataCareer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataCareer> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备排行数据
  /// </summary>
  public sealed class RankDataEquip : pb::IMessage {
    private static readonly pb::MessageParser<RankDataEquip> _parser = new pb::MessageParser<RankDataEquip>(() => new RankDataEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipId" field.</summary>
    public const int EquipIdFieldNumber = 3;
    private uint equipId_;
    /// <summary>
    ///装备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (EquipId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EquipId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (EquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            EquipId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 属性排行数据
  /// </summary>
  public sealed class RankDataAttr : pb::IMessage {
    private static readonly pb::MessageParser<RankDataAttr> _parser = new pb::MessageParser<RankDataAttr>(() => new RankDataAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 荣耀竞技场
  /// </summary>
  public sealed class RankDataArena : pb::IMessage {
    private static readonly pb::MessageParser<RankDataArena> _parser = new pb::MessageParser<RankDataArena>(() => new RankDataArena());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataArena> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 3;
    private int danLv_;
    /// <summary>
    ///段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 4;
    private int star_;
    /// <summary>
    ///星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 5;
    private uint serverId_;
    /// <summary>
    ///服务器id(全服榜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "globalRank" field.</summary>
    public const int GlobalRankFieldNumber = 6;
    private uint globalRank_;
    /// <summary>
    ///全服排名(本服榜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalRank {
      get { return globalRank_; }
      set {
        globalRank_ = value;
      }
    }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 7;
    private int winNum_;
    /// <summary>
    ///胜利场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 8;
    private int totalNum_;
    /// <summary>
    ///总场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (DanLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DanLv);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Star);
      }
      if (ServerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServerId);
      }
      if (GlobalRank != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GlobalRank);
      }
      if (WinNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WinNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DanLv);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (GlobalRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalRank);
      }
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            DanLv = input.ReadInt32();
            break;
          }
          case 32: {
            Star = input.ReadInt32();
            break;
          }
          case 40: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 48: {
            GlobalRank = input.ReadUInt32();
            break;
          }
          case 56: {
            WinNum = input.ReadInt32();
            break;
          }
          case 64: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成长之路排行数据
  /// </summary>
  public sealed class RankDataGrowth : pb::IMessage {
    private static readonly pb::MessageParser<RankDataGrowth> _parser = new pb::MessageParser<RankDataGrowth>(() => new RankDataGrowth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataGrowth> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生存竞技场
  /// </summary>
  public sealed class RankDataSurvival : pb::IMessage {
    private static readonly pb::MessageParser<RankDataSurvival> _parser = new pb::MessageParser<RankDataSurvival>(() => new RankDataSurvival());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataSurvival> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    ///战绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 5;
    private uint join_;
    /// <summary>
    ///参战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 6;
    private uint win_;
    /// <summary>
    ///胜场次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 7;
    private uint serverId_;
    /// <summary>
    ///服务器id(全服榜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "globalRank" field.</summary>
    public const int GlobalRankFieldNumber = 8;
    private uint globalRank_;
    /// <summary>
    ///全服排名(本服榜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalRank {
      get { return globalRank_; }
      set {
        globalRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
      if (Join != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Join);
      }
      if (Win != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Win);
      }
      if (ServerId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ServerId);
      }
      if (GlobalRank != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(GlobalRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (GlobalRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
          case 40: {
            Join = input.ReadUInt32();
            break;
          }
          case 48: {
            Win = input.ReadUInt32();
            break;
          }
          case 56: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 64: {
            GlobalRank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///个人红包
  /// </summary>
  public sealed class RankDataRedEnv : pb::IMessage {
    private static readonly pb::MessageParser<RankDataRedEnv> _parser = new pb::MessageParser<RankDataRedEnv>(() => new RankDataRedEnv());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataRedEnv> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///休闲玩法
  /// </summary>
  public sealed class RankDataLeisure : pb::IMessage {
    private static readonly pb::MessageParser<RankDataLeisure> _parser = new pb::MessageParser<RankDataLeisure>(() => new RankDataLeisure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataLeisure> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///亲密度
  /// </summary>
  public sealed class RankDataLovely : pb::IMessage {
    private static readonly pb::MessageParser<RankDataLovely> _parser = new pb::MessageParser<RankDataLovely>(() => new RankDataLovely());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataLovely> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///家族-族战
  /// </summary>
  public sealed class RankDataGuildBattle : pb::IMessage {
    private static readonly pb::MessageParser<RankDataGuildBattle> _parser = new pb::MessageParser<RankDataGuildBattle>(() => new RankDataGuildBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataGuildBattle> Parser { get { return _parser; } }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 1;
    private uint memberCount_;
    /// <summary>
    ///成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "winRatio" field.</summary>
    public const int WinRatioFieldNumber = 2;
    private uint winRatio_;
    /// <summary>
    ///胜率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinRatio {
      get { return winRatio_; }
      set {
        winRatio_ = value;
      }
    }

    /// <summary>Field number for the "winStreak" field.</summary>
    public const int WinStreakFieldNumber = 3;
    private uint winStreak_;
    /// <summary>
    ///连胜场次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinStreak {
      get { return winStreak_; }
      set {
        winStreak_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MemberCount);
      }
      if (WinRatio != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WinRatio);
      }
      if (WinStreak != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WinStreak);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (WinRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinRatio);
      }
      if (WinStreak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinStreak);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 16: {
            WinRatio = input.ReadUInt32();
            break;
          }
          case 24: {
            WinStreak = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///家族
  /// </summary>
  public sealed class RankDataGuild : pb::IMessage {
    private static readonly pb::MessageParser<RankDataGuild> _parser = new pb::MessageParser<RankDataGuild>(() => new RankDataGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///家族等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "gamesvrId" field.</summary>
    public const int GamesvrIdFieldNumber = 4;
    private uint gamesvrId_;
    /// <summary>
    ///游戏服id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesvrId {
      get { return gamesvrId_; }
      set {
        gamesvrId_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 5;
    private global::Packet.RankDataGuildBattle battle_;
    /// <summary>
    ///族战
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataGuildBattle Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GuildName);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (GamesvrId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GamesvrId);
      }
      if (battle_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Battle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (GamesvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesvrId);
      }
      if (battle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadBytes();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            GamesvrId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (battle_ == null) {
              battle_ = new global::Packet.RankDataGuildBattle();
            }
            input.ReadMessage(battle_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///世界boss
  /// </summary>
  public sealed class RankDataWildBoss : pb::IMessage {
    private static readonly pb::MessageParser<RankDataWildBoss> _parser = new pb::MessageParser<RankDataWildBoss>(() => new RankDataWildBoss());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataWildBoss> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private uint time_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
          case 32: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地下竞技场
  /// </summary>
  public sealed class RankDataUnderGround : pb::IMessage {
    private static readonly pb::MessageParser<RankDataUnderGround> _parser = new pb::MessageParser<RankDataUnderGround>(() => new RankDataUnderGround());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataUnderGround> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成就
  /// </summary>
  public sealed class RankDataAchievement : pb::IMessage {
    private static readonly pb::MessageParser<RankDataAchievement> _parser = new pb::MessageParser<RankDataAchievement>(() => new RankDataAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataAchievement> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 天梯竞技场
  /// </summary>
  public sealed class RankDataTianTi : pb::IMessage {
    private static readonly pb::MessageParser<RankDataTianTi> _parser = new pb::MessageParser<RankDataTianTi>(() => new RankDataTianTi());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataTianTi> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 5;
    private uint serverId_;
    /// <summary>
    ///int32 danLv             = 3;//段位
    ///int32 star              = 4;//星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "globalRank" field.</summary>
    public const int GlobalRankFieldNumber = 6;
    private uint globalRank_;
    /// <summary>
    ///全服排名(本服榜)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalRank {
      get { return globalRank_; }
      set {
        globalRank_ = value;
      }
    }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 7;
    private int winNum_;
    /// <summary>
    ///胜利场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 8;
    private int totalNum_;
    /// <summary>
    ///总场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 9;
    private int score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (ServerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServerId);
      }
      if (GlobalRank != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GlobalRank);
      }
      if (WinNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WinNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalNum);
      }
      if (Score != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (GlobalRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalRank);
      }
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 40: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 48: {
            GlobalRank = input.ReadUInt32();
            break;
          }
          case 56: {
            WinNum = input.ReadInt32();
            break;
          }
          case 64: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 72: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 试炼之门
  /// </summary>
  public sealed class RankDataTrialGate : pb::IMessage {
    private static readonly pb::MessageParser<RankDataTrialGate> _parser = new pb::MessageParser<RankDataTrialGate>(() => new RankDataTrialGate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataTrialGate> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 3;
    private uint stage_;
    /// <summary>
    ///阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private uint round_;
    /// <summary>
    ///回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private uint time_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Stage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Stage);
      }
      if (Round != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Round);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Stage = input.ReadUInt32();
            break;
          }
          case 32: {
            Round = input.ReadUInt32();
            break;
          }
          case 40: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 年兽
  /// </summary>
  public sealed class RankDataMonsterNian : pb::IMessage {
    private static readonly pb::MessageParser<RankDataMonsterNian> _parser = new pb::MessageParser<RankDataMonsterNian>(() => new RankDataMonsterNian());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataMonsterNian> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// boss资格挑战赛
  /// </summary>
  public sealed class RankDataBossTower : pb::IMessage {
    private static readonly pb::MessageParser<RankDataBossTower> _parser = new pb::MessageParser<RankDataBossTower>(() => new RankDataBossTower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataBossTower> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 3;
    private uint layer_;
    /// <summary>
    ///层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private uint round_;
    /// <summary>
    ///回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private uint time_;
    /// <summary>
    ///通关时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Layer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Layer);
      }
      if (Round != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Round);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Layer = input.ReadUInt32();
            break;
          }
          case 32: {
            Round = input.ReadUInt32();
            break;
          }
          case 40: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 排行榜界面显示单位数据
  /// </summary>
  public sealed class RankUnitData : pb::IMessage {
    private static readonly pb::MessageParser<RankUnitData> _parser = new pb::MessageParser<RankUnitData>(() => new RankUnitData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankUnitData> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    ///排名(0为未上榜, > 0 为名次)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "roleData" field.</summary>
    public const int RoleDataFieldNumber = 3;
    private global::Packet.RankDataRole roleData_;
    /// <summary>
    ///Role-个人榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataRole RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    /// <summary>Field number for the "careerData" field.</summary>
    public const int CareerDataFieldNumber = 4;
    private global::Packet.RankDataCareer careerData_;
    /// <summary>
    ///Role-职业榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataCareer CareerData {
      get { return careerData_; }
      set {
        careerData_ = value;
      }
    }

    /// <summary>Field number for the "equipData" field.</summary>
    public const int EquipDataFieldNumber = 5;
    private global::Packet.RankDataEquip equipData_;
    /// <summary>
    ///Role-装备榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataEquip EquipData {
      get { return equipData_; }
      set {
        equipData_ = value;
      }
    }

    /// <summary>Field number for the "attrData" field.</summary>
    public const int AttrDataFieldNumber = 6;
    private global::Packet.RankDataAttr attrData_;
    /// <summary>
    ///Role-属性榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataAttr AttrData {
      get { return attrData_; }
      set {
        attrData_ = value;
      }
    }

    /// <summary>Field number for the "growthData" field.</summary>
    public const int GrowthDataFieldNumber = 7;
    private global::Packet.RankDataGrowth growthData_;
    /// <summary>
    ///Role-成长之路
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataGrowth GrowthData {
      get { return growthData_; }
      set {
        growthData_ = value;
      }
    }

    /// <summary>Field number for the "arenaData" field.</summary>
    public const int ArenaDataFieldNumber = 8;
    private global::Packet.RankDataArena arenaData_;
    /// <summary>
    ///Role-荣耀竞技榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataArena ArenaData {
      get { return arenaData_; }
      set {
        arenaData_ = value;
      }
    }

    /// <summary>Field number for the "survivalData" field.</summary>
    public const int SurvivalDataFieldNumber = 9;
    private global::Packet.RankDataSurvival survivalData_;
    /// <summary>
    ///Role-生存竞技榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataSurvival SurvivalData {
      get { return survivalData_; }
      set {
        survivalData_ = value;
      }
    }

    /// <summary>Field number for the "redEnvData" field.</summary>
    public const int RedEnvDataFieldNumber = 10;
    private global::Packet.RankDataRedEnv redEnvData_;
    /// <summary>
    ///Role-个人红包榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataRedEnv RedEnvData {
      get { return redEnvData_; }
      set {
        redEnvData_ = value;
      }
    }

    /// <summary>Field number for the "leisureData" field.</summary>
    public const int LeisureDataFieldNumber = 11;
    private global::Packet.RankDataLeisure leisureData_;
    /// <summary>
    ///Role-休闲玩法数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataLeisure LeisureData {
      get { return leisureData_; }
      set {
        leisureData_ = value;
      }
    }

    /// <summary>Field number for the "lovelyData" field.</summary>
    public const int LovelyDataFieldNumber = 12;
    private global::Packet.RankDataLovely lovelyData_;
    /// <summary>
    ///Role-亲密度数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataLovely LovelyData {
      get { return lovelyData_; }
      set {
        lovelyData_ = value;
      }
    }

    /// <summary>Field number for the "guildData" field.</summary>
    public const int GuildDataFieldNumber = 13;
    private global::Packet.RankDataGuild guildData_;
    /// <summary>
    ///Guild-家族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataGuild GuildData {
      get { return guildData_; }
      set {
        guildData_ = value;
      }
    }

    /// <summary>Field number for the "wildBossData" field.</summary>
    public const int WildBossDataFieldNumber = 14;
    private global::Packet.RankDataWildBoss wildBossData_;
    /// <summary>
    ///Role-世界boss榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataWildBoss WildBossData {
      get { return wildBossData_; }
      set {
        wildBossData_ = value;
      }
    }

    /// <summary>Field number for the "underGroundData" field.</summary>
    public const int UnderGroundDataFieldNumber = 15;
    private global::Packet.RankDataUnderGround underGroundData_;
    /// <summary>
    ///Role-地下竞技场榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataUnderGround UnderGroundData {
      get { return underGroundData_; }
      set {
        underGroundData_ = value;
      }
    }

    /// <summary>Field number for the "achievementData" field.</summary>
    public const int AchievementDataFieldNumber = 16;
    private global::Packet.RankDataAchievement achievementData_;
    /// <summary>
    ///Role-成就榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataAchievement AchievementData {
      get { return achievementData_; }
      set {
        achievementData_ = value;
      }
    }

    /// <summary>Field number for the "tiantiData" field.</summary>
    public const int TiantiDataFieldNumber = 17;
    private global::Packet.RankDataTianTi tiantiData_;
    /// <summary>
    ///Role-天梯竞技榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataTianTi TiantiData {
      get { return tiantiData_; }
      set {
        tiantiData_ = value;
      }
    }

    /// <summary>Field number for the "trialGateData" field.</summary>
    public const int TrialGateDataFieldNumber = 18;
    private global::Packet.RankDataTrialGate trialGateData_;
    /// <summary>
    ///Role-试炼之门数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataTrialGate TrialGateData {
      get { return trialGateData_; }
      set {
        trialGateData_ = value;
      }
    }

    /// <summary>Field number for the "monsterNianData" field.</summary>
    public const int MonsterNianDataFieldNumber = 19;
    private global::Packet.RankDataMonsterNian monsterNianData_;
    /// <summary>
    ///Role-年兽数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataMonsterNian MonsterNianData {
      get { return monsterNianData_; }
      set {
        monsterNianData_ = value;
      }
    }

    /// <summary>Field number for the "bossTowerData" field.</summary>
    public const int BossTowerDataFieldNumber = 20;
    private global::Packet.RankDataBossTower bossTowerData_;
    /// <summary>
    ///Role-boss资格挑战赛数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDataBossTower BossTowerData {
      get { return bossTowerData_; }
      set {
        bossTowerData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (roleData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleData);
      }
      if (careerData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CareerData);
      }
      if (equipData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EquipData);
      }
      if (attrData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AttrData);
      }
      if (growthData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GrowthData);
      }
      if (arenaData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ArenaData);
      }
      if (survivalData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SurvivalData);
      }
      if (redEnvData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RedEnvData);
      }
      if (leisureData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LeisureData);
      }
      if (lovelyData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LovelyData);
      }
      if (guildData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GuildData);
      }
      if (wildBossData_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(WildBossData);
      }
      if (underGroundData_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UnderGroundData);
      }
      if (achievementData_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AchievementData);
      }
      if (tiantiData_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TiantiData);
      }
      if (trialGateData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(TrialGateData);
      }
      if (monsterNianData_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(MonsterNianData);
      }
      if (bossTowerData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BossTowerData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      if (careerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CareerData);
      }
      if (equipData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipData);
      }
      if (attrData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttrData);
      }
      if (growthData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrowthData);
      }
      if (arenaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaData);
      }
      if (survivalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurvivalData);
      }
      if (redEnvData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedEnvData);
      }
      if (leisureData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeisureData);
      }
      if (lovelyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LovelyData);
      }
      if (guildData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildData);
      }
      if (wildBossData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WildBossData);
      }
      if (underGroundData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnderGroundData);
      }
      if (achievementData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AchievementData);
      }
      if (tiantiData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TiantiData);
      }
      if (trialGateData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialGateData);
      }
      if (monsterNianData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterNianData);
      }
      if (bossTowerData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BossTowerData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 26: {
            if (roleData_ == null) {
              roleData_ = new global::Packet.RankDataRole();
            }
            input.ReadMessage(roleData_);
            break;
          }
          case 34: {
            if (careerData_ == null) {
              careerData_ = new global::Packet.RankDataCareer();
            }
            input.ReadMessage(careerData_);
            break;
          }
          case 42: {
            if (equipData_ == null) {
              equipData_ = new global::Packet.RankDataEquip();
            }
            input.ReadMessage(equipData_);
            break;
          }
          case 50: {
            if (attrData_ == null) {
              attrData_ = new global::Packet.RankDataAttr();
            }
            input.ReadMessage(attrData_);
            break;
          }
          case 58: {
            if (growthData_ == null) {
              growthData_ = new global::Packet.RankDataGrowth();
            }
            input.ReadMessage(growthData_);
            break;
          }
          case 66: {
            if (arenaData_ == null) {
              arenaData_ = new global::Packet.RankDataArena();
            }
            input.ReadMessage(arenaData_);
            break;
          }
          case 74: {
            if (survivalData_ == null) {
              survivalData_ = new global::Packet.RankDataSurvival();
            }
            input.ReadMessage(survivalData_);
            break;
          }
          case 82: {
            if (redEnvData_ == null) {
              redEnvData_ = new global::Packet.RankDataRedEnv();
            }
            input.ReadMessage(redEnvData_);
            break;
          }
          case 90: {
            if (leisureData_ == null) {
              leisureData_ = new global::Packet.RankDataLeisure();
            }
            input.ReadMessage(leisureData_);
            break;
          }
          case 98: {
            if (lovelyData_ == null) {
              lovelyData_ = new global::Packet.RankDataLovely();
            }
            input.ReadMessage(lovelyData_);
            break;
          }
          case 106: {
            if (guildData_ == null) {
              guildData_ = new global::Packet.RankDataGuild();
            }
            input.ReadMessage(guildData_);
            break;
          }
          case 114: {
            if (wildBossData_ == null) {
              wildBossData_ = new global::Packet.RankDataWildBoss();
            }
            input.ReadMessage(wildBossData_);
            break;
          }
          case 122: {
            if (underGroundData_ == null) {
              underGroundData_ = new global::Packet.RankDataUnderGround();
            }
            input.ReadMessage(underGroundData_);
            break;
          }
          case 130: {
            if (achievementData_ == null) {
              achievementData_ = new global::Packet.RankDataAchievement();
            }
            input.ReadMessage(achievementData_);
            break;
          }
          case 138: {
            if (tiantiData_ == null) {
              tiantiData_ = new global::Packet.RankDataTianTi();
            }
            input.ReadMessage(tiantiData_);
            break;
          }
          case 146: {
            if (trialGateData_ == null) {
              trialGateData_ = new global::Packet.RankDataTrialGate();
            }
            input.ReadMessage(trialGateData_);
            break;
          }
          case 154: {
            if (monsterNianData_ == null) {
              monsterNianData_ = new global::Packet.RankDataMonsterNian();
            }
            input.ReadMessage(monsterNianData_);
            break;
          }
          case 162: {
            if (bossTowerData_ == null) {
              bossTowerData_ = new global::Packet.RankDataBossTower();
            }
            input.ReadMessage(bossTowerData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色详情显示
  /// </summary>
  public sealed class RankDescRole : pb::IMessage {
    private static readonly pb::MessageParser<RankDescRole> _parser = new pb::MessageParser<RankDescRole>(() => new RankDescRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 4;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 5;
    private uint totalScore_;
    /// <summary>
    ///综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "roleScore" field.</summary>
    public const int RoleScoreFieldNumber = 6;
    private uint roleScore_;
    /// <summary>
    ///人物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleScore {
      get { return roleScore_; }
      set {
        roleScore_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 7;
    private uint heroId_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "equipId" field.</summary>
    public const int EquipIdFieldNumber = 8;
    private uint equipId_;
    /// <summary>
    ///装备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    /// <summary>Field number for the "fashions" field.</summary>
    public const int FashionsFieldNumber = 9;
    private global::Packet.MapFashionList fashions_;
    /// <summary>
    ///时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapFashionList Fashions {
      get { return fashions_; }
      set {
        fashions_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 10;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 11;
    private uint careerRank_;
    /// <summary>
    ///等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 12;
    private uint photo_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    /// <summary>Field number for the "photoFrame" field.</summary>
    public const int PhotoFrameFieldNumber = 13;
    private uint photoFrame_;
    /// <summary>
    ///头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoFrame {
      get { return photoFrame_; }
      set {
        photoFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Career != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Career);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalScore);
      }
      if (RoleScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RoleScore);
      }
      if (HeroId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HeroId);
      }
      if (EquipId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(EquipId);
      }
      if (fashions_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Fashions);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(GuildName);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CareerRank);
      }
      if (Photo != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Photo);
      }
      if (PhotoFrame != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(PhotoFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
      }
      if (RoleScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleScore);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (EquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipId);
      }
      if (fashions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fashions);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (Photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
      }
      if (PhotoFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Career = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalScore = input.ReadUInt32();
            break;
          }
          case 48: {
            RoleScore = input.ReadUInt32();
            break;
          }
          case 56: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 64: {
            EquipId = input.ReadUInt32();
            break;
          }
          case 74: {
            if (fashions_ == null) {
              fashions_ = new global::Packet.MapFashionList();
            }
            input.ReadMessage(fashions_);
            break;
          }
          case 82: {
            GuildName = input.ReadBytes();
            break;
          }
          case 88: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 96: {
            Photo = input.ReadUInt32();
            break;
          }
          case 104: {
            PhotoFrame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宠物详情显示
  /// </summary>
  public sealed class RankDescPet : pb::IMessage {
    private static readonly pb::MessageParser<RankDescPet> _parser = new pb::MessageParser<RankDescPet>(() => new RankDescPet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescPet> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 2;
    private global::Packet.PetUnit pet_;
    /// <summary>
    ///宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (pet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pet_ == null) {
              pet_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(pet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 装备详情显示
  /// </summary>
  public sealed class RankDescEquip : pb::IMessage {
    private static readonly pb::MessageParser<RankDescEquip> _parser = new pb::MessageParser<RankDescEquip>(() => new RankDescEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Packet.Item item_;
    /// <summary>
    ///物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 荣耀竞技场详情显示
  /// </summary>
  public sealed class RankDescArena : pb::IMessage {
    private static readonly pb::MessageParser<RankDescArena> _parser = new pb::MessageParser<RankDescArena>(() => new RankDescArena());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescArena> Parser { get { return _parser; } }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 1;
    private int danLv_;
    /// <summary>
    ///竞技场段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    /// <summary>
    ///竞技场星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 3;
    private int winNum_;
    /// <summary>
    ///胜利场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 4;
    private int totalNum_;
    /// <summary>
    ///总场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DanLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DanLv);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (WinNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DanLv);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DanLv = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 24: {
            WinNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生存竞技场详情显示
  /// </summary>
  public sealed class RankDescSurvival : pb::IMessage {
    private static readonly pb::MessageParser<RankDescSurvival> _parser = new pb::MessageParser<RankDescSurvival>(() => new RankDescSurvival());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescSurvival> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 天梯竞技场详情显示
  /// </summary>
  public sealed class RankDescTianTi : pb::IMessage {
    private static readonly pb::MessageParser<RankDescTianTi> _parser = new pb::MessageParser<RankDescTianTi>(() => new RankDescTianTi());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDescTianTi> Parser { get { return _parser; } }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 3;
    private int winNum_;
    /// <summary>
    ///int32 danLv             = 1;//竞技场段位
    ///int32 star              = 2;//竞技场星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 4;
    private int totalNum_;
    /// <summary>
    ///总场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            WinNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankQueryReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankQueryReq> _parser = new pb::MessageParser<CmdRankQueryReq>(() => new CmdRankQueryReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankQueryReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "groupType" field.</summary>
    public const int GroupTypeFieldNumber = 3;
    private uint groupType_;
    /// <summary>
    ///分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "notmain" field.</summary>
    public const int NotmainFieldNumber = 4;
    private bool notmain_;
    /// <summary>
    ///是否不是排行榜主面板的请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Notmain {
      get { return notmain_; }
      set {
        notmain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (GroupType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GroupType);
      }
      if (Notmain != false) {
        output.WriteRawTag(32);
        output.WriteBool(Notmain);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupType);
      }
      if (Notmain != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupType = input.ReadUInt32();
            break;
          }
          case 32: {
            Notmain = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class RankQueryWildBossFirstKillRole : pb::IMessage {
    private static readonly pb::MessageParser<RankQueryWildBossFirstKillRole> _parser = new pb::MessageParser<RankQueryWildBossFirstKillRole>(() => new RankQueryWildBossFirstKillRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankQueryWildBossFirstKillRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class RankQueryWildBossFirstKill : pb::IMessage {
    private static readonly pb::MessageParser<RankQueryWildBossFirstKill> _parser = new pb::MessageParser<RankQueryWildBossFirstKill>(() => new RankQueryWildBossFirstKill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankQueryWildBossFirstKill> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RankQueryWildBossFirstKillRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RankQueryWildBossFirstKillRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.RankQueryWildBossFirstKillRole> roles_ = new pbc::RepeatedField<global::Packet.RankQueryWildBossFirstKillRole>();
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RankQueryWildBossFirstKillRole> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    /// 首杀时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RankQueryWildBossSelf : pb::IMessage {
    private static readonly pb::MessageParser<RankQueryWildBossSelf> _parser = new pb::MessageParser<RankQueryWildBossSelf>(() => new RankQueryWildBossSelf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankQueryWildBossSelf> Parser { get { return _parser; } }

    /// <summary>Field number for the "minRound" field.</summary>
    public const int MinRoundFieldNumber = 1;
    private uint minRound_;
    /// <summary>
    /// 最小回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinRound {
      get { return minRound_; }
      set {
        minRound_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinRound != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinRound);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRound);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MinRound = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RankQueryExtraWildBoss : pb::IMessage {
    private static readonly pb::MessageParser<RankQueryExtraWildBoss> _parser = new pb::MessageParser<RankQueryExtraWildBoss>(() => new RankQueryExtraWildBoss());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankQueryExtraWildBoss> Parser { get { return _parser; } }

    /// <summary>Field number for the "firstkill" field.</summary>
    public const int FirstkillFieldNumber = 1;
    private global::Packet.RankQueryWildBossFirstKill firstkill_;
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankQueryWildBossFirstKill Firstkill {
      get { return firstkill_; }
      set {
        firstkill_ = value;
      }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 2;
    private global::Packet.RankQueryWildBossSelf self_;
    /// <summary>
    /// 个人数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankQueryWildBossSelf Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (firstkill_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Firstkill);
      }
      if (self_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Self);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (firstkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Firstkill);
      }
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (firstkill_ == null) {
              firstkill_ = new global::Packet.RankQueryWildBossFirstKill();
            }
            input.ReadMessage(firstkill_);
            break;
          }
          case 18: {
            if (self_ == null) {
              self_ = new global::Packet.RankQueryWildBossSelf();
            }
            input.ReadMessage(self_);
            break;
          }
        }
      }
    }

  }

  public sealed class RankQueryExtra : pb::IMessage {
    private static readonly pb::MessageParser<RankQueryExtra> _parser = new pb::MessageParser<RankQueryExtra>(() => new RankQueryExtra());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankQueryExtra> Parser { get { return _parser; } }

    /// <summary>Field number for the "wildboss" field.</summary>
    public const int WildbossFieldNumber = 1;
    private global::Packet.RankQueryExtraWildBoss wildboss_;
    /// <summary>
    /// 世界boss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankQueryExtraWildBoss Wildboss {
      get { return wildboss_; }
      set {
        wildboss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (wildboss_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Wildboss);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wildboss_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wildboss);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wildboss_ == null) {
              wildboss_ = new global::Packet.RankQueryExtraWildBoss();
            }
            input.ReadMessage(wildboss_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankQueryRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankQueryRes> _parser = new pb::MessageParser<CmdRankQueryRes>(() => new CmdRankQueryRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankQueryRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "groupType" field.</summary>
    public const int GroupTypeFieldNumber = 3;
    private uint groupType_;
    /// <summary>
    ///分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "notmain" field.</summary>
    public const int NotmainFieldNumber = 4;
    private bool notmain_;
    /// <summary>
    ///是否不是排行榜主面板的返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Notmain {
      get { return notmain_; }
      set {
        notmain_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.RankUnitData> _repeated_units_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.RankUnitData.Parser);
    private readonly pbc::RepeatedField<global::Packet.RankUnitData> units_ = new pbc::RepeatedField<global::Packet.RankUnitData>();
    /// <summary>
    ///前100榜单数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RankUnitData> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 7;
    private global::Packet.RankQueryExtra extra_;
    /// <summary>
    ///榜额外数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankQueryExtra Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "nextReqTime" field.</summary>
    public const int NextReqTimeFieldNumber = 8;
    private uint nextReqTime_;
    /// <summary>
    ///下次请求的到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextReqTime {
      get { return nextReqTime_; }
      set {
        nextReqTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (GroupType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GroupType);
      }
      if (Notmain != false) {
        output.WriteRawTag(32);
        output.WriteBool(Notmain);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (extra_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Extra);
      }
      if (NextReqTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NextReqTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupType);
      }
      if (Notmain != false) {
        size += 1 + 1;
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      if (NextReqTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextReqTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupType = input.ReadUInt32();
            break;
          }
          case 32: {
            Notmain = input.ReadBool();
            break;
          }
          case 50: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 58: {
            if (extra_ == null) {
              extra_ = new global::Packet.RankQueryExtra();
            }
            input.ReadMessage(extra_);
            break;
          }
          case 64: {
            NextReqTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankUnitDescReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankUnitDescReq> _parser = new pb::MessageParser<CmdRankUnitDescReq>(() => new CmdRankUnitDescReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankUnitDescReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 4;
    private uint petUid_;
    /// <summary>
    ///宠物榜使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "itemtid" field.</summary>
    public const int ItemtidFieldNumber = 5;
    private uint itemtid_;
    /// <summary>
    ///装备榜使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemtid {
      get { return itemtid_; }
      set {
        itemtid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (PetUid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PetUid);
      }
      if (Itemtid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Itemtid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (Itemtid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemtid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 32: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 40: {
            Itemtid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankUnitDescRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankUnitDescRes> _parser = new pb::MessageParser<CmdRankUnitDescRes>(() => new CmdRankUnitDescRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankUnitDescRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "roleInfo" field.</summary>
    public const int RoleInfoFieldNumber = 3;
    private global::Packet.RankDescRole roleInfo_;
    /// <summary>
    ///角色详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescRole RoleInfo {
      get { return roleInfo_; }
      set {
        roleInfo_ = value;
      }
    }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 4;
    private global::Packet.RankDescPet petInfo_;
    /// <summary>
    ///宠物详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescPet PetInfo {
      get { return petInfo_; }
      set {
        petInfo_ = value;
      }
    }

    /// <summary>Field number for the "equipInfo" field.</summary>
    public const int EquipInfoFieldNumber = 5;
    private global::Packet.RankDescEquip equipInfo_;
    /// <summary>
    ///装备详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescEquip EquipInfo {
      get { return equipInfo_; }
      set {
        equipInfo_ = value;
      }
    }

    /// <summary>Field number for the "arenaInfo" field.</summary>
    public const int ArenaInfoFieldNumber = 6;
    private global::Packet.RankDescArena arenaInfo_;
    /// <summary>
    ///荣耀竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescArena ArenaInfo {
      get { return arenaInfo_; }
      set {
        arenaInfo_ = value;
      }
    }

    /// <summary>Field number for the "survivalInfo" field.</summary>
    public const int SurvivalInfoFieldNumber = 7;
    private global::Packet.RankDescSurvival survivalInfo_;
    /// <summary>
    ///生存竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescSurvival SurvivalInfo {
      get { return survivalInfo_; }
      set {
        survivalInfo_ = value;
      }
    }

    /// <summary>Field number for the "tiantiInfo" field.</summary>
    public const int TiantiInfoFieldNumber = 8;
    private global::Packet.RankDescTianTi tiantiInfo_;
    /// <summary>
    ///天地竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescTianTi TiantiInfo {
      get { return tiantiInfo_; }
      set {
        tiantiInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (roleInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleInfo);
      }
      if (petInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PetInfo);
      }
      if (equipInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EquipInfo);
      }
      if (arenaInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ArenaInfo);
      }
      if (survivalInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SurvivalInfo);
      }
      if (tiantiInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TiantiInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (roleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleInfo);
      }
      if (petInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetInfo);
      }
      if (equipInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipInfo);
      }
      if (arenaInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaInfo);
      }
      if (survivalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurvivalInfo);
      }
      if (tiantiInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TiantiInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (roleInfo_ == null) {
              roleInfo_ = new global::Packet.RankDescRole();
            }
            input.ReadMessage(roleInfo_);
            break;
          }
          case 34: {
            if (petInfo_ == null) {
              petInfo_ = new global::Packet.RankDescPet();
            }
            input.ReadMessage(petInfo_);
            break;
          }
          case 42: {
            if (equipInfo_ == null) {
              equipInfo_ = new global::Packet.RankDescEquip();
            }
            input.ReadMessage(equipInfo_);
            break;
          }
          case 50: {
            if (arenaInfo_ == null) {
              arenaInfo_ = new global::Packet.RankDescArena();
            }
            input.ReadMessage(arenaInfo_);
            break;
          }
          case 58: {
            if (survivalInfo_ == null) {
              survivalInfo_ = new global::Packet.RankDescSurvival();
            }
            input.ReadMessage(survivalInfo_);
            break;
          }
          case 66: {
            if (tiantiInfo_ == null) {
              tiantiInfo_ = new global::Packet.RankDescTianTi();
            }
            input.ReadMessage(tiantiInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdRankGetSetStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankGetSetStateReq> _parser = new pb::MessageParser<CmdRankGetSetStateReq>(() => new CmdRankGetSetStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankGetSetStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRankGetSetStateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankGetSetStateRes> _parser = new pb::MessageParser<CmdRankGetSetStateRes>(() => new CmdRankGetSetStateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankGetSetStateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "setState" field.</summary>
    public const int SetStateFieldNumber = 1;
    private ulong setState_;
    /// <summary>
    ///上榜设置标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SetState {
      get { return setState_; }
      set {
        setState_ = value;
      }
    }

    /// <summary>Field number for the "nextSetTime" field.</summary>
    public const int NextSetTimeFieldNumber = 2;
    private uint nextSetTime_;
    /// <summary>
    ///下次修改设置的到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextSetTime {
      get { return nextSetTime_; }
      set {
        nextSetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetState != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SetState);
      }
      if (NextSetTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NextSetTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetState != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SetState);
      }
      if (NextSetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextSetTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetState = input.ReadUInt64();
            break;
          }
          case 16: {
            NextSetTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankSetStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankSetStateReq> _parser = new pb::MessageParser<CmdRankSetStateReq>(() => new CmdRankSetStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankSetStateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "setState" field.</summary>
    public const int SetStateFieldNumber = 1;
    private ulong setState_;
    /// <summary>
    ///上榜设置标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SetState {
      get { return setState_; }
      set {
        setState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetState != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SetState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetState != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SetState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetState = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankSetStateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankSetStateRes> _parser = new pb::MessageParser<CmdRankSetStateRes>(() => new CmdRankSetStateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankSetStateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "setState" field.</summary>
    public const int SetStateFieldNumber = 1;
    private ulong setState_;
    /// <summary>
    ///上榜设置标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SetState {
      get { return setState_; }
      set {
        setState_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    /// <summary>
    ///是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "nextSetTime" field.</summary>
    public const int NextSetTimeFieldNumber = 3;
    private uint nextSetTime_;
    /// <summary>
    ///下次修改设置的到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextSetTime {
      get { return nextSetTime_; }
      set {
        nextSetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetState != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SetState);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (NextSetTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextSetTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetState != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SetState);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (NextSetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextSetTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetState = input.ReadUInt64();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 24: {
            NextSetTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankBatUnitDescReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankBatUnitDescReq> _parser = new pb::MessageParser<CmdRankBatUnitDescReq>(() => new CmdRankBatUnitDescReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankBatUnitDescReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "groupType" field.</summary>
    public const int GroupTypeFieldNumber = 3;
    private uint groupType_;
    /// <summary>
    ///分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private uint start_;
    /// <summary>
    ///开始名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private uint end_;
    /// <summary>
    ///结束名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (GroupType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GroupType);
      }
      if (Start != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupType);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupType = input.ReadUInt32();
            break;
          }
          case 32: {
            Start = input.ReadUInt32();
            break;
          }
          case 40: {
            End = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RankUnitDesc : pb::IMessage {
    private static readonly pb::MessageParser<RankUnitDesc> _parser = new pb::MessageParser<RankUnitDesc>(() => new RankUnitDesc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankUnitDesc> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleInfo" field.</summary>
    public const int RoleInfoFieldNumber = 1;
    private global::Packet.RankDescRole roleInfo_;
    /// <summary>
    ///角色详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescRole RoleInfo {
      get { return roleInfo_; }
      set {
        roleInfo_ = value;
      }
    }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 2;
    private global::Packet.RankDescPet petInfo_;
    /// <summary>
    ///宠物详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescPet PetInfo {
      get { return petInfo_; }
      set {
        petInfo_ = value;
      }
    }

    /// <summary>Field number for the "equipInfo" field.</summary>
    public const int EquipInfoFieldNumber = 3;
    private global::Packet.RankDescEquip equipInfo_;
    /// <summary>
    ///装备详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescEquip EquipInfo {
      get { return equipInfo_; }
      set {
        equipInfo_ = value;
      }
    }

    /// <summary>Field number for the "arenaInfo" field.</summary>
    public const int ArenaInfoFieldNumber = 4;
    private global::Packet.RankDescArena arenaInfo_;
    /// <summary>
    ///荣耀竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescArena ArenaInfo {
      get { return arenaInfo_; }
      set {
        arenaInfo_ = value;
      }
    }

    /// <summary>Field number for the "survivalInfo" field.</summary>
    public const int SurvivalInfoFieldNumber = 5;
    private global::Packet.RankDescSurvival survivalInfo_;
    /// <summary>
    ///生存竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescSurvival SurvivalInfo {
      get { return survivalInfo_; }
      set {
        survivalInfo_ = value;
      }
    }

    /// <summary>Field number for the "tiantiInfo" field.</summary>
    public const int TiantiInfoFieldNumber = 6;
    private global::Packet.RankDescTianTi tiantiInfo_;
    /// <summary>
    ///天梯竞技场详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankDescTianTi TiantiInfo {
      get { return tiantiInfo_; }
      set {
        tiantiInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roleInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoleInfo);
      }
      if (petInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PetInfo);
      }
      if (equipInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EquipInfo);
      }
      if (arenaInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ArenaInfo);
      }
      if (survivalInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SurvivalInfo);
      }
      if (tiantiInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TiantiInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleInfo);
      }
      if (petInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetInfo);
      }
      if (equipInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipInfo);
      }
      if (arenaInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArenaInfo);
      }
      if (survivalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurvivalInfo);
      }
      if (tiantiInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TiantiInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleInfo_ == null) {
              roleInfo_ = new global::Packet.RankDescRole();
            }
            input.ReadMessage(roleInfo_);
            break;
          }
          case 18: {
            if (petInfo_ == null) {
              petInfo_ = new global::Packet.RankDescPet();
            }
            input.ReadMessage(petInfo_);
            break;
          }
          case 26: {
            if (equipInfo_ == null) {
              equipInfo_ = new global::Packet.RankDescEquip();
            }
            input.ReadMessage(equipInfo_);
            break;
          }
          case 34: {
            if (arenaInfo_ == null) {
              arenaInfo_ = new global::Packet.RankDescArena();
            }
            input.ReadMessage(arenaInfo_);
            break;
          }
          case 42: {
            if (survivalInfo_ == null) {
              survivalInfo_ = new global::Packet.RankDescSurvival();
            }
            input.ReadMessage(survivalInfo_);
            break;
          }
          case 50: {
            if (tiantiInfo_ == null) {
              tiantiInfo_ = new global::Packet.RankDescTianTi();
            }
            input.ReadMessage(tiantiInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class RankUnitDescList : pb::IMessage {
    private static readonly pb::MessageParser<RankUnitDescList> _parser = new pb::MessageParser<RankUnitDescList>(() => new RankUnitDescList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankUnitDescList> Parser { get { return _parser; } }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RankUnitDesc> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RankUnitDesc.Parser);
    private readonly pbc::RepeatedField<global::Packet.RankUnitDesc> units_ = new pbc::RepeatedField<global::Packet.RankUnitDesc>();
    /// <summary>
    ///详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RankUnitDesc> Units {
      get { return units_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRankBatUnitDescRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankBatUnitDescRes> _parser = new pb::MessageParser<CmdRankBatUnitDescRes>(() => new CmdRankBatUnitDescRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankBatUnitDescRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///大类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private uint subType_;
    /// <summary>
    ///子类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "groupType" field.</summary>
    public const int GroupTypeFieldNumber = 3;
    private uint groupType_;
    /// <summary>
    ///分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 4;
    private global::Packet.RankUnitDescList desc_;
    /// <summary>
    ///榜单元详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RankUnitDescList Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubType);
      }
      if (GroupType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GroupType);
      }
      if (desc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubType);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupType);
      }
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            SubType = input.ReadUInt32();
            break;
          }
          case 24: {
            GroupType = input.ReadUInt32();
            break;
          }
          case 34: {
            if (desc_ == null) {
              desc_ = new global::Packet.RankUnitDescList();
            }
            input.ReadMessage(desc_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdRankCacheExpireNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankCacheExpireNtf> _parser = new pb::MessageParser<CmdRankCacheExpireNtf>(() => new CmdRankCacheExpireNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankCacheExpireNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
