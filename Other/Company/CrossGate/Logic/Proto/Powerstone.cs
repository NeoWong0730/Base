// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: powerstone.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 4000+
  /// </summary>
  public enum CmdPowerStone {
    None = 0,
    /// <summary>
    ///数据通知
    /// </summary>
    DataNtf = 4001,
    /// <summary>
    ///激活晶石
    /// </summary>
    ActivateReq = 4002,
    ActivateRes = 4003,
    /// <summary>
    ///升级晶石(练晶)
    /// </summary>
    LevelUpReq = 4004,
    LevelUpRes = 4005,
    /// <summary>
    ///晶石进阶
    /// </summary>
    StageUpReq = 4006,
    StageUpRes = 4007,
    /// <summary>
    ///晶石属性逆转
    /// </summary>
    ReverseReq = 4008,
    ReverseRes = 4009,
    /// <summary>
    ///晶石分解
    /// </summary>
    DecomposeReq = 4010,
    DecomposeRes = 4011,
  }

  public enum ErrorPowerStone {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///表中未找到该id
    /// </summary>
    StoneId = 4001,
    /// <summary>
    ///能量晶石功能未开启
    /// </summary>
    NonOpen = 4002,
    /// <summary>
    ///玩家职业不符合限定
    /// </summary>
    Career = 4003,
    /// <summary>
    ///玩家等级不足
    /// </summary>
    RoleLv = 4004,
    /// <summary>
    ///该晶石已激活
    /// </summary>
    Activated = 4005,
    /// <summary>
    ///该晶石未激活
    /// </summary>
    Unactivated = 4006,
    /// <summary>
    ///晶石等级不足
    /// </summary>
    StoneLv = 4007,
    /// <summary>
    ///晶石已达最大阶级
    /// </summary>
    StageMax = 4008,
    /// <summary>
    ///晶石每周炼晶次数已达最大
    /// </summary>
    UpCountMax = 4009,
    /// <summary>
    ///该晶石不可炼晶
    /// </summary>
    UpLvType = 4010,
    /// <summary>
    ///晶石已达最大等级
    /// </summary>
    LvMax = 4011,
    /// <summary>
    ///晶石阶级不足
    /// </summary>
    StageNon = 4012,
    /// <summary>
    ///晶石分解返还道具参数错误
    /// </summary>
    ExpItem = 4013,
  }

  #endregion

  #region Messages
  /// <summary>
  ///光暗属性
  /// </summary>
  public sealed class StageSkillUnit : pb::IMessage {
    private static readonly pb::MessageParser<StageSkillUnit> _parser = new pb::MessageParser<StageSkillUnit>(() => new StageSkillUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageSkillUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private uint skillType_;
    /// <summary>
    ///0-光属性，1-暗属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillType);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillType);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillType = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///晶石数据
  /// </summary>
  public sealed class PowerStoneUnit : pb::IMessage {
    private static readonly pb::MessageParser<PowerStoneUnit> _parser = new pb::MessageParser<PowerStoneUnit>(() => new PowerStoneUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerStoneUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///晶石等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private uint exp_;
    /// <summary>
    ///晶石经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private uint stage_;
    /// <summary>
    ///晶石阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "stageSkill" field.</summary>
    public const int StageSkillFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.StageSkillUnit> _repeated_stageSkill_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.StageSkillUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.StageSkillUnit> stageSkill_ = new pbc::RepeatedField<global::Packet.StageSkillUnit>();
    /// <summary>
    ///晶石光暗属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.StageSkillUnit> StageSkill {
      get { return stageSkill_; }
    }

    /// <summary>Field number for the "chaosSkill" field.</summary>
    public const int ChaosSkillFieldNumber = 6;
    private uint chaosSkill_;
    /// <summary>
    ///晶石混沌属性技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChaosSkill {
      get { return chaosSkill_; }
      set {
        chaosSkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exp);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Stage);
      }
      stageSkill_.WriteTo(output, _repeated_stageSkill_codec);
      if (ChaosSkill != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChaosSkill);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      size += stageSkill_.CalculateSize(_repeated_stageSkill_codec);
      if (ChaosSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChaosSkill);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt32();
            break;
          }
          case 32: {
            Stage = input.ReadUInt32();
            break;
          }
          case 42: {
            stageSkill_.AddEntriesFrom(input, _repeated_stageSkill_codec);
            break;
          }
          case 48: {
            ChaosSkill = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///数据通知
  /// </summary>
  public sealed class CmdPowerStoneDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneDataNtf> _parser = new pb::MessageParser<CmdPowerStoneDataNtf>(() => new CmdPowerStoneDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "powerStoneInfo" field.</summary>
    public const int PowerStoneInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PowerStoneUnit> _repeated_powerStoneInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PowerStoneUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PowerStoneUnit> powerStoneInfo_ = new pbc::RepeatedField<global::Packet.PowerStoneUnit>();
    /// <summary>
    ///晶石数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PowerStoneUnit> PowerStoneInfo {
      get { return powerStoneInfo_; }
    }

    /// <summary>Field number for the "allStage" field.</summary>
    public const int AllStageFieldNumber = 2;
    private uint allStage_;
    /// <summary>
    ///总星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllStage {
      get { return allStage_; }
      set {
        allStage_ = value;
      }
    }

    /// <summary>Field number for the "LevelUpCount" field.</summary>
    public const int LevelUpCountFieldNumber = 3;
    private global::Packet.ResLimit levelUpCount_;
    /// <summary>
    ///本周练晶次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit LevelUpCount {
      get { return levelUpCount_; }
      set {
        levelUpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      powerStoneInfo_.WriteTo(output, _repeated_powerStoneInfo_codec);
      if (AllStage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllStage);
      }
      if (levelUpCount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelUpCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += powerStoneInfo_.CalculateSize(_repeated_powerStoneInfo_codec);
      if (AllStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllStage);
      }
      if (levelUpCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUpCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            powerStoneInfo_.AddEntriesFrom(input, _repeated_powerStoneInfo_codec);
            break;
          }
          case 16: {
            AllStage = input.ReadUInt32();
            break;
          }
          case 26: {
            if (levelUpCount_ == null) {
              levelUpCount_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(levelUpCount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///激活晶石
  /// </summary>
  public sealed class CmdPowerStoneActivateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneActivateReq> _parser = new pb::MessageParser<CmdPowerStoneActivateReq>(() => new CmdPowerStoneActivateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneActivateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPowerStoneActivateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneActivateRes> _parser = new pb::MessageParser<CmdPowerStoneActivateRes>(() => new CmdPowerStoneActivateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneActivateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "newPowerStone" field.</summary>
    public const int NewPowerStoneFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PowerStoneUnit> _repeated_newPowerStone_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PowerStoneUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PowerStoneUnit> newPowerStone_ = new pbc::RepeatedField<global::Packet.PowerStoneUnit>();
    /// <summary>
    ///激活的晶石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PowerStoneUnit> NewPowerStone {
      get { return newPowerStone_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      newPowerStone_.WriteTo(output, _repeated_newPowerStone_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += newPowerStone_.CalculateSize(_repeated_newPowerStone_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            newPowerStone_.AddEntriesFrom(input, _repeated_newPowerStone_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级晶石(练晶)
  /// </summary>
  public sealed class CmdPowerStoneLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneLevelUpReq> _parser = new pb::MessageParser<CmdPowerStoneLevelUpReq>(() => new CmdPowerStoneLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///道具id, 0-消耗货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNumber" field.</summary>
    public const int ItemNumberFieldNumber = 3;
    private uint itemNumber_;
    /// <summary>
    ///使用道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNumber {
      get { return itemNumber_; }
      set {
        itemNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (ItemNumber != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPowerStoneLevelUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneLevelUpRes> _parser = new pb::MessageParser<CmdPowerStoneLevelUpRes>(() => new CmdPowerStoneLevelUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneLevelUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///晶石等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private uint exp_;
    /// <summary>
    ///晶石经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "LevelUpCount" field.</summary>
    public const int LevelUpCountFieldNumber = 4;
    private global::Packet.ResLimit levelUpCount_;
    /// <summary>
    ///本周练晶次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit LevelUpCount {
      get { return levelUpCount_; }
      set {
        levelUpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exp);
      }
      if (levelUpCount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelUpCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (levelUpCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUpCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt32();
            break;
          }
          case 34: {
            if (levelUpCount_ == null) {
              levelUpCount_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(levelUpCount_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///晶石等级
  /// </summary>
  public sealed class StoneLevelUnit : pb::IMessage {
    private static readonly pb::MessageParser<StoneLevelUnit> _parser = new pb::MessageParser<StoneLevelUnit>(() => new StoneLevelUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StoneLevelUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///晶石等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///晶石进阶
  /// </summary>
  public sealed class CmdPowerStoneStageUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneStageUpReq> _parser = new pb::MessageParser<CmdPowerStoneStageUpReq>(() => new CmdPowerStoneStageUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneStageUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPowerStoneStageUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneStageUpRes> _parser = new pb::MessageParser<CmdPowerStoneStageUpRes>(() => new CmdPowerStoneStageUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneStageUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "powerStone" field.</summary>
    public const int PowerStoneFieldNumber = 1;
    private global::Packet.PowerStoneUnit powerStone_;
    /// <summary>
    ///晶石数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PowerStoneUnit PowerStone {
      get { return powerStone_; }
      set {
        powerStone_ = value;
      }
    }

    /// <summary>Field number for the "allStage" field.</summary>
    public const int AllStageFieldNumber = 2;
    private uint allStage_;
    /// <summary>
    ///总星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllStage {
      get { return allStage_; }
      set {
        allStage_ = value;
      }
    }

    /// <summary>Field number for the "stoneLevelUp" field.</summary>
    public const int StoneLevelUpFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.StoneLevelUnit> _repeated_stoneLevelUp_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.StoneLevelUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.StoneLevelUnit> stoneLevelUp_ = new pbc::RepeatedField<global::Packet.StoneLevelUnit>();
    /// <summary>
    ///星数变化导致的晶石等级变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.StoneLevelUnit> StoneLevelUp {
      get { return stoneLevelUp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (powerStone_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PowerStone);
      }
      if (AllStage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllStage);
      }
      stoneLevelUp_.WriteTo(output, _repeated_stoneLevelUp_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (powerStone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerStone);
      }
      if (AllStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllStage);
      }
      size += stoneLevelUp_.CalculateSize(_repeated_stoneLevelUp_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (powerStone_ == null) {
              powerStone_ = new global::Packet.PowerStoneUnit();
            }
            input.ReadMessage(powerStone_);
            break;
          }
          case 16: {
            AllStage = input.ReadUInt32();
            break;
          }
          case 26: {
            stoneLevelUp_.AddEntriesFrom(input, _repeated_stoneLevelUp_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///晶石属性逆转
  /// </summary>
  public sealed class CmdPowerStoneReverseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneReverseReq> _parser = new pb::MessageParser<CmdPowerStoneReverseReq>(() => new CmdPowerStoneReverseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneReverseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    /// <summary>
    ///要逆转的晶石阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPowerStoneReverseRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneReverseRes> _parser = new pb::MessageParser<CmdPowerStoneReverseRes>(() => new CmdPowerStoneReverseRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneReverseRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    /// <summary>
    ///要逆转的晶石阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "newStageSkill" field.</summary>
    public const int NewStageSkillFieldNumber = 3;
    private global::Packet.StageSkillUnit newStageSkill_;
    /// <summary>
    ///新的晶石光暗属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.StageSkillUnit NewStageSkill {
      get { return newStageSkill_; }
      set {
        newStageSkill_ = value;
      }
    }

    /// <summary>Field number for the "chaosSkill" field.</summary>
    public const int ChaosSkillFieldNumber = 4;
    private uint chaosSkill_;
    /// <summary>
    ///晶石混沌属性技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChaosSkill {
      get { return chaosSkill_; }
      set {
        chaosSkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
      if (newStageSkill_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewStageSkill);
      }
      if (ChaosSkill != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChaosSkill);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (newStageSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewStageSkill);
      }
      if (ChaosSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChaosSkill);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
          case 26: {
            if (newStageSkill_ == null) {
              newStageSkill_ = new global::Packet.StageSkillUnit();
            }
            input.ReadMessage(newStageSkill_);
            break;
          }
          case 32: {
            ChaosSkill = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///晶石分解
  /// </summary>
  public sealed class CmdPowerStoneDecomposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneDecomposeReq> _parser = new pb::MessageParser<CmdPowerStoneDecomposeReq>(() => new CmdPowerStoneDecomposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneDecomposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPowerStoneDecomposeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPowerStoneDecomposeRes> _parser = new pb::MessageParser<CmdPowerStoneDecomposeRes>(() => new CmdPowerStoneDecomposeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPowerStoneDecomposeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///晶石id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "allStage" field.</summary>
    public const int AllStageFieldNumber = 2;
    private uint allStage_;
    /// <summary>
    ///总星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllStage {
      get { return allStage_; }
      set {
        allStage_ = value;
      }
    }

    /// <summary>Field number for the "stoneLevelUp" field.</summary>
    public const int StoneLevelUpFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.StoneLevelUnit> _repeated_stoneLevelUp_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.StoneLevelUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.StoneLevelUnit> stoneLevelUp_ = new pbc::RepeatedField<global::Packet.StoneLevelUnit>();
    /// <summary>
    ///星数变化导致的晶石等级变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.StoneLevelUnit> StoneLevelUp {
      get { return stoneLevelUp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (AllStage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllStage);
      }
      stoneLevelUp_.WriteTo(output, _repeated_stoneLevelUp_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (AllStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllStage);
      }
      size += stoneLevelUp_.CalculateSize(_repeated_stoneLevelUp_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            AllStage = input.ReadUInt32();
            break;
          }
          case 26: {
            stoneLevelUp_.AddEntriesFrom(input, _repeated_stoneLevelUp_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
