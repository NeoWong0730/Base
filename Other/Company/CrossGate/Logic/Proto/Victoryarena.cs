// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: victoryarena.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///7500
  /// </summary>
  public enum CmdVictoryArena {
    None = 0,
    Begin = 7500,
    /// <summary>
    /// 上线推送
    /// </summary>
    DataNty = 7501,
    /// <summary>
    /// 请求挑战
    /// </summary>
    ChallengeReq = 7502,
    /// <summary>
    /// 请求刷新(打开界面也算作刷新)
    /// </summary>
    RefreshReq = 7503,
    /// <summary>
    /// 刷新返回
    /// </summary>
    RefreshNty = 7504,
    /// <summary>
    /// 请求购买挑战次数
    /// </summary>
    BuyChallengeTimesReq = 7505,
    /// <summary>
    /// 通知每日刷新的数据更新
    /// </summary>
    DailyUpdateNty = 7506,
    /// <summary>
    /// 通知更新历史最高排名
    /// </summary>
    HighestRankUpdateNty = 7507,
    /// <summary>
    /// 请求领取排名奖励
    /// </summary>
    ReceiveRankRewardReq = 7508,
    /// <summary>
    /// 领取排名奖励返回
    /// </summary>
    ReceiveRankRewardRes = 7509,
    /// <summary>
    /// 请求获取对战记录
    /// </summary>
    PullFightRecordReq = 7510,
    /// <summary>
    /// 获取对战记录返回
    /// </summary>
    PullFightRecordRes = 7511,
    /// <summary>
    /// 请求反击
    /// </summary>
    FightBackReq = 7512,
    /// <summary>
    /// 通知更新系统数据
    /// </summary>
    SystemUpdateNty = 7513,
    /// <summary>
    /// 请求排行列表
    /// </summary>
    RankListReq = 7514,
    /// <summary>
    /// 排行列表返回
    /// </summary>
    RankListRes = 7515,
    /// <summary>
    /// 请求扫荡
    /// </summary>
    FastChallengeReq = 7516,
    /// <summary>
    /// 扫荡返回
    /// </summary>
    FastChallengeRes = 7517,
  }

  public enum ErrorVictoryArena {
    None = 0,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 7501,
    /// <summary>
    /// 刷新太频繁
    /// </summary>
    RefreshTooOften = 7502,
    /// <summary>
    /// 找不到对手
    /// </summary>
    OppoNotFound = 7503,
    /// <summary>
    /// 挑战请求的下标越界
    /// </summary>
    IndexOutOfBounds = 7504,
    /// <summary>
    /// 数据异常
    /// </summary>
    DataError = 7505,
    /// <summary>
    /// 挑战对象正在被挑战
    /// </summary>
    OppoUnderAttack = 7506,
    /// <summary>
    /// 玩家已在战斗中
    /// </summary>
    AlreadyInFight = 7507,
    /// <summary>
    /// 无法开启战斗
    /// </summary>
    CanNotStartFight = 7508,
    /// <summary>
    /// 无法生成对手
    /// </summary>
    CanNotCreateOppo = 7509,
    /// <summary>
    /// 功能未开启
    /// </summary>
    FunctionNotOpen = 7510,
    /// <summary>
    /// 不能组队挑战
    /// </summary>
    CanNotChallengeWithTeam = 7511,
    /// <summary>
    /// 排名已改变
    /// </summary>
    RankHasChanged = 7512,
    /// <summary>
    /// 对手排名已改变
    /// </summary>
    OppoRankHasChanged = 7513,
    /// <summary>
    /// 剩余挑战次数不足
    /// </summary>
    NoChallengeTimesLeft = 7514,
    /// <summary>
    /// 剩余购买次数不足
    /// </summary>
    NoBuyTimesLeft = 7515,
    /// <summary>
    /// 重复的挑战请求
    /// </summary>
    RepeatedChallengeRequest = 7516,
    /// <summary>
    /// 上一档奖励还未领取
    /// </summary>
    LastRewardNotReceived = 7517,
    /// <summary>
    /// 无效的奖励id
    /// </summary>
    InvalidRewardId = 7518,
    /// <summary>
    /// 未达到排名要求
    /// </summary>
    HighestRankDoesNotMeet = 7519,
    /// <summary>
    /// 无效的页码
    /// </summary>
    InvalidPage = 7520,
    /// <summary>
    /// game断开连接导致本次战斗无效(会补偿挑战次数)
    /// </summary>
    GamesvrDisconn = 7521,
    /// <summary>
    /// 不能反击该玩家
    /// </summary>
    CanNotFightBackThisRole = 7522,
    /// <summary>
    /// 扫荡未开放
    /// </summary>
    FastChallengeNotOpen = 7523,
    /// <summary>
    /// 重复领取
    /// </summary>
    RepeatReceive = 7524,
  }

  public enum VictoryArenaActiveReason {
    None = 0,
    /// <summary>
    /// 购买挑战次数
    /// </summary>
    BuyChallengeTimes = 7501,
    /// <summary>
    /// 挑战奖励
    /// </summary>
    ChallengeReward = 7502,
    /// <summary>
    /// 最高排名奖励
    /// </summary>
    HighestRankReward = 7503,
    /// <summary>
    /// 扫荡
    /// </summary>
    FastChallenge = 7504,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 竞技场阵容宠物
  /// </summary>
  public sealed class VictoryArenaFormationPet : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaFormationPet> _parser = new pb::MessageParser<VictoryArenaFormationPet>(() => new VictoryArenaFormationPet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaFormationPet> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private uint pos_;
    /// <summary>
    /// 阵容位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "petTid" field.</summary>
    public const int PetTidFieldNumber = 2;
    private uint petTid_;
    /// <summary>
    /// 宠物tid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetTid {
      get { return petTid_; }
      set {
        petTid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pos);
      }
      if (PetTid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetTid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (PetTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetTid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadUInt32();
            break;
          }
          case 16: {
            PetTid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场阵容伙伴
  /// </summary>
  public sealed class VictoryArenaFormationPartner : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaFormationPartner> _parser = new pb::MessageParser<VictoryArenaFormationPartner>(() => new VictoryArenaFormationPartner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaFormationPartner> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private uint pos_;
    /// <summary>
    /// 阵容位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "partnerTid" field.</summary>
    public const int PartnerTidFieldNumber = 2;
    private uint partnerTid_;
    /// <summary>
    /// 伙伴tid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerTid {
      get { return partnerTid_; }
      set {
        partnerTid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pos);
      }
      if (PartnerTid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PartnerTid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (PartnerTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerTid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadUInt32();
            break;
          }
          case 16: {
            PartnerTid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场阵容
  /// </summary>
  public sealed class VictoryArenaFormation : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaFormation> _parser = new pb::MessageParser<VictoryArenaFormation>(() => new VictoryArenaFormation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaFormation> Parser { get { return _parser; } }

    /// <summary>Field number for the "pets" field.</summary>
    public const int PetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VictoryArenaFormationPet> _repeated_pets_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VictoryArenaFormationPet.Parser);
    private readonly pbc::RepeatedField<global::Packet.VictoryArenaFormationPet> pets_ = new pbc::RepeatedField<global::Packet.VictoryArenaFormationPet>();
    /// <summary>
    /// 宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VictoryArenaFormationPet> Pets {
      get { return pets_; }
    }

    /// <summary>Field number for the "partners" field.</summary>
    public const int PartnersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.VictoryArenaFormationPartner> _repeated_partners_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.VictoryArenaFormationPartner.Parser);
    private readonly pbc::RepeatedField<global::Packet.VictoryArenaFormationPartner> partners_ = new pbc::RepeatedField<global::Packet.VictoryArenaFormationPartner>();
    /// <summary>
    /// 伙伴列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VictoryArenaFormationPartner> Partners {
      get { return partners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pets_.WriteTo(output, _repeated_pets_codec);
      partners_.WriteTo(output, _repeated_partners_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pets_.CalculateSize(_repeated_pets_codec);
      size += partners_.CalculateSize(_repeated_partners_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pets_.AddEntriesFrom(input, _repeated_pets_codec);
            break;
          }
          case 18: {
            partners_.AddEntriesFrom(input, _repeated_partners_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场对手单位
  /// </summary>
  public sealed class VictoryArenaOppoUnit : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaOppoUnit> _parser = new pb::MessageParser<VictoryArenaOppoUnit>(() => new VictoryArenaOppoUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaOppoUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id(机器人为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 4;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "fashionInfo" field.</summary>
    public const int FashionInfoFieldNumber = 7;
    private global::Packet.MapFashionList fashionInfo_;
    /// <summary>
    /// 穿戴的时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapFashionList FashionInfo {
      get { return fashionInfo_; }
      set {
        fashionInfo_ = value;
      }
    }

    /// <summary>Field number for the "weaponItemID" field.</summary>
    public const int WeaponItemIDFieldNumber = 8;
    private uint weaponItemID_;
    /// <summary>
    /// 主手武器的ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponItemID {
      get { return weaponItemID_; }
      set {
        weaponItemID_ = value;
      }
    }

    /// <summary>Field number for the "mountInfoId" field.</summary>
    public const int MountInfoIdFieldNumber = 9;
    private uint mountInfoId_;
    /// <summary>
    /// 坐骑InfoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountInfoId {
      get { return mountInfoId_; }
      set {
        mountInfoId_ = value;
      }
    }

    /// <summary>Field number for the "followPetInfo" field.</summary>
    public const int FollowPetInfoFieldNumber = 10;
    private uint followPetInfo_;
    /// <summary>
    /// 跟随宠物宠物infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetInfo {
      get { return followPetInfo_; }
      set {
        followPetInfo_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 11;
    private uint score_;
    /// <summary>
    /// 综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 12;
    private global::Packet.VictoryArenaFormation formation_;
    /// <summary>
    /// 阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VictoryArenaFormation Formation {
      get { return formation_; }
      set {
        formation_ = value;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 13;
    private uint photo_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    /// <summary>Field number for the "photoFrame" field.</summary>
    public const int PhotoFrameFieldNumber = 14;
    private uint photoFrame_;
    /// <summary>
    /// 头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoFrame {
      get { return photoFrame_; }
      set {
        photoFrame_ = value;
      }
    }

    /// <summary>Field number for the "followPetSuitId" field.</summary>
    public const int FollowPetSuitIdFieldNumber = 15;
    private uint followPetSuitId_;
    /// <summary>
    /// 跟随宠物元核id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetSuitId {
      get { return followPetSuitId_; }
      set {
        followPetSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
      if (fashionInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FashionInfo);
      }
      if (WeaponItemID != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(WeaponItemID);
      }
      if (MountInfoId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MountInfoId);
      }
      if (FollowPetInfo != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(FollowPetInfo);
      }
      if (Score != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Score);
      }
      if (formation_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Formation);
      }
      if (Photo != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Photo);
      }
      if (PhotoFrame != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PhotoFrame);
      }
      if (FollowPetSuitId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(FollowPetSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (fashionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FashionInfo);
      }
      if (WeaponItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponItemID);
      }
      if (MountInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountInfoId);
      }
      if (FollowPetInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetInfo);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (formation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Formation);
      }
      if (Photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
      }
      if (PhotoFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoFrame);
      }
      if (FollowPetSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            Career = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 58: {
            if (fashionInfo_ == null) {
              fashionInfo_ = new global::Packet.MapFashionList();
            }
            input.ReadMessage(fashionInfo_);
            break;
          }
          case 64: {
            WeaponItemID = input.ReadUInt32();
            break;
          }
          case 72: {
            MountInfoId = input.ReadUInt32();
            break;
          }
          case 80: {
            FollowPetInfo = input.ReadUInt32();
            break;
          }
          case 88: {
            Score = input.ReadUInt32();
            break;
          }
          case 98: {
            if (formation_ == null) {
              formation_ = new global::Packet.VictoryArenaFormation();
            }
            input.ReadMessage(formation_);
            break;
          }
          case 104: {
            Photo = input.ReadUInt32();
            break;
          }
          case 112: {
            PhotoFrame = input.ReadUInt32();
            break;
          }
          case 120: {
            FollowPetSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家竞技场每日刷新的数据
  /// </summary>
  public sealed class RoleVictoryArenaDaily : pb::IMessage {
    private static readonly pb::MessageParser<RoleVictoryArenaDaily> _parser = new pb::MessageParser<RoleVictoryArenaDaily>(() => new RoleVictoryArenaDaily());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleVictoryArenaDaily> Parser { get { return _parser; } }

    /// <summary>Field number for the "nextResetTime" field.</summary>
    public const int NextResetTimeFieldNumber = 1;
    private uint nextResetTime_;
    /// <summary>
    /// 下次重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextResetTime {
      get { return nextResetTime_; }
      set {
        nextResetTime_ = value;
      }
    }

    /// <summary>Field number for the "leftChallengeTimes" field.</summary>
    public const int LeftChallengeTimesFieldNumber = 2;
    private uint leftChallengeTimes_;
    /// <summary>
    /// 剩余挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftChallengeTimes {
      get { return leftChallengeTimes_; }
      set {
        leftChallengeTimes_ = value;
      }
    }

    /// <summary>Field number for the "leftBuyTimes" field.</summary>
    public const int LeftBuyTimesFieldNumber = 3;
    private uint leftBuyTimes_;
    /// <summary>
    /// 剩余购买挑战次数的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftBuyTimes {
      get { return leftBuyTimes_; }
      set {
        leftBuyTimes_ = value;
      }
    }

    /// <summary>Field number for the "todayChallengeTimes" field.</summary>
    public const int TodayChallengeTimesFieldNumber = 4;
    private uint todayChallengeTimes_;
    /// <summary>
    /// 今日挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayChallengeTimes {
      get { return todayChallengeTimes_; }
      set {
        todayChallengeTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextResetTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NextResetTime);
      }
      if (LeftChallengeTimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeftChallengeTimes);
      }
      if (LeftBuyTimes != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeftBuyTimes);
      }
      if (TodayChallengeTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TodayChallengeTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextResetTime);
      }
      if (LeftChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftChallengeTimes);
      }
      if (LeftBuyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftBuyTimes);
      }
      if (TodayChallengeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TodayChallengeTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextResetTime = input.ReadUInt32();
            break;
          }
          case 16: {
            LeftChallengeTimes = input.ReadUInt32();
            break;
          }
          case 24: {
            LeftBuyTimes = input.ReadUInt32();
            break;
          }
          case 32: {
            TodayChallengeTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家竞技场奖励数据
  /// </summary>
  public sealed class RoleVictoryArenaReward : pb::IMessage {
    private static readonly pb::MessageParser<RoleVictoryArenaReward> _parser = new pb::MessageParser<RoleVictoryArenaReward>(() => new RoleVictoryArenaReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleVictoryArenaReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "highestRank" field.</summary>
    public const int HighestRankFieldNumber = 1;
    private uint highestRank_;
    /// <summary>
    /// 历史最高排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestRank {
      get { return highestRank_; }
      set {
        highestRank_ = value;
      }
    }

    /// <summary>Field number for the "receivedReward" field.</summary>
    public const int ReceivedRewardFieldNumber = 2;
    private uint receivedReward_;
    /// <summary>
    /// 已领取过的奖励(1 &lt;&lt; (奖励表id - 1), bit为1表示已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReceivedReward {
      get { return receivedReward_; }
      set {
        receivedReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HighestRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HighestRank);
      }
      if (ReceivedReward != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReceivedReward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HighestRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestRank);
      }
      if (ReceivedReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReceivedReward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HighestRank = input.ReadUInt32();
            break;
          }
          case 16: {
            ReceivedReward = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场系统数据
  /// </summary>
  public sealed class SystemVictoryArena : pb::IMessage {
    private static readonly pb::MessageParser<SystemVictoryArena> _parser = new pb::MessageParser<SystemVictoryArena>(() => new SystemVictoryArena());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemVictoryArena> Parser { get { return _parser; } }

    /// <summary>Field number for the "luckyPartnerId" field.</summary>
    public const int LuckyPartnerIdFieldNumber = 1;
    private uint luckyPartnerId_;
    /// <summary>
    /// 幸运伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LuckyPartnerId {
      get { return luckyPartnerId_; }
      set {
        luckyPartnerId_ = value;
      }
    }

    /// <summary>Field number for the "luckyPetRace" field.</summary>
    public const int LuckyPetRaceFieldNumber = 2;
    private uint luckyPetRace_;
    /// <summary>
    /// 幸运宠物种族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LuckyPetRace {
      get { return luckyPetRace_; }
      set {
        luckyPetRace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LuckyPartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LuckyPartnerId);
      }
      if (LuckyPetRace != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LuckyPetRace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LuckyPartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckyPartnerId);
      }
      if (LuckyPetRace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckyPetRace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LuckyPartnerId = input.ReadUInt32();
            break;
          }
          case 16: {
            LuckyPetRace = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaDataNty> _parser = new pb::MessageParser<CmdVictoryArenaDataNty>(() => new CmdVictoryArenaDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 1;
    private global::Packet.RoleVictoryArenaDaily daily_;
    /// <summary>
    /// 玩家竞技场每日刷新的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleVictoryArenaDaily Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private global::Packet.RoleVictoryArenaReward reward_;
    /// <summary>
    /// 玩家竞技场奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleVictoryArenaReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 3;
    private global::Packet.SystemVictoryArena system_;
    /// <summary>
    /// 竞技场系统数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemVictoryArena System {
      get { return system_; }
      set {
        system_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (daily_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Daily);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (system_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(System);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (daily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Daily);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (system_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (daily_ == null) {
              daily_ = new global::Packet.RoleVictoryArenaDaily();
            }
            input.ReadMessage(daily_);
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::Packet.RoleVictoryArenaReward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 26: {
            if (system_ == null) {
              system_ = new global::Packet.SystemVictoryArena();
            }
            input.ReadMessage(system_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaChallengeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaChallengeReq> _parser = new pb::MessageParser<CmdVictoryArenaChallengeReq>(() => new CmdVictoryArenaChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaChallengeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    /// 当前对手信息列表的下标(0~2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdVictoryArenaRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaRefreshReq> _parser = new pb::MessageParser<CmdVictoryArenaRefreshReq>(() => new CmdVictoryArenaRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaRefreshReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdVictoryArenaRefreshNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaRefreshNty> _parser = new pb::MessageParser<CmdVictoryArenaRefreshNty>(() => new CmdVictoryArenaRefreshNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaRefreshNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "nextRefreshTime" field.</summary>
    public const int NextRefreshTimeFieldNumber = 1;
    private uint nextRefreshTime_;
    /// <summary>
    /// 下次可刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextRefreshTime {
      get { return nextRefreshTime_; }
      set {
        nextRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "oppoList" field.</summary>
    public const int OppoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.VictoryArenaOppoUnit> _repeated_oppoList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.VictoryArenaOppoUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.VictoryArenaOppoUnit> oppoList_ = new pbc::RepeatedField<global::Packet.VictoryArenaOppoUnit>();
    /// <summary>
    /// 对手信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VictoryArenaOppoUnit> OppoList {
      get { return oppoList_; }
    }

    /// <summary>Field number for the "newDefencerRecord" field.</summary>
    public const int NewDefencerRecordFieldNumber = 4;
    private bool newDefencerRecord_;
    /// <summary>
    /// 是否有新的防守记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewDefencerRecord {
      get { return newDefencerRecord_; }
      set {
        newDefencerRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextRefreshTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NextRefreshTime);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      oppoList_.WriteTo(output, _repeated_oppoList_codec);
      if (NewDefencerRecord != false) {
        output.WriteRawTag(32);
        output.WriteBool(NewDefencerRecord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextRefreshTime);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      size += oppoList_.CalculateSize(_repeated_oppoList_codec);
      if (NewDefencerRecord != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextRefreshTime = input.ReadUInt32();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 26: {
            oppoList_.AddEntriesFrom(input, _repeated_oppoList_codec);
            break;
          }
          case 32: {
            NewDefencerRecord = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdVictoryArenaBuyChallengeTimesReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaBuyChallengeTimesReq> _parser = new pb::MessageParser<CmdVictoryArenaBuyChallengeTimesReq>(() => new CmdVictoryArenaBuyChallengeTimesReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaBuyChallengeTimesReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdVictoryArenaDailyUpdateNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaDailyUpdateNty> _parser = new pb::MessageParser<CmdVictoryArenaDailyUpdateNty>(() => new CmdVictoryArenaDailyUpdateNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaDailyUpdateNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 1;
    private global::Packet.RoleVictoryArenaDaily daily_;
    /// <summary>
    /// 玩家竞技场每日刷新的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleVictoryArenaDaily Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (daily_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Daily);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (daily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Daily);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (daily_ == null) {
              daily_ = new global::Packet.RoleVictoryArenaDaily();
            }
            input.ReadMessage(daily_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaHighestRankUpdateNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaHighestRankUpdateNty> _parser = new pb::MessageParser<CmdVictoryArenaHighestRankUpdateNty>(() => new CmdVictoryArenaHighestRankUpdateNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaHighestRankUpdateNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "highestRank" field.</summary>
    public const int HighestRankFieldNumber = 1;
    private uint highestRank_;
    /// <summary>
    /// 历史最高排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestRank {
      get { return highestRank_; }
      set {
        highestRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HighestRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HighestRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HighestRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HighestRank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaReceiveRankRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaReceiveRankRewardReq> _parser = new pb::MessageParser<CmdVictoryArenaReceiveRankRewardReq>(() => new CmdVictoryArenaReceiveRankRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaReceiveRankRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardId" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private uint rewardId_;
    /// <summary>
    /// 奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaReceiveRankRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaReceiveRankRewardRes> _parser = new pb::MessageParser<CmdVictoryArenaReceiveRankRewardRes>(() => new CmdVictoryArenaReceiveRankRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaReceiveRankRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardId" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private uint rewardId_;
    /// <summary>
    /// 奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗记录对手
  /// </summary>
  public sealed class VictoryArenaFightRecordOppo : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaFightRecordOppo> _parser = new pb::MessageParser<VictoryArenaFightRecordOppo>(() => new VictoryArenaFightRecordOppo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaFightRecordOppo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id(机器人为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private uint heroId_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 6;
    private uint head_;
    /// <summary>
    /// 头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 7;
    private uint score_;
    /// <summary>
    /// 评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 8;
    private uint headFrame_;
    /// <summary>
    /// 头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroId);
      }
      if (Head != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Head);
      }
      if (Score != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Score);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HeadFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Head);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 48: {
            Head = input.ReadUInt32();
            break;
          }
          case 56: {
            Score = input.ReadUInt32();
            break;
          }
          case 64: {
            HeadFrame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗记录
  /// </summary>
  public sealed class VictoryArenaFightRecord : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaFightRecord> _parser = new pb::MessageParser<VictoryArenaFightRecord>(() => new VictoryArenaFightRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaFightRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "IsAttacker" field.</summary>
    public const int IsAttackerFieldNumber = 1;
    private bool isAttacker_;
    /// <summary>
    /// 自己是否是进攻方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttacker {
      get { return isAttacker_; }
      set {
        isAttacker_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 2;
    private bool win_;
    /// <summary>
    /// 自己是否获胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "rankBefore" field.</summary>
    public const int RankBeforeFieldNumber = 3;
    private uint rankBefore_;
    /// <summary>
    /// 战斗前排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankBefore {
      get { return rankBefore_; }
      set {
        rankBefore_ = value;
      }
    }

    /// <summary>Field number for the "rankAfter" field.</summary>
    public const int RankAfterFieldNumber = 4;
    private uint rankAfter_;
    /// <summary>
    /// 战斗后排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankAfter {
      get { return rankAfter_; }
      set {
        rankAfter_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private uint timestamp_;
    /// <summary>
    /// 战斗结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "oppo" field.</summary>
    public const int OppoFieldNumber = 6;
    private global::Packet.VictoryArenaFightRecordOppo oppo_;
    /// <summary>
    /// 对手信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VictoryArenaFightRecordOppo Oppo {
      get { return oppo_; }
      set {
        oppo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAttacker != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAttacker);
      }
      if (Win != false) {
        output.WriteRawTag(16);
        output.WriteBool(Win);
      }
      if (RankBefore != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RankBefore);
      }
      if (RankAfter != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RankAfter);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Timestamp);
      }
      if (oppo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Oppo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAttacker != false) {
        size += 1 + 1;
      }
      if (Win != false) {
        size += 1 + 1;
      }
      if (RankBefore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankBefore);
      }
      if (RankAfter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankAfter);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (oppo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oppo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAttacker = input.ReadBool();
            break;
          }
          case 16: {
            Win = input.ReadBool();
            break;
          }
          case 24: {
            RankBefore = input.ReadUInt32();
            break;
          }
          case 32: {
            RankAfter = input.ReadUInt32();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 50: {
            if (oppo_ == null) {
              oppo_ = new global::Packet.VictoryArenaFightRecordOppo();
            }
            input.ReadMessage(oppo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdVictoryArenaPullFightRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaPullFightRecordReq> _parser = new pb::MessageParser<CmdVictoryArenaPullFightRecordReq>(() => new CmdVictoryArenaPullFightRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaPullFightRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdVictoryArenaPullFightRecordRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaPullFightRecordRes> _parser = new pb::MessageParser<CmdVictoryArenaPullFightRecordRes>(() => new CmdVictoryArenaPullFightRecordRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaPullFightRecordRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VictoryArenaFightRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VictoryArenaFightRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.VictoryArenaFightRecord> records_ = new pbc::RepeatedField<global::Packet.VictoryArenaFightRecord>();
    /// <summary>
    /// 战斗记录列表(增量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VictoryArenaFightRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaFightBackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaFightBackReq> _parser = new pb::MessageParser<CmdVictoryArenaFightBackReq>(() => new CmdVictoryArenaFightBackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaFightBackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "oppoRoleId" field.</summary>
    public const int OppoRoleIdFieldNumber = 1;
    private ulong oppoRoleId_;
    /// <summary>
    /// 对方玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OppoRoleId {
      get { return oppoRoleId_; }
      set {
        oppoRoleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OppoRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OppoRoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OppoRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OppoRoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OppoRoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaSystemUpdateNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaSystemUpdateNty> _parser = new pb::MessageParser<CmdVictoryArenaSystemUpdateNty>(() => new CmdVictoryArenaSystemUpdateNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaSystemUpdateNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 1;
    private global::Packet.SystemVictoryArena system_;
    /// <summary>
    /// 竞技场系统数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemVictoryArena System {
      get { return system_; }
      set {
        system_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (system_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(System);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (system_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (system_ == null) {
              system_ = new global::Packet.SystemVictoryArena();
            }
            input.ReadMessage(system_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaRankListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaRankListReq> _parser = new pb::MessageParser<CmdVictoryArenaRankListReq>(() => new CmdVictoryArenaRankListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaRankListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private uint page_;
    /// <summary>
    /// 页码(0~19, 一页算10条记录)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 竞技场排行单位
  /// </summary>
  public sealed class VictoryArenaRankUnit : pb::IMessage {
    private static readonly pb::MessageParser<VictoryArenaRankUnit> _parser = new pb::MessageParser<VictoryArenaRankUnit>(() => new VictoryArenaRankUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VictoryArenaRankUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    /// 排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    /// 综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "familyName" field.</summary>
    public const int FamilyNameFieldNumber = 5;
    private pb::ByteString familyName_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FamilyName {
      get { return familyName_; }
      set {
        familyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Career);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
      if (FamilyName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(FamilyName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (FamilyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FamilyName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Career = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
          case 42: {
            FamilyName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVictoryArenaRankListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaRankListRes> _parser = new pb::MessageParser<CmdVictoryArenaRankListRes>(() => new CmdVictoryArenaRankListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaRankListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private uint page_;
    /// <summary>
    /// 页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.VictoryArenaRankUnit> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.VictoryArenaRankUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.VictoryArenaRankUnit> list_ = new pbc::RepeatedField<global::Packet.VictoryArenaRankUnit>();
    /// <summary>
    /// 列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VictoryArenaRankUnit> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Page);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadUInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdVictoryArenaFastChallengeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaFastChallengeReq> _parser = new pb::MessageParser<CmdVictoryArenaFastChallengeReq>(() => new CmdVictoryArenaFastChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaFastChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdVictoryArenaFastChallengeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVictoryArenaFastChallengeRes> _parser = new pb::MessageParser<CmdVictoryArenaFastChallengeRes>(() => new CmdVictoryArenaFastChallengeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVictoryArenaFastChallengeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdVictoryArenaFastChallengeRes.Types.ItemCount> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdVictoryArenaFastChallengeRes.Types.ItemCount.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdVictoryArenaFastChallengeRes.Types.ItemCount> items_ = new pbc::RepeatedField<global::Packet.CmdVictoryArenaFastChallengeRes.Types.ItemCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdVictoryArenaFastChallengeRes.Types.ItemCount> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private uint times_;
    /// <summary>
    /// 扫荡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            Times = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdVictoryArenaFastChallengeRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemCount : pb::IMessage {
        private static readonly pb::MessageParser<ItemCount> _parser = new pb::MessageParser<ItemCount>(() => new ItemCount());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemCount> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemtid" field.</summary>
        public const int ItemtidFieldNumber = 1;
        private uint itemtid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemtid {
          get { return itemtid_; }
          set {
            itemtid_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemtid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemtid);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemtid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemtid);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemtid = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
