// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treasure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdTreasure {
    None = 0,
    /// <summary>
    /// 数据通知
    /// </summary>
    DataNtf = 2501,
    /// <summary>
    ///CmdTreasure_AddExpNtf = 2502;   // 增加经验值
    /// </summary>
    UnlockSlotReq = 2503,
    UnlockSlotRes = 2504,
    /// <summary>
    ///CmdTreasure_GetTreasureNtf = 2505;  // 获得宝藏  (废弃)
    /// </summary>
    EquipReq = 2506,
    EquipRes = 2507,
    /// <summary>
    /// 请求卸下
    /// </summary>
    UnEquipReq = 2508,
    UnEquipRes = 25109,
    /// <summary>
    /// 宝藏相关更新协议
    /// </summary>
    UpdateNtf = 2510,
  }

  public enum ErrorTreasure {
    None = 0,
    /// <summary>
    /// 获取相关表格失败
    /// </summary>
    Csvnull = 2501,
    /// <summary>
    /// 槽位已解锁
    /// </summary>
    SlotHasUnlocked = 2502,
    /// <summary>
    /// 槽位未解锁
    /// </summary>
    SlotNotUnlock = 2503,
    /// <summary>
    /// 该槽位已陈列
    /// </summary>
    SlotHasTreasure = 2504,
    /// <summary>
    /// 槽位为空，无法卸下
    /// </summary>
    SlotIsEmpty = 2505,
    /// <summary>
    /// 槽位栏已满
    /// </summary>
    SlotIsFull = 2506,
    /// <summary>
    /// 宝藏已解锁
    /// </summary>
    TreasureHasUnlocked = 2507,
    /// <summary>
    /// 宝藏未解锁
    /// </summary>
    TreasureIsNotUnlock = 2508,
    /// <summary>
    /// 宝藏已陈列，不能重复陈列
    /// </summary>
    TreasureAlreadyEquiped = 2509,
    /// <summary>
    /// 宝藏库等级不足
    /// </summary>
    TreasureLvNotEnough = 2510,
  }

  #endregion

  #region Messages
  public sealed class TreasureData : pb::IMessage {
    private static readonly pb::MessageParser<TreasureData> _parser = new pb::MessageParser<TreasureData>(() => new TreasureData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureData> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 宝藏库等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    /// 宝藏库当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "equipedIdList" field.</summary>
    public const int EquipedIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_equipedIdList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> equipedIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已陈列的宝藏道具id(0为空置)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EquipedIdList {
      get { return equipedIdList_; }
    }

    /// <summary>Field number for the "unlockedIdList" field.</summary>
    public const int UnlockedIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_unlockedIdList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> unlockedIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已解锁宝藏道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnlockedIdList {
      get { return unlockedIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
      equipedIdList_.WriteTo(output, _repeated_equipedIdList_codec);
      unlockedIdList_.WriteTo(output, _repeated_unlockedIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      size += equipedIdList_.CalculateSize(_repeated_equipedIdList_codec);
      size += unlockedIdList_.CalculateSize(_repeated_unlockedIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            equipedIdList_.AddEntriesFrom(input, _repeated_equipedIdList_codec);
            break;
          }
          case 34:
          case 32: {
            unlockedIdList_.AddEntriesFrom(input, _repeated_unlockedIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 上线数据通知
  /// </summary>
  public sealed class CmdTreasureDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureDataNtf> _parser = new pb::MessageParser<CmdTreasureDataNtf>(() => new CmdTreasureDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TreasureData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TreasureData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TreasureData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 槽位为顺序开启
  /// </summary>
  public sealed class CmdTreasureUnlockSlotReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureUnlockSlotReq> _parser = new pb::MessageParser<CmdTreasureUnlockSlotReq>(() => new CmdTreasureUnlockSlotReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureUnlockSlotReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTreasureUnlockSlotRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureUnlockSlotRes> _parser = new pb::MessageParser<CmdTreasureUnlockSlotRes>(() => new CmdTreasureUnlockSlotRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureUnlockSlotRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTreasureEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureEquipReq> _parser = new pb::MessageParser<CmdTreasureEquipReq>(() => new CmdTreasureEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "treasureId" field.</summary>
    public const int TreasureIdFieldNumber = 1;
    private uint treasureId_;
    /// <summary>
    /// 宝藏道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TreasureId {
      get { return treasureId_; }
      set {
        treasureId_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private uint slot_;
    /// <summary>
    /// 从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TreasureId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TreasureId);
      }
      if (Slot != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Slot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TreasureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TreasureId);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TreasureId = input.ReadUInt32();
            break;
          }
          case 16: {
            Slot = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTreasureEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureEquipRes> _parser = new pb::MessageParser<CmdTreasureEquipRes>(() => new CmdTreasureEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureEquipRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTreasureUnEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureUnEquipReq> _parser = new pb::MessageParser<CmdTreasureUnEquipReq>(() => new CmdTreasureUnEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureUnEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private uint slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Slot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Slot = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTreasureUnEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureUnEquipRes> _parser = new pb::MessageParser<CmdTreasureUnEquipRes>(() => new CmdTreasureUnEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureUnEquipRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 数据更新
  /// </summary>
  public sealed class CmdTreasureUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTreasureUpdateNtf> _parser = new pb::MessageParser<CmdTreasureUpdateNtf>(() => new CmdTreasureUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTreasureUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TreasureData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TreasureData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TreasureData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
