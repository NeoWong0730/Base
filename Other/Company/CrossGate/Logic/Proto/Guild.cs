// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdGuild {
    None = 0,
    /// <summary>
    ///创建
    /// </summary>
    CreateReq = 4200,
    /// <summary>
    ///创建
    /// </summary>
    CreateAck = 4201,
    /// <summary>
    ///申请
    /// </summary>
    ApplyReq = 4202,
    ApplyAck = 4203,
    /// <summary>
    ///改名
    /// </summary>
    ChangeNameReq = 4204,
    ChangeNameAck = 4205,
    /// <summary>
    ///改宣言
    /// </summary>
    ChangeNoticeReq = 4206,
    ChangeNoticeAck = 4207,
    /// <summary>
    ///签到
    /// </summary>
    SigninReq = 4208,
    SigninAck = 4209,
    /// <summary>
    ///群发消息
    /// </summary>
    GuildNotifyReq = 4210,
    GuildNotifyAck = 4211,
    GuildNotifyNtf = 4212,
    /// <summary>
    ///处理公会申请
    /// </summary>
    HandleApplyReq = 4213,
    HandleApplyAck = 4214,
    /// <summary>
    ///分红
    /// </summary>
    GetBonusReq = 4215,
    GetBonusAck = 4216,
    /// <summary>
    ///踢人
    /// </summary>
    KickMemberReq = 4217,
    KickMemberAck = 4218,
    KickMemberNtf = 4219,
    /// <summary>
    ///t退会
    /// </summary>
    QuitReq = 4220,
    QuitAck = 4221,
    /// <summary>
    ///卸任会长
    /// </summary>
    OutgoingLeaderReq = 4222,
    OutgoingLeaderAck = 4223,
    LeaderChangeNtf = 4224,
    /// <summary>
    ///升级建筑
    /// </summary>
    UpgradeBuildingReq = 4225,
    UpgradeBuildingAck = 4226,
    /// <summary>
    ///公会捐钱
    /// </summary>
    DonateReq = 4227,
    DonateAck = 4228,
    /// <summary>
    ///领捐赠奖励
    /// </summary>
    GetDonateRewardReq = 4229,
    GetDonateRewardAck = 4230,
    /// <summary>
    /// merge
    /// </summary>
    MergeReq = 4231,
    MergeAck = 4232,
    /// <summary>
    ///通知
    /// </summary>
    MergeApplyNtf = 4233,
    /// <summary>
    ///处理合并请求
    /// </summary>
    HandleMergeApplyReq = 4234,
    HandleMergeApplyAck = 4235,
    /// <summary>
    ///合并处理通知 暂时不用
    /// </summary>
    HandleMergeApplyNtf = 4236,
    /// <summary>
    ///合并完成通知 包括主动 被动
    /// </summary>
    SystemMergeNtf = 4237,
    /// <summary>
    ///请求公会列表
    /// </summary>
    GetGuildListReq = 4238,
    GetGuildListAck = 4239,
    /// <summary>
    ///查找公会
    /// </summary>
    FindGuildReq = 4240,
    FindGuildAck = 4241,
    /// <summary>
    ///获得自己公会信息
    /// </summary>
    GetGuildInfoReq = 4242,
    GetGuildInfoAck = 4243,
    /// <summary>
    ///创建分会
    /// </summary>
    CreateBranchReq = 4246,
    CreateBranchAck = 4247,
    /// <summary>
    ///分会主会成员移动
    /// </summary>
    BranchMoveReq = 4248,
    BranchMoveAck = 4249,
    /// <summary>
    ///升级工坊技能
    /// </summary>
    UpgradeWorkshopSkillReq = 4250,
    UpgradeWorkshopSkillAck = 4251,
    /// <summary>
    ///移除分会
    /// </summary>
    DestroyBranchReq = 4252,
    DestroyBranchAck = 4253,
    /// <summary>
    ///改变职位
    /// </summary>
    ChangePositionReq = 4254,
    ChangePositionAck = 4255,
    /// <summary>
    ///废弃
    /// </summary>
    ChangeBranchPositionReq = 4256,
    ChangeBranchPositionAck = 4257,
    /// <summary>
    ///公会id改变通知
    /// </summary>
    HandleApplyNtf = 4258,
    /// <summary>
    ///改变合并的目标公会
    /// </summary>
    ChangeDstMergeGuildReq = 4259,
    ChangeDstMergeGuildAck = 4260,
    /// <summary>
    /// </summary>
    ChangeDstMergeGuildNtf = 4261,
    /// <summary>
    ///获取成员信息 （成员页面）
    /// </summary>
    GetMemberInfoReq = 4262,
    GetMemberInfoAck = 4263,
    /// <summary>
    ///我的申请列表
    /// </summary>
    GetMyApplyListReq = 4264,
    /// <summary>
    /// </summary>
    GetMyApplyListAck = 4265,
    /// <summary>
    ///一键申请
    /// </summary>
    OneKeyApplyReq = 4266,
    /// <summary>
    ///收到这个消息则说明自动加入失败，回包是这次申请的n（小于10）个公会信息。
    /// </summary>
    OneKeyApplyAck = 4267,
    /// <summary>
    ///scenesvr 上的信息通知 (玩家公会数据 为了少同步和减少冗余的原则分为3块，gamerole,scenerole, game上的公会中)
    /// </summary>
    SceneInfoNtf = 4268,
    /// <summary>
    ///gamesvr 上的信息通知
    /// </summary>
    GameInfoNtf = 4269,
    /// <summary>
    ///改变分会名
    /// </summary>
    ChangeBranchNameReq = 4270,
    ChangeBranchNameAck = 4271,
    /// <summary>
    /// 查看公会申请成员
    /// </summary>
    GetGuildApplyMemberReq = 4272,
    GetGuildApplyMemberAck = 4273,
    /// <summary>
    ///设置自动申请信息
    /// </summary>
    SetApplyInfoReq = 4274,
    SetApplyInfoAck = 4275,
    /// <summary>
    ///取消合并
    /// </summary>
    CancleMergeReq = 4276,
    CancleMergeAck = 4277,
    /// <summary>
    ///不显示自己的动态
    /// </summary>
    ChangeMyNewsReq = 4278,
    ChangeMyNewsAck = 4279,
    /// <summary>
    ///分会合并
    /// </summary>
    BranchMergeReq = 4280,
    BranchMergeAck = 4281,
    /// <summary>
    /// 申请列表变化
    /// </summary>
    NewApplyMmberNtf = 4282,
    /// <summary>
    ///公会技能升级成功通知
    /// </summary>
    SkillUpgradeNtf = 4283,
    /// <summary>
    ///拒绝申请
    /// </summary>
    RefuseApplyNtf = 4284,
    /// <summary>
    ///公会id变0（比如公会解散）
    /// </summary>
    IdNtf = 4285,
    /// <summary>
    ///公会今日捐赠改变
    /// </summary>
    TodayDonateNtf = 4286,
    /// <summary>
    ///公会邀请
    /// </summary>
    InviteReq = 4287,
    InviteNtf = 4288,
    /// <summary>
    ///邀请回复
    /// </summary>
    InviteRpl = 4289,
    /// <summary>
    ///公会牌子通知
    /// </summary>
    StaminaNtf = 4290,
    /// <summary>
    ///公会个人贡献改变通知
    /// </summary>
    ContributionNtf = 4291,
    /// <summary>
    ///公会货币改变通知 （繁荣度等）
    /// </summary>
    CurrencyNtf = 4292,
    /// <summary>
    ///公会上交道具
    /// </summary>
    HandInItemProsperityReq = 4293,
    /// <summary>
    ///今日菜肴
    /// </summary>
    GetCuisineInfoReq = 4294,
    GetCuisineInfoAck = 4295,
    /// <summary>
    ///上交 -> scene
    /// </summary>
    HandInCuisineReq = 4296,
    HandInCuisineAck = 4297,
    /// <summary>
    ///繁荣度等级
    /// </summary>
    ProsperityLvlNtf = 4298,
    /// <summary>
    ///酒会经验通知
    /// </summary>
    PartyStarNtf = 4299,
    /// <summary>
    ///领取菜肴素材
    /// </summary>
    GetCuisineIngredientReq = 6000,
    GetCuisineIngredientAck = 6001,
    /// <summary>
    ///->sc
    /// </summary>
    PartyPhaseNtf = 6002,
    GetCuisineRecordAck = 6004,
    /// <summary>
    ///出现地鼠
    /// </summary>
    PartyMonsterNtf = 6005,
    /// <summary>
    ///发红包 ,前端要检测在线等发放条件是否符合
    /// </summary>
    SendRedEnvelopeReq = 6006,
    SendRedEnvelopeAck = 6007,
    SendRedEnvelopeNtf = 6008,
    /// <summary>
    ///CmdGuild_GetMyRedEnvelopeReq = 6009;  // 每次打开界面请求(废弃)
    /// </summary>
    MyRedEnvelopeNtf = 6010,
    /// <summary>
    ///红包update，可能是新增或状态改变 
    /// </summary>
    NewEnvelopeNtf = 6011,
    /// <summary>
    ///CmdGuild_EnvelopeWeekSendNtf = 6012; //本周已发红包
    /// </summary>
    LifeSkillEquipNtf = 6013,
    /// <summary>
    /// 通知角色族战数据
    /// </summary>
    UpdateGuildBattleInfoNty = 6014,
    /// <summary>
    /// 通知族战积分
    /// </summary>
    UpdateGuildBattleScoreNty = 6015,
    /// <summary>
    ///请求接取家族建设任务
    /// </summary>
    AcceptIndustryTaskReq = 6016,
    /// <summary>
    ///家族建设任务一轮完成
    /// </summary>
    IndustryTaskFinishNtf = 6017,
    /// <summary>
    ///->gs
    /// </summary>
    GetCuisineRecordReq = 6050,
    /// <summary>
    ///公会名字改变
    /// </summary>
    ChangeNameNtf = 6051,
    /// <summary>
    ///职位改变
    /// </summary>
    PosChangeNtf = 6052,
    /// <summary>
    ///CmdGuild_GetRedEnvelopeInfoReq = 6056; //公会所有红包日志和最近八个红包详细信息
    /// </summary>
    GetRedEnvelopeInfoAck = 6057,
    /// <summary>
    /// 根据id查询某红包信息
    /// </summary>
    QueryEnvelopeInfoReq = 6058,
    /// <summary>
    /// 会根据玩家是否打开过返回不同信息
    /// </summary>
    QueryEnvelopeInfoAck = 6059,
    OpenEnvelopeReq = 6060,
    OpenEnvelopeAck = 6061,
    /// <summary>
    ///今日已领红包
    /// </summary>
    TodayEnvelopeMoneyNtf = 6062,
    /// <summary>
    ///新红包日志
    /// </summary>
    EnvelopeLogNtf = 6063,
    /// <summary>
    ///进入限制
    /// </summary>
    EnterLimitNtf = 6064,
    /// <summary>
    ///请求家族在线人数
    /// </summary>
    GetOnlineNumReq = 6065,
    /// <summary>
    ///请求家族在线人数返回 同时返回家族等级
    /// </summary>
    GetOnlineNumRes = 6066,
    /// <summary>
    ///别人取消了合并申请，通知被操作家族
    /// </summary>
    CancelMergeNtf = 6070,
    /// <summary>
    /// 通知家族信息
    /// </summary>
    DataNty = 6071,
    /// <summary>
    ///-----家族委托
    /// </summary>
    GetConsignListReq = 6700,
    /// <summary>
    ///委托列表返回
    /// </summary>
    GetConsignListAck = 6701,
    /// <summary>
    ///请求自己的委托列表 ->gs
    /// </summary>
    GetSelfConsignListReq = 6702,
    /// <summary>
    ///自己的委托列表返回
    /// </summary>
    GetSelfConsignListAck = 6703,
    /// <summary>
    ///求助 ->gs
    /// </summary>
    SeekHelpReq = 6704,
    /// <summary>
    ///求助返回
    /// </summary>
    SeekHelpAck = 6705,
    /// <summary>
    ///求助信息广播
    /// </summary>
    SeekHelpNtf = 6706,
    /// <summary>
    ///发布委托
    /// </summary>
    PublishConsignReq = 6707,
    /// <summary>
    ///发布委托通知
    /// </summary>
    PublishConsignNtf = 6708,
    /// <summary>
    ///取消委托 ->gs
    /// </summary>
    CancelConsignReq = 6709,
    /// <summary>
    ///删除委托通知
    /// </summary>
    DeleteConsignNtf = 6710,
    /// <summary>
    ///协助 ->gs
    /// </summary>
    HelpBuildReq = 6711,
    /// <summary>
    ///协助返回
    /// </summary>
    HelpBuildAck = 6712,
    /// <summary>
    ///领取委托道具 ->gs
    /// </summary>
    ReceiveBuildItemReq = 6713,
    /// <summary>
    ///领取委托道具返回
    /// </summary>
    ReceiveBuildItemAck = 6714,
    /// <summary>
    ///登录发送本系统相关的信息
    /// </summary>
    ConsignSelfBaseInfoNtf = 6715,
    /// <summary>
    ///家族合并
    /// </summary>
    ConsignMergeNtf = 6716,
    /// <summary>
    ///发布委托返回
    /// </summary>
    PublishConsignAck = 6717,
    /// <summary>
    ///协助打造装备成功
    /// </summary>
    HelpBuildSucNtf = 6718,
    /// <summary>
    ///被协助者信息更新
    /// </summary>
    ConsignSelfUpdateNtf = 6719,
    /// <summary>
    ///设置委托界面是否首次打开
    /// </summary>
    SetConsignFirstOpenReq = 6720,
  }

  public enum ErrorGuild {
    None = 0,
    /// <summary>
    ///建筑不存在
    /// </summary>
    BuildingNotExist = 4200,
    /// <summary>
    ///未加入公会
    /// </summary>
    NotJoin = 4201,
    /// <summary>
    ///配置不存在
    /// </summary>
    CfgErr = 4202,
    /// <summary>
    ///资金不足
    /// </summary>
    GuildCoinNotEnough = 4203,
    /// <summary>
    ///建筑最大等级
    /// </summary>
    BuildingMaxLvl = 4204,
    /// <summary>
    ///前置建筑等级不足
    /// </summary>
    LvlNotEnought = 4205,
    /// <summary>
    ///正在升级
    /// </summary>
    IsUpgrading = 4206,
    /// <summary>
    ///成员不存在
    /// </summary>
    MemberNotExist = 4207,
    /// <summary>
    ///权限不足
    /// </summary>
    Authority = 4208,
    /// <summary>
    ///名字错误
    /// </summary>
    NameErr = 4209,
    /// <summary>
    ///分会数量最大
    /// </summary>
    MaxBranch = 4210,
    /// <summary>
    ///分会不存在
    /// </summary>
    BranchNotExist = 4211,
    /// <summary>
    ///职位数量最大
    /// </summary>
    PositionMax = 4212,
    /// <summary>
    ///参数错误
    /// </summary>
    ParamErr = 4213,
    /// <summary>
    ///分会成员最大
    /// </summary>
    MemberMax = 4214,
    /// <summary>
    ///职位错误
    /// </summary>
    PositionErr = 4215,
    /// <summary>
    ///名字重复
    /// </summary>
    NameRepeat = 4216,
    /// <summary>
    ///已有工会
    /// </summary>
    HasGuild = 4217,
    /// <summary>
    ///道具（货币）不足
    /// </summary>
    ItemEnough = 4218,
    /// <summary>
    ///公会不存在
    /// </summary>
    NotExist = 4219,
    /// <summary>
    ///最大申请数量
    /// </summary>
    MaxApply = 4220,
    /// <summary>
    ///公会人满
    /// </summary>
    MemberIsFull = 4221,
    /// <summary>
    ///申请已失效
    /// </summary>
    ApplyInvaild = 4222,
    /// <summary>
    ///会长不可退会
    /// </summary>
    LeaderCannotQuit = 4223,
    /// <summary>
    ///技能不存在
    /// </summary>
    SkillNotExist = 4224,
    /// <summary>
    ///升级技能工坊等级不足
    /// </summary>
    SkillLvlUpErr = 4225,
    /// <summary>
    ///技能未发现
    /// </summary>
    SkillNotFound = 4226,
    /// <summary>
    ///目标公会不存在
    /// </summary>
    DstGuildNotExist = 4227,
    /// <summary>
    ///我方或对方申请列表已满
    /// </summary>
    MergeFull = 4228,
    /// <summary>
    ///繁荣
    /// </summary>
    Prosperous = 4229,
    /// <summary>
    ///在合并列表
    /// </summary>
    InMergeList = 4230,
    /// <summary>
    ///合并列表过期，请重新打开
    /// </summary>
    MergeList = 4231,
    /// <summary>
    ///系统错误
    /// </summary>
    ProgramErr = 4232,
    /// <summary>
    ///分会人数最大
    /// </summary>
    BranchMemberMax = 4233,
    /// <summary>
    ///已签到
    /// </summary>
    SignIn = 4234,
    /// <summary>
    ///捐献最大
    /// </summary>
    DonateMax = 4235,
    /// <summary>
    ///捐献不足
    /// </summary>
    DonateNotSatisfied = 4236,
    /// <summary>
    ///已经领取过捐献奖励
    /// </summary>
    GetDonateRewardAlready = 4237,
    /// <summary>
    ///长度
    /// </summary>
    NameLength = 4238,
    /// <summary>
    ///不是utf8
    /// </summary>
    NameUtf8 = 4239,
    /// <summary>
    ///加入冷却
    /// </summary>
    JoinCd = 4240,
    /// <summary>
    ///公会太多
    /// </summary>
    TooMany = 4241,
    /// <summary>
    ///领地错误
    /// </summary>
    TerritoryNull = 4242,
    NotMember = 4243,
    /// <summary>
    ///维护资金不充足
    /// </summary>
    GuildCoinMaintainTooLow = 4244,
    /// <summary>
    ///玩家等级不对
    /// </summary>
    RoleLvl = 4245,
    /// <summary>
    ///公会牌子不够
    /// </summary>
    Stamina = 4246,
    /// <summary>
    ///菜肴id错误
    /// </summary>
    CuisineIdErr = 4247,
    /// <summary>
    ///菜肴已领取
    /// </summary>
    CuisineGot = 4248,
    /// <summary>
    ///非领取时间
    /// </summary>
    CuisineTimeErr = 4249,
    /// <summary>
    ///提交次数最大
    /// </summary>
    CuisineCountMax = 4250,
    /// <summary>
    ///目标有公会
    /// </summary>
    DstHasGuild = 4251,
    /// <summary>
    ///委托数量达到上限
    /// </summary>
    ConsignMax = 4252,
    /// <summary>
    ///求助过于频繁
    /// </summary>
    ConsignSeekHelpQuick = 4253,
    /// <summary>
    ///操作过快 稍后重试
    /// </summary>
    ConsignOpQuick = 4254,
    /// <summary>
    ///重复下架委托
    /// </summary>
    ConsignCancelRepeat = 4255,
    /// <summary>
    ///委托不存在
    /// </summary>
    ConsignDataNotFind = 4256,
    /// <summary>
    ///需要协助后才能领取
    /// </summary>
    ConsignNoHelper = 4257,
    /// <summary>
    ///技能等级不足
    /// </summary>
    ConsignSkillLvLower = 4258,
    /// <summary>
    ///今日协助已达上限
    /// </summary>
    ConsignAssistMax = 4259,
    /// <summary>
    ///重复领取
    /// </summary>
    ConsignRecieveRepeat = 4260,
    /// <summary>
    ///不能协助自己
    /// </summary>
    ConsignCannotAssistSelf = 4261,
    /// <summary>
    ///已经被协助完成
    /// </summary>
    ConsignAssistRepeat = 4262,
    /// <summary>
    ///正在被他人协助
    /// </summary>
    ConsignAssisting = 4263,
    /// <summary>
    ///协助已完成不能取消委托
    /// </summary>
    ConsignNoCancel = 4264,
    /// <summary>
    ///不能取消别人的委托
    /// </summary>
    ConsignNotSelf = 4265,
    /// <summary>
    ///红包id
    /// </summary>
    EnvelopeId = 4266,
    /// <summary>
    ///每周限额
    /// </summary>
    WeekLimit = 4267,
    /// <summary>
    ///红包份数不对
    /// </summary>
    EnvelopeDivide = 4268,
    /// <summary>
    ///未发现红包
    /// </summary>
    NotFoundEnvelope = 4269,
    /// <summary>
    ///领过了
    /// </summary>
    GotEnvelope = 4270,
    /// <summary>
    ///过期
    /// </summary>
    EnvelopeExpire = 4271,
    /// <summary>
    ///发红包活跃度不够
    /// </summary>
    EnvelopeActivity = 4272,
    /// <summary>
    ///等级不足
    /// </summary>
    EnvelopeLvl = 4273,
    /// <summary>
    ///抢红包cd
    /// </summary>
    GotEnvelopeCd = 4274,
    /// <summary>
    ///领红包到上限
    /// </summary>
    EnvelopeMoneyFull = 4275,
    /// <summary>
    ///请求建设任务行业类别错误
    /// </summary>
    IndustryTypeErr = 4276,
    /// <summary>
    ///4278
    /// </summary>
    Applyinfo = 4279,
  }

  public enum GuildActiveReason {
    None = 0,
    /// <summary>
    /// 创建公会
    /// </summary>
    CreateGuild = 4201,
    /// <summary>
    /// 公会签到
    /// </summary>
    GuildSignIn = 4202,
    /// <summary>
    /// 公会签到
    /// </summary>
    GuildDonate = 4203,
    /// <summary>
    /// 公会改名
    /// </summary>
    GuildChangeName = 4204,
    /// <summary>
    /// 公会繁荣度上交
    /// </summary>
    GuildHandin = 4205,
    /// <summary>
    /// 公会上交菜肴
    /// </summary>
    HandInCuisineGuild = 4206,
    /// <summary>
    /// 上交奖励
    /// </summary>
    HandInCuisineReward = 4207,
    /// <summary>
    /// 公会恢复
    /// </summary>
    GuildRecover = 4208,
    /// <summary>
    /// 领取食材
    /// </summary>
    GuildGetIngredient = 4209,
    /// <summary>
    /// 酒会挂机
    /// </summary>
    GuildPartyHangUp = 4210,
    /// <summary>
    /// 家族委托
    /// </summary>
    Consign = 4211,
    /// <summary>
    /// 红包
    /// </summary>
    SendRedEnvelope = 4212,
    /// <summary>
    ///领红包
    /// </summary>
    GetEnvelope = 4213,
    /// <summary>
    ///家族建设任务
    /// </summary>
    BuildTask = 4214,
  }

  public enum EnumProsPerity {
    /// <summary>
    ///公会繁荣度枚举
    /// </summary>
    Agriculture = 0,
    Business = 1,
    Security = 2,
    Religion = 3,
    Science = 4,
    Max = 5,
  }

  public enum GuildStatus {
    None = 0,
    /// <summary>
    /// 繁荣
    /// </summary>
    Perity = 1,
    /// <summary>
    ///正常
    /// </summary>
    Nomal = 2,
    /// <summary>
    ///萧条
    /// </summary>
    Poor = 3,
  }

  public enum GuildConsignDeleteType {
    /// <summary>
    ///同时删除全部列表和个人列表
    /// </summary>
    AllAndSelf = 0,
    /// <summary>
    ///只删除全部列表
    /// </summary>
    All = 1,
    /// <summary>
    ///只删除个人列表
    /// </summary>
    Self = 2,
  }

  #endregion

  #region Messages
  public sealed class CmdGuildCreateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCreateReq> _parser = new pb::MessageParser<CmdGuildCreateReq>(() => new CmdGuildCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCreateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildCreateAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCreateAck> _parser = new pb::MessageParser<CmdGuildCreateAck>(() => new CmdGuildCreateAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCreateAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildUid" field.</summary>
    public const int GuildUidFieldNumber = 3;
    private ulong guildUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildUid {
      get { return guildUid_; }
      set {
        guildUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildId);
      }
      if (GuildUid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 24: {
            GuildUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildApplyReq> _parser = new pb::MessageParser<CmdGuildApplyReq>(() => new CmdGuildApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "bApply" field.</summary>
    public const int BApplyFieldNumber = 2;
    private bool bApply_;
    /// <summary>
    ///申请 true   取消false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BApply {
      get { return bApply_; }
      set {
        bApply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (BApply != false) {
        output.WriteRawTag(16);
        output.WriteBool(BApply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (BApply != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            BApply = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildApplyAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildApplyAck> _parser = new pb::MessageParser<CmdGuildApplyAck>(() => new CmdGuildApplyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildApplyAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "bApply" field.</summary>
    public const int BApplyFieldNumber = 2;
    private bool bApply_;
    /// <summary>
    ///是否加入成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BApply {
      get { return bApply_; }
      set {
        bApply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (BApply != false) {
        output.WriteRawTag(16);
        output.WriteBool(BApply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (BApply != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            BApply = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeNameReq> _parser = new pb::MessageParser<CmdGuildChangeNameReq>(() => new CmdGuildChangeNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 2;
    private uint itemType_;
    /// <summary>
    ///1货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            ItemType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeNameAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeNameAck> _parser = new pb::MessageParser<CmdGuildChangeNameAck>(() => new CmdGuildChangeNameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeNameAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeNoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeNoticeReq> _parser = new pb::MessageParser<CmdGuildChangeNoticeReq>(() => new CmdGuildChangeNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeNoticeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeNoticeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeNoticeAck> _parser = new pb::MessageParser<CmdGuildChangeNoticeAck>(() => new CmdGuildChangeNoticeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeNoticeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 1;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Notice.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSigninReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSigninReq> _parser = new pb::MessageParser<CmdGuildSigninReq>(() => new CmdGuildSigninReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSigninReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///uint32 lastUpdate = 1; //签到捐赠等数据的上次更新时间（用于判断是否过天）
  /// </summary>
  public sealed class CmdGuildSigninAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSigninAck> _parser = new pb::MessageParser<CmdGuildSigninAck>(() => new CmdGuildSigninAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSigninAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGuildNotifyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGuildNotifyReq> _parser = new pb::MessageParser<CmdGuildGuildNotifyReq>(() => new CmdGuildGuildNotifyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGuildNotifyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///bytes msg = 1;
  /// </summary>
  public sealed class CmdGuildGuildNotifyAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGuildNotifyAck> _parser = new pb::MessageParser<CmdGuildGuildNotifyAck>(() => new CmdGuildGuildNotifyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGuildNotifyAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGuildNotifyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGuildNotifyNtf> _parser = new pb::MessageParser<CmdGuildGuildNotifyNtf>(() => new CmdGuildGuildNotifyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGuildNotifyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandleApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleApplyReq> _parser = new pb::MessageParser<CmdGuildHandleApplyReq>(() => new CmdGuildHandleApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private bool isAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (IsAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAgree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsAgree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandleApplyAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleApplyAck> _parser = new pb::MessageParser<CmdGuildHandleApplyAck>(() => new CmdGuildHandleApplyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleApplyAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "isAgree" field.</summary>
    public const int IsAgreeFieldNumber = 2;
    private bool isAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 3;
    private uint online_;
    /// <summary>
    ///在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "lastOffline" field.</summary>
    public const int LastOfflineFieldNumber = 4;
    private uint lastOffline_;
    /// <summary>
    ///当前操作role的 离线时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffline {
      get { return lastOffline_; }
      set {
        lastOffline_ = value;
      }
    }

    /// <summary>Field number for the "bJoin" field.</summary>
    public const int BJoinFieldNumber = 5;
    private bool bJoin_;
    /// <summary>
    ///对方已有公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BJoin {
      get { return bJoin_; }
      set {
        bJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (IsAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAgree);
      }
      if (Online != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Online);
      }
      if (LastOffline != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastOffline);
      }
      if (BJoin != false) {
        output.WriteRawTag(40);
        output.WriteBool(BJoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Online);
      }
      if (LastOffline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffline);
      }
      if (BJoin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsAgree = input.ReadBool();
            break;
          }
          case 24: {
            Online = input.ReadUInt32();
            break;
          }
          case 32: {
            LastOffline = input.ReadUInt32();
            break;
          }
          case 40: {
            BJoin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandleApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleApplyNtf> _parser = new pb::MessageParser<CmdGuildHandleApplyNtf>(() => new CmdGuildHandleApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleApplyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildUid" field.</summary>
    public const int GuildUidFieldNumber = 2;
    private ulong guildUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildUid {
      get { return guildUid_; }
      set {
        guildUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            GuildUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetBonusReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetBonusReq> _parser = new pb::MessageParser<CmdGuildGetBonusReq>(() => new CmdGuildGetBonusReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetBonusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetBonusAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetBonusAck> _parser = new pb::MessageParser<CmdGuildGetBonusAck>(() => new CmdGuildGetBonusAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetBonusAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildKickMemberReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildKickMemberReq> _parser = new pb::MessageParser<CmdGuildKickMemberReq>(() => new CmdGuildKickMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildKickMemberReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildKickMemberAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildKickMemberAck> _parser = new pb::MessageParser<CmdGuildKickMemberAck>(() => new CmdGuildKickMemberAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildKickMemberAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 2;
    private uint online_;
    /// <summary>
    ///在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Online != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Online);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Online = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildKickMemberNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildKickMemberNtf> _parser = new pb::MessageParser<CmdGuildKickMemberNtf>(() => new CmdGuildKickMemberNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildKickMemberNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///bytes msg = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildQuitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildQuitReq> _parser = new pb::MessageParser<CmdGuildQuitReq>(() => new CmdGuildQuitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildQuitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildQuitAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildQuitAck> _parser = new pb::MessageParser<CmdGuildQuitAck>(() => new CmdGuildQuitAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildQuitAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildOutgoingLeaderReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOutgoingLeaderReq> _parser = new pb::MessageParser<CmdGuildOutgoingLeaderReq>(() => new CmdGuildOutgoingLeaderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOutgoingLeaderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///需要选择一个人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildOutgoingLeaderAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOutgoingLeaderAck> _parser = new pb::MessageParser<CmdGuildOutgoingLeaderAck>(() => new CmdGuildOutgoingLeaderAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOutgoingLeaderAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///会长id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildLeaderChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildLeaderChangeNtf> _parser = new pb::MessageParser<CmdGuildLeaderChangeNtf>(() => new CmdGuildLeaderChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildLeaderChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///会长id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpgradeBuildingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpgradeBuildingReq> _parser = new pb::MessageParser<CmdGuildUpgradeBuildingReq>(() => new CmdGuildUpgradeBuildingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpgradeBuildingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "buildingType" field.</summary>
    public const int BuildingTypeFieldNumber = 1;
    private uint buildingType_;
    /// <summary>
    ///建筑类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuildingType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildingType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuildingType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpgradeBuildingAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpgradeBuildingAck> _parser = new pb::MessageParser<CmdGuildUpgradeBuildingAck>(() => new CmdGuildUpgradeBuildingAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpgradeBuildingAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "buildingType" field.</summary>
    public const int BuildingTypeFieldNumber = 1;
    private uint buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 2;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 3;
    private uint finishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "guildCoin" field.</summary>
    public const int GuildCoinFieldNumber = 4;
    private uint guildCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildCoin {
      get { return guildCoin_; }
      set {
        guildCoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuildingType);
      }
      if (Lvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lvl);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FinishTime);
      }
      if (GuildCoin != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildCoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildingType);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      if (GuildCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuildingType = input.ReadUInt32();
            break;
          }
          case 16: {
            Lvl = input.ReadUInt32();
            break;
          }
          case 24: {
            FinishTime = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildCoin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildDonateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDonateReq> _parser = new pb::MessageParser<CmdGuildDonateReq>(() => new CmdGuildDonateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDonateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "donateId" field.</summary>
    public const int DonateIdFieldNumber = 1;
    private uint donateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DonateId {
      get { return donateId_; }
      set {
        donateId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DonateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DonateId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DonateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DonateId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DonateId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildDonateAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDonateAck> _parser = new pb::MessageParser<CmdGuildDonateAck>(() => new CmdGuildDonateAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDonateAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "donateId" field.</summary>
    public const int DonateIdFieldNumber = 1;
    private uint donateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DonateId {
      get { return donateId_; }
      set {
        donateId_ = value;
      }
    }

    /// <summary>Field number for the "contribution" field.</summary>
    public const int ContributionFieldNumber = 2;
    private uint contribution_;
    /// <summary>
    ///增加的贡献值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Contribution {
      get { return contribution_; }
      set {
        contribution_ = value;
      }
    }

    /// <summary>Field number for the "guildcoin" field.</summary>
    public const int GuildcoinFieldNumber = 3;
    private uint guildcoin_;
    /// <summary>
    ///实际增加的公会资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guildcoin {
      get { return guildcoin_; }
      set {
        guildcoin_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 4;
    private uint errorCode_;
    /// <summary>
    ///错误码，非0 其他值才有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 5;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 6;
    private uint itemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "todayGuildCoin" field.</summary>
    public const int TodayGuildCoinFieldNumber = 7;
    private uint todayGuildCoin_;
    /// <summary>
    ///今日总捐献
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayGuildCoin {
      get { return todayGuildCoin_; }
      set {
        todayGuildCoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DonateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DonateId);
      }
      if (Contribution != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Contribution);
      }
      if (Guildcoin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Guildcoin);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ErrorCode);
      }
      if (ItemId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ItemCount);
      }
      if (TodayGuildCoin != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TodayGuildCoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DonateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DonateId);
      }
      if (Contribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Contribution);
      }
      if (Guildcoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guildcoin);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      if (TodayGuildCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TodayGuildCoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DonateId = input.ReadUInt32();
            break;
          }
          case 16: {
            Contribution = input.ReadUInt32();
            break;
          }
          case 24: {
            Guildcoin = input.ReadUInt32();
            break;
          }
          case 32: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 40: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 48: {
            ItemCount = input.ReadUInt32();
            break;
          }
          case 56: {
            TodayGuildCoin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetDonateRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetDonateRewardReq> _parser = new pb::MessageParser<CmdGuildGetDonateRewardReq>(() => new CmdGuildGetDonateRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetDonateRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///要领取的下标  0 开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetDonateRewardAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetDonateRewardAck> _parser = new pb::MessageParser<CmdGuildGetDonateRewardAck>(() => new CmdGuildGetDonateRewardAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetDonateRewardAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///要领取的下标 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// merge
  /// </summary>
  public sealed class CmdGuildMergeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildMergeReq> _parser = new pb::MessageParser<CmdGuildMergeReq>(() => new CmdGuildMergeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildMergeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///other guildId 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "dstGuildId" field.</summary>
    public const int DstGuildIdFieldNumber = 2;
    private ulong dstGuildId_;
    /// <summary>
    ///目标公会id 合并后存在的工会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstGuildId {
      get { return dstGuildId_; }
      set {
        dstGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (DstGuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DstGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (DstGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            DstGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildMergeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildMergeAck> _parser = new pb::MessageParser<CmdGuildMergeAck>(() => new CmdGuildMergeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildMergeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///other guildId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "dstGuildId" field.</summary>
    public const int DstGuildIdFieldNumber = 2;
    private ulong dstGuildId_;
    /// <summary>
    ///目标公会id 合并后存在的工会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstGuildId {
      get { return dstGuildId_; }
      set {
        dstGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (DstGuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DstGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (DstGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            DstGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildMergeApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildMergeApplyNtf> _parser = new pb::MessageParser<CmdGuildMergeApplyNtf>(() => new CmdGuildMergeApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildMergeApplyNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildHandleMergeApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleMergeApplyReq> _parser = new pb::MessageParser<CmdGuildHandleMergeApplyReq>(() => new CmdGuildHandleMergeApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleMergeApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///other公会的公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "bAgree" field.</summary>
    public const int BAgreeFieldNumber = 2;
    private bool bAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BAgree {
      get { return bAgree_; }
      set {
        bAgree_ = value;
      }
    }

    /// <summary>Field number for the "dstguildId" field.</summary>
    public const int DstguildIdFieldNumber = 3;
    private ulong dstguildId_;
    /// <summary>
    ///bool bInitiative = 4; //是否更改 主动发起的合并申请（别人申请的为被动）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstguildId {
      get { return dstguildId_; }
      set {
        dstguildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (BAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(BAgree);
      }
      if (DstguildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DstguildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (BAgree != false) {
        size += 1 + 1;
      }
      if (DstguildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstguildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            BAgree = input.ReadBool();
            break;
          }
          case 24: {
            DstguildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandleMergeApplyAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleMergeApplyAck> _parser = new pb::MessageParser<CmdGuildHandleMergeApplyAck>(() => new CmdGuildHandleMergeApplyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleMergeApplyAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///发起公会的公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "bAgree" field.</summary>
    public const int BAgreeFieldNumber = 2;
    private bool bAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BAgree {
      get { return bAgree_; }
      set {
        bAgree_ = value;
      }
    }

    /// <summary>Field number for the "dstguildId" field.</summary>
    public const int DstguildIdFieldNumber = 3;
    private ulong dstguildId_;
    /// <summary>
    ///bool bInitiative = 4; //是否更改 主动发起的合并申请（别人申请的为被动）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstguildId {
      get { return dstguildId_; }
      set {
        dstguildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (BAgree != false) {
        output.WriteRawTag(16);
        output.WriteBool(BAgree);
      }
      if (DstguildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DstguildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (BAgree != false) {
        size += 1 + 1;
      }
      if (DstguildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstguildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            BAgree = input.ReadBool();
            break;
          }
          case 24: {
            DstguildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandleMergeApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandleMergeApplyNtf> _parser = new pb::MessageParser<CmdGuildHandleMergeApplyNtf>(() => new CmdGuildHandleMergeApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandleMergeApplyNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildSystemMergeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSystemMergeNtf> _parser = new pb::MessageParser<CmdGuildSystemMergeNtf>(() => new CmdGuildSystemMergeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSystemMergeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "srcGuildId" field.</summary>
    public const int SrcGuildIdFieldNumber = 1;
    private ulong srcGuildId_;
    /// <summary>
    ///原公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SrcGuildId {
      get { return srcGuildId_; }
      set {
        srcGuildId_ = value;
      }
    }

    /// <summary>Field number for the "dstGuildId" field.</summary>
    public const int DstGuildIdFieldNumber = 2;
    private ulong dstGuildId_;
    /// <summary>
    ///被合并到的公会 所有成员公会id被改为这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstGuildId {
      get { return dstGuildId_; }
      set {
        dstGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcGuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SrcGuildId);
      }
      if (DstGuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DstGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SrcGuildId);
      }
      if (DstGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcGuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            DstGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetGuildListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildListReq> _parser = new pb::MessageParser<CmdGuildGetGuildListReq>(() => new CmdGuildGetGuildListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///从 guildId  开始。 发10个 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BriefInfo : pb::IMessage {
    private static readonly pb::MessageParser<BriefInfo> _parser = new pb::MessageParser<BriefInfo>(() => new BriefInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BriefInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildLvl" field.</summary>
    public const int GuildLvlFieldNumber = 3;
    private uint guildLvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildLvl {
      get { return guildLvl_; }
      set {
        guildLvl_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 4;
    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 5;
    private pb::ByteString leaderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 6;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memberMax" field.</summary>
    public const int MemberMaxFieldNumber = 7;
    private uint memberMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberMax {
      get { return memberMax_; }
      set {
        memberMax_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 8;
    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "historyContribution" field.</summary>
    public const int HistoryContributionFieldNumber = 9;
    private ulong historyContribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HistoryContribution {
      get { return historyContribution_; }
      set {
        historyContribution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GuildName);
      }
      if (GuildLvl != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildLvl);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MemberCount);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(LeaderName);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Notice);
      }
      if (MemberMax != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MemberMax);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(LeaderId);
      }
      if (HistoryContribution != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(HistoryContribution);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildLvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildLvl);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderName);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      if (MemberMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberMax);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      if (HistoryContribution != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HistoryContribution);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadBytes();
            break;
          }
          case 24: {
            GuildLvl = input.ReadUInt32();
            break;
          }
          case 32: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 42: {
            LeaderName = input.ReadBytes();
            break;
          }
          case 50: {
            Notice = input.ReadBytes();
            break;
          }
          case 56: {
            MemberMax = input.ReadUInt32();
            break;
          }
          case 64: {
            LeaderId = input.ReadUInt64();
            break;
          }
          case 72: {
            HistoryContribution = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetGuildListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildListAck> _parser = new pb::MessageParser<CmdGuildGetGuildListAck>(() => new CmdGuildGetGuildListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BriefInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BriefInfo> infos_ = new pbc::RepeatedField<global::Packet.BriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BriefInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildFindGuildReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildFindGuildReq> _parser = new pb::MessageParser<CmdGuildFindGuildReq>(() => new CmdGuildFindGuildReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildFindGuildReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_guildId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> guildId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> GuildId {
      get { return guildId_; }
    }

    /// <summary>Field number for the "bMulti" field.</summary>
    public const int BMultiFieldNumber = 3;
    private bool bMulti_;
    /// <summary>
    ///客户端用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BMulti {
      get { return bMulti_; }
      set {
        bMulti_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      guildId_.WriteTo(output, _repeated_guildId_codec);
      if (BMulti != false) {
        output.WriteRawTag(24);
        output.WriteBool(BMulti);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      size += guildId_.CalculateSize(_repeated_guildId_codec);
      if (BMulti != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            guildId_.AddEntriesFrom(input, _repeated_guildId_codec);
            break;
          }
          case 24: {
            BMulti = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildFindGuildAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildFindGuildAck> _parser = new pb::MessageParser<CmdGuildFindGuildAck>(() => new CmdGuildFindGuildAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildFindGuildAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildList" field.</summary>
    public const int GuildListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BriefInfo> _repeated_guildList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BriefInfo> guildList_ = new pbc::RepeatedField<global::Packet.BriefInfo>();
    /// <summary>
    ///最多11个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BriefInfo> GuildList {
      get { return guildList_; }
    }

    /// <summary>Field number for the "bMulti" field.</summary>
    public const int BMultiFieldNumber = 2;
    private bool bMulti_;
    /// <summary>
    ///客户端用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BMulti {
      get { return bMulti_; }
      set {
        bMulti_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guildList_.WriteTo(output, _repeated_guildList_codec);
      if (BMulti != false) {
        output.WriteRawTag(16);
        output.WriteBool(BMulti);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guildList_.CalculateSize(_repeated_guildList_codec);
      if (BMulti != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guildList_.AddEntriesFrom(input, _repeated_guildList_codec);
            break;
          }
          case 16: {
            BMulti = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///uint64 guildId = 1;
  /// </summary>
  public sealed class CmdGuildGetGuildInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildInfoReq> _parser = new pb::MessageParser<CmdGuildGetGuildInfoReq>(() => new CmdGuildGetGuildInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetGuildInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildInfoAck> _parser = new pb::MessageParser<CmdGuildGetGuildInfoAck>(() => new CmdGuildGetGuildInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.GuildDetailInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildDetailInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 2;
    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 3;
    private pb::ByteString leaderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "myPosition" field.</summary>
    public const int MyPositionFieldNumber = 4;
    private uint myPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyPosition {
      get { return myPosition_; }
      set {
        myPosition_ = value;
      }
    }

    /// <summary>Field number for the "noChange" field.</summary>
    public const int NoChangeFieldNumber = 5;
    private bool noChange_;
    /// <summary>
    ///为真时除了在线人数不会有其他数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoChange {
      get { return noChange_; }
      set {
        noChange_ = value;
      }
    }

    /// <summary>Field number for the "onlineMember" field.</summary>
    public const int OnlineMemberFieldNumber = 6;
    private uint onlineMember_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineMember {
      get { return onlineMember_; }
      set {
        onlineMember_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MemberCount);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(LeaderName);
      }
      if (MyPosition != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MyPosition);
      }
      if (NoChange != false) {
        output.WriteRawTag(40);
        output.WriteBool(NoChange);
      }
      if (OnlineMember != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(OnlineMember);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderName);
      }
      if (MyPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyPosition);
      }
      if (NoChange != false) {
        size += 1 + 1;
      }
      if (OnlineMember != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineMember);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.GuildDetailInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 26: {
            LeaderName = input.ReadBytes();
            break;
          }
          case 32: {
            MyPosition = input.ReadUInt32();
            break;
          }
          case 40: {
            NoChange = input.ReadBool();
            break;
          }
          case 48: {
            OnlineMember = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildCreateBranchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCreateBranchReq> _parser = new pb::MessageParser<CmdGuildCreateBranchReq>(() => new CmdGuildCreateBranchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCreateBranchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildCreateBranchAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCreateBranchAck> _parser = new pb::MessageParser<CmdGuildCreateBranchAck>(() => new CmdGuildCreateBranchAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCreateBranchAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "branchId" field.</summary>
    public const int BranchIdFieldNumber = 2;
    private uint branchId_;
    /// <summary>
    ///有效值1开始不大于最大分会数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (BranchId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BranchId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            BranchId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBranchMoveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBranchMoveReq> _parser = new pb::MessageParser<CmdGuildBranchMoveReq>(() => new CmdGuildBranchMoveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBranchMoveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchId" field.</summary>
    public const int BranchIdFieldNumber = 1;
    private uint branchId_;
    /// <summary>
    ///分会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_member_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> member_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///分会to 成员 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Member {
      get { return member_; }
    }

    /// <summary>Field number for the "branchMember" field.</summary>
    public const int BranchMemberFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_branchMember_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> branchMember_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///成员 to branch 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> BranchMember {
      get { return branchMember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BranchId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BranchId);
      }
      member_.WriteTo(output, _repeated_member_codec);
      branchMember_.WriteTo(output, _repeated_branchMember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      size += member_.CalculateSize(_repeated_member_codec);
      size += branchMember_.CalculateSize(_repeated_branchMember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
          case 26:
          case 24: {
            branchMember_.AddEntriesFrom(input, _repeated_branchMember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBranchMoveAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBranchMoveAck> _parser = new pb::MessageParser<CmdGuildBranchMoveAck>(() => new CmdGuildBranchMoveAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBranchMoveAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchId" field.</summary>
    public const int BranchIdFieldNumber = 1;
    private uint branchId_;
    /// <summary>
    ///分会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_member_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> member_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///分会to 成员 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Member {
      get { return member_; }
    }

    /// <summary>Field number for the "branchMember" field.</summary>
    public const int BranchMemberFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_branchMember_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> branchMember_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///成员 to branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> BranchMember {
      get { return branchMember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BranchId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BranchId);
      }
      member_.WriteTo(output, _repeated_member_codec);
      branchMember_.WriteTo(output, _repeated_branchMember_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      size += member_.CalculateSize(_repeated_member_codec);
      size += branchMember_.CalculateSize(_repeated_branchMember_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
          case 26:
          case 24: {
            branchMember_.AddEntriesFrom(input, _repeated_branchMember_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpgradeWorkshopSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpgradeWorkshopSkillReq> _parser = new pb::MessageParser<CmdGuildUpgradeWorkshopSkillReq>(() => new CmdGuildUpgradeWorkshopSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpgradeWorkshopSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    /// <summary>
    ///当前需要升级的技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpgradeWorkshopSkillAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpgradeWorkshopSkillAck> _parser = new pb::MessageParser<CmdGuildUpgradeWorkshopSkillAck>(() => new CmdGuildUpgradeWorkshopSkillAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpgradeWorkshopSkillAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 2;
    private uint finishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "guildCoin" field.</summary>
    public const int GuildCoinFieldNumber = 3;
    private uint guildCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildCoin {
      get { return guildCoin_; }
      set {
        guildCoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishTime);
      }
      if (GuildCoin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildCoin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      if (GuildCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCoin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishTime = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildCoin = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildDestroyBranchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDestroyBranchReq> _parser = new pb::MessageParser<CmdGuildDestroyBranchReq>(() => new CmdGuildDestroyBranchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDestroyBranchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchid" field.</summary>
    public const int BranchidFieldNumber = 1;
    private uint branchid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Branchid {
      get { return branchid_; }
      set {
        branchid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Branchid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Branchid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Branchid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Branchid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Branchid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildDestroyBranchAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDestroyBranchAck> _parser = new pb::MessageParser<CmdGuildDestroyBranchAck>(() => new CmdGuildDestroyBranchAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDestroyBranchAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchid" field.</summary>
    public const int BranchidFieldNumber = 1;
    private uint branchid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Branchid {
      get { return branchid_; }
      set {
        branchid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Branchid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Branchid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Branchid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Branchid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Branchid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangePositionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangePositionReq> _parser = new pb::MessageParser<CmdGuildChangePositionReq>(() => new CmdGuildChangePositionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangePositionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///表position + 分会id*10000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangePositionAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangePositionAck> _parser = new pb::MessageParser<CmdGuildChangePositionAck>(() => new CmdGuildChangePositionAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangePositionAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeBranchPositionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeBranchPositionReq> _parser = new pb::MessageParser<CmdGuildChangeBranchPositionReq>(() => new CmdGuildChangeBranchPositionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeBranchPositionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    /// 分会id * 10000 + 分会职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeBranchPositionAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeBranchPositionAck> _parser = new pb::MessageParser<CmdGuildChangeBranchPositionAck>(() => new CmdGuildChangeBranchPositionAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeBranchPositionAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    /// 分会id * 10000 + 表position 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeDstMergeGuildReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeDstMergeGuildReq> _parser = new pb::MessageParser<CmdGuildChangeDstMergeGuildReq>(() => new CmdGuildChangeDstMergeGuildReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeDstMergeGuildReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "otherGuildId" field.</summary>
    public const int OtherGuildIdFieldNumber = 1;
    private ulong otherGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherGuildId {
      get { return otherGuildId_; }
      set {
        otherGuildId_ = value;
      }
    }

    /// <summary>Field number for the "dstGuildId" field.</summary>
    public const int DstGuildIdFieldNumber = 2;
    private ulong dstGuildId_;
    /// <summary>
    ///bool bInitiative = 3; //是否更改 主动发起的合并申请（别人申请的为被动）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstGuildId {
      get { return dstGuildId_; }
      set {
        dstGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherGuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OtherGuildId);
      }
      if (DstGuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DstGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherGuildId);
      }
      if (DstGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OtherGuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            DstGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeDstMergeGuildAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeDstMergeGuildAck> _parser = new pb::MessageParser<CmdGuildChangeDstMergeGuildAck>(() => new CmdGuildChangeDstMergeGuildAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeDstMergeGuildAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "otherGuildId" field.</summary>
    public const int OtherGuildIdFieldNumber = 1;
    private ulong otherGuildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherGuildId {
      get { return otherGuildId_; }
      set {
        otherGuildId_ = value;
      }
    }

    /// <summary>Field number for the "dstGuildId" field.</summary>
    public const int DstGuildIdFieldNumber = 2;
    private ulong dstGuildId_;
    /// <summary>
    ///bool bInitiative = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstGuildId {
      get { return dstGuildId_; }
      set {
        dstGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OtherGuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(OtherGuildId);
      }
      if (DstGuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DstGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OtherGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherGuildId);
      }
      if (DstGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OtherGuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            DstGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeDstMergeGuildNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeDstMergeGuildNtf> _parser = new pb::MessageParser<CmdGuildChangeDstMergeGuildNtf>(() => new CmdGuildChangeDstMergeGuildNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeDstMergeGuildNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetMemberInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetMemberInfoReq> _parser = new pb::MessageParser<CmdGuildGetMemberInfoReq>(() => new CmdGuildGetMemberInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetMemberInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetMemberInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetMemberInfoAck> _parser = new pb::MessageParser<CmdGuildGetMemberInfoAck>(() => new CmdGuildGetMemberInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetMemberInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildGetMemberInfoAck.Types.MemberInfo> _repeated_member_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildGetMemberInfoAck.Types.MemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildGetMemberInfoAck.Types.MemberInfo> member_ = new pbc::RepeatedField<global::Packet.CmdGuildGetMemberInfoAck.Types.MemberInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildGetMemberInfoAck.Types.MemberInfo> Member {
      get { return member_; }
    }

    /// <summary>Field number for the "onlineMember" field.</summary>
    public const int OnlineMemberFieldNumber = 2;
    private uint onlineMember_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineMember {
      get { return onlineMember_; }
      set {
        onlineMember_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      member_.WriteTo(output, _repeated_member_codec);
      if (OnlineMember != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OnlineMember);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += member_.CalculateSize(_repeated_member_codec);
      if (OnlineMember != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineMember);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
          case 16: {
            OnlineMember = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildGetMemberInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MemberInfo : pb::IMessage {
        private static readonly pb::MessageParser<MemberInfo> _parser = new pb::MessageParser<MemberInfo>(() => new MemberInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 2;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "lvl" field.</summary>
        public const int LvlFieldNumber = 3;
        private uint lvl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lvl {
          get { return lvl_; }
          set {
            lvl_ = value;
          }
        }

        /// <summary>Field number for the "occ" field.</summary>
        public const int OccFieldNumber = 4;
        private uint occ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Occ {
          get { return occ_; }
          set {
            occ_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 5;
        private uint position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "contribution" field.</summary>
        public const int ContributionFieldNumber = 6;
        private uint contribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Contribution {
          get { return contribution_; }
          set {
            contribution_ = value;
          }
        }

        /// <summary>Field number for the "totalcontribution" field.</summary>
        public const int TotalcontributionFieldNumber = 7;
        private uint totalcontribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Totalcontribution {
          get { return totalcontribution_; }
          set {
            totalcontribution_ = value;
          }
        }

        /// <summary>Field number for the "lastOffline" field.</summary>
        public const int LastOfflineFieldNumber = 8;
        private uint lastOffline_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LastOffline {
          get { return lastOffline_; }
          set {
            lastOffline_ = value;
          }
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 9;
        private uint heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroId {
          get { return heroId_; }
          set {
            heroId_ = value;
          }
        }

        /// <summary>Field number for the "careerRank" field.</summary>
        public const int CareerRankFieldNumber = 10;
        private uint careerRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CareerRank {
          get { return careerRank_; }
          set {
            careerRank_ = value;
          }
        }

        /// <summary>Field number for the "photo" field.</summary>
        public const int PhotoFieldNumber = 11;
        private uint photo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Photo {
          get { return photo_; }
          set {
            photo_ = value;
          }
        }

        /// <summary>Field number for the "photoFrame" field.</summary>
        public const int PhotoFrameFieldNumber = 12;
        private uint photoFrame_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PhotoFrame {
          get { return photoFrame_; }
          set {
            photoFrame_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          if (RoleId != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(RoleId);
          }
          if (Lvl != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Lvl);
          }
          if (Occ != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Occ);
          }
          if (Position != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Position);
          }
          if (Contribution != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Contribution);
          }
          if (Totalcontribution != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Totalcontribution);
          }
          if (LastOffline != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(LastOffline);
          }
          if (HeroId != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(HeroId);
          }
          if (CareerRank != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(CareerRank);
          }
          if (Photo != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(Photo);
          }
          if (PhotoFrame != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(PhotoFrame);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Lvl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
          }
          if (Occ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
          }
          if (Contribution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Contribution);
          }
          if (Totalcontribution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totalcontribution);
          }
          if (LastOffline != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffline);
          }
          if (HeroId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
          }
          if (CareerRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
          }
          if (Photo != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
          }
          if (PhotoFrame != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoFrame);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 16: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 24: {
                Lvl = input.ReadUInt32();
                break;
              }
              case 32: {
                Occ = input.ReadUInt32();
                break;
              }
              case 40: {
                Position = input.ReadUInt32();
                break;
              }
              case 48: {
                Contribution = input.ReadUInt32();
                break;
              }
              case 56: {
                Totalcontribution = input.ReadUInt32();
                break;
              }
              case 64: {
                LastOffline = input.ReadUInt32();
                break;
              }
              case 72: {
                HeroId = input.ReadUInt32();
                break;
              }
              case 80: {
                CareerRank = input.ReadUInt32();
                break;
              }
              case 88: {
                Photo = input.ReadUInt32();
                break;
              }
              case 96: {
                PhotoFrame = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildGetMyApplyListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetMyApplyListReq> _parser = new pb::MessageParser<CmdGuildGetMyApplyListReq>(() => new CmdGuildGetMyApplyListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetMyApplyListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetMyApplyListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetMyApplyListAck> _parser = new pb::MessageParser<CmdGuildGetMyApplyListAck>(() => new CmdGuildGetMyApplyListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetMyApplyListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BriefInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BriefInfo> infos_ = new pbc::RepeatedField<global::Packet.BriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BriefInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildOneKeyApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOneKeyApplyReq> _parser = new pb::MessageParser<CmdGuildOneKeyApplyReq>(() => new CmdGuildOneKeyApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOneKeyApplyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildOneKeyApplyAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOneKeyApplyAck> _parser = new pb::MessageParser<CmdGuildOneKeyApplyAck>(() => new CmdGuildOneKeyApplyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOneKeyApplyAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildList" field.</summary>
    public const int GuildListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BriefInfo> _repeated_guildList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BriefInfo> guildList_ = new pbc::RepeatedField<global::Packet.BriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BriefInfo> GuildList {
      get { return guildList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guildList_.WriteTo(output, _repeated_guildList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guildList_.CalculateSize(_repeated_guildList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guildList_.AddEntriesFrom(input, _repeated_guildList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSceneInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSceneInfoNtf> _parser = new pb::MessageParser<CmdGuildSceneInfoNtf>(() => new CmdGuildSceneInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSceneInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bSignIn" field.</summary>
    public const int BSignInFieldNumber = 1;
    private bool bSignIn_;
    /// <summary>
    ///今日是否签到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BSignIn {
      get { return bSignIn_; }
      set {
        bSignIn_ = value;
      }
    }

    /// <summary>Field number for the "donate" field.</summary>
    public const int DonateFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildSceneInfoNtf.Types.DonateInfo> _repeated_donate_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdGuildSceneInfoNtf.Types.DonateInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildSceneInfoNtf.Types.DonateInfo> donate_ = new pbc::RepeatedField<global::Packet.CmdGuildSceneInfoNtf.Types.DonateInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildSceneInfoNtf.Types.DonateInfo> Donate {
      get { return donate_; }
    }

    /// <summary>Field number for the "donateRewardIndex" field.</summary>
    public const int DonateRewardIndexFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_donateRewardIndex_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> donateRewardIndex_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///领取过的捐献奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DonateRewardIndex {
      get { return donateRewardIndex_; }
    }

    /// <summary>Field number for the "displayMyNews" field.</summary>
    public const int DisplayMyNewsFieldNumber = 5;
    private bool displayMyNews_;
    /// <summary>
    ///uint64 guildId = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisplayMyNews {
      get { return displayMyNews_; }
      set {
        displayMyNews_ = value;
      }
    }

    /// <summary>Field number for the "lastUpdate" field.</summary>
    public const int LastUpdateFieldNumber = 6;
    private uint lastUpdate_;
    /// <summary>
    ///签到捐赠等数据的上次更新时间（用于判断是否过天）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "guildbattle" field.</summary>
    public const int GuildbattleFieldNumber = 7;
    private global::Packet.SceneGuildBattleInfo guildbattle_;
    /// <summary>
    /// 族战数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SceneGuildBattleInfo Guildbattle {
      get { return guildbattle_; }
      set {
        guildbattle_ = value;
      }
    }

    /// <summary>Field number for the "consignFirstOpenFlag" field.</summary>
    public const int ConsignFirstOpenFlagFieldNumber = 8;
    private uint consignFirstOpenFlag_;
    /// <summary>
    ///是否已经打开过委托界面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConsignFirstOpenFlag {
      get { return consignFirstOpenFlag_; }
      set {
        consignFirstOpenFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BSignIn != false) {
        output.WriteRawTag(8);
        output.WriteBool(BSignIn);
      }
      donate_.WriteTo(output, _repeated_donate_codec);
      donateRewardIndex_.WriteTo(output, _repeated_donateRewardIndex_codec);
      if (DisplayMyNews != false) {
        output.WriteRawTag(40);
        output.WriteBool(DisplayMyNews);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LastUpdate);
      }
      if (guildbattle_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Guildbattle);
      }
      if (ConsignFirstOpenFlag != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ConsignFirstOpenFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BSignIn != false) {
        size += 1 + 1;
      }
      size += donate_.CalculateSize(_repeated_donate_codec);
      size += donateRewardIndex_.CalculateSize(_repeated_donateRewardIndex_codec);
      if (DisplayMyNews != false) {
        size += 1 + 1;
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (guildbattle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guildbattle);
      }
      if (ConsignFirstOpenFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConsignFirstOpenFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BSignIn = input.ReadBool();
            break;
          }
          case 18: {
            donate_.AddEntriesFrom(input, _repeated_donate_codec);
            break;
          }
          case 26:
          case 24: {
            donateRewardIndex_.AddEntriesFrom(input, _repeated_donateRewardIndex_codec);
            break;
          }
          case 40: {
            DisplayMyNews = input.ReadBool();
            break;
          }
          case 48: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 58: {
            if (guildbattle_ == null) {
              guildbattle_ = new global::Packet.SceneGuildBattleInfo();
            }
            input.ReadMessage(guildbattle_);
            break;
          }
          case 64: {
            ConsignFirstOpenFlag = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildSceneInfoNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class DonateInfo : pb::IMessage {
        private static readonly pb::MessageParser<DonateInfo> _parser = new pb::MessageParser<DonateInfo>(() => new DonateInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DonateInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "donateId" field.</summary>
        public const int DonateIdFieldNumber = 1;
        private uint donateId_;
        /// <summary>
        ///捐献id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DonateId {
          get { return donateId_; }
          set {
            donateId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DonateId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(DonateId);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DonateId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DonateId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DonateId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildGameInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGameInfoNtf> _parser = new pb::MessageParser<CmdGuildGameInfoNtf>(() => new CmdGuildGameInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGameInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastOffGuild" field.</summary>
    public const int LastOffGuildFieldNumber = 1;
    private ulong lastOffGuild_;
    /// <summary>
    ///上次离开公会时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastOffGuild {
      get { return lastOffGuild_; }
      set {
        lastOffGuild_ = value;
      }
    }

    /// <summary>Field number for the "guildContribution" field.</summary>
    public const int GuildContributionFieldNumber = 2;
    private uint guildContribution_;
    /// <summary>
    ///个人可用贡献（类似货币，只在公会中消耗）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildContribution {
      get { return guildContribution_; }
      set {
        guildContribution_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    /// <summary>
    ///公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "KungFuSkillLv" field.</summary>
    public const int KungFuSkillLvFieldNumber = 4;
    private uint kungFuSkillLv_;
    /// <summary>
    /// 战争学院技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KungFuSkillLv {
      get { return kungFuSkillLv_; }
      set {
        kungFuSkillLv_ = value;
      }
    }

    /// <summary>Field number for the "guildUid" field.</summary>
    public const int GuildUidFieldNumber = 5;
    private ulong guildUid_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildUid {
      get { return guildUid_; }
      set {
        guildUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastOffGuild != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LastOffGuild);
      }
      if (GuildContribution != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildContribution);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
      if (KungFuSkillLv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(KungFuSkillLv);
      }
      if (GuildUid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(GuildUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastOffGuild != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastOffGuild);
      }
      if (GuildContribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildContribution);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (KungFuSkillLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KungFuSkillLv);
      }
      if (GuildUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastOffGuild = input.ReadUInt64();
            break;
          }
          case 16: {
            GuildContribution = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 32: {
            KungFuSkillLv = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeBranchNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeBranchNameReq> _parser = new pb::MessageParser<CmdGuildChangeBranchNameReq>(() => new CmdGuildChangeBranchNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeBranchNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchId" field.</summary>
    public const int BranchIdFieldNumber = 1;
    private uint branchId_;
    /// <summary>
    ///分会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BranchId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BranchId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeBranchNameAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeBranchNameAck> _parser = new pb::MessageParser<CmdGuildChangeBranchNameAck>(() => new CmdGuildChangeBranchNameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeBranchNameAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "branchId" field.</summary>
    public const int BranchIdFieldNumber = 1;
    private uint branchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BranchId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BranchId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetGuildApplyMemberReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildApplyMemberReq> _parser = new pb::MessageParser<CmdGuildGetGuildApplyMemberReq>(() => new CmdGuildGetGuildApplyMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildApplyMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class ApplyMember : pb::IMessage {
    private static readonly pb::MessageParser<ApplyMember> _parser = new pb::MessageParser<ApplyMember>(() => new ApplyMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 3;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    /// <summary>Field number for the "occ" field.</summary>
    public const int OccFieldNumber = 4;
    private uint occ_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occ {
      get { return occ_; }
      set {
        occ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Lvl != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lvl);
      }
      if (Occ != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Occ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      if (Occ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Lvl = input.ReadUInt32();
            break;
          }
          case 32: {
            Occ = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetGuildApplyMemberAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetGuildApplyMemberAck> _parser = new pb::MessageParser<CmdGuildGetGuildApplyMemberAck>(() => new CmdGuildGetGuildApplyMemberAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetGuildApplyMemberAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ApplyMember> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ApplyMember.Parser);
    private readonly pbc::RepeatedField<global::Packet.ApplyMember> list_ = new pbc::RepeatedField<global::Packet.ApplyMember>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ApplyMember> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildNewApplyMmberNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildNewApplyMmberNtf> _parser = new pb::MessageParser<CmdGuildNewApplyMmberNtf>(() => new CmdGuildNewApplyMmberNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildNewApplyMmberNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 1;
    private bool add_;
    /// <summary>
    ///false 为删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Add {
      get { return add_; }
      set {
        add_ = value;
      }
    }

    /// <summary>Field number for the "roleInfo" field.</summary>
    public const int RoleInfoFieldNumber = 2;
    private global::Packet.ApplyMember roleInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ApplyMember RoleInfo {
      get { return roleInfo_; }
      set {
        roleInfo_ = value;
      }
    }

    /// <summary>Field number for the "clearList" field.</summary>
    public const int ClearListFieldNumber = 3;
    private bool clearList_;
    /// <summary>
    ///清空列表 （有此字段则清空列表）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClearList {
      get { return clearList_; }
      set {
        clearList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Add != false) {
        output.WriteRawTag(8);
        output.WriteBool(Add);
      }
      if (roleInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoleInfo);
      }
      if (ClearList != false) {
        output.WriteRawTag(24);
        output.WriteBool(ClearList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Add != false) {
        size += 1 + 1;
      }
      if (roleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleInfo);
      }
      if (ClearList != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Add = input.ReadBool();
            break;
          }
          case 18: {
            if (roleInfo_ == null) {
              roleInfo_ = new global::Packet.ApplyMember();
            }
            input.ReadMessage(roleInfo_);
            break;
          }
          case 24: {
            ClearList = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSetApplyInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSetApplyInfoReq> _parser = new pb::MessageParser<CmdGuildSetApplyInfoReq>(() => new CmdGuildSetApplyInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSetApplyInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoAgree" field.</summary>
    public const int AutoAgreeFieldNumber = 1;
    private bool autoAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAgree {
      get { return autoAgree_; }
      set {
        autoAgree_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 2;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoAgree != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoAgree);
      }
      if (Lvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lvl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoAgree != false) {
        size += 1 + 1;
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoAgree = input.ReadBool();
            break;
          }
          case 16: {
            Lvl = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSetApplyInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSetApplyInfoAck> _parser = new pb::MessageParser<CmdGuildSetApplyInfoAck>(() => new CmdGuildSetApplyInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSetApplyInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoAgree" field.</summary>
    public const int AutoAgreeFieldNumber = 1;
    private bool autoAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAgree {
      get { return autoAgree_; }
      set {
        autoAgree_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 2;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoAgree != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoAgree);
      }
      if (Lvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lvl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoAgree != false) {
        size += 1 + 1;
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoAgree = input.ReadBool();
            break;
          }
          case 16: {
            Lvl = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildCancleMergeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCancleMergeReq> _parser = new pb::MessageParser<CmdGuildCancleMergeReq>(() => new CmdGuildCancleMergeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCancleMergeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildCancleMergeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCancleMergeAck> _parser = new pb::MessageParser<CmdGuildCancleMergeAck>(() => new CmdGuildCancleMergeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCancleMergeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildCancelMergeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCancelMergeNtf> _parser = new pb::MessageParser<CmdGuildCancelMergeNtf>(() => new CmdGuildCancelMergeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCancelMergeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyGuildId" field.</summary>
    public const int ApplyGuildIdFieldNumber = 1;
    private ulong applyGuildId_;
    /// <summary>
    ///发起合并的家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApplyGuildId {
      get { return applyGuildId_; }
      set {
        applyGuildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyGuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ApplyGuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplyGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApplyGuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyGuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeMyNewsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeMyNewsReq> _parser = new pb::MessageParser<CmdGuildChangeMyNewsReq>(() => new CmdGuildChangeMyNewsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeMyNewsReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bDisplay" field.</summary>
    public const int BDisplayFieldNumber = 1;
    private bool bDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BDisplay {
      get { return bDisplay_; }
      set {
        bDisplay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BDisplay != false) {
        output.WriteRawTag(8);
        output.WriteBool(BDisplay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BDisplay != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BDisplay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildChangeMyNewsAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeMyNewsAck> _parser = new pb::MessageParser<CmdGuildChangeMyNewsAck>(() => new CmdGuildChangeMyNewsAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeMyNewsAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "bDisplay" field.</summary>
    public const int BDisplayFieldNumber = 1;
    private bool bDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BDisplay {
      get { return bDisplay_; }
      set {
        bDisplay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BDisplay != false) {
        output.WriteRawTag(8);
        output.WriteBool(BDisplay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BDisplay != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BDisplay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBranchMergeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBranchMergeReq> _parser = new pb::MessageParser<CmdGuildBranchMergeReq>(() => new CmdGuildBranchMergeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBranchMergeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "srcId" field.</summary>
    public const int SrcIdFieldNumber = 1;
    private uint srcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcId {
      get { return srcId_; }
      set {
        srcId_ = value;
      }
    }

    /// <summary>Field number for the "dstId" field.</summary>
    public const int DstIdFieldNumber = 2;
    private uint dstId_;
    /// <summary>
    ///src分会并入 dst 分会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstId {
      get { return dstId_; }
      set {
        dstId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcId);
      }
      if (DstId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DstId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcId);
      }
      if (DstId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcId = input.ReadUInt32();
            break;
          }
          case 16: {
            DstId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBranchMergeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBranchMergeAck> _parser = new pb::MessageParser<CmdGuildBranchMergeAck>(() => new CmdGuildBranchMergeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBranchMergeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "dstId" field.</summary>
    public const int DstIdFieldNumber = 1;
    private uint dstId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstId {
      get { return dstId_; }
      set {
        dstId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有人员position 变成dst分会成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DstId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DstId);
      }
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DstId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstId);
      }
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DstId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSkillUpgradeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSkillUpgradeNtf> _parser = new pb::MessageParser<CmdGuildSkillUpgradeNtf>(() => new CmdGuildSkillUpgradeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSkillUpgradeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "oldSkill" field.</summary>
    public const int OldSkillFieldNumber = 1;
    private uint oldSkill_;
    /// <summary>
    ///升级前
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldSkill {
      get { return oldSkill_; }
      set {
        oldSkill_ = value;
      }
    }

    /// <summary>Field number for the "newSkill" field.</summary>
    public const int NewSkillFieldNumber = 2;
    private uint newSkill_;
    /// <summary>
    ///升级后
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewSkill {
      get { return newSkill_; }
      set {
        newSkill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldSkill != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldSkill);
      }
      if (NewSkill != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewSkill);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldSkill);
      }
      if (NewSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewSkill);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldSkill = input.ReadUInt32();
            break;
          }
          case 16: {
            NewSkill = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildRefuseApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildRefuseApplyNtf> _parser = new pb::MessageParser<CmdGuildRefuseApplyNtf>(() => new CmdGuildRefuseApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildRefuseApplyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GuildName);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GuildName = input.ReadBytes();
            break;
          }
          case 16: {
            GuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///uint64 guildId = 1;
  /// </summary>
  public sealed class CmdGuildIdNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildIdNtf> _parser = new pb::MessageParser<CmdGuildIdNtf>(() => new CmdGuildIdNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildIdNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildTodayDonateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildTodayDonateNtf> _parser = new pb::MessageParser<CmdGuildTodayDonateNtf>(() => new CmdGuildTodayDonateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildTodayDonateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private uint money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildInviteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildInviteNtf> _parser = new pb::MessageParser<CmdGuildInviteNtf>(() => new CmdGuildInviteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildInviteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    /////邀请人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 4;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///邀请人名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
          case 34: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildInviteRpl : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildInviteRpl> _parser = new pb::MessageParser<CmdGuildInviteRpl>(() => new CmdGuildInviteRpl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildInviteRpl> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///邀请人id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///邀请人名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agreeType" field.</summary>
    public const int AgreeTypeFieldNumber = 4;
    private uint agreeType_;
    /// <summary>
    /// 0成功 1主动拒绝 2设置自动拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AgreeType {
      get { return agreeType_; }
      set {
        agreeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RoleName);
      }
      if (AgreeType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AgreeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (AgreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AgreeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            RoleName = input.ReadBytes();
            break;
          }
          case 32: {
            AgreeType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildInviteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildInviteReq> _parser = new pb::MessageParser<CmdGuildInviteReq>(() => new CmdGuildInviteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildInviteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///被邀请人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildStaminaNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildStaminaNtf> _parser = new pb::MessageParser<CmdGuildStaminaNtf>(() => new CmdGuildStaminaNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildStaminaNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 1;
    private uint stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "recoverTime" field.</summary>
    public const int RecoverTimeFieldNumber = 2;
    private uint recoverTime_;
    /// <summary>
    ///上次恢复时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecoverTime {
      get { return recoverTime_; }
      set {
        recoverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stamina != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stamina);
      }
      if (RecoverTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RecoverTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stamina);
      }
      if (RecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecoverTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stamina = input.ReadUInt32();
            break;
          }
          case 16: {
            RecoverTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildContributionNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildContributionNtf> _parser = new pb::MessageParser<CmdGuildContributionNtf>(() => new CmdGuildContributionNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildContributionNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "addContribution" field.</summary>
    public const int AddContributionFieldNumber = 1;
    private uint addContribution_;
    /// <summary>
    ///增加值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddContribution {
      get { return addContribution_; }
      set {
        addContribution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddContribution != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AddContribution);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddContribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddContribution);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddContribution = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildCurrencyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCurrencyNtf> _parser = new pb::MessageParser<CmdGuildCurrencyNtf>(() => new CmdGuildCurrencyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCurrencyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "addItems" field.</summary>
    public const int AddItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildCurrencyNtf.Types.ItemInfo> _repeated_addItems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildCurrencyNtf.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildCurrencyNtf.Types.ItemInfo> addItems_ = new pbc::RepeatedField<global::Packet.CmdGuildCurrencyNtf.Types.ItemInfo>();
    /// <summary>
    ///增加的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildCurrencyNtf.Types.ItemInfo> AddItems {
      get { return addItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addItems_.WriteTo(output, _repeated_addItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addItems_.CalculateSize(_repeated_addItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addItems_.AddEntriesFrom(input, _repeated_addItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildCurrencyNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemInfo : pb::IMessage {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "itemCount" field.</summary>
        public const int ItemCountFieldNumber = 2;
        private uint itemCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemCount {
          get { return itemCount_; }
          set {
            itemCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (ItemCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildHandInItemProsperityReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandInItemProsperityReq> _parser = new pb::MessageParser<CmdGuildHandInItemProsperityReq>(() => new CmdGuildHandInItemProsperityReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandInItemProsperityReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildHandInItemProsperityReq.Types.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildHandInItemProsperityReq.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildHandInItemProsperityReq.Types.ItemInfo> items_ = new pbc::RepeatedField<global::Packet.CmdGuildHandInItemProsperityReq.Types.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildHandInItemProsperityReq.Types.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildHandInItemProsperityReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemInfo : pb::IMessage {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemUid" field.</summary>
        public const int ItemUidFieldNumber = 1;
        private ulong itemUid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ItemUid {
          get { return itemUid_; }
          set {
            itemUid_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 3;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemUid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemUid);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (InfoId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(InfoId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemUid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUid);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemUid = input.ReadUInt64();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 24: {
                InfoId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildGetCuisineInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineInfoReq> _parser = new pb::MessageParser<CmdGuildGetCuisineInfoReq>(() => new CmdGuildGetCuisineInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetCuisineInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineInfoAck> _parser = new pb::MessageParser<CmdGuildGetCuisineInfoAck>(() => new CmdGuildGetCuisineInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "cuisineId" field.</summary>
    public const int CuisineIdFieldNumber = 1;
    private uint cuisineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CuisineId {
      get { return cuisineId_; }
      set {
        cuisineId_ = value;
      }
    }

    /// <summary>Field number for the "handinTime" field.</summary>
    public const int HandinTimeFieldNumber = 2;
    private uint handinTime_;
    /// <summary>
    ///今日提交次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HandinTime {
      get { return handinTime_; }
      set {
        handinTime_ = value;
      }
    }

    /// <summary>Field number for the "gotCuisineReward" field.</summary>
    public const int GotCuisineRewardFieldNumber = 3;
    private bool gotCuisineReward_;
    /// <summary>
    ///是否领取过今日材料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GotCuisineReward {
      get { return gotCuisineReward_; }
      set {
        gotCuisineReward_ = value;
      }
    }

    /// <summary>Field number for the "guildlvl" field.</summary>
    public const int GuildlvlFieldNumber = 4;
    private uint guildlvl_;
    /// <summary>
    ///公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guildlvl {
      get { return guildlvl_; }
      set {
        guildlvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CuisineId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CuisineId);
      }
      if (HandinTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HandinTime);
      }
      if (GotCuisineReward != false) {
        output.WriteRawTag(24);
        output.WriteBool(GotCuisineReward);
      }
      if (Guildlvl != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Guildlvl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CuisineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CuisineId);
      }
      if (HandinTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HandinTime);
      }
      if (GotCuisineReward != false) {
        size += 1 + 1;
      }
      if (Guildlvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guildlvl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CuisineId = input.ReadUInt32();
            break;
          }
          case 16: {
            HandinTime = input.ReadUInt32();
            break;
          }
          case 24: {
            GotCuisineReward = input.ReadBool();
            break;
          }
          case 32: {
            Guildlvl = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandInCuisineReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandInCuisineReq> _parser = new pb::MessageParser<CmdGuildHandInCuisineReq>(() => new CmdGuildHandInCuisineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandInCuisineReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildHandInCuisineReq.Types.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildHandInCuisineReq.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildHandInCuisineReq.Types.ItemInfo> items_ = new pbc::RepeatedField<global::Packet.CmdGuildHandInCuisineReq.Types.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildHandInCuisineReq.Types.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildHandInCuisineReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemInfo : pb::IMessage {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemUid" field.</summary>
        public const int ItemUidFieldNumber = 1;
        private ulong itemUid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ItemUid {
          get { return itemUid_; }
          set {
            itemUid_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 3;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemUid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(ItemUid);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (InfoId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(InfoId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemUid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUid);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemUid = input.ReadUInt64();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 24: {
                InfoId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildProsperityLvlNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildProsperityLvlNtf> _parser = new pb::MessageParser<CmdGuildProsperityLvlNtf>(() => new CmdGuildProsperityLvlNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildProsperityLvlNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 1;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lvl != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Lvl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Lvl = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildHandInCuisineAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHandInCuisineAck> _parser = new pb::MessageParser<CmdGuildHandInCuisineAck>(() => new CmdGuildHandInCuisineAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHandInCuisineAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPartyStarNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPartyStarNtf> _parser = new pb::MessageParser<CmdGuildPartyStarNtf>(() => new CmdGuildPartyStarNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPartyStarNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetCuisineIngredientReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineIngredientReq> _parser = new pb::MessageParser<CmdGuildGetCuisineIngredientReq>(() => new CmdGuildGetCuisineIngredientReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineIngredientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetCuisineIngredientAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineIngredientAck> _parser = new pb::MessageParser<CmdGuildGetCuisineIngredientAck>(() => new CmdGuildGetCuisineIngredientAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineIngredientAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetCuisineRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineRecordReq> _parser = new pb::MessageParser<CmdGuildGetCuisineRecordReq>(() => new CmdGuildGetCuisineRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetCuisineRecordAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetCuisineRecordAck> _parser = new pb::MessageParser<CmdGuildGetCuisineRecordAck>(() => new CmdGuildGetCuisineRecordAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetCuisineRecordAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "allInfos" field.</summary>
    public const int AllInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildGetCuisineRecordAck.Types.Info> _repeated_allInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildGetCuisineRecordAck.Types.Info.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildGetCuisineRecordAck.Types.Info> allInfos_ = new pbc::RepeatedField<global::Packet.CmdGuildGetCuisineRecordAck.Types.Info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildGetCuisineRecordAck.Types.Info> AllInfos {
      get { return allInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allInfos_.WriteTo(output, _repeated_allInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allInfos_.CalculateSize(_repeated_allInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allInfos_.AddEntriesFrom(input, _repeated_allInfos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildGetCuisineRecordAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Info : pb::IMessage {
        private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Info> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 2;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          if (ItemId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 16: {
                ItemId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildPartyMonsterNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPartyMonsterNtf> _parser = new pb::MessageParser<CmdGuildPartyMonsterNtf>(() => new CmdGuildPartyMonsterNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPartyMonsterNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildChangeNameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildChangeNameNtf> _parser = new pb::MessageParser<CmdGuildChangeNameNtf>(() => new CmdGuildChangeNameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildChangeNameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildPosChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPosChangeNtf> _parser = new pb::MessageParser<CmdGuildPosChangeNtf>(() => new CmdGuildPosChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPosChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private uint pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildConsignInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildConsignInfo> _parser = new pb::MessageParser<GuildConsignInfo>(() => new GuildConsignInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildConsignInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///委托者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "formulaId" field.</summary>
    public const int FormulaIdFieldNumber = 3;
    private uint formulaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaId {
      get { return formulaId_; }
      set {
        formulaId_ = value;
      }
    }

    /// <summary>Field number for the "intensifyBuild" field.</summary>
    public const int IntensifyBuildFieldNumber = 4;
    private bool intensifyBuild_;
    /// <summary>
    ///是否炼精
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IntensifyBuild {
      get { return intensifyBuild_; }
      set {
        intensifyBuild_ = value;
      }
    }

    /// <summary>Field number for the "endTick" field.</summary>
    public const int EndTickFieldNumber = 5;
    private uint endTick_;
    /// <summary>
    ///协助到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTick {
      get { return endTick_; }
      set {
        endTick_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 6;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (FormulaId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FormulaId);
      }
      if (IntensifyBuild != false) {
        output.WriteRawTag(32);
        output.WriteBool(IntensifyBuild);
      }
      if (EndTick != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EndTick);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (FormulaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaId);
      }
      if (IntensifyBuild != false) {
        size += 1 + 1;
      }
      if (EndTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTick);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            FormulaId = input.ReadUInt32();
            break;
          }
          case 32: {
            IntensifyBuild = input.ReadBool();
            break;
          }
          case 40: {
            EndTick = input.ReadUInt32();
            break;
          }
          case 48: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildConsignSelfInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildConsignSelfInfo> _parser = new pb::MessageParser<GuildConsignSelfInfo>(() => new GuildConsignSelfInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildConsignSelfInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "formulaId" field.</summary>
    public const int FormulaIdFieldNumber = 2;
    private uint formulaId_;
    /// <summary>
    ///技能Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaId {
      get { return formulaId_; }
      set {
        formulaId_ = value;
      }
    }

    /// <summary>Field number for the "intensifyBuild" field.</summary>
    public const int IntensifyBuildFieldNumber = 3;
    private bool intensifyBuild_;
    /// <summary>
    ///是否炼精
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IntensifyBuild {
      get { return intensifyBuild_; }
      set {
        intensifyBuild_ = value;
      }
    }

    /// <summary>Field number for the "endTick" field.</summary>
    public const int EndTickFieldNumber = 4;
    private uint endTick_;
    /// <summary>
    ///协助到期时间/领取到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTick {
      get { return endTick_; }
      set {
        endTick_ = value;
      }
    }

    /// <summary>Field number for the "helperName" field.</summary>
    public const int HelperNameFieldNumber = 5;
    private pb::ByteString helperName_ = pb::ByteString.Empty;
    /// <summary>
    ///协助者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HelperName {
      get { return helperName_; }
      set {
        helperName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 6;
    private global::Packet.Item equip_;
    /// <summary>
    ///打造出来的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.SimpleItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.SimpleItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimpleItem> itemList_ = new pbc::RepeatedField<global::Packet.SimpleItem>();
    /// <summary>
    ///打造出来的普通道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimpleItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "helperId" field.</summary>
    public const int HelperIdFieldNumber = 8;
    private ulong helperId_;
    /// <summary>
    ///协助者RoleId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HelperId {
      get { return helperId_; }
      set {
        helperId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
      if (FormulaId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FormulaId);
      }
      if (IntensifyBuild != false) {
        output.WriteRawTag(24);
        output.WriteBool(IntensifyBuild);
      }
      if (EndTick != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndTick);
      }
      if (HelperName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(HelperName);
      }
      if (equip_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Equip);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (HelperId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(HelperId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      if (FormulaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaId);
      }
      if (IntensifyBuild != false) {
        size += 1 + 1;
      }
      if (EndTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTick);
      }
      if (HelperName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HelperName);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (HelperId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HelperId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
          case 16: {
            FormulaId = input.ReadUInt32();
            break;
          }
          case 24: {
            IntensifyBuild = input.ReadBool();
            break;
          }
          case 32: {
            EndTick = input.ReadUInt32();
            break;
          }
          case 42: {
            HelperName = input.ReadBytes();
            break;
          }
          case 50: {
            if (equip_ == null) {
              equip_ = new global::Packet.Item();
            }
            input.ReadMessage(equip_);
            break;
          }
          case 58: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 64: {
            HelperId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求委托列表
  /// </summary>
  public sealed class CmdGuildGetConsignListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetConsignListReq> _parser = new pb::MessageParser<CmdGuildGetConsignListReq>(() => new CmdGuildGetConsignListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetConsignListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///委托列表返回
  /// </summary>
  public sealed class CmdGuildGetConsignListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetConsignListAck> _parser = new pb::MessageParser<CmdGuildGetConsignListAck>(() => new CmdGuildGetConsignListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetConsignListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "needClear" field.</summary>
    public const int NeedClearFieldNumber = 1;
    private bool needClear_;
    /// <summary>
    ///是否清理数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedClear {
      get { return needClear_; }
      set {
        needClear_ = value;
      }
    }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GuildConsignInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GuildConsignInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildConsignInfo> infoList_ = new pbc::RepeatedField<global::Packet.GuildConsignInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildConsignInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NeedClear != false) {
        output.WriteRawTag(8);
        output.WriteBool(NeedClear);
      }
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NeedClear != false) {
        size += 1 + 1;
      }
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NeedClear = input.ReadBool();
            break;
          }
          case 18: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求自己的委托列表
  /// </summary>
  public sealed class CmdGuildGetSelfConsignListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetSelfConsignListReq> _parser = new pb::MessageParser<CmdGuildGetSelfConsignListReq>(() => new CmdGuildGetSelfConsignListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetSelfConsignListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///自己的委托列表返回
  /// </summary>
  public sealed class CmdGuildGetSelfConsignListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetSelfConsignListAck> _parser = new pb::MessageParser<CmdGuildGetSelfConsignListAck>(() => new CmdGuildGetSelfConsignListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetSelfConsignListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GuildConsignSelfInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GuildConsignSelfInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildConsignSelfInfo> infoList_ = new pbc::RepeatedField<global::Packet.GuildConsignSelfInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildConsignSelfInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///求助
  /// </summary>
  public sealed class CmdGuildSeekHelpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSeekHelpReq> _parser = new pb::MessageParser<CmdGuildSeekHelpReq>(() => new CmdGuildSeekHelpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSeekHelpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///求助返回
  /// </summary>
  public sealed class CmdGuildSeekHelpAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSeekHelpAck> _parser = new pb::MessageParser<CmdGuildSeekHelpAck>(() => new CmdGuildSeekHelpAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSeekHelpAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private uint tick_;
    /// <summary>
    ///求助时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Tick != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Tick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Tick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSeekHelpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSeekHelpNtf> _parser = new pb::MessageParser<CmdGuildSeekHelpNtf>(() => new CmdGuildSeekHelpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSeekHelpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 1;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "formulaId" field.</summary>
    public const int FormulaIdFieldNumber = 2;
    private uint formulaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaId {
      get { return formulaId_; }
      set {
        formulaId_ = value;
      }
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 3;
    private uint uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RoleName);
      }
      if (FormulaId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FormulaId);
      }
      if (UId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (FormulaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaId);
      }
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleName = input.ReadBytes();
            break;
          }
          case 16: {
            FormulaId = input.ReadUInt32();
            break;
          }
          case 24: {
            UId = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发布委托
  /// </summary>
  public sealed class CmdGuildPublishConsignReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPublishConsignReq> _parser = new pb::MessageParser<CmdGuildPublishConsignReq>(() => new CmdGuildPublishConsignReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPublishConsignReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "formulaID" field.</summary>
    public const int FormulaIDFieldNumber = 1;
    private uint formulaID_;
    /// <summary>
    /// 要打造的配方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaID {
      get { return formulaID_; }
      set {
        formulaID_ = value;
      }
    }

    /// <summary>Field number for the "useIntensifyBuild" field.</summary>
    public const int UseIntensifyBuildFieldNumber = 2;
    private bool useIntensifyBuild_;
    /// <summary>
    /// 是否强化打造
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseIntensifyBuild {
      get { return useIntensifyBuild_; }
      set {
        useIntensifyBuild_ = value;
      }
    }

    /// <summary>Field number for the "inputItemID" field.</summary>
    public const int InputItemIDFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_inputItemID_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> inputItemID_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 特殊材料列表(给不固定配方用的), ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InputItemID {
      get { return inputItemID_; }
    }

    /// <summary>Field number for the "shareConsign" field.</summary>
    public const int ShareConsignFieldNumber = 4;
    private bool shareConsign_;
    /// <summary>
    ///是否需要发送消息到家族频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareConsign {
      get { return shareConsign_; }
      set {
        shareConsign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FormulaID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FormulaID);
      }
      if (UseIntensifyBuild != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseIntensifyBuild);
      }
      inputItemID_.WriteTo(output, _repeated_inputItemID_codec);
      if (ShareConsign != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShareConsign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FormulaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaID);
      }
      if (UseIntensifyBuild != false) {
        size += 1 + 1;
      }
      size += inputItemID_.CalculateSize(_repeated_inputItemID_codec);
      if (ShareConsign != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FormulaID = input.ReadUInt32();
            break;
          }
          case 16: {
            UseIntensifyBuild = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            inputItemID_.AddEntriesFrom(input, _repeated_inputItemID_codec);
            break;
          }
          case 32: {
            ShareConsign = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发布委托通知
  /// </summary>
  public sealed class CmdGuildPublishConsignNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPublishConsignNtf> _parser = new pb::MessageParser<CmdGuildPublishConsignNtf>(() => new CmdGuildPublishConsignNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPublishConsignNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.GuildConsignInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildConsignInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "shareConsign" field.</summary>
    public const int ShareConsignFieldNumber = 2;
    private bool shareConsign_;
    /// <summary>
    ///是否需要发送消息到家族频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareConsign {
      get { return shareConsign_; }
      set {
        shareConsign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (ShareConsign != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShareConsign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (ShareConsign != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.GuildConsignInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            ShareConsign = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发布委托通知
  /// </summary>
  public sealed class CmdGuildPublishConsignAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildPublishConsignAck> _parser = new pb::MessageParser<CmdGuildPublishConsignAck>(() => new CmdGuildPublishConsignAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildPublishConsignAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.GuildConsignSelfInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildConsignSelfInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.GuildConsignSelfInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消委托
  /// </summary>
  public sealed class CmdGuildCancelConsignReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildCancelConsignReq> _parser = new pb::MessageParser<CmdGuildCancelConsignReq>(() => new CmdGuildCancelConsignReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildCancelConsignReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除委托
  /// </summary>
  public sealed class CmdGuildDeleteConsignNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDeleteConsignNtf> _parser = new pb::MessageParser<CmdGuildDeleteConsignNtf>(() => new CmdGuildDeleteConsignNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDeleteConsignNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "uIdList" field.</summary>
    public const int UIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uIdList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UIdList {
      get { return uIdList_; }
    }

    /// <summary>Field number for the "deleteType" field.</summary>
    public const int DeleteTypeFieldNumber = 2;
    private uint deleteType_;
    /// <summary>
    ///0:同时删除全部列表和个人列表 1:只删除全部列表 2:只删除个人列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeleteType {
      get { return deleteType_; }
      set {
        deleteType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uIdList_.WriteTo(output, _repeated_uIdList_codec);
      if (DeleteType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DeleteType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uIdList_.CalculateSize(_repeated_uIdList_codec);
      if (DeleteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeleteType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uIdList_.AddEntriesFrom(input, _repeated_uIdList_codec);
            break;
          }
          case 16: {
            DeleteType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///协助
  /// </summary>
  public sealed class CmdGuildHelpBuildReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHelpBuildReq> _parser = new pb::MessageParser<CmdGuildHelpBuildReq>(() => new CmdGuildHelpBuildReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHelpBuildReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    /// <summary>
    ///uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///协助返回
  /// </summary>
  public sealed class CmdGuildHelpBuildAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHelpBuildAck> _parser = new pb::MessageParser<CmdGuildHelpBuildAck>(() => new CmdGuildHelpBuildAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHelpBuildAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 1;
    private global::Packet.Item equip_;
    /// <summary>
    ///协助生成的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.SimpleItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.SimpleItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimpleItem> itemList_ = new pbc::RepeatedField<global::Packet.SimpleItem>();
    /// <summary>
    ///协助生成的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimpleItem> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///今日已协助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "formulaId" field.</summary>
    public const int FormulaIdFieldNumber = 4;
    private uint formulaId_;
    /// <summary>
    ///配方Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaId {
      get { return formulaId_; }
      set {
        formulaId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 5;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (equip_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Equip);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (FormulaId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FormulaId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (FormulaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equip_ == null) {
              equip_ = new global::Packet.Item();
            }
            input.ReadMessage(equip_);
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            FormulaId = input.ReadUInt32();
            break;
          }
          case 42: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取委托道具
  /// </summary>
  public sealed class CmdGuildReceiveBuildItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildReceiveBuildItemReq> _parser = new pb::MessageParser<CmdGuildReceiveBuildItemReq>(() => new CmdGuildReceiveBuildItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildReceiveBuildItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private uint uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildReceiveBuildItemAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildReceiveBuildItemAck> _parser = new pb::MessageParser<CmdGuildReceiveBuildItemAck>(() => new CmdGuildReceiveBuildItemAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildReceiveBuildItemAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "helpRoleId" field.</summary>
    public const int HelpRoleIdFieldNumber = 1;
    private ulong helpRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HelpRoleId {
      get { return helpRoleId_; }
      set {
        helpRoleId_ = value;
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 2;
    private global::Packet.Item equip_;
    /// <summary>
    ///领取的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HelpRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HelpRoleId);
      }
      if (equip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HelpRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HelpRoleId);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HelpRoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (equip_ == null) {
              equip_ = new global::Packet.Item();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录发送本系统相关的信息
  /// </summary>
  public sealed class CmdGuildConsignSelfBaseInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildConsignSelfBaseInfoNtf> _parser = new pb::MessageParser<CmdGuildConsignSelfBaseInfoNtf>(() => new CmdGuildConsignSelfBaseInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildConsignSelfBaseInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    /// <summary>
    ///今日已经协助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///家族合并通知
  /// </summary>
  public sealed class CmdGuildConsignMergeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildConsignMergeNtf> _parser = new pb::MessageParser<CmdGuildConsignMergeNtf>(() => new CmdGuildConsignMergeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildConsignMergeNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///家族频道的公告
  /// </summary>
  public sealed class CmdGuildHelpBuildSucNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildHelpBuildSucNtf> _parser = new pb::MessageParser<CmdGuildHelpBuildSucNtf>(() => new CmdGuildHelpBuildSucNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildHelpBuildSucNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "helpName" field.</summary>
    public const int HelpNameFieldNumber = 1;
    private pb::ByteString helpName_ = pb::ByteString.Empty;
    /// <summary>
    ///协助者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HelpName {
      get { return helpName_; }
      set {
        helpName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///被协助者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 3;
    private global::Packet.Item equip_;
    /// <summary>
    ///协助生成的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 4;
    private uint uId_;
    /// <summary>
    ///委托Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "helperId" field.</summary>
    public const int HelperIdFieldNumber = 5;
    private ulong helperId_;
    /// <summary>
    ///协助者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HelperId {
      get { return helperId_; }
      set {
        helperId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 6;
    private ulong roleId_;
    /// <summary>
    ///被协助者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HelpName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(HelpName);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (equip_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Equip);
      }
      if (UId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UId);
      }
      if (HelperId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HelperId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HelpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HelpName);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      if (UId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UId);
      }
      if (HelperId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HelperId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HelpName = input.ReadBytes();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 26: {
            if (equip_ == null) {
              equip_ = new global::Packet.Item();
            }
            input.ReadMessage(equip_);
            break;
          }
          case 32: {
            UId = input.ReadUInt32();
            break;
          }
          case 40: {
            HelperId = input.ReadUInt64();
            break;
          }
          case 48: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///被协助者信息更新
  /// </summary>
  public sealed class CmdGuildConsignSelfUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildConsignSelfUpdateNtf> _parser = new pb::MessageParser<CmdGuildConsignSelfUpdateNtf>(() => new CmdGuildConsignSelfUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildConsignSelfUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.GuildConsignSelfInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildConsignSelfInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.GuildConsignSelfInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSetConsignFirstOpenReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSetConsignFirstOpenReq> _parser = new pb::MessageParser<CmdGuildSetConsignFirstOpenReq>(() => new CmdGuildSetConsignFirstOpenReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSetConsignFirstOpenReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSendRedEnvelopeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSendRedEnvelopeReq> _parser = new pb::MessageParser<CmdGuildSendRedEnvelopeReq>(() => new CmdGuildSendRedEnvelopeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSendRedEnvelopeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopId" field.</summary>
    public const int EnvelopIdFieldNumber = 1;
    private uint envelopId_;
    /// <summary>
    ///系统红包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopId {
      get { return envelopId_; }
      set {
        envelopId_ = value;
      }
    }

    /// <summary>Field number for the "blessing" field.</summary>
    public const int BlessingFieldNumber = 2;
    private pb::ByteString blessing_ = pb::ByteString.Empty;
    /// <summary>
    ///祝福
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Blessing {
      get { return blessing_; }
      set {
        blessing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "talkId" field.</summary>
    public const int TalkIdFieldNumber = 3;
    private uint talkId_;
    /// <summary>
    /// 现在只是区分是否是语音 （1 语音 0 非语音）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalkId {
      get { return talkId_; }
      set {
        talkId_ = value;
      }
    }

    /// <summary>Field number for the "divideCount" field.</summary>
    public const int DivideCountFieldNumber = 4;
    private uint divideCount_;
    /// <summary>
    ///份数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DivideCount {
      get { return divideCount_; }
      set {
        divideCount_ = value;
      }
    }

    /// <summary>Field number for the "totalMoney" field.</summary>
    public const int TotalMoneyFieldNumber = 5;
    private uint totalMoney_;
    /// <summary>
    ///金币，自发的红包才有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopId);
      }
      if (Blessing.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Blessing);
      }
      if (TalkId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TalkId);
      }
      if (DivideCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DivideCount);
      }
      if (TotalMoney != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopId);
      }
      if (Blessing.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blessing);
      }
      if (TalkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalkId);
      }
      if (DivideCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DivideCount);
      }
      if (TotalMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopId = input.ReadUInt32();
            break;
          }
          case 18: {
            Blessing = input.ReadBytes();
            break;
          }
          case 24: {
            TalkId = input.ReadUInt32();
            break;
          }
          case 32: {
            DivideCount = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalMoney = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSendRedEnvelopeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSendRedEnvelopeAck> _parser = new pb::MessageParser<CmdGuildSendRedEnvelopeAck>(() => new CmdGuildSendRedEnvelopeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSendRedEnvelopeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.MyEnvelope info_;
    /// <summary>
    ///发的系统红包才有值，用于更新自己的红包状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MyEnvelope Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "weekSend" field.</summary>
    public const int WeekSendFieldNumber = 2;
    private uint weekSend_;
    /// <summary>
    /// 本周发送的钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekSend {
      get { return weekSend_; }
      set {
        weekSend_ = value;
      }
    }

    /// <summary>Field number for the "weekRefresh" field.</summary>
    public const int WeekRefreshFieldNumber = 3;
    private uint weekRefresh_;
    /// <summary>
    /// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekRefresh {
      get { return weekRefresh_; }
      set {
        weekRefresh_ = value;
      }
    }

    /// <summary>Field number for the "totalMoney" field.</summary>
    public const int TotalMoneyFieldNumber = 4;
    private uint totalMoney_;
    /// <summary>
    ///至今发送的总钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 5;
    private uint totalCount_;
    /// <summary>
    ///至今发送的总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (WeekSend != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WeekSend);
      }
      if (WeekRefresh != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WeekRefresh);
      }
      if (TotalMoney != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalMoney);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (WeekSend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekSend);
      }
      if (WeekRefresh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekRefresh);
      }
      if (TotalMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMoney);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.MyEnvelope();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            WeekSend = input.ReadUInt32();
            break;
          }
          case 24: {
            WeekRefresh = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalMoney = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildSendRedEnvelopeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildSendRedEnvelopeNtf> _parser = new pb::MessageParser<CmdGuildSendRedEnvelopeNtf>(() => new CmdGuildSendRedEnvelopeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildSendRedEnvelopeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopId" field.</summary>
    public const int EnvelopIdFieldNumber = 1;
    private uint envelopId_;
    /// <summary>
    ///红包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopId {
      get { return envelopId_; }
      set {
        envelopId_ = value;
      }
    }

    /// <summary>Field number for the "blessing" field.</summary>
    public const int BlessingFieldNumber = 2;
    private pb::ByteString blessing_ = pb::ByteString.Empty;
    /// <summary>
    ///祝福
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Blessing {
      get { return blessing_; }
      set {
        blessing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    /// <summary>
    ///uint64 talkId = 3; //语音才有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 5;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 6;
    private uint sendTime_;
    /// <summary>
    ///发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopId);
      }
      if (Blessing.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Blessing);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SenderName);
      }
      if (SendTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SendTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopId);
      }
      if (Blessing.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blessing);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (SendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopId = input.ReadUInt32();
            break;
          }
          case 18: {
            Blessing = input.ReadBytes();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 42: {
            SenderName = input.ReadBytes();
            break;
          }
          case 48: {
            SendTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetMyRedEnvelopeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetMyRedEnvelopeReq> _parser = new pb::MessageParser<CmdGuildGetMyRedEnvelopeReq>(() => new CmdGuildGetMyRedEnvelopeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetMyRedEnvelopeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildMyRedEnvelopeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildMyRedEnvelopeNtf> _parser = new pb::MessageParser<CmdGuildMyRedEnvelopeNtf>(() => new CmdGuildMyRedEnvelopeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildMyRedEnvelopeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "myenvelopes" field.</summary>
    public const int MyenvelopesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MyEnvelope> _repeated_myenvelopes_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MyEnvelope.Parser);
    private readonly pbc::RepeatedField<global::Packet.MyEnvelope> myenvelopes_ = new pbc::RepeatedField<global::Packet.MyEnvelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MyEnvelope> Myenvelopes {
      get { return myenvelopes_; }
    }

    /// <summary>Field number for the "totalSendMoney" field.</summary>
    public const int TotalSendMoneyFieldNumber = 2;
    private uint totalSendMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalSendMoney {
      get { return totalSendMoney_; }
      set {
        totalSendMoney_ = value;
      }
    }

    /// <summary>Field number for the "totalSendCount" field.</summary>
    public const int TotalSendCountFieldNumber = 3;
    private uint totalSendCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalSendCount {
      get { return totalSendCount_; }
      set {
        totalSendCount_ = value;
      }
    }

    /// <summary>Field number for the "weekMoney" field.</summary>
    public const int WeekMoneyFieldNumber = 4;
    private uint weekMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekMoney {
      get { return weekMoney_; }
      set {
        weekMoney_ = value;
      }
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 5;
    private uint lastRefresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefresh {
      get { return lastRefresh_; }
      set {
        lastRefresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      myenvelopes_.WriteTo(output, _repeated_myenvelopes_codec);
      if (TotalSendMoney != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalSendMoney);
      }
      if (TotalSendCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalSendCount);
      }
      if (WeekMoney != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WeekMoney);
      }
      if (LastRefresh != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastRefresh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += myenvelopes_.CalculateSize(_repeated_myenvelopes_codec);
      if (TotalSendMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalSendMoney);
      }
      if (TotalSendCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalSendCount);
      }
      if (WeekMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekMoney);
      }
      if (LastRefresh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefresh);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            myenvelopes_.AddEntriesFrom(input, _repeated_myenvelopes_codec);
            break;
          }
          case 16: {
            TotalSendMoney = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalSendCount = input.ReadUInt32();
            break;
          }
          case 32: {
            WeekMoney = input.ReadUInt32();
            break;
          }
          case 40: {
            LastRefresh = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildNewEnvelopeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildNewEnvelopeNtf> _parser = new pb::MessageParser<CmdGuildNewEnvelopeNtf>(() => new CmdGuildNewEnvelopeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildNewEnvelopeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "newEnvelopes" field.</summary>
    public const int NewEnvelopesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MyEnvelope> _repeated_newEnvelopes_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MyEnvelope.Parser);
    private readonly pbc::RepeatedField<global::Packet.MyEnvelope> newEnvelopes_ = new pbc::RepeatedField<global::Packet.MyEnvelope>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MyEnvelope> NewEnvelopes {
      get { return newEnvelopes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      newEnvelopes_.WriteTo(output, _repeated_newEnvelopes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += newEnvelopes_.CalculateSize(_repeated_newEnvelopes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            newEnvelopes_.AddEntriesFrom(input, _repeated_newEnvelopes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetRedEnvelopeInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetRedEnvelopeInfoReq> _parser = new pb::MessageParser<CmdGuildGetRedEnvelopeInfoReq>(() => new CmdGuildGetRedEnvelopeInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetRedEnvelopeInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RedEnvelopeLog : pb::IMessage {
    private static readonly pb::MessageParser<RedEnvelopeLog> _parser = new pb::MessageParser<RedEnvelopeLog>(() => new RedEnvelopeLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedEnvelopeLog> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopeId" field.</summary>
    public const int EnvelopeIdFieldNumber = 1;
    private uint envelopeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopeId {
      get { return envelopeId_; }
      set {
        envelopeId_ = value;
      }
    }

    /// <summary>Field number for the "logTime" field.</summary>
    public const int LogTimeFieldNumber = 2;
    private uint logTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogTime {
      get { return logTime_; }
      set {
        logTime_ = value;
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 4;
    private uint finishTime_;
    /// <summary>
    ///抢完才有字段 这个发的是finishtime 就是完成时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "totalMoney" field.</summary>
    public const int TotalMoneyFieldNumber = 5;
    private uint totalMoney_;
    /// <summary>
    ///抢完才有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "luckyBoy" field.</summary>
    public const int LuckyBoyFieldNumber = 6;
    private pb::ByteString luckyBoy_ = pb::ByteString.Empty;
    /// <summary>
    ///抢完才有 best luck person
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LuckyBoy {
      get { return luckyBoy_; }
      set {
        luckyBoy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checked" field.</summary>
    public const int CheckedFieldNumber = 7;
    private bool checked_;
    /// <summary>
    ///是否check过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Checked {
      get { return checked_; }
      set {
        checked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopeId);
      }
      if (LogTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LogTime);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SenderName);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FinishTime);
      }
      if (TotalMoney != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalMoney);
      }
      if (LuckyBoy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(LuckyBoy);
      }
      if (Checked != false) {
        output.WriteRawTag(56);
        output.WriteBool(Checked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
      }
      if (LogTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogTime);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      if (TotalMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMoney);
      }
      if (LuckyBoy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LuckyBoy);
      }
      if (Checked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopeId = input.ReadUInt32();
            break;
          }
          case 16: {
            LogTime = input.ReadUInt32();
            break;
          }
          case 26: {
            SenderName = input.ReadBytes();
            break;
          }
          case 32: {
            FinishTime = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalMoney = input.ReadUInt32();
            break;
          }
          case 50: {
            LuckyBoy = input.ReadBytes();
            break;
          }
          case 56: {
            Checked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetRedEnvelopeInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetRedEnvelopeInfoAck> _parser = new pb::MessageParser<CmdGuildGetRedEnvelopeInfoAck>(() => new CmdGuildGetRedEnvelopeInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetRedEnvelopeInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "redEnvelopes" field.</summary>
    public const int RedEnvelopesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildGetRedEnvelopeInfoAck.Types.RedEnvelopeInfo> _repeated_redEnvelopes_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdGuildGetRedEnvelopeInfoAck.Types.RedEnvelopeInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildGetRedEnvelopeInfoAck.Types.RedEnvelopeInfo> redEnvelopes_ = new pbc::RepeatedField<global::Packet.CmdGuildGetRedEnvelopeInfoAck.Types.RedEnvelopeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildGetRedEnvelopeInfoAck.Types.RedEnvelopeInfo> RedEnvelopes {
      get { return redEnvelopes_; }
    }

    /// <summary>Field number for the "envelopeLogs" field.</summary>
    public const int EnvelopeLogsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RedEnvelopeLog> _repeated_envelopeLogs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RedEnvelopeLog.Parser);
    private readonly pbc::RepeatedField<global::Packet.RedEnvelopeLog> envelopeLogs_ = new pbc::RepeatedField<global::Packet.RedEnvelopeLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RedEnvelopeLog> EnvelopeLogs {
      get { return envelopeLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      redEnvelopes_.WriteTo(output, _repeated_redEnvelopes_codec);
      envelopeLogs_.WriteTo(output, _repeated_envelopeLogs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += redEnvelopes_.CalculateSize(_repeated_redEnvelopes_codec);
      size += envelopeLogs_.CalculateSize(_repeated_envelopeLogs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            redEnvelopes_.AddEntriesFrom(input, _repeated_redEnvelopes_codec);
            break;
          }
          case 18: {
            envelopeLogs_.AddEntriesFrom(input, _repeated_envelopeLogs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGuildGetRedEnvelopeInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RedEnvelopeInfo : pb::IMessage {
        private static readonly pb::MessageParser<RedEnvelopeInfo> _parser = new pb::MessageParser<RedEnvelopeInfo>(() => new RedEnvelopeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RedEnvelopeInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "senderName" field.</summary>
        public const int SenderNameFieldNumber = 1;
        private pb::ByteString senderName_ = pb::ByteString.Empty;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString SenderName {
          get { return senderName_; }
          set {
            senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bOpen" field.</summary>
        public const int BOpenFieldNumber = 2;
        private bool bOpen_;
        /// <summary>
        /// 玩家是否打开过
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BOpen {
          get { return bOpen_; }
          set {
            bOpen_ = value;
          }
        }

        /// <summary>Field number for the "blessing" field.</summary>
        public const int BlessingFieldNumber = 3;
        private pb::ByteString blessing_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Blessing {
          get { return blessing_; }
          set {
            blessing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "envelopeId" field.</summary>
        public const int EnvelopeIdFieldNumber = 4;
        private uint envelopeId_;
        /// <summary>
        ///红包key
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EnvelopeId {
          get { return envelopeId_; }
          set {
            envelopeId_ = value;
          }
        }

        /// <summary>Field number for the "sendTime" field.</summary>
        public const int SendTimeFieldNumber = 5;
        private uint sendTime_;
        /// <summary>
        ///红包发送时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SendTime {
          get { return sendTime_; }
          set {
            sendTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SenderName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(SenderName);
          }
          if (BOpen != false) {
            output.WriteRawTag(16);
            output.WriteBool(BOpen);
          }
          if (Blessing.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Blessing);
          }
          if (EnvelopeId != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(EnvelopeId);
          }
          if (SendTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(SendTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SenderName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
          }
          if (BOpen != false) {
            size += 1 + 1;
          }
          if (Blessing.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blessing);
          }
          if (EnvelopeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
          }
          if (SendTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                SenderName = input.ReadBytes();
                break;
              }
              case 16: {
                BOpen = input.ReadBool();
                break;
              }
              case 26: {
                Blessing = input.ReadBytes();
                break;
              }
              case 32: {
                EnvelopeId = input.ReadUInt32();
                break;
              }
              case 40: {
                SendTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class EnvelopeDetail : pb::IMessage {
    private static readonly pb::MessageParser<EnvelopeDetail> _parser = new pb::MessageParser<EnvelopeDetail>(() => new EnvelopeDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnvelopeDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopeId" field.</summary>
    public const int EnvelopeIdFieldNumber = 1;
    private uint envelopeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopeId {
      get { return envelopeId_; }
      set {
        envelopeId_ = value;
      }
    }

    /// <summary>Field number for the "bOpened" field.</summary>
    public const int BOpenedFieldNumber = 2;
    private bool bOpened_;
    /// <summary>
    ///红包是否打开了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BOpened {
      get { return bOpened_; }
      set {
        bOpened_ = value;
      }
    }

    /// <summary>Field number for the "blessing" field.</summary>
    public const int BlessingFieldNumber = 3;
    private pb::ByteString blessing_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Blessing {
      get { return blessing_; }
      set {
        blessing_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "divideCount" field.</summary>
    public const int DivideCountFieldNumber = 6;
    private uint divideCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DivideCount {
      get { return divideCount_; }
      set {
        divideCount_ = value;
      }
    }

    /// <summary>Field number for the "voiceid" field.</summary>
    public const int VoiceidFieldNumber = 8;
    private uint voiceid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Voiceid {
      get { return voiceid_; }
      set {
        voiceid_ = value;
      }
    }

    /// <summary>Field number for the "snederName" field.</summary>
    public const int SnederNameFieldNumber = 9;
    private pb::ByteString snederName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SnederName {
      get { return snederName_; }
      set {
        snederName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headIcon" field.</summary>
    public const int HeadIconFieldNumber = 10;
    private uint headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 11;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "totalMoney" field.</summary>
    public const int TotalMoneyFieldNumber = 4;
    private uint totalMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "costTime" field.</summary>
    public const int CostTimeFieldNumber = 5;
    private uint costTime_;
    /// <summary>
    ///这个发的是finishtime 就是抢完的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostTime {
      get { return costTime_; }
      set {
        costTime_ = value;
      }
    }

    /// <summary>Field number for the "moneylist" field.</summary>
    public const int MoneylistFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.EnvelopeDetail.Types.MoneyName> _repeated_moneylist_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.EnvelopeDetail.Types.MoneyName.Parser);
    private readonly pbc::RepeatedField<global::Packet.EnvelopeDetail.Types.MoneyName> moneylist_ = new pbc::RepeatedField<global::Packet.EnvelopeDetail.Types.MoneyName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.EnvelopeDetail.Types.MoneyName> Moneylist {
      get { return moneylist_; }
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 12;
    private uint sendTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopeId);
      }
      if (BOpened != false) {
        output.WriteRawTag(16);
        output.WriteBool(BOpened);
      }
      if (Blessing.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Blessing);
      }
      if (TotalMoney != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalMoney);
      }
      if (CostTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CostTime);
      }
      if (DivideCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DivideCount);
      }
      moneylist_.WriteTo(output, _repeated_moneylist_codec);
      if (Voiceid != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Voiceid);
      }
      if (SnederName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(SnederName);
      }
      if (HeadIcon != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(HeadIcon);
      }
      if (HeroId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(HeroId);
      }
      if (SendTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SendTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
      }
      if (BOpened != false) {
        size += 1 + 1;
      }
      if (Blessing.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blessing);
      }
      if (DivideCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DivideCount);
      }
      if (Voiceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Voiceid);
      }
      if (SnederName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SnederName);
      }
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIcon);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (TotalMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalMoney);
      }
      if (CostTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostTime);
      }
      size += moneylist_.CalculateSize(_repeated_moneylist_codec);
      if (SendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopeId = input.ReadUInt32();
            break;
          }
          case 16: {
            BOpened = input.ReadBool();
            break;
          }
          case 26: {
            Blessing = input.ReadBytes();
            break;
          }
          case 32: {
            TotalMoney = input.ReadUInt32();
            break;
          }
          case 40: {
            CostTime = input.ReadUInt32();
            break;
          }
          case 48: {
            DivideCount = input.ReadUInt32();
            break;
          }
          case 58: {
            moneylist_.AddEntriesFrom(input, _repeated_moneylist_codec);
            break;
          }
          case 64: {
            Voiceid = input.ReadUInt32();
            break;
          }
          case 74: {
            SnederName = input.ReadBytes();
            break;
          }
          case 80: {
            HeadIcon = input.ReadUInt32();
            break;
          }
          case 88: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 96: {
            SendTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EnvelopeDetail message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MoneyName : pb::IMessage {
        private static readonly pb::MessageParser<MoneyName> _parser = new pb::MessageParser<MoneyName>(() => new MoneyName());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MoneyName> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "money" field.</summary>
        public const int MoneyFieldNumber = 2;
        private uint money_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Money {
          get { return money_; }
          set {
            money_ = value;
          }
        }

        /// <summary>Field number for the "headIcon" field.</summary>
        public const int HeadIconFieldNumber = 3;
        private uint headIcon_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeadIcon {
          get { return headIcon_; }
          set {
            headIcon_ = value;
          }
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 4;
        private uint heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroId {
          get { return heroId_; }
          set {
            heroId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          if (Money != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Money);
          }
          if (HeadIcon != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(HeadIcon);
          }
          if (HeroId != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(HeroId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (Money != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
          }
          if (HeadIcon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIcon);
          }
          if (HeroId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 16: {
                Money = input.ReadUInt32();
                break;
              }
              case 24: {
                HeadIcon = input.ReadUInt32();
                break;
              }
              case 32: {
                HeroId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildOpenEnvelopeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOpenEnvelopeReq> _parser = new pb::MessageParser<CmdGuildOpenEnvelopeReq>(() => new CmdGuildOpenEnvelopeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOpenEnvelopeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopeId" field.</summary>
    public const int EnvelopeIdFieldNumber = 1;
    private uint envelopeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopeId {
      get { return envelopeId_; }
      set {
        envelopeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildOpenEnvelopeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildOpenEnvelopeAck> _parser = new pb::MessageParser<CmdGuildOpenEnvelopeAck>(() => new CmdGuildOpenEnvelopeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildOpenEnvelopeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "gotMoney" field.</summary>
    public const int GotMoneyFieldNumber = 1;
    private uint gotMoney_;
    /// <summary>
    ///成功抢到当次才有值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GotMoney {
      get { return gotMoney_; }
      set {
        gotMoney_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private global::Packet.EnvelopeDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.EnvelopeDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    /// <summary>Field number for the "todayLimit" field.</summary>
    public const int TodayLimitFieldNumber = 3;
    private uint todayLimit_;
    /// <summary>
    ///限额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayLimit {
      get { return todayLimit_; }
      set {
        todayLimit_ = value;
      }
    }

    /// <summary>Field number for the "lastRefreshTime" field.</summary>
    public const int LastRefreshTimeFieldNumber = 4;
    private uint lastRefreshTime_;
    /// <summary>
    ///上次红包相关的刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefreshTime {
      get { return lastRefreshTime_; }
      set {
        lastRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "bSelfEnvelope" field.</summary>
    public const int BSelfEnvelopeFieldNumber = 5;
    private bool bSelfEnvelope_;
    /// <summary>
    ///是否是自己发送的红包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BSelfEnvelope {
      get { return bSelfEnvelope_; }
      set {
        bSelfEnvelope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GotMoney != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GotMoney);
      }
      if (detail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Detail);
      }
      if (TodayLimit != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TodayLimit);
      }
      if (LastRefreshTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastRefreshTime);
      }
      if (BSelfEnvelope != false) {
        output.WriteRawTag(40);
        output.WriteBool(BSelfEnvelope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GotMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GotMoney);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (TodayLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TodayLimit);
      }
      if (LastRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefreshTime);
      }
      if (BSelfEnvelope != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GotMoney = input.ReadUInt32();
            break;
          }
          case 18: {
            if (detail_ == null) {
              detail_ = new global::Packet.EnvelopeDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
          case 24: {
            TodayLimit = input.ReadUInt32();
            break;
          }
          case 32: {
            LastRefreshTime = input.ReadUInt32();
            break;
          }
          case 40: {
            BSelfEnvelope = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildQueryEnvelopeInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildQueryEnvelopeInfoReq> _parser = new pb::MessageParser<CmdGuildQueryEnvelopeInfoReq>(() => new CmdGuildQueryEnvelopeInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildQueryEnvelopeInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopeId" field.</summary>
    public const int EnvelopeIdFieldNumber = 1;
    private uint envelopeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopeId {
      get { return envelopeId_; }
      set {
        envelopeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildQueryEnvelopeInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildQueryEnvelopeInfoAck> _parser = new pb::MessageParser<CmdGuildQueryEnvelopeInfoAck>(() => new CmdGuildQueryEnvelopeInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildQueryEnvelopeInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 1;
    private global::Packet.EnvelopeDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.EnvelopeDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (detail_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Detail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (detail_ == null) {
              detail_ = new global::Packet.EnvelopeDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildTodayEnvelopeMoneyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildTodayEnvelopeMoneyNtf> _parser = new pb::MessageParser<CmdGuildTodayEnvelopeMoneyNtf>(() => new CmdGuildTodayEnvelopeMoneyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildTodayEnvelopeMoneyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "todayMoney" field.</summary>
    public const int TodayMoneyFieldNumber = 1;
    private uint todayMoney_;
    /// <summary>
    ///领取的钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayMoney {
      get { return todayMoney_; }
      set {
        todayMoney_ = value;
      }
    }

    /// <summary>Field number for the "lastRefresh" field.</summary>
    public const int LastRefreshFieldNumber = 2;
    private uint lastRefresh_;
    /// <summary>
    /// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefresh {
      get { return lastRefresh_; }
      set {
        lastRefresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TodayMoney != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TodayMoney);
      }
      if (LastRefresh != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRefresh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TodayMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TodayMoney);
      }
      if (LastRefresh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefresh);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TodayMoney = input.ReadUInt32();
            break;
          }
          case 16: {
            LastRefresh = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildEnvelopeLogNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildEnvelopeLogNtf> _parser = new pb::MessageParser<CmdGuildEnvelopeLogNtf>(() => new CmdGuildEnvelopeLogNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildEnvelopeLogNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.RedEnvelopeLog info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RedEnvelopeLog Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.RedEnvelopeLog();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildLifeSkillEquipNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildLifeSkillEquipNtf> _parser = new pb::MessageParser<CmdGuildLifeSkillEquipNtf>(() => new CmdGuildLifeSkillEquipNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildLifeSkillEquipNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 1;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 2;
    private global::Packet.Item equip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RoleName);
      }
      if (equip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equip);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleName = input.ReadBytes();
            break;
          }
          case 18: {
            if (equip_ == null) {
              equip_ = new global::Packet.Item();
            }
            input.ReadMessage(equip_);
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildEnterLimitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildEnterLimitNtf> _parser = new pb::MessageParser<CmdGuildEnterLimitNtf>(() => new CmdGuildEnterLimitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildEnterLimitNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private uint limit_;
    /// <summary>
    ///time stamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Limit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Limit = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildGetOnlineNumReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetOnlineNumReq> _parser = new pb::MessageParser<CmdGuildGetOnlineNumReq>(() => new CmdGuildGetOnlineNumReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetOnlineNumReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildGetOnlineNumRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildGetOnlineNumRes> _parser = new pb::MessageParser<CmdGuildGetOnlineNumRes>(() => new CmdGuildGetOnlineNumRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildGetOnlineNumRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "onlineNum" field.</summary>
    public const int OnlineNumFieldNumber = 1;
    private uint onlineNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineNum {
      get { return onlineNum_; }
      set {
        onlineNum_ = value;
      }
    }

    /// <summary>Field number for the "guildLv" field.</summary>
    public const int GuildLvFieldNumber = 2;
    private uint guildLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildLv {
      get { return guildLv_; }
      set {
        guildLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlineNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlineNum);
      }
      if (GuildLv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlineNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineNum);
      }
      if (GuildLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OnlineNum = input.ReadUInt32();
            break;
          }
          case 16: {
            GuildLv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SceneGuildBattleInfo : pb::IMessage {
    private static readonly pb::MessageParser<SceneGuildBattleInfo> _parser = new pb::MessageParser<SceneGuildBattleInfo>(() => new SceneGuildBattleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneGuildBattleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 1;
    private uint resetTime_;
    /// <summary>
    /// 重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "weeklyTimes" field.</summary>
    public const int WeeklyTimesFieldNumber = 2;
    private uint weeklyTimes_;
    /// <summary>
    /// 本周参与次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeeklyTimes {
      get { return weeklyTimes_; }
      set {
        weeklyTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResetTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResetTime);
      }
      if (WeeklyTimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WeeklyTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetTime);
      }
      if (WeeklyTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeeklyTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResetTime = input.ReadUInt32();
            break;
          }
          case 16: {
            WeeklyTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpdateGuildBattleInfoNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpdateGuildBattleInfoNty> _parser = new pb::MessageParser<CmdGuildUpdateGuildBattleInfoNty>(() => new CmdGuildUpdateGuildBattleInfoNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpdateGuildBattleInfoNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.SceneGuildBattleInfo info_;
    /// <summary>
    /// 族战数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SceneGuildBattleInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.SceneGuildBattleInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildUpdateGuildBattleScoreNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildUpdateGuildBattleScoreNty> _parser = new pb::MessageParser<CmdGuildUpdateGuildBattleScoreNty>(() => new CmdGuildUpdateGuildBattleScoreNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildUpdateGuildBattleScoreNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    /// <summary>
    /// 族战积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求接取家族建设任务
  /// </summary>
  public sealed class CmdGuildAcceptIndustryTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildAcceptIndustryTaskReq> _parser = new pb::MessageParser<CmdGuildAcceptIndustryTaskReq>(() => new CmdGuildAcceptIndustryTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildAcceptIndustryTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "industryType" field.</summary>
    public const int IndustryTypeFieldNumber = 1;
    private uint industryType_;
    /// <summary>
    /// 所属行业类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndustryType {
      get { return industryType_; }
      set {
        industryType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IndustryType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IndustryType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IndustryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndustryType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IndustryType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///家族建设任务一轮完成
  /// </summary>
  public sealed class CmdGuildIndustryTaskFinishNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildIndustryTaskFinishNtf> _parser = new pb::MessageParser<CmdGuildIndustryTaskFinishNtf>(() => new CmdGuildIndustryTaskFinishNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildIndustryTaskFinishNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 家族基础数据
  /// </summary>
  public sealed class GuildBaseData : pb::IMessage {
    private static readonly pb::MessageParser<GuildBaseData> _parser = new pb::MessageParser<GuildBaseData>(() => new GuildBaseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBaseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 家族数据
  /// </summary>
  public sealed class GuildData : pb::IMessage {
    private static readonly pb::MessageParser<GuildData> _parser = new pb::MessageParser<GuildData>(() => new GuildData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildData> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.GuildBaseData base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBaseData Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.GuildBaseData();
            }
            input.ReadMessage(base_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 家族成员族战数据
  /// </summary>
  public sealed class GuildMemberBattleData : pb::IMessage {
    private static readonly pb::MessageParser<GuildMemberBattleData> _parser = new pb::MessageParser<GuildMemberBattleData>(() => new GuildMemberBattleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMemberBattleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "attendtime" field.</summary>
    public const int AttendtimeFieldNumber = 1;
    private uint attendtime_;
    /// <summary>
    /// 准入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attendtime {
      get { return attendtime_; }
      set {
        attendtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attendtime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Attendtime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attendtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attendtime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Attendtime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 家族成员基础数据
  /// </summary>
  public sealed class GuildMemberBaseData : pb::IMessage {
    private static readonly pb::MessageParser<GuildMemberBaseData> _parser = new pb::MessageParser<GuildMemberBaseData>(() => new GuildMemberBaseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMemberBaseData> Parser { get { return _parser; } }

    /// <summary>Field number for the "jointime" field.</summary>
    public const int JointimeFieldNumber = 1;
    private uint jointime_;
    /// <summary>
    /// 加入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Jointime {
      get { return jointime_; }
      set {
        jointime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Jointime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Jointime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Jointime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Jointime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Jointime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 家族成员数据
  /// </summary>
  public sealed class GuildMemberData : pb::IMessage {
    private static readonly pb::MessageParser<GuildMemberData> _parser = new pb::MessageParser<GuildMemberData>(() => new GuildMemberData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildMemberData> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.GuildMemberBaseData base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildMemberBaseData Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 2;
    private global::Packet.GuildMemberBattleData battle_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildMemberBattleData Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (battle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Battle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (battle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.GuildMemberBaseData();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (battle_ == null) {
              battle_ = new global::Packet.GuildMemberBattleData();
            }
            input.ReadMessage(battle_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildDataNty> _parser = new pb::MessageParser<CmdGuildDataNty>(() => new CmdGuildDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "guild" field.</summary>
    public const int GuildFieldNumber = 1;
    private global::Packet.GuildData guild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildData Guild {
      get { return guild_; }
      set {
        guild_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private global::Packet.GuildMemberData member_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildMemberData Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guild_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guild);
      }
      if (member_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Member);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guild_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
      }
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guild_ == null) {
              guild_ = new global::Packet.GuildData();
            }
            input.ReadMessage(guild_);
            break;
          }
          case 18: {
            if (member_ == null) {
              member_ = new global::Packet.GuildMemberData();
            }
            input.ReadMessage(member_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
