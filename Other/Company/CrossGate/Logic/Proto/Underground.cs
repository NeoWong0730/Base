// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underground.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///8500+
  /// </summary>
  public enum CmdUnderGround {
    None = 0,
    Begin = 8500,
    /// <summary>
    /// 模块数据
    /// </summary>
    DataNty = 8501,
    /// <summary>
    /// 通知对手阵容
    /// </summary>
    FormationNty = 8502,
    /// <summary>
    /// 请求清除提示
    /// </summary>
    ClearHintReq = 8503,
    /// <summary>
    /// 请求发起投票
    /// </summary>
    StartVoteReq = 8504,
    /// <summary>
    /// 请求发起战斗
    /// </summary>
    StartFightReq = 8505,
    /// <summary>
    /// 通知关卡结果
    /// </summary>
    StageResultNty = 8506,
  }

  public enum ErrorUnderGround {
    None = 0,
    /// <summary>
    /// 找不到合适的副本
    /// </summary>
    NoSuitableInstance = 8501,
    /// <summary>
    /// 找不到合适的关卡
    /// </summary>
    NoSuitableStage = 8502,
    /// <summary>
    /// 处于不同的副本
    /// </summary>
    DifferentInstances = 8503,
    /// <summary>
    /// 已全员通关
    /// </summary>
    AllCleared = 8504,
  }

  public enum UnderGroundActiveReason {
    /// <summary>
    /// </summary>
    None = 0,
    /// <summary>
    /// 历史首通
    /// </summary>
    FirstPassReward = 8501,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 副本数据
  /// </summary>
  public sealed class UnderGroundInsEntry : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundInsEntry> _parser = new pb::MessageParser<UnderGroundInsEntry>(() => new UnderGroundInsEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundInsEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceid" field.</summary>
    public const int InstanceidFieldNumber = 1;
    private uint instanceid_;
    /// <summary>
    /// 副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Instanceid {
      get { return instanceid_; }
      set {
        instanceid_ = value;
      }
    }

    /// <summary>Field number for the "hintdisplayed" field.</summary>
    public const int HintdisplayedFieldNumber = 2;
    private bool hintdisplayed_;
    /// <summary>
    /// 已展示过提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hintdisplayed {
      get { return hintdisplayed_; }
      set {
        hintdisplayed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instanceid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Instanceid);
      }
      if (Hintdisplayed != false) {
        output.WriteRawTag(16);
        output.WriteBool(Hintdisplayed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instanceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Instanceid);
      }
      if (Hintdisplayed != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instanceid = input.ReadUInt32();
            break;
          }
          case 16: {
            Hintdisplayed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵容单元
  /// </summary>
  public sealed class UnderGroundFormationUnit : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundFormationUnit> _parser = new pb::MessageParser<UnderGroundFormationUnit>(() => new UnderGroundFormationUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundFormationUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "monsterid" field.</summary>
    public const int MonsteridFieldNumber = 1;
    private uint monsterid_;
    /// <summary>
    /// 怪物表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Monsterid {
      get { return monsterid_; }
      set {
        monsterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Monsterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Monsterid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Monsterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monsterid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Monsterid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 基础信息
  /// </summary>
  public sealed class UnderGroundBase : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundBase> _parser = new pb::MessageParser<UnderGroundBase>(() => new UnderGroundBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private uint round_;
    /// <summary>
    /// 场次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 关卡阵容
  /// </summary>
  public sealed class UnderGroundFormationStage : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundFormationStage> _parser = new pb::MessageParser<UnderGroundFormationStage>(() => new UnderGroundFormationStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundFormationStage> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageid" field.</summary>
    public const int StageidFieldNumber = 1;
    private uint stageid_;
    /// <summary>
    /// 副本关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stageid {
      get { return stageid_; }
      set {
        stageid_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private bool side_;
    /// <summary>
    /// 展示位置(false上方 true下方)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.UnderGroundFormationUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.UnderGroundFormationUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.UnderGroundFormationUnit> units_ = new pbc::RepeatedField<global::Packet.UnderGroundFormationUnit>();
    /// <summary>
    /// 阵容列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.UnderGroundFormationUnit> Units {
      get { return units_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stageid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stageid);
      }
      if (Side != false) {
        output.WriteRawTag(16);
        output.WriteBool(Side);
      }
      units_.WriteTo(output, _repeated_units_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stageid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stageid);
      }
      if (Side != false) {
        size += 1 + 1;
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stageid = input.ReadUInt32();
            break;
          }
          case 16: {
            Side = input.ReadBool();
            break;
          }
          case 26: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 阵容信息
  /// </summary>
  public sealed class UnderGroundFormation : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundFormation> _parser = new pb::MessageParser<UnderGroundFormation>(() => new UnderGroundFormation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundFormation> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceid" field.</summary>
    public const int InstanceidFieldNumber = 1;
    private uint instanceid_;
    /// <summary>
    /// 副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Instanceid {
      get { return instanceid_; }
      set {
        instanceid_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.UnderGroundFormationStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.UnderGroundFormationStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.UnderGroundFormationStage> stages_ = new pbc::RepeatedField<global::Packet.UnderGroundFormationStage>();
    /// <summary>
    /// 关卡列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.UnderGroundFormationStage> Stages {
      get { return stages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instanceid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Instanceid);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instanceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Instanceid);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instanceid = input.ReadUInt32();
            break;
          }
          case 18: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩法数据
  /// </summary>
  public sealed class UnderGroundInsData : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundInsData> _parser = new pb::MessageParser<UnderGroundInsData>(() => new UnderGroundInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundInsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "playtype" field.</summary>
    public const int PlaytypeFieldNumber = 1;
    private uint playtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Playtype {
      get { return playtype_; }
      set {
        playtype_ = value;
      }
    }

    /// <summary>Field number for the "instances" field.</summary>
    public const int InstancesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.UnderGroundInsEntry> _repeated_instances_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.UnderGroundInsEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.UnderGroundInsEntry> instances_ = new pbc::RepeatedField<global::Packet.UnderGroundInsEntry>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.UnderGroundInsEntry> Instances {
      get { return instances_; }
    }

    /// <summary>Field number for the "firstpassbeststagetime" field.</summary>
    public const int FirstpassbeststagetimeFieldNumber = 3;
    private uint firstpassbeststagetime_;
    /// <summary>
    /// 首次通关当前最高关卡的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Firstpassbeststagetime {
      get { return firstpassbeststagetime_; }
      set {
        firstpassbeststagetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playtype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Playtype);
      }
      instances_.WriteTo(output, _repeated_instances_codec);
      if (Firstpassbeststagetime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Firstpassbeststagetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Playtype);
      }
      size += instances_.CalculateSize(_repeated_instances_codec);
      if (Firstpassbeststagetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Firstpassbeststagetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Playtype = input.ReadUInt32();
            break;
          }
          case 18: {
            instances_.AddEntriesFrom(input, _repeated_instances_codec);
            break;
          }
          case 24: {
            Firstpassbeststagetime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 投票数据
  /// </summary>
  public sealed class UnderGroundInsVoteData : pb::IMessage {
    private static readonly pb::MessageParser<UnderGroundInsVoteData> _parser = new pb::MessageParser<UnderGroundInsVoteData>(() => new UnderGroundInsVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderGroundInsVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceid" field.</summary>
    public const int InstanceidFieldNumber = 1;
    private uint instanceid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Instanceid {
      get { return instanceid_; }
      set {
        instanceid_ = value;
      }
    }

    /// <summary>Field number for the "stageid" field.</summary>
    public const int StageidFieldNumber = 2;
    private uint stageid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stageid {
      get { return stageid_; }
      set {
        stageid_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.UnderGroundInsVoteData.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.UnderGroundInsVoteData.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Packet.UnderGroundInsVoteData.Types.Player> players_ = new pbc::RepeatedField<global::Packet.UnderGroundInsVoteData.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.UnderGroundInsVoteData.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instanceid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Instanceid);
      }
      if (Stageid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stageid);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instanceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Instanceid);
      }
      if (Stageid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stageid);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instanceid = input.ReadUInt32();
            break;
          }
          case 16: {
            Stageid = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnderGroundInsVoteData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Player : pb::IMessage {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleid" field.</summary>
        public const int RoleidFieldNumber = 1;
        private ulong roleid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Roleid {
          get { return roleid_; }
          set {
            roleid_ = value;
          }
        }

        /// <summary>Field number for the "stageid" field.</summary>
        public const int StageidFieldNumber = 2;
        private uint stageid_;
        /// <summary>
        /// 副本关卡id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Stageid {
          get { return stageid_; }
          set {
            stageid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Roleid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Roleid);
          }
          if (Stageid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Stageid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Roleid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
          }
          if (Stageid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stageid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Roleid = input.ReadUInt64();
                break;
              }
              case 16: {
                Stageid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdUnderGroundDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundDataNty> _parser = new pb::MessageParser<CmdUnderGroundDataNty>(() => new CmdUnderGroundDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.UnderGroundBase base_;
    /// <summary>
    /// 基础
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UnderGroundBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 2;
    private global::Packet.UnderGroundFormation formation_;
    /// <summary>
    /// 阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UnderGroundFormation Formation {
      get { return formation_; }
      set {
        formation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (formation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Formation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (formation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Formation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.UnderGroundBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (formation_ == null) {
              formation_ = new global::Packet.UnderGroundFormation();
            }
            input.ReadMessage(formation_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdUnderGroundFormationNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundFormationNty> _parser = new pb::MessageParser<CmdUnderGroundFormationNty>(() => new CmdUnderGroundFormationNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundFormationNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.UnderGroundBase base_;
    /// <summary>
    /// 基础
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UnderGroundBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 2;
    private global::Packet.UnderGroundFormation formation_;
    /// <summary>
    /// 阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UnderGroundFormation Formation {
      get { return formation_; }
      set {
        formation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (formation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Formation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (formation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Formation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.UnderGroundBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (formation_ == null) {
              formation_ = new global::Packet.UnderGroundFormation();
            }
            input.ReadMessage(formation_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdUnderGroundClearHintReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundClearHintReq> _parser = new pb::MessageParser<CmdUnderGroundClearHintReq>(() => new CmdUnderGroundClearHintReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundClearHintReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceid" field.</summary>
    public const int InstanceidFieldNumber = 1;
    private uint instanceid_;
    /// <summary>
    /// 副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Instanceid {
      get { return instanceid_; }
      set {
        instanceid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Instanceid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Instanceid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Instanceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Instanceid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Instanceid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdUnderGroundStartVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundStartVoteReq> _parser = new pb::MessageParser<CmdUnderGroundStartVoteReq>(() => new CmdUnderGroundStartVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundStartVoteReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdUnderGroundStartFightReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundStartFightReq> _parser = new pb::MessageParser<CmdUnderGroundStartFightReq>(() => new CmdUnderGroundStartFightReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundStartFightReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdUnderGroundStageResultNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdUnderGroundStageResultNty> _parser = new pb::MessageParser<CmdUnderGroundStageResultNty>(() => new CmdUnderGroundStageResultNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdUnderGroundStageResultNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageid" field.</summary>
    public const int StageidFieldNumber = 1;
    private uint stageid_;
    /// <summary>
    /// 关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stageid {
      get { return stageid_; }
      set {
        stageid_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 2;
    private bool win_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> _repeated_normal_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> normal_ = new pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem>();
    /// <summary>
    /// 通过奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> Normal {
      get { return normal_; }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> _repeated_first_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> first_ = new pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem>();
    /// <summary>
    /// 首通奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdUnderGroundStageResultNty.Types.RewardItem> First {
      get { return first_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stageid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stageid);
      }
      if (Win != false) {
        output.WriteRawTag(16);
        output.WriteBool(Win);
      }
      normal_.WriteTo(output, _repeated_normal_codec);
      first_.WriteTo(output, _repeated_first_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stageid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stageid);
      }
      if (Win != false) {
        size += 1 + 1;
      }
      size += normal_.CalculateSize(_repeated_normal_codec);
      size += first_.CalculateSize(_repeated_first_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stageid = input.ReadUInt32();
            break;
          }
          case 16: {
            Win = input.ReadBool();
            break;
          }
          case 26: {
            normal_.AddEntriesFrom(input, _repeated_normal_codec);
            break;
          }
          case 34: {
            first_.AddEntriesFrom(input, _repeated_first_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdUnderGroundStageResultNty message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RewardItem : pb::IMessage {
        private static readonly pb::MessageParser<RewardItem> _parser = new pb::MessageParser<RewardItem>(() => new RewardItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RewardItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemtid" field.</summary>
        public const int ItemtidFieldNumber = 1;
        private uint itemtid_;
        /// <summary>
        /// 道具tid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemtid {
          get { return itemtid_; }
          set {
            itemtid_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private uint num_;
        /// <summary>
        /// 数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemtid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemtid);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemtid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemtid);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemtid = input.ReadUInt32();
                break;
              }
              case 16: {
                Num = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
