// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 1600+
  /// </summary>
  public enum CmdGm {
    None = 0,
    Req = 1601,
    Res = 1602,
  }

  public enum ErrorGm {
    None = 0,
    /// <summary>
    /// 处理函数未找到
    /// </summary>
    HandlerNotFound = 1601,
    /// <summary>
    /// 密码验证失败
    /// </summary>
    KeyCheckFailed = 1602,
    /// <summary>
    /// 转义不对
    /// </summary>
    ParseFailedQuote = 1603,
    /// <summary>
    /// 双引号域不匹配
    /// </summary>
    ParseFailedScope = 1604,
    /// <summary>
    /// mParam里面key是空的
    /// </summary>
    ParseFailedEmptyKey = 1605,
    /// <summary>
    /// 一个字段里有多于一个的等号
    /// </summary>
    ParseFailedMoreThanOneKey = 1606,
    /// <summary>
    /// 解析Blob块失败
    /// </summary>
    ParseFailedParseBlobFailed = 1607,
    /// <summary>
    /// 添加gm指令失败
    /// </summary>
    AddCmdFailed = 1608,
  }

  public enum GmActiveReason {
    None = 0,
    Gm = 1601,
  }

  public enum GmTransType {
    None = 0,
    Server = 1,
    Role = 2,
    Channel = 3,
    ChannelId = 4,
  }

  public enum GmUserCtrlType {
    None = 0,
    /// <summary>
    /// 封号
    /// </summary>
    Ban = 1,
    /// <summary>
    /// 禁言
    /// </summary>
    Forbidden = 2,
    /// <summary>
    /// 踢下线
    /// </summary>
    Kick = 3,
    /// <summary>
    /// 解封
    /// </summary>
    UnBan = 4,
    /// <summary>
    /// 指定服务器全服踢下线
    /// </summary>
    AllKick = 5,
  }

  /// <summary>
  ///封禁类型 先把封禁功能类型也当做封禁类型来做 走老协议
  /// </summary>
  public enum BanType {
    None = 0,
    /// <summary>
    ///封号
    /// </summary>
    Role = 1,
    /// <summary>
    ///禁止聊天功能
    /// </summary>
    Chat = 2,
    /// <summary>
    ///禁止好友功能
    /// </summary>
    Friend = 3,
    /// <summary>
    ///禁止排行榜功能
    /// </summary>
    Rank = 4,
  }

  /// <summary>
  ///GM业受公会等级条件
  /// </summary>
  public enum GmBaGuildClassCom {
    GmGuildClassComNone = 0,
    /// <summary>
    /// 公会等级大于等于
    /// </summary>
    GmGuildClassComGe = 1,
    /// <summary>
    /// 公会等级大于
    /// </summary>
    GmGuildClassComG = 2,
    /// <summary>
    /// 公会等级等于
    /// </summary>
    GmGuildClassComE = 3,
    /// <summary>
    /// 公会等级小于等于
    /// </summary>
    GmGuildClassComLe = 4,
    /// <summary>
    /// 公会等级小于
    /// </summary>
    GmGuildClassComL = 5,
  }

  public enum GmGuildCtrlType {
    None = 0,
    /// <summary>
    /// 公会解散
    /// </summary>
    Dissolve = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// gm指令请求
  ///来自于外部http得gm请求经由paysvr处理选择对应的gamesvr进行分发， 
  /// </summary>
  public sealed class CmdGmReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGmReq> _parser = new pb::MessageParser<CmdGmReq>(() => new CmdGmReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGmReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    /// <summary>
    /// 角色id 设置了此字段要求玩家一定在内存中，如果不在，会返回错误。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private pb::ByteString cmd_ = pb::ByteString.Empty;
    /// <summary>
    /// 指令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 3;
    private pb::ByteString param_ = pb::ByteString.Empty;
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "varifyKey" field.</summary>
    public const int VarifyKeyFieldNumber = 4;
    private pb::ByteString varifyKey_ = pb::ByteString.Empty;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VarifyKey {
      get { return varifyKey_; }
      set {
        varifyKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pb_param" field.</summary>
    public const int PbParamFieldNumber = 6;
    private pb::ByteString pbParam_ = pb::ByteString.Empty;
    /// <summary>
    /// pb字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PbParam {
      get { return pbParam_; }
      set {
        pbParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cmd);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Param);
      }
      if (VarifyKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(VarifyKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Name);
      }
      if (PbParam.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(PbParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cmd);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Param);
      }
      if (VarifyKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarifyKey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (PbParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PbParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 18: {
            Cmd = input.ReadBytes();
            break;
          }
          case 26: {
            Param = input.ReadBytes();
            break;
          }
          case 34: {
            VarifyKey = input.ReadBytes();
            break;
          }
          case 42: {
            Name = input.ReadBytes();
            break;
          }
          case 50: {
            PbParam = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 回复gm指令
  /// </summary>
  public sealed class CmdGmRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGmRes> _parser = new pb::MessageParser<CmdGmRes>(() => new CmdGmRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGmRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// 返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private pb::ByteString result_ = pb::ByteString.Empty;
    /// <summary>
    /// 返回结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///1客户端界面解锁全部功能 其他的qa跟前端定义吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Result);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Result);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Result = input.ReadBytes();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm邮件信息
  /// </summary>
  public sealed class GmMailInfo : pb::IMessage {
    private static readonly pb::MessageParser<GmMailInfo> _parser = new pb::MessageParser<GmMailInfo>(() => new GmMailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmMailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "transaction_type" field.</summary>
    public const int TransactionTypeFieldNumber = 2;
    private global::Packet.GmTransType transactionType_ = 0;
    /// <summary>
    ///    bytes transaction_id = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GmTransType TransactionType {
      get { return transactionType_; }
      set {
        transactionType_ = value;
      }
    }

    /// <summary>Field number for the "roleids" field.</summary>
    public const int RoleidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_roleids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> roleids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///    repeated uint32 serverids = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Roleids {
      get { return roleids_; }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_channels_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> channels_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "channel_ids" field.</summary>
    public const int ChannelIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_channelIds_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> channelIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ChannelIds {
      get { return channelIds_; }
    }

    /// <summary>Field number for the "register_time" field.</summary>
    public const int RegisterTimeFieldNumber = 7;
    private uint registerTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegisterTime {
      get { return registerTime_; }
      set {
        registerTime_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "mail_title" field.</summary>
    public const int MailTitleFieldNumber = 10;
    private pb::ByteString mailTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MailTitle {
      get { return mailTitle_; }
      set {
        mailTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mail_content" field.</summary>
    public const int MailContentFieldNumber = 11;
    private pb::ByteString mailContent_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MailContent {
      get { return mailContent_; }
      set {
        mailContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mail_attach" field.</summary>
    public const int MailAttachFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Packet.MailAttach> _repeated_mailAttach_codec
        = pb::FieldCodec.ForMessage(98, global::Packet.MailAttach.Parser);
    private readonly pbc::RepeatedField<global::Packet.MailAttach> mailAttach_ = new pbc::RepeatedField<global::Packet.MailAttach>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MailAttach> MailAttach {
      get { return mailAttach_; }
    }

    /// <summary>Field number for the "levelOp" field.</summary>
    public const int LevelOpFieldNumber = 13;
    private pb::ByteString levelOp_ = pb::ByteString.Empty;
    /// <summary>
    ///等级操作符 = > &lt; >&amp;&amp;&lt;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LevelOp {
      get { return levelOp_; }
      set {
        levelOp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minLevel" field.</summary>
    public const int MinLevelFieldNumber = 14;
    private uint minLevel_;
    /// <summary>
    ///等级操作符的基本等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "maxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 15;
    private uint maxLevel_;
    /// <summary>
    ///等级操作符的基本等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "careerList" field.</summary>
    public const int CareerListFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_careerList_codec
        = pb::FieldCodec.ForUInt32(130);
    private readonly pbc::RepeatedField<uint> careerList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///职业列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CareerList {
      get { return careerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TransactionType);
      }
      roleids_.WriteTo(output, _repeated_roleids_codec);
      channels_.WriteTo(output, _repeated_channels_codec);
      channelIds_.WriteTo(output, _repeated_channelIds_codec);
      if (RegisterTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RegisterTime);
      }
      if (StartTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(EndTime);
      }
      if (MailTitle.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(MailTitle);
      }
      if (MailContent.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(MailContent);
      }
      mailAttach_.WriteTo(output, _repeated_mailAttach_codec);
      if (LevelOp.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(LevelOp);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MaxLevel);
      }
      careerList_.WriteTo(output, _repeated_careerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransactionType);
      }
      size += roleids_.CalculateSize(_repeated_roleids_codec);
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += channelIds_.CalculateSize(_repeated_channelIds_codec);
      if (RegisterTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegisterTime);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (MailTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MailTitle);
      }
      if (MailContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MailContent);
      }
      size += mailAttach_.CalculateSize(_repeated_mailAttach_codec);
      if (LevelOp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LevelOp);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      size += careerList_.CalculateSize(_repeated_careerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            transactionType_ = (global::Packet.GmTransType) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            roleids_.AddEntriesFrom(input, _repeated_roleids_codec);
            break;
          }
          case 42: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 50: {
            channelIds_.AddEntriesFrom(input, _repeated_channelIds_codec);
            break;
          }
          case 56: {
            RegisterTime = input.ReadUInt32();
            break;
          }
          case 64: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 72: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 82: {
            MailTitle = input.ReadBytes();
            break;
          }
          case 90: {
            MailContent = input.ReadBytes();
            break;
          }
          case 98: {
            mailAttach_.AddEntriesFrom(input, _repeated_mailAttach_codec);
            break;
          }
          case 106: {
            LevelOp = input.ReadBytes();
            break;
          }
          case 112: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 120: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 130:
          case 128: {
            careerList_.AddEntriesFrom(input, _repeated_careerList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 玩家控制
  /// </summary>
  public sealed class GmUserCtrlInfo : pb::IMessage {
    private static readonly pb::MessageParser<GmUserCtrlInfo> _parser = new pb::MessageParser<GmUserCtrlInfo>(() => new GmUserCtrlInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmUserCtrlInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "ctrl_type" field.</summary>
    public const int CtrlTypeFieldNumber = 1;
    private global::Packet.GmUserCtrlType ctrlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GmUserCtrlType CtrlType {
      get { return ctrlType_; }
      set {
        ctrlType_ = value;
      }
    }

    /// <summary>Field number for the "roleids" field.</summary>
    public const int RoleidsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_roleids_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> roleids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///    uint32 serverid = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Roleids {
      get { return roleids_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "exit_app" field.</summary>
    public const int ExitAppFieldNumber = 6;
    private uint exitApp_;
    /// <summary>
    ///0 表示不退出app 1表示退出app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExitApp {
      get { return exitApp_; }
      set {
        exitApp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CtrlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CtrlType);
      }
      roleids_.WriteTo(output, _repeated_roleids_codec);
      if (StartTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EndTime);
      }
      if (ExitApp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExitApp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CtrlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CtrlType);
      }
      size += roleids_.CalculateSize(_repeated_roleids_codec);
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (ExitApp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExitApp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ctrlType_ = (global::Packet.GmUserCtrlType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            roleids_.AddEntriesFrom(input, _repeated_roleids_codec);
            break;
          }
          case 32: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 40: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 48: {
            ExitApp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 玩家控制返回
  /// </summary>
  public sealed class GmUserCtrlInfoEnd : pb::IMessage {
    private static readonly pb::MessageParser<GmUserCtrlInfoEnd> _parser = new pb::MessageParser<GmUserCtrlInfoEnd>(() => new GmUserCtrlInfoEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmUserCtrlInfoEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "sucRoleList" field.</summary>
    public const int SucRoleListFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_sucRoleList_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> sucRoleList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///操作成功的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SucRoleList {
      get { return sucRoleList_; }
    }

    /// <summary>Field number for the "failRoleList" field.</summary>
    public const int FailRoleListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_failRoleList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> failRoleList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///操作失败的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FailRoleList {
      get { return failRoleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sucRoleList_.WriteTo(output, _repeated_sucRoleList_codec);
      failRoleList_.WriteTo(output, _repeated_failRoleList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sucRoleList_.CalculateSize(_repeated_sucRoleList_codec);
      size += failRoleList_.CalculateSize(_repeated_failRoleList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            sucRoleList_.AddEntriesFrom(input, _repeated_sucRoleList_codec);
            break;
          }
          case 18:
          case 16: {
            failRoleList_.AddEntriesFrom(input, _repeated_failRoleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GM业受公会信息
  /// </summary>
  public sealed class GmBaGuild : pb::IMessage {
    private static readonly pb::MessageParser<GmBaGuild> _parser = new pb::MessageParser<GmBaGuild>(() => new GmBaGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    ///公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///公会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildClass" field.</summary>
    public const int GuildClassFieldNumber = 3;
    private uint guildClass_;
    /// <summary>
    ///公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildClass {
      get { return guildClass_; }
      set {
        guildClass_ = value;
      }
    }

    /// <summary>Field number for the "guildTotalNum" field.</summary>
    public const int GuildTotalNumFieldNumber = 4;
    private uint guildTotalNum_;
    /// <summary>
    ///公会总人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildTotalNum {
      get { return guildTotalNum_; }
      set {
        guildTotalNum_ = value;
      }
    }

    /// <summary>Field number for the "guildLeaderClass" field.</summary>
    public const int GuildLeaderClassFieldNumber = 5;
    private uint guildLeaderClass_;
    /// <summary>
    ///公会会长等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildLeaderClass {
      get { return guildLeaderClass_; }
      set {
        guildLeaderClass_ = value;
      }
    }

    /// <summary>Field number for the "guildLeaderName" field.</summary>
    public const int GuildLeaderNameFieldNumber = 6;
    private pb::ByteString guildLeaderName_ = pb::ByteString.Empty;
    /// <summary>
    ///公会会长昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildLeaderName {
      get { return guildLeaderName_; }
      set {
        guildLeaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildCreateTime" field.</summary>
    public const int GuildCreateTimeFieldNumber = 7;
    private uint guildCreateTime_;
    /// <summary>
    ///公会创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildCreateTime {
      get { return guildCreateTime_; }
      set {
        guildCreateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GuildName);
      }
      if (GuildClass != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildClass);
      }
      if (GuildTotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildTotalNum);
      }
      if (GuildLeaderClass != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildLeaderClass);
      }
      if (GuildLeaderName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(GuildLeaderName);
      }
      if (GuildCreateTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildCreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildClass);
      }
      if (GuildTotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildTotalNum);
      }
      if (GuildLeaderClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildLeaderClass);
      }
      if (GuildLeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildLeaderName);
      }
      if (GuildCreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadBytes();
            break;
          }
          case 24: {
            GuildClass = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildTotalNum = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildLeaderClass = input.ReadUInt32();
            break;
          }
          case 50: {
            GuildLeaderName = input.ReadBytes();
            break;
          }
          case 56: {
            GuildCreateTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 业受公会列表相关
  /// </summary>
  public sealed class GmBaGuildListReq : pb::IMessage {
    private static readonly pb::MessageParser<GmBaGuildListReq> _parser = new pb::MessageParser<GmBaGuildListReq>(() => new GmBaGuildListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaGuildListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///公会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildClass" field.</summary>
    public const int GuildClassFieldNumber = 2;
    private uint guildClass_;
    /// <summary>
    ///公会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildClass {
      get { return guildClass_; }
      set {
        guildClass_ = value;
      }
    }

    /// <summary>Field number for the "com_type" field.</summary>
    public const int ComTypeFieldNumber = 3;
    private global::Packet.GmBaGuildClassCom comType_ = 0;
    /// <summary>
    ///公会等级条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GmBaGuildClassCom ComType {
      get { return comType_; }
      set {
        comType_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 4;
    private uint startTime_;
    /// <summary>
    ///筛选开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 5;
    private uint endTime_;
    /// <summary>
    ///筛选结束时间 为0表示当前时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "pageNumber" field.</summary>
    public const int PageNumberFieldNumber = 6;
    private uint pageNumber_;
    /// <summary>
    ///页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNumber {
      get { return pageNumber_; }
      set {
        pageNumber_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 7;
    private uint pageSize_;
    /// <summary>
    ///分页大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 8;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GuildName);
      }
      if (GuildClass != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GuildClass);
      }
      if (ComType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ComType);
      }
      if (StartTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EndTime);
      }
      if (PageNumber != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PageNumber);
      }
      if (PageSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PageSize);
      }
      if (ServerId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ServerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildClass);
      }
      if (ComType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ComType);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (PageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNumber);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GuildName = input.ReadBytes();
            break;
          }
          case 16: {
            GuildClass = input.ReadUInt32();
            break;
          }
          case 24: {
            comType_ = (global::Packet.GmBaGuildClassCom) input.ReadEnum();
            break;
          }
          case 32: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 40: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 48: {
            PageNumber = input.ReadUInt32();
            break;
          }
          case 56: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 64: {
            ServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 业受公会列表相关返回
  /// </summary>
  public sealed class GmBaGuildListRes : pb::IMessage {
    private static readonly pb::MessageParser<GmBaGuildListRes> _parser = new pb::MessageParser<GmBaGuildListRes>(() => new GmBaGuildListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaGuildListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///符合条件的总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "guildList" field.</summary>
    public const int GuildListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GmBaGuild> _repeated_guildList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GmBaGuild.Parser);
    private readonly pbc::RepeatedField<global::Packet.GmBaGuild> guildList_ = new pbc::RepeatedField<global::Packet.GmBaGuild>();
    /// <summary>
    ///公会列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GmBaGuild> GuildList {
      get { return guildList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guildList_.WriteTo(output, _repeated_guildList_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += guildList_.CalculateSize(_repeated_guildList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guildList_.AddEntriesFrom(input, _repeated_guildList_codec);
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 业受公会公告列表请求
  /// </summary>
  public sealed class GmBaGuildNoticeListReq : pb::IMessage {
    private static readonly pb::MessageParser<GmBaGuildNoticeListReq> _parser = new pb::MessageParser<GmBaGuildNoticeListReq>(() => new GmBaGuildNoticeListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaGuildNoticeListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private ulong guildId_;
    /// <summary>
    ///公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 业受公会公告列表请求返回
  /// </summary>
  public sealed class GmBaGuildNoticeListRes : pb::IMessage {
    private static readonly pb::MessageParser<GmBaGuildNoticeListRes> _parser = new pb::MessageParser<GmBaGuildNoticeListRes>(() => new GmBaGuildNoticeListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaGuildNoticeListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 2;
    private pb::ByteString creator_ = pb::ByteString.Empty;
    /// <summary>
    ///公会创建者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Creator {
      get { return creator_; }
      set {
        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private uint createTime_;
    /// <summary>
    ///创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
      if (Creator.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Creator);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CreateTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (Creator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Creator);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
          case 18: {
            Creator = input.ReadBytes();
            break;
          }
          case 24: {
            CreateTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 业受修改公会公告请求
  /// </summary>
  public sealed class GmBaModifyGuildNoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<GmBaModifyGuildNoticeReq> _parser = new pb::MessageParser<GmBaModifyGuildNoticeReq>(() => new GmBaModifyGuildNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmBaModifyGuildNoticeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private ulong guildId_;
    /// <summary>
    ///公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "opRole" field.</summary>
    public const int OpRoleFieldNumber = 4;
    private pb::ByteString opRole_ = pb::ByteString.Empty;
    /// <summary>
    ///操作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpRole {
      get { return opRole_; }
      set {
        opRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    ///公会公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GuildId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (OpRole.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OpRole);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (OpRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpRole);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 34: {
            OpRole = input.ReadBytes();
            break;
          }
          case 42: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 业受公会处理
  /// </summary>
  public sealed class GmGuildCtrlReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGuildCtrlReq> _parser = new pb::MessageParser<GmGuildCtrlReq>(() => new GmGuildCtrlReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGuildCtrlReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ctrlType" field.</summary>
    public const int CtrlTypeFieldNumber = 1;
    private global::Packet.GmGuildCtrlType ctrlType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GmGuildCtrlType CtrlType {
      get { return ctrlType_; }
      set {
        ctrlType_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private pb::ByteString title_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opRole" field.</summary>
    public const int OpRoleFieldNumber = 6;
    private pb::ByteString opRole_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OpRole {
      get { return opRole_; }
      set {
        opRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mailContent" field.</summary>
    public const int MailContentFieldNumber = 7;
    private pb::ByteString mailContent_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MailContent {
      get { return mailContent_; }
      set {
        mailContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildNames" field.</summary>
    public const int GuildNamesFieldNumber = 8;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_guildNames_codec
        = pb::FieldCodec.ForBytes(66);
    private readonly pbc::RepeatedField<pb::ByteString> guildNames_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> GuildNames {
      get { return guildNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CtrlType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CtrlType);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Reason);
      }
      if (OpRole.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(OpRole);
      }
      if (MailContent.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(MailContent);
      }
      guildNames_.WriteTo(output, _repeated_guildNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CtrlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CtrlType);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      if (OpRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpRole);
      }
      if (MailContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MailContent);
      }
      size += guildNames_.CalculateSize(_repeated_guildNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ctrlType_ = (global::Packet.GmGuildCtrlType) input.ReadEnum();
            break;
          }
          case 16: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 34: {
            Title = input.ReadBytes();
            break;
          }
          case 42: {
            Reason = input.ReadBytes();
            break;
          }
          case 50: {
            OpRole = input.ReadBytes();
            break;
          }
          case 58: {
            MailContent = input.ReadBytes();
            break;
          }
          case 66: {
            guildNames_.AddEntriesFrom(input, _repeated_guildNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 获取玩家公会信息接口
  /// </summary>
  public sealed class GmGMTGetRoleBaseInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTGetRoleBaseInfoReq> _parser = new pb::MessageParser<GmGMTGetRoleBaseInfoReq>(() => new GmGMTGetRoleBaseInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTGetRoleBaseInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleIds" field.</summary>
    public const int RoleIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleIds_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleIds {
      get { return roleIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 获取玩家公会信息接口返回
  /// </summary>
  public sealed class GmGMTGetRoleBaseInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTGetRoleBaseInfoRes> _parser = new pb::MessageParser<GmGMTGetRoleBaseInfoRes>(() => new GmGMTGetRoleBaseInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTGetRoleBaseInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseInfoList" field.</summary>
    public const int BaseInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GmGMTGetRoleBaseInfoRes.Types.RoleBaseInfo> _repeated_baseInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GmGMTGetRoleBaseInfoRes.Types.RoleBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GmGMTGetRoleBaseInfoRes.Types.RoleBaseInfo> baseInfoList_ = new pbc::RepeatedField<global::Packet.GmGMTGetRoleBaseInfoRes.Types.RoleBaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GmGMTGetRoleBaseInfoRes.Types.RoleBaseInfo> BaseInfoList {
      get { return baseInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseInfoList_.WriteTo(output, _repeated_baseInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseInfoList_.CalculateSize(_repeated_baseInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baseInfoList_.AddEntriesFrom(input, _repeated_baseInfoList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GmGMTGetRoleBaseInfoRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RoleBaseInfo : pb::IMessage {
        private static readonly pb::MessageParser<RoleBaseInfo> _parser = new pb::MessageParser<RoleBaseInfo>(() => new RoleBaseInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleBaseInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        /// <summary>
        ///角色Id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "guildName" field.</summary>
        public const int GuildNameFieldNumber = 2;
        private pb::ByteString guildName_ = pb::ByteString.Empty;
        /// <summary>
        ///家族名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString GuildName {
          get { return guildName_; }
          set {
            guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "totalContribution" field.</summary>
        public const int TotalContributionFieldNumber = 3;
        private uint totalContribution_;
        /// <summary>
        ///个人贡献
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalContribution {
          get { return totalContribution_; }
          set {
            totalContribution_ = value;
          }
        }

        /// <summary>Field number for the "guildCoin" field.</summary>
        public const int GuildCoinFieldNumber = 4;
        private uint guildCoin_;
        /// <summary>
        ///家族资金
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildCoin {
          get { return guildCoin_; }
          set {
            guildCoin_ = value;
          }
        }

        /// <summary>Field number for the "device" field.</summary>
        public const int DeviceFieldNumber = 5;
        private pb::ByteString device_ = pb::ByteString.Empty;
        /// <summary>
        ///设备id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Device {
          get { return device_; }
          set {
            device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (GuildName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(GuildName);
          }
          if (TotalContribution != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TotalContribution);
          }
          if (GuildCoin != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(GuildCoin);
          }
          if (Device.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Device);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (GuildName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
          }
          if (TotalContribution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalContribution);
          }
          if (GuildCoin != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCoin);
          }
          if (Device.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Device);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                GuildName = input.ReadBytes();
                break;
              }
              case 24: {
                TotalContribution = input.ReadUInt32();
                break;
              }
              case 32: {
                GuildCoin = input.ReadUInt32();
                break;
              }
              case 42: {
                Device = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///pb gm 发送跑马灯
  /// </summary>
  public sealed class GmGMTSendMarqueeReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTSendMarqueeReq> _parser = new pb::MessageParser<GmGMTSendMarqueeReq>(() => new GmGMTSendMarqueeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTSendMarqueeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "marqueeId" field.</summary>
    public const int MarqueeIdFieldNumber = 2;
    private pb::ByteString marqueeId_ = pb::ByteString.Empty;
    /// <summary>
    ///跑马灯id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MarqueeId {
      get { return marqueeId_; }
      set {
        marqueeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private pb::ByteString content_ = pb::ByteString.Empty;
    /// <summary>
    ///跑马灯内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    /// <summary>
    ///跑马灯播放次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 5;
    private uint interval_;
    /// <summary>
    ///跑马灯播放间隔时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private uint startTime_;
    /// <summary>
    ///跑马灯生效开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (MarqueeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MarqueeId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Content);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (Interval != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Interval);
      }
      if (StartTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (MarqueeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MarqueeId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            MarqueeId = input.ReadBytes();
            break;
          }
          case 26: {
            Content = input.ReadBytes();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            Interval = input.ReadUInt32();
            break;
          }
          case 48: {
            StartTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 发送跑马灯
  /// </summary>
  public sealed class GmGMTSendMarqueeRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTSendMarqueeRes> _parser = new pb::MessageParser<GmGMTSendMarqueeRes>(() => new GmGMTSendMarqueeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTSendMarqueeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///pb gm 删除跑马灯
  /// </summary>
  public sealed class GmGMTDelMarqueeReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTDelMarqueeReq> _parser = new pb::MessageParser<GmGMTDelMarqueeReq>(() => new GmGMTDelMarqueeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTDelMarqueeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "marqueeId" field.</summary>
    public const int MarqueeIdFieldNumber = 2;
    private pb::ByteString marqueeId_ = pb::ByteString.Empty;
    /// <summary>
    ///跑马灯id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MarqueeId {
      get { return marqueeId_; }
      set {
        marqueeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (MarqueeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MarqueeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (MarqueeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MarqueeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            MarqueeId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 删除跑马灯
  /// </summary>
  public sealed class GmGMTDelMarqueeRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTDelMarqueeRes> _parser = new pb::MessageParser<GmGMTDelMarqueeRes>(() => new GmGMTDelMarqueeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTDelMarqueeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///pb gm 维护白名单修改
  /// </summary>
  public sealed class GmGMTModLineupWhiteListReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTModLineupWhiteListReq> _parser = new pb::MessageParser<GmGMTModLineupWhiteListReq>(() => new GmGMTModLineupWhiteListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTModLineupWhiteListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 1 增加 2 删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 3;
    private uint zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "allowId" field.</summary>
    public const int AllowIdFieldNumber = 4;
    private uint allowId_;
    /// <summary>
    ///白名单id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllowId {
      get { return allowId_; }
      set {
        allowId_ = value;
      }
    }

    /// <summary>Field number for the "ipLower" field.</summary>
    public const int IpLowerFieldNumber = 5;
    private pb::ByteString ipLower_ = pb::ByteString.Empty;
    /// <summary>
    ///ip最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpLower {
      get { return ipLower_; }
      set {
        ipLower_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipUpper" field.</summary>
    public const int IpUpperFieldNumber = 6;
    private pb::ByteString ipUpper_ = pb::ByteString.Empty;
    /// <summary>
    ///ip最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpUpper {
      get { return ipUpper_; }
      set {
        ipUpper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 7;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_deviceId_codec
        = pb::FieldCodec.ForBytes(58);
    private readonly pbc::RepeatedField<pb::ByteString> deviceId_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///设备列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> DeviceId {
      get { return deviceId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerId);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ZoneId);
      }
      if (AllowId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AllowId);
      }
      if (IpLower.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IpLower);
      }
      if (IpUpper.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(IpUpper);
      }
      deviceId_.WriteTo(output, _repeated_deviceId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      if (AllowId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllowId);
      }
      if (IpLower.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpLower);
      }
      if (IpUpper.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpUpper);
      }
      size += deviceId_.CalculateSize(_repeated_deviceId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 24: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 32: {
            AllowId = input.ReadUInt32();
            break;
          }
          case 42: {
            IpLower = input.ReadBytes();
            break;
          }
          case 50: {
            IpUpper = input.ReadBytes();
            break;
          }
          case 58: {
            deviceId_.AddEntriesFrom(input, _repeated_deviceId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///--------------------旧版GMT接口---------------------
  ///pb gm 客服获取玩家信息接口
  /// </summary>
  public sealed class GmGMTGetRoleInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTGetRoleInfoReq> _parser = new pb::MessageParser<GmGMTGetRoleInfoReq>(() => new GmGMTGetRoleInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTGetRoleInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// pb gm 客服获取玩家信息接口返回
  /// </summary>
  public sealed class GmGMTGetRoleInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTGetRoleInfoRes> _parser = new pb::MessageParser<GmGMTGetRoleInfoRes>(() => new GmGMTGetRoleInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTGetRoleInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    /// <summary>
    ///角色账号名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 4;
    private uint totalScore_;
    /// <summary>
    ///角色战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "recentLoginTime" field.</summary>
    public const int RecentLoginTimeFieldNumber = 5;
    private uint recentLoginTime_;
    /// <summary>
    ///最近登录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecentLoginTime {
      get { return recentLoginTime_; }
      set {
        recentLoginTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalScore);
      }
      if (RecentLoginTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RecentLoginTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
      }
      if (RecentLoginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecentLoginTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalScore = input.ReadUInt32();
            break;
          }
          case 40: {
            RecentLoginTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 老版 玩家数据修正
  /// </summary>
  public sealed class GmGMTUserDataFixReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTUserDataFixReq> _parser = new pb::MessageParser<GmGMTUserDataFixReq>(() => new GmGMTUserDataFixReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTUserDataFixReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "itemOpList" field.</summary>
    public const int ItemOpListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GmGMTUserDataFixReq.Types.ItemOp> _repeated_itemOpList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GmGMTUserDataFixReq.Types.ItemOp.Parser);
    private readonly pbc::RepeatedField<global::Packet.GmGMTUserDataFixReq.Types.ItemOp> itemOpList_ = new pbc::RepeatedField<global::Packet.GmGMTUserDataFixReq.Types.ItemOp>();
    /// <summary>
    ///道具操作列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GmGMTUserDataFixReq.Types.ItemOp> ItemOpList {
      get { return itemOpList_; }
    }

    /// <summary>Field number for the "reasonType" field.</summary>
    public const int ReasonTypeFieldNumber = 3;
    private uint reasonType_;
    /// <summary>
    /// (0:退款)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReasonType {
      get { return reasonType_; }
      set {
        reasonType_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 4;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    /// <summary>
    /// 额外信息 (0:退款对应订单号)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      itemOpList_.WriteTo(output, _repeated_itemOpList_codec);
      if (ReasonType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ReasonType);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      size += itemOpList_.CalculateSize(_repeated_itemOpList_codec);
      if (ReasonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReasonType);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            itemOpList_.AddEntriesFrom(input, _repeated_itemOpList_codec);
            break;
          }
          case 24: {
            ReasonType = input.ReadUInt32();
            break;
          }
          case 34: {
            ExtraData = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GmGMTUserDataFixReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemOp : pb::IMessage {
        private static readonly pb::MessageParser<ItemOp> _parser = new pb::MessageParser<ItemOp>(() => new ItemOp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemOp> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        /// <summary>
        ///infoid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "itemNum" field.</summary>
        public const int ItemNumFieldNumber = 2;
        private uint itemNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemNum {
          get { return itemNum_; }
          set {
            itemNum_ = value;
          }
        }

        /// <summary>Field number for the "itemOp" field.</summary>
        public const int ItemOp_FieldNumber = 3;
        private int itemOp_;
        /// <summary>
        /// 1 减少  0 增加
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemOp_ {
          get { return itemOp_; }
          set {
            itemOp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (ItemNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemNum);
          }
          if (ItemOp_ != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ItemOp_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
          }
          if (ItemOp_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemOp_);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemNum = input.ReadUInt32();
                break;
              }
              case 24: {
                ItemOp_ = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///pb gm 玩家数据修正
  /// </summary>
  public sealed class GmGMTUserDataFixRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTUserDataFixRes> _parser = new pb::MessageParser<GmGMTUserDataFixRes>(() => new GmGMTUserDataFixRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTUserDataFixRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///--------------------新版GMT接口---------------------
  /// </summary>
  public sealed class RoleBan : pb::IMessage {
    private static readonly pb::MessageParser<RoleBan> _parser = new pb::MessageParser<RoleBan>(() => new RoleBan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBan> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 查询玩家信息接口
  /// </summary>
  public sealed class GMTGameRoleInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleInfoReq> _parser = new pb::MessageParser<GMTGameRoleInfoReq>(() => new GMTGameRoleInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 查询玩家信息接口返回
  /// </summary>
  public sealed class GMTGameRoleInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleInfoRes> _parser = new pb::MessageParser<GMTGameRoleInfoRes>(() => new GMTGameRoleInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleInfoList" field.</summary>
    public const int RoleInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GMTGameRoleInfoRes.Types.RoleInfo> _repeated_roleInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GMTGameRoleInfoRes.Types.RoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GMTGameRoleInfoRes.Types.RoleInfo> roleInfoList_ = new pbc::RepeatedField<global::Packet.GMTGameRoleInfoRes.Types.RoleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GMTGameRoleInfoRes.Types.RoleInfo> RoleInfoList {
      get { return roleInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleInfoList_.WriteTo(output, _repeated_roleInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleInfoList_.CalculateSize(_repeated_roleInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleInfoList_.AddEntriesFrom(input, _repeated_roleInfoList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GMTGameRoleInfoRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RoleInfo : pb::IMessage {
        private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "account" field.</summary>
        public const int AccountFieldNumber = 1;
        private pb::ByteString account_ = pb::ByteString.Empty;
        /// <summary>
        ///角色账号名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Account {
          get { return account_; }
          set {
            account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private pb::ByteString name_ = pb::ByteString.Empty;
        /// <summary>
        ///角色名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private uint level_;
        /// <summary>
        ///角色等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "totalScore" field.</summary>
        public const int TotalScoreFieldNumber = 4;
        private uint totalScore_;
        /// <summary>
        ///角色战力
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalScore {
          get { return totalScore_; }
          set {
            totalScore_ = value;
          }
        }

        /// <summary>Field number for the "recentLoginTime" field.</summary>
        public const int RecentLoginTimeFieldNumber = 5;
        private uint recentLoginTime_;
        /// <summary>
        ///最近登录时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RecentLoginTime {
          get { return recentLoginTime_; }
          set {
            recentLoginTime_ = value;
          }
        }

        /// <summary>Field number for the "createTime" field.</summary>
        public const int CreateTimeFieldNumber = 6;
        private uint createTime_;
        /// <summary>
        ///角色创建时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreateTime {
          get { return createTime_; }
          set {
            createTime_ = value;
          }
        }

        /// <summary>Field number for the "online" field.</summary>
        public const int OnlineFieldNumber = 7;
        private bool online_;
        /// <summary>
        ///是否在线
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Online {
          get { return online_; }
          set {
            online_ = value;
          }
        }

        /// <summary>Field number for the "guildId" field.</summary>
        public const int GuildIdFieldNumber = 8;
        private uint guildId_;
        /// <summary>
        ///工会id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildId {
          get { return guildId_; }
          set {
            guildId_ = value;
          }
        }

        /// <summary>Field number for the "guildName" field.</summary>
        public const int GuildNameFieldNumber = 9;
        private pb::ByteString guildName_ = pb::ByteString.Empty;
        /// <summary>
        ///工会名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString GuildName {
          get { return guildName_; }
          set {
            guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "banPlayTime" field.</summary>
        public const int BanPlayTimeFieldNumber = 10;
        private uint banPlayTime_;
        /// <summary>
        ///角色封停 剩余封停时间(s) 未封停0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BanPlayTime {
          get { return banPlayTime_; }
          set {
            banPlayTime_ = value;
          }
        }

        /// <summary>Field number for the "chargeActExp" field.</summary>
        public const int ChargeActExpFieldNumber = 12;
        private uint chargeActExp_;
        /// <summary>
        ///充值累计活动经验 (单位：等价魔币)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChargeActExp {
          get { return chargeActExp_; }
          set {
            chargeActExp_ = value;
          }
        }

        /// <summary>Field number for the "banList" field.</summary>
        public const int BanListFieldNumber = 13;
        private static readonly pb::FieldCodec<global::Packet.RoleBan> _repeated_banList_codec
            = pb::FieldCodec.ForMessage(106, global::Packet.RoleBan.Parser);
        private readonly pbc::RepeatedField<global::Packet.RoleBan> banList_ = new pbc::RepeatedField<global::Packet.RoleBan>();
        /// <summary>
        ///封禁功能 TRADE CHAT RANK FRIEND
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.RoleBan> BanList {
          get { return banList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Account.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Account);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Name);
          }
          if (Level != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (TotalScore != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(TotalScore);
          }
          if (RecentLoginTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RecentLoginTime);
          }
          if (CreateTime != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(CreateTime);
          }
          if (Online != false) {
            output.WriteRawTag(56);
            output.WriteBool(Online);
          }
          if (GuildId != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(GuildId);
          }
          if (GuildName.Length != 0) {
            output.WriteRawTag(74);
            output.WriteBytes(GuildName);
          }
          if (BanPlayTime != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(BanPlayTime);
          }
          if (ChargeActExp != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(ChargeActExp);
          }
          banList_.WriteTo(output, _repeated_banList_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Account.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (TotalScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
          }
          if (RecentLoginTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecentLoginTime);
          }
          if (CreateTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
          }
          if (Online != false) {
            size += 1 + 1;
          }
          if (GuildId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildId);
          }
          if (GuildName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
          }
          if (BanPlayTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanPlayTime);
          }
          if (ChargeActExp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeActExp);
          }
          size += banList_.CalculateSize(_repeated_banList_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Account = input.ReadBytes();
                break;
              }
              case 18: {
                Name = input.ReadBytes();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                TotalScore = input.ReadUInt32();
                break;
              }
              case 40: {
                RecentLoginTime = input.ReadUInt32();
                break;
              }
              case 48: {
                CreateTime = input.ReadUInt32();
                break;
              }
              case 56: {
                Online = input.ReadBool();
                break;
              }
              case 64: {
                GuildId = input.ReadUInt32();
                break;
              }
              case 74: {
                GuildName = input.ReadBytes();
                break;
              }
              case 80: {
                BanPlayTime = input.ReadUInt32();
                break;
              }
              case 96: {
                ChargeActExp = input.ReadUInt32();
                break;
              }
              case 106: {
                banList_.AddEntriesFrom(input, _repeated_banList_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///pb gm 新版 玩家道具变更
  /// </summary>
  public sealed class GmGMTRoleItemChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTRoleItemChangeReq> _parser = new pb::MessageParser<GmGMTRoleItemChangeReq>(() => new GmGMTRoleItemChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTRoleItemChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "itemOpList" field.</summary>
    public const int ItemOpListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GmGMTRoleItemChangeReq.Types.ItemOp> _repeated_itemOpList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GmGMTRoleItemChangeReq.Types.ItemOp.Parser);
    private readonly pbc::RepeatedField<global::Packet.GmGMTRoleItemChangeReq.Types.ItemOp> itemOpList_ = new pbc::RepeatedField<global::Packet.GmGMTRoleItemChangeReq.Types.ItemOp>();
    /// <summary>
    ///道具操作列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GmGMTRoleItemChangeReq.Types.ItemOp> ItemOpList {
      get { return itemOpList_; }
    }

    /// <summary>Field number for the "reasonType" field.</summary>
    public const int ReasonTypeFieldNumber = 3;
    private uint reasonType_;
    /// <summary>
    /// (0:退款)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReasonType {
      get { return reasonType_; }
      set {
        reasonType_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 4;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    /// <summary>
    /// 额外信息 (0:退款对应订单号)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      itemOpList_.WriteTo(output, _repeated_itemOpList_codec);
      if (ReasonType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ReasonType);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      size += itemOpList_.CalculateSize(_repeated_itemOpList_codec);
      if (ReasonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReasonType);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            itemOpList_.AddEntriesFrom(input, _repeated_itemOpList_codec);
            break;
          }
          case 24: {
            ReasonType = input.ReadUInt32();
            break;
          }
          case 34: {
            ExtraData = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GmGMTRoleItemChangeReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemOp : pb::IMessage {
        private static readonly pb::MessageParser<ItemOp> _parser = new pb::MessageParser<ItemOp>(() => new ItemOp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemOp> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        /// <summary>
        ///infoid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "itemNum" field.</summary>
        public const int ItemNumFieldNumber = 2;
        private uint itemNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemNum {
          get { return itemNum_; }
          set {
            itemNum_ = value;
          }
        }

        /// <summary>Field number for the "itemOp" field.</summary>
        public const int ItemOp_FieldNumber = 3;
        private int itemOp_;
        /// <summary>
        /// 1 减少  0 增加
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ItemOp_ {
          get { return itemOp_; }
          set {
            itemOp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (ItemNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemNum);
          }
          if (ItemOp_ != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ItemOp_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
          }
          if (ItemOp_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemOp_);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemNum = input.ReadUInt32();
                break;
              }
              case 24: {
                ItemOp_ = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ////pb gm 新版玩家道具变更
  /// </summary>
  public sealed class GmGMTRoleItemChangeRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTRoleItemChangeRes> _parser = new pb::MessageParser<GmGMTRoleItemChangeRes>(() => new GmGMTRoleItemChangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTRoleItemChangeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///pb gm 玩家踢线
  /// </summary>
  public sealed class GmGMTRoleOfflineReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTRoleOfflineReq> _parser = new pb::MessageParser<GmGMTRoleOfflineReq>(() => new GmGMTRoleOfflineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTRoleOfflineReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private pb::ByteString position_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线对应的操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Position);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Position);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Position = input.ReadBytes();
            break;
          }
          case 34: {
            Title = input.ReadBytes();
            break;
          }
          case 42: {
            Reason = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 玩家踢线
  /// </summary>
  public sealed class GmGMTRoleOfflineRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTRoleOfflineRes> _parser = new pb::MessageParser<GmGMTRoleOfflineRes>(() => new GmGMTRoleOfflineRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTRoleOfflineRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///pb gm 服务器踢线
  /// </summary>
  public sealed class GmGMTServerOfflineReq : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTServerOfflineReq> _parser = new pb::MessageParser<GmGMTServerOfflineReq>(() => new GmGMTServerOfflineReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTServerOfflineReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private pb::ByteString position_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线对应的操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    /// 踢线原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Position);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Position);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Position = input.ReadBytes();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///pb gm 服务器踢线
  /// </summary>
  public sealed class GmGMTServerOfflineRes : pb::IMessage {
    private static readonly pb::MessageParser<GmGMTServerOfflineRes> _parser = new pb::MessageParser<GmGMTServerOfflineRes>(() => new GmGMTServerOfflineRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGMTServerOfflineRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///GMT 封禁玩家请求
  /// </summary>
  public sealed class GMTGameRoleBanReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanReq> _parser = new pb::MessageParser<GMTGameRoleBanReq>(() => new GMTGameRoleBanReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///封禁操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    ///封禁原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private long time_;
    /// <summary>
    ///封停时长(s) +n -n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private uint type_;
    /// <summary>
    ///1是封停 0 是解封
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Reason);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadBytes();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 封禁玩家请求返回
  /// </summary>
  public sealed class GMTGameRoleBanRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanRes> _parser = new pb::MessageParser<GMTGameRoleBanRes>(() => new GMTGameRoleBanRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///GMT 冻结玩家道具请求
  /// </summary>
  public sealed class GMTGameRoleBanItemReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanItemReq> _parser = new pb::MessageParser<GMTGameRoleBanItemReq>(() => new GMTGameRoleBanItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///封禁操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    ///封禁原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private long time_;
    /// <summary>
    ///封停时长(s) +n -n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private uint type_;
    /// <summary>
    ///1是冻结 0 是解冻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.GMTGameRoleBanItemReq.Types.BanItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.GMTGameRoleBanItemReq.Types.BanItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.GMTGameRoleBanItemReq.Types.BanItem> itemList_ = new pbc::RepeatedField<global::Packet.GMTGameRoleBanItemReq.Types.BanItem>();
    /// <summary>
    ///冻结或者解冻列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GMTGameRoleBanItemReq.Types.BanItem> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Reason);
      }
      if (Time != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Type);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadBytes();
            break;
          }
          case 40: {
            Time = input.ReadInt64();
            break;
          }
          case 48: {
            Type = input.ReadUInt32();
            break;
          }
          case 58: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GMTGameRoleBanItemReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class BanItem : pb::IMessage {
        private static readonly pb::MessageParser<BanItem> _parser = new pb::MessageParser<BanItem>(() => new BanItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BanItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private ulong amount_;
        /// <summary>
        ///数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 3;
        private ulong uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (Amount != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Amount);
          }
          if (Uuid != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Uuid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Amount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
          }
          if (Uuid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                Amount = input.ReadUInt64();
                break;
              }
              case 24: {
                Uuid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///GMT 冻结玩家道具请求返回
  /// </summary>
  public sealed class GMTGameRoleBanItemRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanItemRes> _parser = new pb::MessageParser<GMTGameRoleBanItemRes>(() => new GMTGameRoleBanItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanItemRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///GMT 修改玩家属性
  /// </summary>
  public sealed class GMTGameRoleDataChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleDataChangeReq> _parser = new pb::MessageParser<GMTGameRoleDataChangeReq>(() => new GMTGameRoleDataChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleDataChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private pb::ByteString type_ = pb::ByteString.Empty;
    /// <summary>
    ///属性类型 做简单的验证 暂时不用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    ///对应修改value值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Type = input.ReadBytes();
            break;
          }
          case 34: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 修改玩家属性
  /// </summary>
  public sealed class GMTGameRoleDataChangeRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleDataChangeRes> _parser = new pb::MessageParser<GMTGameRoleDataChangeRes>(() => new GMTGameRoleDataChangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleDataChangeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///GMT 封禁玩家功能请求
  /// </summary>
  public sealed class GMTGameRoleBanFuncReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanFuncReq> _parser = new pb::MessageParser<GMTGameRoleBanFuncReq>(() => new GMTGameRoleBanFuncReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanFuncReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    ///原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private int time_;
    /// <summary>
    ///时长(s) +n -n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private pb::ByteString type_ = pb::ByteString.Empty;
    /// <summary>
    ///类型 TRADE 交易行  CHAT 聊天  RANK 排行榜  FRIEND 加好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Reason);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Time);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadBytes();
            break;
          }
          case 40: {
            Time = input.ReadInt32();
            break;
          }
          case 50: {
            Type = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 封禁玩家功能请求返回
  /// </summary>
  public sealed class GMTGameRoleBanFuncRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleBanFuncRes> _parser = new pb::MessageParser<GMTGameRoleBanFuncRes>(() => new GMTGameRoleBanFuncRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleBanFuncRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///GMT 解封玩家功能请求
  /// </summary>
  public sealed class GMTGameRoleUnBanFuncReq : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleUnBanFuncReq> _parser = new pb::MessageParser<GMTGameRoleUnBanFuncReq>(() => new GMTGameRoleUnBanFuncReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleUnBanFuncReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    ///gamesvrId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///操作简述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private pb::ByteString reason_ = pb::ByteString.Empty;
    /// <summary>
    ///原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private pb::ByteString type_ = pb::ByteString.Empty;
    /// <summary>
    ///类型 TRADE 交易行  CHAT 聊天  RANK 排行榜  FRIEND 加好友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Title);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Reason);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Title = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadBytes();
            break;
          }
          case 42: {
            Type = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GMT 解封玩家功能请求返回
  /// </summary>
  public sealed class GMTGameRoleUnBanFuncRes : pb::IMessage {
    private static readonly pb::MessageParser<GMTGameRoleUnBanFuncRes> _parser = new pb::MessageParser<GMTGameRoleUnBanFuncRes>(() => new GMTGameRoleUnBanFuncRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMTGameRoleUnBanFuncRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
