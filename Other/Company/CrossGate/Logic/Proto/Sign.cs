// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 5100+
  /// </summary>
  public enum CmdSign {
    None = 0,
    /// <summary>
    ///七日登录数据通知
    /// </summary>
    SevenDayDataNtf = 5101,
    /// <summary>
    ///请求七日登录签到
    /// </summary>
    SevenDaySignReq = 5102,
    SevenDaySignRes = 5103,
    /// <summary>
    ///每日签到信息
    /// </summary>
    DailySignDataNtf = 5104,
    /// <summary>
    ///请求每日签到奖池等信息
    /// </summary>
    DailySignInfoReq = 5105,
    DailySignInfoRes = 5106,
    /// <summary>
    ///每日签到中奖广播
    /// </summary>
    DailySignRecordNtf = 5107,
    /// <summary>
    ///每日签到请求签到
    /// </summary>
    DailySignInReq = 5108,
    DailySignInRes = 5109,
    /// <summary>
    ///每日签到请求抽奖
    /// </summary>
    DailySignDrawReq = 5110,
    DailySignDrawRes = 5111,
    /// <summary>
    ///每日签到请求购买抽奖次数
    /// </summary>
    DailySignBuyReq = 5112,
    DailySignBuyRes = 5113,
  }

  public enum ErrorSign {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///七日登录-该奖励已领取
    /// </summary>
    SevenDaySigned = 5101,
    /// <summary>
    ///七日登录-活动已结束
    /// </summary>
    SevenDayEnd = 5102,
    /// <summary>
    ///七日登录-活动未开启
    /// </summary>
    SevenDayNonOpen = 5103,
    /// <summary>
    ///七日登录-请求领奖id错误
    /// </summary>
    SevenDayMax = 5104,
    /// <summary>
    ///今日已签到
    /// </summary>
    DailySignIn = 5105,
    /// <summary>
    ///每日签到购买次数已到上限
    /// </summary>
    DailySignBuyMax = 5106,
    /// <summary>
    ///配置错误
    /// </summary>
    CsvErr = 5107,
    /// <summary>
    ///每日签到抽奖次数不足
    /// </summary>
    DailySignDraw = 5108,
    /// <summary>
    ///每日签到数据还未初始化，请稍后再试
    /// </summary>
    DailySignInit = 5109,
  }

  public enum SignActiveReason {
    None = 0,
    /// <summary>
    ///七日登录获取
    /// </summary>
    SevenDay = 5101,
    /// <summary>
    ///每日签到购买次数
    /// </summary>
    DailySignBuy = 5102,
    /// <summary>
    ///每日签到
    /// </summary>
    DailySignDraw = 5103,
  }

  #endregion

  #region Messages
  /// <summary>
  ///七日登录数据通知
  /// </summary>
  public sealed class CmdSignSevenDayDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignSevenDayDataNtf> _parser = new pb::MessageParser<CmdSignSevenDayDataNtf>(() => new CmdSignSevenDayDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignSevenDayDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private uint endTime_;
    /// <summary>
    ///活动结束时间 (0为活动未开启)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "awardTake" field.</summary>
    public const int AwardTakeFieldNumber = 2;
    private int awardTake_;
    /// <summary>
    ///已领取奖励 awardTake &amp; (1 &lt;&lt; awardId) == true 已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwardTake {
      get { return awardTake_; }
      set {
        awardTake_ = value;
      }
    }

    /// <summary>Field number for the "loginCount" field.</summary>
    public const int LoginCountFieldNumber = 3;
    private uint loginCount_;
    /// <summary>
    ///累计登录次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginCount {
      get { return loginCount_; }
      set {
        loginCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EndTime);
      }
      if (AwardTake != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardTake);
      }
      if (LoginCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LoginCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (AwardTake != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTake);
      }
      if (LoginCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardTake = input.ReadInt32();
            break;
          }
          case 24: {
            LoginCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求七日登录签到
  /// </summary>
  public sealed class CmdSignSevenDaySignReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignSevenDaySignReq> _parser = new pb::MessageParser<CmdSignSevenDaySignReq>(() => new CmdSignSevenDaySignReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignSevenDaySignReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardId" field.</summary>
    public const int AwardIdFieldNumber = 1;
    private uint awardId_;
    /// <summary>
    ///要领取的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardId {
      get { return awardId_; }
      set {
        awardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AwardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AwardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AwardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AwardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSignSevenDaySignRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignSevenDaySignRes> _parser = new pb::MessageParser<CmdSignSevenDaySignRes>(() => new CmdSignSevenDaySignRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignSevenDaySignRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardId" field.</summary>
    public const int AwardIdFieldNumber = 1;
    private uint awardId_;
    /// <summary>
    ///要领取的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardId {
      get { return awardId_; }
      set {
        awardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AwardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AwardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AwardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AwardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到信息
  /// </summary>
  public sealed class CmdSignDailySignDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignDataNtf> _parser = new pb::MessageParser<CmdSignDailySignDataNtf>(() => new CmdSignDailySignDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "signTime" field.</summary>
    public const int SignTimeFieldNumber = 1;
    private uint signTime_;
    /// <summary>
    ///上次签到时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignTime {
      get { return signTime_; }
      set {
        signTime_ = value;
      }
    }

    /// <summary>Field number for the "awardCoun" field.</summary>
    public const int AwardCounFieldNumber = 2;
    private uint awardCoun_;
    /// <summary>
    ///剩余抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCoun {
      get { return awardCoun_; }
      set {
        awardCoun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SignTime);
      }
      if (AwardCoun != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardCoun);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignTime);
      }
      if (AwardCoun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCoun);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SignTime = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardCoun = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到中奖记录
  /// </summary>
  public sealed class DailySignRecord : pb::IMessage {
    private static readonly pb::MessageParser<DailySignRecord> _parser = new pb::MessageParser<DailySignRecord>(() => new DailySignRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailySignRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 1;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    ///签到表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoleName);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleName = input.ReadString();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求每日签到奖池等信息
  /// </summary>
  public sealed class CmdSignDailySignInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignInfoReq> _parser = new pb::MessageParser<CmdSignDailySignInfoReq>(() => new CmdSignDailySignInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSignDailySignInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignInfoRes> _parser = new pb::MessageParser<CmdSignDailySignInfoRes>(() => new CmdSignDailySignInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 1;
    private uint buyCount_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 2;
    private uint awardCount_;
    /// <summary>
    ///剩余抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    /// <summary>Field number for the "signTime" field.</summary>
    public const int SignTimeFieldNumber = 3;
    private uint signTime_;
    /// <summary>
    ///上次签到时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignTime {
      get { return signTime_; }
      set {
        signTime_ = value;
      }
    }

    /// <summary>Field number for the "awardTake" field.</summary>
    public const int AwardTakeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_awardTake_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> awardTake_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已获得奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardTake {
      get { return awardTake_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 5;
    private uint refreshTime_;
    /// <summary>
    ///奖池刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "awardPool" field.</summary>
    public const int AwardPoolFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_awardPool_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> awardPool_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardPool {
      get { return awardPool_; }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.DailySignRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.DailySignRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailySignRecord> record_ = new pbc::RepeatedField<global::Packet.DailySignRecord>();
    /// <summary>
    ///中奖记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailySignRecord> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "buyCountTime" field.</summary>
    public const int BuyCountTimeFieldNumber = 8;
    private uint buyCountTime_;
    /// <summary>
    ///上次购买抽奖次数刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCountTime {
      get { return buyCountTime_; }
      set {
        buyCountTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuyCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuyCount);
      }
      if (AwardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardCount);
      }
      if (SignTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SignTime);
      }
      awardTake_.WriteTo(output, _repeated_awardTake_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RefreshTime);
      }
      awardPool_.WriteTo(output, _repeated_awardPool_codec);
      record_.WriteTo(output, _repeated_record_codec);
      if (BuyCountTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BuyCountTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      if (SignTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignTime);
      }
      size += awardTake_.CalculateSize(_repeated_awardTake_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      size += awardPool_.CalculateSize(_repeated_awardPool_codec);
      size += record_.CalculateSize(_repeated_record_codec);
      if (BuyCountTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCountTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuyCount = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardCount = input.ReadUInt32();
            break;
          }
          case 24: {
            SignTime = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            awardTake_.AddEntriesFrom(input, _repeated_awardTake_codec);
            break;
          }
          case 40: {
            RefreshTime = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            awardPool_.AddEntriesFrom(input, _repeated_awardPool_codec);
            break;
          }
          case 58: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
          case 64: {
            BuyCountTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到中奖广播
  /// </summary>
  public sealed class CmdSignDailySignRecordNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignRecordNtf> _parser = new pb::MessageParser<CmdSignDailySignRecordNtf>(() => new CmdSignDailySignRecordNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignRecordNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Packet.DailySignRecord record_;
    /// <summary>
    ///中奖记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailySignRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (record_ == null) {
              record_ = new global::Packet.DailySignRecord();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到请求签到
  /// </summary>
  public sealed class CmdSignDailySignInReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignInReq> _parser = new pb::MessageParser<CmdSignDailySignInReq>(() => new CmdSignDailySignInReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignInReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSignDailySignInRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignInRes> _parser = new pb::MessageParser<CmdSignDailySignInRes>(() => new CmdSignDailySignInRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignInRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 1;
    private uint awardCount_;
    /// <summary>
    ///剩余抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    /// <summary>Field number for the "signTime" field.</summary>
    public const int SignTimeFieldNumber = 2;
    private uint signTime_;
    /// <summary>
    ///上次签到时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignTime {
      get { return signTime_; }
      set {
        signTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AwardCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AwardCount);
      }
      if (SignTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SignTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      if (SignTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SignTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AwardCount = input.ReadUInt32();
            break;
          }
          case 16: {
            SignTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到请求抽奖
  /// </summary>
  public sealed class CmdSignDailySignDrawReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignDrawReq> _parser = new pb::MessageParser<CmdSignDailySignDrawReq>(() => new CmdSignDailySignDrawReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignDrawReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSignDailySignDrawRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignDrawRes> _parser = new pb::MessageParser<CmdSignDailySignDrawRes>(() => new CmdSignDailySignDrawRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignDrawRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///抽中id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 2;
    private uint awardCount_;
    /// <summary>
    ///剩余抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (AwardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到请求购买抽奖次数
  /// </summary>
  public sealed class CmdSignDailySignBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignBuyReq> _parser = new pb::MessageParser<CmdSignDailySignBuyReq>(() => new CmdSignDailySignBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private uint num_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSignDailySignBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSignDailySignBuyRes> _parser = new pb::MessageParser<CmdSignDailySignBuyRes>(() => new CmdSignDailySignBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSignDailySignBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 1;
    private uint buyCount_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 2;
    private uint awardCount_;
    /// <summary>
    ///剩余抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    /// <summary>Field number for the "buyCountTime" field.</summary>
    public const int BuyCountTimeFieldNumber = 3;
    private uint buyCountTime_;
    /// <summary>
    ///上次购买抽奖次数刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCountTime {
      get { return buyCountTime_; }
      set {
        buyCountTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuyCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuyCount);
      }
      if (AwardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardCount);
      }
      if (BuyCountTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuyCountTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      if (BuyCountTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCountTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuyCount = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardCount = input.ReadUInt32();
            break;
          }
          case 24: {
            BuyCountTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
