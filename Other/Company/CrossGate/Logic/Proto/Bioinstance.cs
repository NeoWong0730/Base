// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bioinstance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///人物传记(新)
  ///6400+
  /// </summary>
  public enum CmdBioInstance {
    None = 0,
    /// <summary>
    ///请求副本首通信息
    /// </summary>
    FirstPassReq = 6401,
    FirstPassRes = 6402,
    /// <summary>
    ///通关奖励
    /// </summary>
    EndRewardNtf = 6403,
    /// <summary>
    ///队长进副本前查询队伍的剩余次数
    /// </summary>
    QueryEnterInfoReq = 6405,
    /// <summary>
    /// </summary>
    QueryEnterInfoRes = 6406,
  }

  public enum ErrorBioInstance {
    None = 0,
    /// <summary>
    ///前置副本未解锁
    /// </summary>
    InstanceLocked = 6401,
    /// <summary>
    ///ErrorBioInstance_PreInstanceNotPassed = 6402;    //前置副本未通关
    /// </summary>
    StageNotFound = 6403,
  }

  #endregion

  #region Messages
  /// <summary>
  ///副本特殊信息
  /// </summary>
  public sealed class BioInsData : pb::IMessage {
    private static readonly pb::MessageParser<BioInsData> _parser = new pb::MessageParser<BioInsData>(() => new BioInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BioInsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "historyPassedIds" field.</summary>
    public const int HistoryPassedIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_historyPassedIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> historyPassedIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已通关过的副本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HistoryPassedIds {
      get { return historyPassedIds_; }
    }

    /// <summary>Field number for the "stageRewardLimit" field.</summary>
    public const int StageRewardLimitFieldNumber = 3;
    private global::Packet.ResLimit stageRewardLimit_;
    /// <summary>
    ///今日已领取关卡奖励的次数信息（单关奖励）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit StageRewardLimit {
      get { return stageRewardLimit_; }
      set {
        stageRewardLimit_ = value;
      }
    }

    /// <summary>Field number for the "entryRewards" field.</summary>
    public const int EntryRewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BioInsData.Types.EntryReward> _repeated_entryRewards_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BioInsData.Types.EntryReward.Parser);
    private readonly pbc::RepeatedField<global::Packet.BioInsData.Types.EntryReward> entryRewards_ = new pbc::RepeatedField<global::Packet.BioInsData.Types.EntryReward>();
    /// <summary>
    ///今日各副本已领取奖励次数， 和stageRewardLimit一起刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BioInsData.Types.EntryReward> EntryRewards {
      get { return entryRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      historyPassedIds_.WriteTo(output, _repeated_historyPassedIds_codec);
      if (stageRewardLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StageRewardLimit);
      }
      entryRewards_.WriteTo(output, _repeated_entryRewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      size += historyPassedIds_.CalculateSize(_repeated_historyPassedIds_codec);
      if (stageRewardLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StageRewardLimit);
      }
      size += entryRewards_.CalculateSize(_repeated_entryRewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            historyPassedIds_.AddEntriesFrom(input, _repeated_historyPassedIds_codec);
            break;
          }
          case 26: {
            if (stageRewardLimit_ == null) {
              stageRewardLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(stageRewardLimit_);
            break;
          }
          case 34: {
            entryRewards_.AddEntriesFrom(input, _repeated_entryRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BioInsData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class EntryReward : pb::IMessage {
        private static readonly pb::MessageParser<EntryReward> _parser = new pb::MessageParser<EntryReward>(() => new EntryReward());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EntryReward> Parser { get { return _parser; } }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "getRewardTimes" field.</summary>
        public const int GetRewardTimesFieldNumber = 2;
        private uint getRewardTimes_;
        /// <summary>
        ///今日已领取奖励次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GetRewardTimes {
          get { return getRewardTimes_; }
          set {
            getRewardTimes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InstanceId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InstanceId);
          }
          if (GetRewardTimes != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(GetRewardTimes);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InstanceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
          }
          if (GetRewardTimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GetRewardTimes);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InstanceId = input.ReadUInt32();
                break;
              }
              case 16: {
                GetRewardTimes = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///请求首通信息
  /// </summary>
  public sealed class CmdBioInstanceFirstPassReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBioInstanceFirstPassReq> _parser = new pb::MessageParser<CmdBioInstanceFirstPassReq>(() => new CmdBioInstanceFirstPassReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBioInstanceFirstPassReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBioInstanceFirstPassRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBioInstanceFirstPassRes> _parser = new pb::MessageParser<CmdBioInstanceFirstPassRes>(() => new CmdBioInstanceFirstPassRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBioInstanceFirstPassRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.BioInsFirstPassInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BioInsFirstPassInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.BioInsFirstPassInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBioInstanceEndRewardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBioInstanceEndRewardNtf> _parser = new pb::MessageParser<CmdBioInstanceEndRewardNtf>(() => new CmdBioInstanceEndRewardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBioInstanceEndRewardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "historyPass" field.</summary>
    public const int HistoryPassFieldNumber = 1;
    private bool historyPass_;
    /// <summary>
    ///是否历史首通
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HistoryPass {
      get { return historyPass_; }
      set {
        historyPass_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdBioInstanceEndRewardNtf.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdBioInstanceEndRewardNtf.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdBioInstanceEndRewardNtf.Types.Item> items_ = new pbc::RepeatedField<global::Packet.CmdBioInstanceEndRewardNtf.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdBioInstanceEndRewardNtf.Types.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HistoryPass != false) {
        output.WriteRawTag(8);
        output.WriteBool(HistoryPass);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HistoryPass != false) {
        size += 1 + 1;
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HistoryPass = input.ReadBool();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdBioInstanceEndRewardNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int Item_FieldNumber = 3;
        private global::Packet.Item item_;
        /// <summary>
        ///获得道具的详细属性
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.Item Item_ {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (item_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Item_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (item_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item_);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 26: {
                if (item_ == null) {
                  item_ = new global::Packet.Item();
                }
                input.ReadMessage(item_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///副本投票数据
  /// </summary>
  public sealed class BioInsVoteData : pb::IMessage {
    private static readonly pb::MessageParser<BioInsVoteData> _parser = new pb::MessageParser<BioInsVoteData>(() => new BioInsVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BioInsVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.BioInsVoteData.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.BioInsVoteData.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Packet.BioInsVoteData.Types.Player> players_ = new pbc::RepeatedField<global::Packet.BioInsVoteData.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BioInsVoteData.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BioInsVoteData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Player : pb::IMessage {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "leftTimes" field.</summary>
        public const int LeftTimesFieldNumber = 2;
        private uint leftTimes_;
        /// <summary>
        ///剩余多少次奖励
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LeftTimes {
          get { return leftTimes_; }
          set {
            leftTimes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (LeftTimes != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(LeftTimes);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (LeftTimes != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftTimes);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                LeftTimes = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdBioInstanceQueryEnterInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBioInstanceQueryEnterInfoReq> _parser = new pb::MessageParser<CmdBioInstanceQueryEnterInfoReq>(() => new CmdBioInstanceQueryEnterInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBioInstanceQueryEnterInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBioInstanceQueryEnterInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBioInstanceQueryEnterInfoRes> _parser = new pb::MessageParser<CmdBioInstanceQueryEnterInfoRes>(() => new CmdBioInstanceQueryEnterInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBioInstanceQueryEnterInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.BioInsVoteData info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BioInsVoteData Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.BioInsVoteData();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
