// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trialgate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///9200
  /// </summary>
  public enum CmdTrialGate {
    None = 0,
    Begin = 9200,
    /// <summary>
    /// 上线推送
    /// </summary>
    DataNty = 9201,
    /// <summary>
    /// 通知更新通过阶段
    /// </summary>
    UpdateStageNty = 9202,
    /// <summary>
    /// 请求解锁技能
    /// </summary>
    UnlockSkillReq = 9203,
    /// <summary>
    /// 通知解锁技能
    /// </summary>
    UnlockSkillNty = 9204,
    /// <summary>
    /// 请求设置节点宠物
    /// </summary>
    SetNodePetReq = 9205,
    /// <summary>
    /// 通知更新节点宠物
    /// </summary>
    UpdateNodePetNty = 9206,
    /// <summary>
    /// 请求挑战准备
    /// </summary>
    ChallengeReadyReq = 9207,
    /// <summary>
    /// 通知挑战准备
    /// </summary>
    ChallengeReadyNty = 9208,
    /// <summary>
    /// 通知挑战确认
    /// </summary>
    ChallengeConfirmNty = 9209,
    /// <summary>
    /// 通知挑战取消
    /// </summary>
    ChallengeCancelNty = 9210,
    /// <summary>
    /// 请求查看队员配置
    /// </summary>
    WatchMemberConfigReq = 9211,
    /// <summary>
    /// 通知查看队员配置
    /// </summary>
    WatchMemberConfigNty = 9212,
    /// <summary>
    /// 请求挑战投票
    /// </summary>
    ChallengeVoteReq = 9213,
    /// <summary>
    /// 通知挑战投票
    /// </summary>
    ChallengeVoteNty = 9214,
  }

  public enum ErrorTrialGate {
    None = 0,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 9201,
    /// <summary>
    /// 功能未开放
    /// </summary>
    FunctionNotOpen = 9202,
    /// <summary>
    /// 阶段奖励未解锁
    /// </summary>
    StageRewardLocked = 9203,
    /// <summary>
    /// 技能已解锁
    /// </summary>
    SkillAlreadyUnlocked = 9204,
    /// <summary>
    /// 该节点没有技能
    /// </summary>
    NoSkillInNode = 9205,
    /// <summary>
    /// 与当前设置的宠物相同
    /// </summary>
    SetSamePet = 9206,
    /// <summary>
    /// 背包中没有该宠物
    /// </summary>
    PetNotFoundInBag = 9207,
    /// <summary>
    /// 不是队长
    /// </summary>
    NotLeader = 9208,
    /// <summary>
    /// 徽章不足
    /// </summary>
    NoEnoughCurrency = 9209,
    /// <summary>
    /// 查看配置cd中
    /// </summary>
    WatchMemberConfigCd = 9210,
    /// <summary>
    /// 不是队长不能查看配置
    /// </summary>
    CanOnlyBeWatchedByLeader = 9211,
    /// <summary>
    /// 队员数量不足
    /// </summary>
    TeamMemberCountNotEnough = 9212,
    /// <summary>
    /// 队员暂离
    /// </summary>
    TeamMemberTempLeave = 9213,
    /// <summary>
    /// 队员不在线
    /// </summary>
    TeamMemberOffline = 9214,
    /// <summary>
    /// 不与队长在同一等级段
    /// </summary>
    NotInSameLevelRange = 9215,
    /// <summary>
    /// 不在投票中
    /// </summary>
    NotInVoting = 9216,
    /// <summary>
    /// 没有队伍
    /// </summary>
    NoTeam = 9217,
    /// <summary>
    /// 已投票过
    /// </summary>
    HasVoted = 9218,
    /// <summary>
    /// 无法创建战斗
    /// </summary>
    CanNotCreateFight = 9219,
    /// <summary>
    /// 不在npc范围内
    /// </summary>
    FarAwayFromNpc = 9220,
    /// <summary>
    /// 刷新中
    /// </summary>
    Refreshing = 9221,
  }

  public enum TrialGateActiveReason {
    None = 0,
    /// <summary>
    /// 阶段奖励
    /// </summary>
    StageReward = 9201,
    /// <summary>
    /// 周重置扣除
    /// </summary>
    WeeklyReset = 9202,
    /// <summary>
    /// 技能解锁扣除
    /// </summary>
    UnlockSkill = 9203,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 试炼之门投票数据
  /// </summary>
  public sealed class TrialGateVoteData : pb::IMessage {
    private static readonly pb::MessageParser<TrialGateVoteData> _parser = new pb::MessageParser<TrialGateVoteData>(() => new TrialGateVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrialGateVoteData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 试炼之门节点
  /// </summary>
  public sealed class RoleTrialGateNode : pb::IMessage {
    private static readonly pb::MessageParser<RoleTrialGateNode> _parser = new pb::MessageParser<RoleTrialGateNode>(() => new RoleTrialGateNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTrialGateNode> Parser { get { return _parser; } }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private uint nodeid_;
    /// <summary>
    /// 节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "petuid" field.</summary>
    public const int PetuidFieldNumber = 2;
    private uint petuid_;
    /// <summary>
    /// 宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petuid {
      get { return petuid_; }
      set {
        petuid_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nodeid);
      }
      if (Petuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Petuid);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nodeid);
      }
      if (Petuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petuid);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Petuid = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 试炼之门特性
  /// </summary>
  public sealed class RoleTrialGateFeature : pb::IMessage {
    private static readonly pb::MessageParser<RoleTrialGateFeature> _parser = new pb::MessageParser<RoleTrialGateFeature>(() => new RoleTrialGateFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTrialGateFeature> Parser { get { return _parser; } }

    /// <summary>Field number for the "featureid" field.</summary>
    public const int FeatureidFieldNumber = 1;
    private uint featureid_;
    /// <summary>
    /// 特性表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Featureid {
      get { return featureid_; }
      set {
        featureid_ = value;
      }
    }

    /// <summary>Field number for the "maxstage" field.</summary>
    public const int MaxstageFieldNumber = 2;
    private uint maxstage_;
    /// <summary>
    /// 最大阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxstage {
      get { return maxstage_; }
      set {
        maxstage_ = value;
      }
    }

    /// <summary>Field number for the "minround" field.</summary>
    public const int MinroundFieldNumber = 3;
    private uint minround_;
    /// <summary>
    /// 最小回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Minround {
      get { return minround_; }
      set {
        minround_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private uint timestamp_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Featureid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Featureid);
      }
      if (Maxstage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Maxstage);
      }
      if (Minround != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Minround);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Featureid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Featureid);
      }
      if (Maxstage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxstage);
      }
      if (Minround != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minround);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Featureid = input.ReadUInt32();
            break;
          }
          case 16: {
            Maxstage = input.ReadUInt32();
            break;
          }
          case 24: {
            Minround = input.ReadUInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家试炼之门数据
  /// </summary>
  public sealed class RoleTrialGate : pb::IMessage {
    private static readonly pb::MessageParser<RoleTrialGate> _parser = new pb::MessageParser<RoleTrialGate>(() => new RoleTrialGate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTrialGate> Parser { get { return _parser; } }

    /// <summary>Field number for the "resettime" field.</summary>
    public const int ResettimeFieldNumber = 1;
    private uint resettime_;
    /// <summary>
    /// 下次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resettime {
      get { return resettime_; }
      set {
        resettime_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RoleTrialGateNode.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateNode> nodes_ = new pbc::RepeatedField<global::Packet.RoleTrialGateNode>();
    /// <summary>
    /// 节点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 3;
    private uint stage_;
    /// <summary>
    /// 本周已通过的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "refreshtime" field.</summary>
    public const int RefreshtimeFieldNumber = 4;
    private uint refreshtime_;
    /// <summary>
    /// 刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Refreshtime {
      get { return refreshtime_; }
      set {
        refreshtime_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateFeature> _repeated_features_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.RoleTrialGateFeature.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateFeature> features_ = new pbc::RepeatedField<global::Packet.RoleTrialGateFeature>();
    /// <summary>
    /// 特性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateFeature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resettime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resettime);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (Stage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Stage);
      }
      if (Refreshtime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Refreshtime);
      }
      features_.WriteTo(output, _repeated_features_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resettime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resettime);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Refreshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Refreshtime);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resettime = input.ReadUInt32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 24: {
            Stage = input.ReadUInt32();
            break;
          }
          case 32: {
            Refreshtime = input.ReadUInt32();
            break;
          }
          case 42: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 试炼之门节点简要
  /// </summary>
  public sealed class RoleTrialGateNodeBrief : pb::IMessage {
    private static readonly pb::MessageParser<RoleTrialGateNodeBrief> _parser = new pb::MessageParser<RoleTrialGateNodeBrief>(() => new RoleTrialGateNodeBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTrialGateNodeBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private uint nodeid_;
    /// <summary>
    /// 节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nodeid);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nodeid);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nodeid = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家试炼之门简要数据
  /// </summary>
  public sealed class RoleTrialGateBrief : pb::IMessage {
    private static readonly pb::MessageParser<RoleTrialGateBrief> _parser = new pb::MessageParser<RoleTrialGateBrief>(() => new RoleTrialGateBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTrialGateBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateNodeBrief> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RoleTrialGateNodeBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateNodeBrief> nodes_ = new pbc::RepeatedField<global::Packet.RoleTrialGateNodeBrief>();
    /// <summary>
    /// 节点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateNodeBrief> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统试炼之门数据
  /// </summary>
  public sealed class SystemTrialGate : pb::IMessage {
    private static readonly pb::MessageParser<SystemTrialGate> _parser = new pb::MessageParser<SystemTrialGate>(() => new SystemTrialGate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemTrialGate> Parser { get { return _parser; } }

    /// <summary>Field number for the "featureid" field.</summary>
    public const int FeatureidFieldNumber = 1;
    private uint featureid_;
    /// <summary>
    /// 特性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Featureid {
      get { return featureid_; }
      set {
        featureid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Featureid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Featureid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Featureid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Featureid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Featureid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateDataNty> _parser = new pb::MessageParser<CmdTrialGateDataNty>(() => new CmdTrialGateDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Packet.RoleTrialGate role_;
    /// <summary>
    /// 玩家数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleTrialGate Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 2;
    private global::Packet.SystemTrialGate system_;
    /// <summary>
    /// 系统数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemTrialGate System {
      get { return system_; }
      set {
        system_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (role_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Role);
      }
      if (system_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(System);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (system_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (role_ == null) {
              role_ = new global::Packet.RoleTrialGate();
            }
            input.ReadMessage(role_);
            break;
          }
          case 18: {
            if (system_ == null) {
              system_ = new global::Packet.SystemTrialGate();
            }
            input.ReadMessage(system_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateUpdateStageNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateUpdateStageNty> _parser = new pb::MessageParser<CmdTrialGateUpdateStageNty>(() => new CmdTrialGateUpdateStageNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateUpdateStageNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private uint stage_;
    /// <summary>
    /// 阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 2;
    private global::Packet.RoleTrialGateFeature feature_;
    /// <summary>
    /// 特性数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleTrialGateFeature Feature {
      get { return feature_; }
      set {
        feature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stage);
      }
      if (feature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Feature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (feature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Feature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stage = input.ReadUInt32();
            break;
          }
          case 18: {
            if (feature_ == null) {
              feature_ = new global::Packet.RoleTrialGateFeature();
            }
            input.ReadMessage(feature_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateUnlockSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateUnlockSkillReq> _parser = new pb::MessageParser<CmdTrialGateUnlockSkillReq>(() => new CmdTrialGateUnlockSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateUnlockSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateUnlockSkillNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateUnlockSkillNty> _parser = new pb::MessageParser<CmdTrialGateUnlockSkillNty>(() => new CmdTrialGateUnlockSkillNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateUnlockSkillNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateSetNodePetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateSetNodePetReq> _parser = new pb::MessageParser<CmdTrialGateSetNodePetReq>(() => new CmdTrialGateSetNodePetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateSetNodePetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private uint nodeid_;
    /// <summary>
    /// 节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "petuid" field.</summary>
    public const int PetuidFieldNumber = 2;
    private uint petuid_;
    /// <summary>
    /// 宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petuid {
      get { return petuid_; }
      set {
        petuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nodeid);
      }
      if (Petuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Petuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nodeid);
      }
      if (Petuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Petuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateUpdateNodePetNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateUpdateNodePetNty> _parser = new pb::MessageParser<CmdTrialGateUpdateNodePetNty>(() => new CmdTrialGateUpdateNodePetNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateUpdateNodePetNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private uint nodeid_;
    /// <summary>
    /// 节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "petuid" field.</summary>
    public const int PetuidFieldNumber = 2;
    private uint petuid_;
    /// <summary>
    /// 宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petuid {
      get { return petuid_; }
      set {
        petuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nodeid);
      }
      if (Petuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Petuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nodeid);
      }
      if (Petuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Petuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdTrialGateChallengeReadyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeReadyReq> _parser = new pb::MessageParser<CmdTrialGateChallengeReadyReq>(() => new CmdTrialGateChallengeReadyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeReadyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTrialGateChallengeReadyNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeReadyNty> _parser = new pb::MessageParser<CmdTrialGateChallengeReadyNty>(() => new CmdTrialGateChallengeReadyNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeReadyNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 1;
    private uint starttime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { return starttime_; }
      set {
        starttime_ = value;
      }
    }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 2;
    private uint expiretime_;
    /// <summary>
    /// 准备阶段结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    /// <summary>Field number for the "briefs" field.</summary>
    public const int BriefsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateBrief> _repeated_briefs_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.RoleTrialGateBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateBrief> briefs_ = new pbc::RepeatedField<global::Packet.RoleTrialGateBrief>();
    /// <summary>
    /// 简要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateBrief> Briefs {
      get { return briefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Starttime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Starttime);
      }
      if (Expiretime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expiretime);
      }
      briefs_.WriteTo(output, _repeated_briefs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Starttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttime);
      }
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      size += briefs_.CalculateSize(_repeated_briefs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Starttime = input.ReadUInt32();
            break;
          }
          case 16: {
            Expiretime = input.ReadUInt32();
            break;
          }
          case 26: {
            briefs_.AddEntriesFrom(input, _repeated_briefs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateChallengeConfirmNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeConfirmNty> _parser = new pb::MessageParser<CmdTrialGateChallengeConfirmNty>(() => new CmdTrialGateChallengeConfirmNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeConfirmNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 1;
    private uint starttime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { return starttime_; }
      set {
        starttime_ = value;
      }
    }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 2;
    private uint expiretime_;
    /// <summary>
    /// 确认阶段结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    /// <summary>Field number for the "briefs" field.</summary>
    public const int BriefsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateBrief> _repeated_briefs_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.RoleTrialGateBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateBrief> briefs_ = new pbc::RepeatedField<global::Packet.RoleTrialGateBrief>();
    /// <summary>
    /// 简要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateBrief> Briefs {
      get { return briefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Starttime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Starttime);
      }
      if (Expiretime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expiretime);
      }
      briefs_.WriteTo(output, _repeated_briefs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Starttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttime);
      }
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      size += briefs_.CalculateSize(_repeated_briefs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Starttime = input.ReadUInt32();
            break;
          }
          case 16: {
            Expiretime = input.ReadUInt32();
            break;
          }
          case 26: {
            briefs_.AddEntriesFrom(input, _repeated_briefs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateChallengeCancelNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeCancelNty> _parser = new pb::MessageParser<CmdTrialGateChallengeCancelNty>(() => new CmdTrialGateChallengeCancelNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeCancelNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    /// <summary>
    /// 导致取消的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdTrialGateWatchMemberConfigReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateWatchMemberConfigReq> _parser = new pb::MessageParser<CmdTrialGateWatchMemberConfigReq>(() => new CmdTrialGateWatchMemberConfigReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateWatchMemberConfigReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTrialGateWatchMemberConfigNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateWatchMemberConfigNty> _parser = new pb::MessageParser<CmdTrialGateWatchMemberConfigNty>(() => new CmdTrialGateWatchMemberConfigNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateWatchMemberConfigNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "refreshtime" field.</summary>
    public const int RefreshtimeFieldNumber = 1;
    private uint refreshtime_;
    /// <summary>
    /// 刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Refreshtime {
      get { return refreshtime_; }
      set {
        refreshtime_ = value;
      }
    }

    /// <summary>Field number for the "briefs" field.</summary>
    public const int BriefsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RoleTrialGateBrief> _repeated_briefs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RoleTrialGateBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleTrialGateBrief> briefs_ = new pbc::RepeatedField<global::Packet.RoleTrialGateBrief>();
    /// <summary>
    /// 简要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleTrialGateBrief> Briefs {
      get { return briefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Refreshtime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Refreshtime);
      }
      briefs_.WriteTo(output, _repeated_briefs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Refreshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Refreshtime);
      }
      size += briefs_.CalculateSize(_repeated_briefs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Refreshtime = input.ReadUInt32();
            break;
          }
          case 18: {
            briefs_.AddEntriesFrom(input, _repeated_briefs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateChallengeVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeVoteReq> _parser = new pb::MessageParser<CmdTrialGateChallengeVoteReq>(() => new CmdTrialGateChallengeVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeVoteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 1;
    private bool agree_;
    /// <summary>
    /// 是否同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Agree != false) {
        output.WriteRawTag(8);
        output.WriteBool(Agree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Agree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTrialGateChallengeVoteNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdTrialGateChallengeVoteNty> _parser = new pb::MessageParser<CmdTrialGateChallengeVoteNty>(() => new CmdTrialGateChallengeVoteNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTrialGateChallengeVoteNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "brief" field.</summary>
    public const int BriefFieldNumber = 1;
    private global::Packet.RoleTrialGateBrief brief_;
    /// <summary>
    /// 简要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleTrialGateBrief Brief {
      get { return brief_; }
      set {
        brief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (brief_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Brief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (brief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (brief_ == null) {
              brief_ = new global::Packet.RoleTrialGateBrief();
            }
            input.ReadMessage(brief_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
