// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dailygift.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7200+
  /// </summary>
  public enum CmdDailyGift {
    None = 0,
    DataNtf = 7201,
    OperatorReq = 7202,
    OperatorAck = 7203,
  }

  public enum ErrorDailyGift {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///该奖励已经被购买过
    /// </summary>
    BuyRepeat = 7201,
    /// <summary>
    ///奖励重复领取
    /// </summary>
    GetRepeat = 7202,
    /// <summary>
    ///先购买才能领取奖励
    /// </summary>
    NeedBuyFirst = 7203,
    /// <summary>
    ///配置表错误
    /// </summary>
    CsvErr = 7204,
    /// <summary>
    ///已经购买过奖励,无法一键购买
    /// </summary>
    CannotBuyAll = 7205,
    /// <summary>
    ///参数发送错误
    /// </summary>
    ParamError = 7206,
  }

  public enum DailyGiftActiveReason {
    None = 0,
    /// <summary>
    ///领取奖励
    /// </summary>
    Get = 7201,
    /// <summary>
    ///每日签到购买次数
    /// </summary>
    Buy = 7202,
    /// <summary>
    ///每日领取奖励
    /// </summary>
    DailyGet = 7203,
  }

  public enum DailyGiftState {
    None = 0,
    CanReceive = 1,
    Received = 2,
  }

  public enum DailyGiftOperatorType {
    None = 0,
    /// <summary>
    ///购买一个
    /// </summary>
    Buy = 1,
    /// <summary>
    ///全部购买
    /// </summary>
    BuyAll = 2,
    /// <summary>
    ///领取奖励
    /// </summary>
    Receive = 3,
    /// <summary>
    ///领取每天奖励-不需要购买直接领取的那个
    /// </summary>
    ReceiveDaily = 4,
  }

  #endregion

  #region Messages
  public sealed class CmdDailyGiftDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyGiftDataNtf> _parser = new pb::MessageParser<CmdDailyGiftDataNtf>(() => new CmdDailyGiftDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyGiftDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "dayGift" field.</summary>
    public const int DayGiftFieldNumber = 1;
    private bool dayGift_;
    /// <summary>
    ///每日奖励领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DayGift {
      get { return dayGift_; }
      set {
        dayGift_ = value;
      }
    }

    /// <summary>Field number for the "giftEndDay" field.</summary>
    public const int GiftEndDayFieldNumber = 2;
    private uint giftEndDay_;
    /// <summary>
    ///结束的天数 未够买为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftEndDay {
      get { return giftEndDay_; }
      set {
        giftEndDay_ = value;
      }
    }

    /// <summary>Field number for the "giftState" field.</summary>
    public const int GiftStateFieldNumber = 3;
    private uint giftState_;
    /// <summary>
    ///从低位到高位每两位代表一个礼包状态(最低两位为第一个)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftState {
      get { return giftState_; }
      set {
        giftState_ = value;
      }
    }

    /// <summary>Field number for the "giftGetLevel" field.</summary>
    public const int GiftGetLevelFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_giftGetLevel_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> giftGetLevel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///礼包领取时玩家等级 第0个元素为每日领取 第1 2 3分别对应礼包1 2 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GiftGetLevel {
      get { return giftGetLevel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DayGift != false) {
        output.WriteRawTag(8);
        output.WriteBool(DayGift);
      }
      if (GiftEndDay != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GiftEndDay);
      }
      if (GiftState != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GiftState);
      }
      giftGetLevel_.WriteTo(output, _repeated_giftGetLevel_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DayGift != false) {
        size += 1 + 1;
      }
      if (GiftEndDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftEndDay);
      }
      if (GiftState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftState);
      }
      size += giftGetLevel_.CalculateSize(_repeated_giftGetLevel_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DayGift = input.ReadBool();
            break;
          }
          case 16: {
            GiftEndDay = input.ReadUInt32();
            break;
          }
          case 24: {
            GiftState = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            giftGetLevel_.AddEntriesFrom(input, _repeated_giftGetLevel_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyGiftOperatorReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyGiftOperatorReq> _parser = new pb::MessageParser<CmdDailyGiftOperatorReq>(() => new CmdDailyGiftOperatorReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyGiftOperatorReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///当type为2和4时 填0就行 type=3时 0为全部领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyGiftOperatorAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyGiftOperatorAck> _parser = new pb::MessageParser<CmdDailyGiftOperatorAck>(() => new CmdDailyGiftOperatorAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyGiftOperatorAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
