// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkcompete.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum PKCompete {
    None = 0,
    /// <summary>
    ///报名
    /// </summary>
    SignUpReq = 9501,
    SignUpRes = 9502,
    /// <summary>
    ///请求队伍列表
    /// </summary>
    TeamListReq = 9505,
    TeamListRes = 9506,
    /// <summary>
    ///申请进入队伍
    /// </summary>
    ApplyReq = 9507,
    ApplyRes = 9508,
    /// <summary>
    ///创建队伍
    /// </summary>
    CreateTeamReq = 9509,
    CreateTeamRes = 9510,
    /// <summary>
    ///取消申请队伍
    /// </summary>
    CancelApplyReq = 9511,
    CancelApplyRes = 9512,
    /// <summary>
    ///队长操作申请列表
    /// </summary>
    HandleApplyReq = 9513,
    HandleApplyRes = 9514,
    /// <summary>
    ///打开界面请求
    /// </summary>
    InfoReq = 9515,
    /// <summary>
    ///打开界面请求返回
    /// </summary>
    InfoRes = 9516,
    /// <summary>
    ///打开界面请求 应该是返回 infores吧
    /// </summary>
    DisbandReq = 9517,
    SearchReq = 9518,
    SearchRes = 9519,
    TreasureDrawInfoNtf = 9530,
    /// <summary>
    ///这条协议仅仅适用于 非直购得购买，直购得直接走充值逻辑,服务器会在发货逻辑去处理
    /// </summary>
    TreasureDrawBuyReq = 9531,
    TreasureDrawBuyRes = 9532,
  }

  public enum PKCompeteActive {
    None = 0,
    Create = 9501,
  }

  public enum ErrorPKCompete {
    None = 0,
    /// <summary>
    ///正在创建中 一般不会出现 可提示异常 稍后再试
    /// </summary>
    Creating = 9501,
    /// <summary>
    ///魔币不足
    /// </summary>
    DiamondNotEnough = 9502,
    /// <summary>
    ///不存在的队伍
    /// </summary>
    TeamNone = 9503,
    /// <summary>
    ///申请列表满了
    /// </summary>
    ApplyFull = 9504,
    /// <summary>
    ///名字重复
    /// </summary>
    NameRepeated = 9505,
    /// <summary>
    ///没有连上mastersvr，可提示系统异常，联系客服
    /// </summary>
    MastersvrConnect = 9506,
    /// <summary>
    ///等级不足
    /// </summary>
    Level = 9507,
    /// <summary>
    ///不在活动时间内
    /// </summary>
    Time = 9508,
    /// <summary>
    ///在申请队伍中或者在队伍中 可提示已有队伍
    /// </summary>
    HasTeam = 9509,
    /// <summary>
    ///不是队长 不能报名
    /// </summary>
    NotLeader = 9510,
    /// <summary>
    ///人数不足
    /// </summary>
    MemsNotEnough = 9511,
    /// <summary>
    ///报名队伍已经满了
    /// </summary>
    SignUpFull = 9512,
    /// <summary>
    ///创建队伍已经满了
    /// </summary>
    TeamFull = 9513,
    /// <summary>
    ///跟队伍不属于一个组
    /// </summary>
    Group = 9514,
    /// <summary>
    ///名字太长了
    /// </summary>
    NameLen = 9515,
    /// <summary>
    ///宣言太长
    /// </summary>
    AnnounceLen = 9516,
    /// <summary>
    ///队伍已经报名， 申请加入队伍，批准申请的时候如果队伍已经报名，报这个错
    /// </summary>
    TeamHasSignUp = 9517,
    /// <summary>
    ///队伍已经满员
    /// </summary>
    TeamMemsFull = 9518,
    /// <summary>
    ///重复购买
    /// </summary>
    ErrorTdRepeatedBuy = 9530,
  }

  #endregion

  #region Messages
  public sealed class PKTeamRole : pb::IMessage {
    private static readonly pb::MessageParser<PKTeamRole> _parser = new pb::MessageParser<PKTeamRole>(() => new PKTeamRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKTeamRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rolePower" field.</summary>
    public const int RolePowerFieldNumber = 3;
    private uint rolePower_;
    /// <summary>
    ///人物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RolePower {
      get { return rolePower_; }
      set {
        rolePower_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private uint power_;
    /// <summary>
    ///综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 5;
    private uint job_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 7;
    private uint serverId_;
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
      if (RolePower != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RolePower);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Power);
      }
      if (Job != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Job);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (ServerId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ServerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (RolePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RolePower);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Job);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
          case 24: {
            RolePower = input.ReadUInt32();
            break;
          }
          case 32: {
            Power = input.ReadUInt32();
            break;
          }
          case 40: {
            Job = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            ServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍对象 详细的
  /// </summary>
  public sealed class PKTeam : pb::IMessage {
    private static readonly pb::MessageParser<PKTeam> _parser = new pb::MessageParser<PKTeam>(() => new PKTeam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKTeam> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private uint teamId_;
    /// <summary>
    ///队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private pb::ByteString teamName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamAnnounce" field.</summary>
    public const int TeamAnnounceFieldNumber = 3;
    private pb::ByteString teamAnnounce_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamAnnounce {
      get { return teamAnnounce_; }
      set {
        teamAnnounce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.PKTeamRole> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.PKTeamRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.PKTeamRole> mems_ = new pbc::RepeatedField<global::Packet.PKTeamRole>();
    /// <summary>
    ///第一个位置的就是队长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PKTeamRole> Mems {
      get { return mems_; }
    }

    /// <summary>Field number for the "applyRoles" field.</summary>
    public const int ApplyRolesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.PKTeamRole> _repeated_applyRoles_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.PKTeamRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.PKTeamRole> applyRoles_ = new pbc::RepeatedField<global::Packet.PKTeamRole>();
    /// <summary>
    ///不知道队员需要这个列表，如果不需要就不发了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PKTeamRole> ApplyRoles {
      get { return applyRoles_; }
    }

    /// <summary>Field number for the "hasSignUp" field.</summary>
    public const int HasSignUpFieldNumber = 6;
    private bool hasSignUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignUp {
      get { return hasSignUp_; }
      set {
        hasSignUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamAnnounce);
      }
      mems_.WriteTo(output, _repeated_mems_codec);
      applyRoles_.WriteTo(output, _repeated_applyRoles_codec);
      if (HasSignUp != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasSignUp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamAnnounce);
      }
      size += mems_.CalculateSize(_repeated_mems_codec);
      size += applyRoles_.CalculateSize(_repeated_applyRoles_codec);
      if (HasSignUp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 18: {
            TeamName = input.ReadBytes();
            break;
          }
          case 26: {
            TeamAnnounce = input.ReadBytes();
            break;
          }
          case 34: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
          case 42: {
            applyRoles_.AddEntriesFrom(input, _repeated_applyRoles_codec);
            break;
          }
          case 48: {
            HasSignUp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class SimplePKTeam : pb::IMessage {
    private static readonly pb::MessageParser<SimplePKTeam> _parser = new pb::MessageParser<SimplePKTeam>(() => new SimplePKTeam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimplePKTeam> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private uint teamId_;
    /// <summary>
    ///队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private pb::ByteString teamName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamAnnounce" field.</summary>
    public const int TeamAnnounceFieldNumber = 3;
    private pb::ByteString teamAnnounce_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamAnnounce {
      get { return teamAnnounce_; }
      set {
        teamAnnounce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 4;
    private pb::ByteString leaderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private uint power_;
    /// <summary>
    ///队伍平均评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "memNum" field.</summary>
    public const int MemNumFieldNumber = 6;
    private uint memNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemNum {
      get { return memNum_; }
      set {
        memNum_ = value;
      }
    }

    /// <summary>Field number for the "hasSignUp" field.</summary>
    public const int HasSignUpFieldNumber = 7;
    private bool hasSignUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignUp {
      get { return hasSignUp_; }
      set {
        hasSignUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamAnnounce);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(LeaderName);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Power);
      }
      if (MemNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MemNum);
      }
      if (HasSignUp != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasSignUp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamAnnounce);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderName);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (MemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemNum);
      }
      if (HasSignUp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 18: {
            TeamName = input.ReadBytes();
            break;
          }
          case 26: {
            TeamAnnounce = input.ReadBytes();
            break;
          }
          case 34: {
            LeaderName = input.ReadBytes();
            break;
          }
          case 40: {
            Power = input.ReadUInt32();
            break;
          }
          case 48: {
            MemNum = input.ReadUInt32();
            break;
          }
          case 56: {
            HasSignUp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteSignUpReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteSignUpReq> _parser = new pb::MessageParser<PKCompeteSignUpReq>(() => new PKCompeteSignUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteSignUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "signup" field.</summary>
    public const int SignupFieldNumber = 2;
    private bool signup_;
    /// <summary>
    /// true 报名， false取消报名，为了防止前后端不一致还是发过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Signup {
      get { return signup_; }
      set {
        signup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signup != false) {
        output.WriteRawTag(16);
        output.WriteBool(Signup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signup != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Signup = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteSignUpRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteSignUpRes> _parser = new pb::MessageParser<PKCompeteSignUpRes>(() => new PKCompeteSignUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteSignUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    ///0 成功 1 报名队伍数已满 2 人数不够
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "signup" field.</summary>
    public const int SignupFieldNumber = 2;
    private bool signup_;
    /// <summary>
    /// true 报名， false取消报名，为了防止前后端不一致还是发过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Signup {
      get { return signup_; }
      set {
        signup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
      if (Signup != false) {
        output.WriteRawTag(16);
        output.WriteBool(Signup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (Signup != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
          case 16: {
            Signup = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分页请求
  /// </summary>
  public sealed class PKCompeteTeamListReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteTeamListReq> _parser = new pb::MessageParser<PKCompeteTeamListReq>(() => new PKCompeteTeamListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteTeamListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "pageNum" field.</summary>
    public const int PageNumFieldNumber = 1;
    private uint pageNum_;
    /// <summary>
    ///0，1，2，3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { return pageNum_; }
      set {
        pageNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PageNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteTeamListRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteTeamListRes> _parser = new pb::MessageParser<PKCompeteTeamListRes>(() => new PKCompeteTeamListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteTeamListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pageNum" field.</summary>
    public const int PageNumFieldNumber = 1;
    private uint pageNum_;
    /// <summary>
    ///0,1,2,3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { return pageNum_; }
      set {
        pageNum_ = value;
      }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 2;
    private uint totalPages_;
    /// <summary>
    ///一共多少页
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.SimplePKTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.SimplePKTeam.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimplePKTeam> teams_ = new pbc::RepeatedField<global::Packet.SimplePKTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimplePKTeam> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PageNum);
      }
      if (TotalPages != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalPages);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPages);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageNum = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalPages = input.ReadUInt32();
            break;
          }
          case 26: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteApplyReq> _parser = new pb::MessageParser<PKCompeteApplyReq>(() => new PKCompeteApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteApplyRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteApplyRes> _parser = new pb::MessageParser<PKCompeteApplyRes>(() => new PKCompeteApplyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteApplyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    ///0 成功 1 已经申请过别的队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "myteam" field.</summary>
    public const int MyteamFieldNumber = 2;
    private global::Packet.PKTeam myteam_;
    /// <summary>
    ///如果申请成功或者已经有对申请的队伍 返回这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PKTeam Myteam {
      get { return myteam_; }
      set {
        myteam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
      if (myteam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Myteam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (myteam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Myteam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
          case 18: {
            if (myteam_ == null) {
              myteam_ = new global::Packet.PKTeam();
            }
            input.ReadMessage(myteam_);
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteCreateTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteCreateTeamReq> _parser = new pb::MessageParser<PKCompeteCreateTeamReq>(() => new PKCompeteCreateTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteCreateTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamName" field.</summary>
    public const int TeamNameFieldNumber = 1;
    private pb::ByteString teamName_ = pb::ByteString.Empty;
    /// <summary>
    ///队伍名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamAnnounce" field.</summary>
    public const int TeamAnnounceFieldNumber = 2;
    private pb::ByteString teamAnnounce_ = pb::ByteString.Empty;
    /// <summary>
    ///队伍宣言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamAnnounce {
      get { return teamAnnounce_; }
      set {
        teamAnnounce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TeamAnnounce);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamName);
      }
      if (TeamAnnounce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamAnnounce);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TeamName = input.ReadBytes();
            break;
          }
          case 18: {
            TeamAnnounce = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteCancelApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteCancelApplyReq> _parser = new pb::MessageParser<PKCompeteCancelApplyReq>(() => new PKCompeteCancelApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteCancelApplyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class PKCompeteCancelApplyRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteCancelApplyRes> _parser = new pb::MessageParser<PKCompeteCancelApplyRes>(() => new PKCompeteCancelApplyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteCancelApplyRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class PKCompeteHandleApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteHandleApplyReq> _parser = new pb::MessageParser<PKCompeteHandleApplyReq>(() => new PKCompeteHandleApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteHandleApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyRoleId" field.</summary>
    public const int ApplyRoleIdFieldNumber = 1;
    private ulong applyRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApplyRoleId {
      get { return applyRoleId_; }
      set {
        applyRoleId_ = value;
      }
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 2;
    private bool agree_;
    /// <summary>
    ///true 同意 false 不同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ApplyRoleId);
      }
      if (Agree != false) {
        output.WriteRawTag(16);
        output.WriteBool(Agree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplyRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApplyRoleId);
      }
      if (Agree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyRoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteHandleApplyRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteHandleApplyRes> _parser = new pb::MessageParser<PKCompeteHandleApplyRes>(() => new PKCompeteHandleApplyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteHandleApplyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyRoleId" field.</summary>
    public const int ApplyRoleIdFieldNumber = 1;
    private ulong applyRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApplyRoleId {
      get { return applyRoleId_; }
      set {
        applyRoleId_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private uint ret_;
    /// <summary>
    ///0 成功 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ApplyRoleId);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplyRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApplyRoleId);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyRoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteInfoReq> _parser = new pb::MessageParser<PKCompeteInfoReq>(() => new PKCompeteInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///这个作弊没意义 客户端发过来 自己的roleid 自己的level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteInfoRes> _parser = new pb::MessageParser<PKCompeteInfoRes>(() => new PKCompeteInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "signupnums" field.</summary>
    public const int SignupnumsFieldNumber = 1;
    private uint signupnums_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Signupnums {
      get { return signupnums_; }
      set {
        signupnums_ = value;
      }
    }

    /// <summary>Field number for the "myteam" field.</summary>
    public const int MyteamFieldNumber = 2;
    private global::Packet.PKTeam myteam_;
    /// <summary>
    ///自己的队伍信息，客户端判断一下这个对象，如果没有就使用下边队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PKTeam Myteam {
      get { return myteam_; }
      set {
        myteam_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.SimplePKTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.SimplePKTeam.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimplePKTeam> teams_ = new pbc::RepeatedField<global::Packet.SimplePKTeam>();
    /// <summary>
    ///跟上边的字段互斥
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimplePKTeam> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "totalPages" field.</summary>
    public const int TotalPagesFieldNumber = 4;
    private uint totalPages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPages {
      get { return totalPages_; }
      set {
        totalPages_ = value;
      }
    }

    /// <summary>Field number for the "pageNum" field.</summary>
    public const int PageNumFieldNumber = 5;
    private uint pageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { return pageNum_; }
      set {
        pageNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signupnums != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Signupnums);
      }
      if (myteam_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Myteam);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      if (TotalPages != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalPages);
      }
      if (PageNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PageNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signupnums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Signupnums);
      }
      if (myteam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Myteam);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      if (TotalPages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPages);
      }
      if (PageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Signupnums = input.ReadUInt32();
            break;
          }
          case 18: {
            if (myteam_ == null) {
              myteam_ = new global::Packet.PKTeam();
            }
            input.ReadMessage(myteam_);
            break;
          }
          case 26: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 32: {
            TotalPages = input.ReadUInt32();
            break;
          }
          case 40: {
            PageNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteDisbandReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteDisbandReq> _parser = new pb::MessageParser<PKCompeteDisbandReq>(() => new PKCompeteDisbandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteDisbandReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class PKCompeteSearchReq : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteSearchReq> _parser = new pb::MessageParser<PKCompeteSearchReq>(() => new PKCompeteSearchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteSearchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PKCompeteSearchRes : pb::IMessage {
    private static readonly pb::MessageParser<PKCompeteSearchRes> _parser = new pb::MessageParser<PKCompeteSearchRes>(() => new PKCompeteSearchRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKCompeteSearchRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private global::Packet.SimplePKTeam team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SimplePKTeam Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (team_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Team);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (team_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (team_ == null) {
              team_ = new global::Packet.SimplePKTeam();
            }
            input.ReadMessage(team_);
            break;
          }
        }
      }
    }

  }

  public sealed class TreasureDrawInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<TreasureDrawInfoNtf> _parser = new pb::MessageParser<TreasureDrawInfoNtf>(() => new TreasureDrawInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureDrawInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasBuyId" field.</summary>
    public const int HasBuyIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_hasBuyId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> hasBuyId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已经购买的id 夺宝奇兵表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HasBuyId {
      get { return hasBuyId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hasBuyId_.WriteTo(output, _repeated_hasBuyId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hasBuyId_.CalculateSize(_repeated_hasBuyId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            hasBuyId_.AddEntriesFrom(input, _repeated_hasBuyId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TreasureDrawBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<TreasureDrawBuyReq> _parser = new pb::MessageParser<TreasureDrawBuyReq>(() => new TreasureDrawBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureDrawBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "drawId" field.</summary>
    public const int DrawIdFieldNumber = 1;
    private uint drawId_;
    /// <summary>
    ///夺宝奇兵表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrawId {
      get { return drawId_; }
      set {
        drawId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DrawId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TreasureDrawBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<TreasureDrawBuyRes> _parser = new pb::MessageParser<TreasureDrawBuyRes>(() => new TreasureDrawBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureDrawBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "drawId" field.</summary>
    public const int DrawIdFieldNumber = 1;
    private uint drawId_;
    /// <summary>
    ///夺宝奇兵表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrawId {
      get { return drawId_; }
      set {
        drawId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DrawId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
