// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlepass.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 6800+
  /// </summary>
  public enum CmdBattlePass {
    None = 0,
    /// <summary>
    ///领取战令升级奖励
    /// </summary>
    GetBplawardReq = 6801,
    GetBplawardRes = 6802,
    /// <summary>
    ///领取战令升级全部奖励(一键领取)
    /// </summary>
    GetBplallAwardReq = 6803,
    GetBplallAwardRes = 6804,
    /// <summary>
    ///购买付费战令
    /// </summary>
    BuyBattlePassReq = 6805,
    BuyBattlePassRes = 6806,
    /// <summary>
    ///购买战令等级
    /// </summary>
    BuyBattlePassLevelReq = 6807,
    BuyBattlePassLevelRes = 6808,
    /// <summary>
    ///领取战令任务奖励
    /// </summary>
    GetBptawardReq = 6809,
    GetBptawardRes = 6810,
    /// <summary>
    ///领取战令任务所有奖励(一键领取)
    /// </summary>
    GetBptallAwardReq = 6811,
    GetBptallAwardRes = 6812,
    /// <summary>
    ///获取任务信息
    /// </summary>
    GetTasksInfoReq = 6813,
    GetTasksInfoRes = 6814,
    /// <summary>
    ///获取战令信息
    /// </summary>
    GetBattlePassInfoReq = 6815,
    GetBattlePassInfoRes = 6816,
    /// <summary>
    ///活动开启或者关闭
    /// </summary>
    OnOffNtf = 6830,
    /// <summary>
    ///战令等级与经验通知
    /// </summary>
    ExpNtf = 6831,
    /// <summary>
    ///重置战令任务（暂时不用）
    /// </summary>
    ResetTasksNtf = 6832,
    /// <summary>
    ///王国战令信息通知(进入游戏)
    /// </summary>
    InfoNtf = 6833,
    /// <summary>
    ///战令任务进度通知(暂时不用)
    /// </summary>
    TaskProcessNtf = 6834,
    /// <summary>
    ///红点提示通知(用作战令入口红点提示)
    /// </summary>
    RedTipsNtf = 6835,
  }

  public enum ErrorBattlePass {
    None = 0,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 6801,
    /// <summary>
    ///战令升级奖励已被领取
    /// </summary>
    AwardGeted = 6802,
    /// <summary>
    ///战令升级奖励领取 战令等级不满足
    /// </summary>
    LevelNotMeet = 6803,
    /// <summary>
    ///战令升级奖励领取失败
    /// </summary>
    GetLevelAward = 6804,
    /// <summary>
    ///战令活动未开启
    /// </summary>
    ActiveNoOpen = 6805,
    /// <summary>
    ///已经购买战力了
    /// </summary>
    HavedBuyToken = 6806,
    /// <summary>
    ///战令等级购买 购买等级不满足要求
    /// </summary>
    LevelBuyLevelNotMeet = 6807,
    /// <summary>
    ///购买魔币不足
    /// </summary>
    DiamondNotEnough = 6808,
    /// <summary>
    ///扣除魔币失败
    /// </summary>
    CostDiamond = 6809,
    /// <summary>
    ///付费战令奖励领取失败
    /// </summary>
    PayTokenGetAward = 6810,
    /// <summary>
    ///没有此战令任务
    /// </summary>
    NoTask = 6811,
    /// <summary>
    ///此战令任务没有完成
    /// </summary>
    TaskNotComplete = 6812,
    /// <summary>
    ///战令任务奖励已经被领取了
    /// </summary>
    TaskAwardGeted = 6813,
    /// <summary>
    ///战令等级升级失败
    /// </summary>
    UpdateLevel = 6814,
    /// <summary>
    ///参加战令活动玩家等级不满足
    /// </summary>
    MinRoleLevel = 6815,
  }

  /// <summary>
  ///战令奖励状态
  /// </summary>
  public enum BattlePassTaskAwardStatus {
    None = 0,
    /// <summary>
    ///未领取
    /// </summary>
    NoGet = 1,
    /// <summary>
    ///已领取
    /// </summary>
    Get = 2,
  }

  /// <summary>
  ///战令类型
  /// </summary>
  public enum BattlePassType {
    /// <summary>
    ///无战令 免费玩家
    /// </summary>
    None = 0,
    /// <summary>
    ///基础战令
    /// </summary>
    Common = 1,
    /// <summary>
    ///进阶战令
    /// </summary>
    Advance = 2,
  }

  /// <summary>
  ///战令任务类型 如果请求多种类型 请安bit位操作进行
  /// </summary>
  public enum BattlePassTaskType {
    /// <summary>
    /// </summary>
    None = 0,
    /// <summary>
    ///日常任务类型
    /// </summary>
    Daily = 1,
    /// <summary>
    ///周常任务类型
    /// </summary>
    Weekly = 2,
    /// <summary>
    ///赛季任务类型
    /// </summary>
    Season = 4,
  }

  /// <summary>
  ///activereason
  /// </summary>
  public enum BattlePassActiveReason {
    None = 0,
    /// <summary>
    ///战令升级奖励
    /// </summary>
    LevelUpdateAward = 6800,
    /// <summary>
    ///购买战令等级
    /// </summary>
    BuyLevelUp = 6801,
    /// <summary>
    ///购买付费战令
    /// </summary>
    BuyPayToken = 6802,
  }

  #endregion

  #region Messages
  /// <summary>
  ///战令任务信息
  /// </summary>
  public sealed class BattlePassTask : pb::IMessage {
    private static readonly pb::MessageParser<BattlePassTask> _parser = new pb::MessageParser<BattlePassTask>(() => new BattlePassTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePassTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///战令任务库表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///当前战令任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private uint status_;
    /// <summary>
    ///战令任务奖励状态 CmdBattlePassTaskAwardStatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战令等级领取信息
  /// </summary>
  public sealed class LevelAward : pb::IMessage {
    private static readonly pb::MessageParser<LevelAward> _parser = new pb::MessageParser<LevelAward>(() => new LevelAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///战令升级奖励表id 已废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 2;
    private uint common_;
    /// <summary>
    ///普通奖励 1 已领取 0 为领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private uint token_;
    /// <summary>
    ///付费奖励 1 已领取 0 为领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    ///战令等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Common != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Common);
      }
      if (Token != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Token);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Common != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Common);
      }
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Common = input.ReadUInt32();
            break;
          }
          case 24: {
            Token = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取战令升级奖励
  /// </summary>
  public sealed class CmdBattlePassGetBPLAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPLAwardReq> _parser = new pb::MessageParser<CmdBattlePassGetBPLAwardReq>(() => new CmdBattlePassGetBPLAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPLAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///战令等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetBPLAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPLAwardRes> _parser = new pb::MessageParser<CmdBattlePassGetBPLAwardRes>(() => new CmdBattlePassGetBPLAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPLAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///战令等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取战令升级全部奖励(一键领取)
  /// </summary>
  public sealed class CmdBattlePassGetBPLAllAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPLAllAwardReq> _parser = new pb::MessageParser<CmdBattlePassGetBPLAllAwardReq>(() => new CmdBattlePassGetBPLAllAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPLAllAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetBPLAllAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPLAllAwardRes> _parser = new pb::MessageParser<CmdBattlePassGetBPLAllAwardRes>(() => new CmdBattlePassGetBPLAllAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPLAllAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    /// 活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买付费战令
  /// </summary>
  public sealed class CmdBattlePassBuyBattlePassReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassBuyBattlePassReq> _parser = new pb::MessageParser<CmdBattlePassBuyBattlePassReq>(() => new CmdBattlePassBuyBattlePassReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassBuyBattlePassReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id 做验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 1表示基础战令 2表示进阶战令 BattlePassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassBuyBattlePassRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassBuyBattlePassRes> _parser = new pb::MessageParser<CmdBattlePassBuyBattlePassRes>(() => new CmdBattlePassBuyBattlePassRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassBuyBattlePassRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id 做验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 1表示基础战令 2表示进阶战令 BattlePassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买战令等级
  /// </summary>
  public sealed class CmdBattlePassBuyBattlePassLevelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassBuyBattlePassLevelReq> _parser = new pb::MessageParser<CmdBattlePassBuyBattlePassLevelReq>(() => new CmdBattlePassBuyBattlePassLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassBuyBattlePassLevelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///购买的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassBuyBattlePassLevelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassBuyBattlePassLevelRes> _parser = new pb::MessageParser<CmdBattlePassBuyBattlePassLevelRes>(() => new CmdBattlePassBuyBattlePassLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassBuyBattlePassLevelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "curLevel" field.</summary>
    public const int CurLevelFieldNumber = 1;
    private uint curLevel_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurLevel {
      get { return curLevel_; }
      set {
        curLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurLevel);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (CurLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取战令任务奖励
  /// </summary>
  public sealed class CmdBattlePassGetBPTAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPTAwardReq> _parser = new pb::MessageParser<CmdBattlePassGetBPTAwardReq>(() => new CmdBattlePassGetBPTAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPTAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 3;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///战令任务库表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///1 日常任务 2 周常任务 BattlePassTaskType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetBPTAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPTAwardRes> _parser = new pb::MessageParser<CmdBattlePassGetBPTAwardRes>(() => new CmdBattlePassGetBPTAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPTAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 3;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///战令任务库表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///1 日常任务 2 周常任务 BattlePassTaskType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取战令任务所有奖励(一键领取)
  /// </summary>
  public sealed class CmdBattlePassGetBPTAllAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPTAllAwardReq> _parser = new pb::MessageParser<CmdBattlePassGetBPTAllAwardReq>(() => new CmdBattlePassGetBPTAllAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPTAllAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetBPTAllAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBPTAllAwardRes> _parser = new pb::MessageParser<CmdBattlePassGetBPTAllAwardRes>(() => new CmdBattlePassGetBPTAllAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBPTAllAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取战令任务信息
  /// </summary>
  public sealed class CmdBattlePassGetTasksInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetTasksInfoReq> _parser = new pb::MessageParser<CmdBattlePassGetTasksInfoReq>(() => new CmdBattlePassGetTasksInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetTasksInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///请求任务类型 BattlePassTaskType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetTasksInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetTasksInfoRes> _parser = new pb::MessageParser<CmdBattlePassGetTasksInfoRes>(() => new CmdBattlePassGetTasksInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetTasksInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "dailyTasks" field.</summary>
    public const int DailyTasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_dailyTasks_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> dailyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///日常任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> DailyTasks {
      get { return dailyTasks_; }
    }

    /// <summary>Field number for the "weeklyTasks" field.</summary>
    public const int WeeklyTasksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_weeklyTasks_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> weeklyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///周常日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> WeeklyTasks {
      get { return weeklyTasks_; }
    }

    /// <summary>Field number for the "seasonTasks" field.</summary>
    public const int SeasonTasksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_seasonTasks_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> seasonTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///赛季任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> SeasonTasks {
      get { return seasonTasks_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 3;
    private uint refreshTime_;
    /// <summary>
    ///本次任务刷新时间(日常每日凌晨5点 周常每周一5点 这个刷新时间用日常的刷新时间就行)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dailyTasks_.WriteTo(output, _repeated_dailyTasks_codec);
      weeklyTasks_.WriteTo(output, _repeated_weeklyTasks_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RefreshTime);
      }
      seasonTasks_.WriteTo(output, _repeated_seasonTasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyTasks_.CalculateSize(_repeated_dailyTasks_codec);
      size += weeklyTasks_.CalculateSize(_repeated_weeklyTasks_codec);
      size += seasonTasks_.CalculateSize(_repeated_seasonTasks_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dailyTasks_.AddEntriesFrom(input, _repeated_dailyTasks_codec);
            break;
          }
          case 18: {
            weeklyTasks_.AddEntriesFrom(input, _repeated_weeklyTasks_codec);
            break;
          }
          case 24: {
            RefreshTime = input.ReadUInt32();
            break;
          }
          case 34: {
            seasonTasks_.AddEntriesFrom(input, _repeated_seasonTasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取战令信息
  /// </summary>
  public sealed class CmdBattlePassGetBattlePassInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBattlePassInfoReq> _parser = new pb::MessageParser<CmdBattlePassGetBattlePassInfoReq>(() => new CmdBattlePassGetBattlePassInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBattlePassInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///请求任务类型 BattlePassTaskType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePassGetBattlePassInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassGetBattlePassInfoRes> _parser = new pb::MessageParser<CmdBattlePassGetBattlePassInfoRes>(() => new CmdBattlePassGetBattlePassInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassGetBattlePassInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "battlePassType" field.</summary>
    public const int BattlePassTypeFieldNumber = 3;
    private uint battlePassType_;
    /// <summary>
    ///战令类型 CmdBattlePassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattlePassType {
      get { return battlePassType_; }
      set {
        battlePassType_ = value;
      }
    }

    /// <summary>Field number for the "awardList" field.</summary>
    public const int AwardListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.LevelAward> _repeated_awardList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.LevelAward.Parser);
    private readonly pbc::RepeatedField<global::Packet.LevelAward> awardList_ = new pbc::RepeatedField<global::Packet.LevelAward>();
    /// <summary>
    ///奖励信息 注意:这里只填充未全部领取奖励的任务信息且大于玩家战令等级的任务除外, 控制传输的数据量(战令等级可能比较多)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.LevelAward> AwardList {
      get { return awardList_; }
    }

    /// <summary>Field number for the "dailyTasks" field.</summary>
    public const int DailyTasksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_dailyTasks_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> dailyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///日常任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> DailyTasks {
      get { return dailyTasks_; }
    }

    /// <summary>Field number for the "weeklyTasks" field.</summary>
    public const int WeeklyTasksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_weeklyTasks_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> weeklyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///周常日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> WeeklyTasks {
      get { return weeklyTasks_; }
    }

    /// <summary>Field number for the "seasonTasks" field.</summary>
    public const int SeasonTasksFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_seasonTasks_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> seasonTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///赛季任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> SeasonTasks {
      get { return seasonTasks_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 7;
    private uint refreshTime_;
    /// <summary>
    ///本次任务刷新时间(日常每日凌晨5点 周常每周一5点 这个刷新时间用日常的刷新时间就行)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 9;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (BattlePassType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BattlePassType);
      }
      awardList_.WriteTo(output, _repeated_awardList_codec);
      dailyTasks_.WriteTo(output, _repeated_dailyTasks_codec);
      weeklyTasks_.WriteTo(output, _repeated_weeklyTasks_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RefreshTime);
      }
      seasonTasks_.WriteTo(output, _repeated_seasonTasks_codec);
      if (ActivityId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (BattlePassType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattlePassType);
      }
      size += awardList_.CalculateSize(_repeated_awardList_codec);
      size += dailyTasks_.CalculateSize(_repeated_dailyTasks_codec);
      size += weeklyTasks_.CalculateSize(_repeated_weeklyTasks_codec);
      size += seasonTasks_.CalculateSize(_repeated_seasonTasks_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            BattlePassType = input.ReadUInt32();
            break;
          }
          case 34: {
            awardList_.AddEntriesFrom(input, _repeated_awardList_codec);
            break;
          }
          case 42: {
            dailyTasks_.AddEntriesFrom(input, _repeated_dailyTasks_codec);
            break;
          }
          case 50: {
            weeklyTasks_.AddEntriesFrom(input, _repeated_weeklyTasks_codec);
            break;
          }
          case 56: {
            RefreshTime = input.ReadUInt32();
            break;
          }
          case 66: {
            seasonTasks_.AddEntriesFrom(input, _repeated_seasonTasks_codec);
            break;
          }
          case 72: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动开启与关闭
  /// </summary>
  public sealed class CmdBattlePassOnOffNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassOnOffNtf> _parser = new pb::MessageParser<CmdBattlePassOnOffNtf>(() => new CmdBattlePassOnOffNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassOnOffNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private uint startTime_;
    /// <summary>
    ///开启时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private uint endTime_;
    /// <summary>
    ///关闭时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "minLevel" field.</summary>
    public const int MinLevelFieldNumber = 3;
    private uint minLevel_;
    /// <summary>
    ///活动参与的最小等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 5;
    private uint rate_;
    /// <summary>
    ///领取战令任务经验的倍率(千分比)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTime);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinLevel);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActivityId);
      }
      if (Rate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLevel);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 24: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 40: {
            Rate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战令等级与经验通知
  /// </summary>
  public sealed class CmdBattlePassExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassExpNtf> _parser = new pb::MessageParser<CmdBattlePassExpNtf>(() => new CmdBattlePassExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///1表示购买付费战令导致的等级升级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 32: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时间点重置战令任务通知 暂时不用
  /// </summary>
  public sealed class CmdBattlePassResetTasksNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassResetTasksNtf> _parser = new pb::MessageParser<CmdBattlePassResetTasksNtf>(() => new CmdBattlePassResetTasksNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassResetTasksNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dailyTasks" field.</summary>
    public const int DailyTasksFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_dailyTasks_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> dailyTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///日常任务(包括固定 + 随机)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DailyTasks {
      get { return dailyTasks_; }
    }

    /// <summary>Field number for the "weeklyTasks" field.</summary>
    public const int WeeklyTasksFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_weeklyTasks_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> weeklyTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///周常任务(包括固定 + 随机)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> WeeklyTasks {
      get { return weeklyTasks_; }
    }

    /// <summary>Field number for the "seasonTasks" field.</summary>
    public const int SeasonTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_seasonTasks_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> seasonTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///赛季任务(包括固定 + 随机)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SeasonTasks {
      get { return seasonTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dailyTasks_.WriteTo(output, _repeated_dailyTasks_codec);
      weeklyTasks_.WriteTo(output, _repeated_weeklyTasks_codec);
      seasonTasks_.WriteTo(output, _repeated_seasonTasks_codec);
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += dailyTasks_.CalculateSize(_repeated_dailyTasks_codec);
      size += weeklyTasks_.CalculateSize(_repeated_weeklyTasks_codec);
      size += seasonTasks_.CalculateSize(_repeated_seasonTasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dailyTasks_.AddEntriesFrom(input, _repeated_dailyTasks_codec);
            break;
          }
          case 18:
          case 16: {
            weeklyTasks_.AddEntriesFrom(input, _repeated_weeklyTasks_codec);
            break;
          }
          case 26:
          case 24: {
            seasonTasks_.AddEntriesFrom(input, _repeated_seasonTasks_codec);
            break;
          }
          case 32: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战令任务进度通知 暂时不用
  /// </summary>
  public sealed class CmdBattlePassTaskProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassTaskProcessNtf> _parser = new pb::MessageParser<CmdBattlePassTaskProcessNtf>(() => new CmdBattlePassTaskProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassTaskProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "dailyTasks" field.</summary>
    public const int DailyTasksFieldNumber = 1;
    private global::Packet.BattlePassTask dailyTasks_;
    /// <summary>
    ///日常任务 这个协议不填充status字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePassTask DailyTasks {
      get { return dailyTasks_; }
      set {
        dailyTasks_ = value;
      }
    }

    /// <summary>Field number for the "weeklyTasks" field.</summary>
    public const int WeeklyTasksFieldNumber = 2;
    private global::Packet.BattlePassTask weeklyTasks_;
    /// <summary>
    ///周常任务 这个协议不填充status字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePassTask WeeklyTasks {
      get { return weeklyTasks_; }
      set {
        weeklyTasks_ = value;
      }
    }

    /// <summary>Field number for the "seasonTasks" field.</summary>
    public const int SeasonTasksFieldNumber = 3;
    private global::Packet.BattlePassTask seasonTasks_;
    /// <summary>
    ///赛季任务 这个协议不填充status字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePassTask SeasonTasks {
      get { return seasonTasks_; }
      set {
        seasonTasks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyTasks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyTasks);
      }
      if (weeklyTasks_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WeeklyTasks);
      }
      if (seasonTasks_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SeasonTasks);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (dailyTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTasks);
      }
      if (weeklyTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeeklyTasks);
      }
      if (seasonTasks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeasonTasks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dailyTasks_ == null) {
              dailyTasks_ = new global::Packet.BattlePassTask();
            }
            input.ReadMessage(dailyTasks_);
            break;
          }
          case 18: {
            if (weeklyTasks_ == null) {
              weeklyTasks_ = new global::Packet.BattlePassTask();
            }
            input.ReadMessage(weeklyTasks_);
            break;
          }
          case 26: {
            if (seasonTasks_ == null) {
              seasonTasks_ = new global::Packet.BattlePassTask();
            }
            input.ReadMessage(seasonTasks_);
            break;
          }
          case 32: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///红点提示通知(用作战令入口红点提示)
  /// </summary>
  public sealed class CmdBattlePassRedTipsNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassRedTipsNtf> _parser = new pb::MessageParser<CmdBattlePassRedTipsNtf>(() => new CmdBattlePassRedTipsNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassRedTipsNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "tipInfos" field.</summary>
    public const int TipInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdBattlePassRedTipsNtf.Types.TipsInfo> _repeated_tipInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdBattlePassRedTipsNtf.Types.TipsInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdBattlePassRedTipsNtf.Types.TipsInfo> tipInfos_ = new pbc::RepeatedField<global::Packet.CmdBattlePassRedTipsNtf.Types.TipsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdBattlePassRedTipsNtf.Types.TipsInfo> TipInfos {
      get { return tipInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tipInfos_.WriteTo(output, _repeated_tipInfos_codec);
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += tipInfos_.CalculateSize(_repeated_tipInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tipInfos_.AddEntriesFrom(input, _repeated_tipInfos_codec);
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdBattlePassRedTipsNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class TipsInfo : pb::IMessage {
        private static readonly pb::MessageParser<TipsInfo> _parser = new pb::MessageParser<TipsInfo>(() => new TipsInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TipsInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "taskId" field.</summary>
        public const int TaskIdFieldNumber = 1;
        private uint taskId_;
        /// <summary>
        ///战令任务库表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TaskId {
          get { return taskId_; }
          set {
            taskId_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private uint type_;
        /// <summary>
        ///1 日常任务 2 周常任务 BattlePassTaskType
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TaskId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(TaskId);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Type);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TaskId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TaskId = input.ReadUInt32();
                break;
              }
              case 16: {
                Type = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///王国战令信息通知(进入游戏)
  /// </summary>
  public sealed class CmdBattlePassInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePassInfoNtf> _parser = new pb::MessageParser<CmdBattlePassInfoNtf>(() => new CmdBattlePassInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePassInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "battlePassType" field.</summary>
    public const int BattlePassTypeFieldNumber = 3;
    private uint battlePassType_;
    /// <summary>
    ///战令类型 CmdBattlePassType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattlePassType {
      get { return battlePassType_; }
      set {
        battlePassType_ = value;
      }
    }

    /// <summary>Field number for the "awardList" field.</summary>
    public const int AwardListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.LevelAward> _repeated_awardList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.LevelAward.Parser);
    private readonly pbc::RepeatedField<global::Packet.LevelAward> awardList_ = new pbc::RepeatedField<global::Packet.LevelAward>();
    /// <summary>
    ///奖励信息 注意:这里只填充未全部领取奖励的任务信息且大于玩家战令等级的任务除外, 控制传输的数据量(战令等级可能比较多)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.LevelAward> AwardList {
      get { return awardList_; }
    }

    /// <summary>Field number for the "dailyTasks" field.</summary>
    public const int DailyTasksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_dailyTasks_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> dailyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///日常任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> DailyTasks {
      get { return dailyTasks_; }
    }

    /// <summary>Field number for the "weeklyTasks" field.</summary>
    public const int WeeklyTasksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_weeklyTasks_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> weeklyTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///周常任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> WeeklyTasks {
      get { return weeklyTasks_; }
    }

    /// <summary>Field number for the "seasonTasks" field.</summary>
    public const int SeasonTasksFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.BattlePassTask> _repeated_seasonTasks_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.BattlePassTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePassTask> seasonTasks_ = new pbc::RepeatedField<global::Packet.BattlePassTask>();
    /// <summary>
    ///赛季任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePassTask> SeasonTasks {
      get { return seasonTasks_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 7;
    private uint refreshTime_;
    /// <summary>
    ///本次任务刷新时间(日常每日凌晨5点 周常每周一5点 这个刷新时间用日常的刷新时间就行)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 9;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (BattlePassType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BattlePassType);
      }
      awardList_.WriteTo(output, _repeated_awardList_codec);
      dailyTasks_.WriteTo(output, _repeated_dailyTasks_codec);
      weeklyTasks_.WriteTo(output, _repeated_weeklyTasks_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RefreshTime);
      }
      seasonTasks_.WriteTo(output, _repeated_seasonTasks_codec);
      if (ActivityId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (BattlePassType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattlePassType);
      }
      size += awardList_.CalculateSize(_repeated_awardList_codec);
      size += dailyTasks_.CalculateSize(_repeated_dailyTasks_codec);
      size += weeklyTasks_.CalculateSize(_repeated_weeklyTasks_codec);
      size += seasonTasks_.CalculateSize(_repeated_seasonTasks_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            BattlePassType = input.ReadUInt32();
            break;
          }
          case 34: {
            awardList_.AddEntriesFrom(input, _repeated_awardList_codec);
            break;
          }
          case 42: {
            dailyTasks_.AddEntriesFrom(input, _repeated_dailyTasks_codec);
            break;
          }
          case 50: {
            weeklyTasks_.AddEntriesFrom(input, _repeated_weeklyTasks_codec);
            break;
          }
          case 56: {
            RefreshTime = input.ReadUInt32();
            break;
          }
          case 66: {
            seasonTasks_.AddEntriesFrom(input, _repeated_seasonTasks_codec);
            break;
          }
          case 72: {
            ActivityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
