// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 1800+
  /// 8200+
  /// </summary>
  public enum CmdTeam {
    None = 0,
    /// <summary>
    ///组队信息
    /// </summary>
    InfoNtf = 1800,
    /// <summary>
    ///队员信息更新
    /// </summary>
    MemInfoUpdateNtf = 1823,
    /// <summary>
    ///玩家状态通知
    /// </summary>
    MemStateNtf = 1811,
    /// <summary>
    ///申请入队请求 自由人申请入队
    /// </summary>
    ApplyReq = 1801,
    /// <summary>
    ///申请入队返回 给自由人的申请入队返回 可能不需要
    /// </summary>
    ApplyRes = 1802,
    /// <summary>
    ///申请入队通知 给队长的有人申请入队通知
    /// </summary>
    ApplyNtf = 1803,
    /// <summary>
    ///队长操作入队申请列表
    /// </summary>
    ApplyListOpReq = 1804,
    /// <summary>
    /// </summary>
    ApplyListOpRes = 1817,
    /// <summary>
    ///邀请入队请求(队长队员邀请都是这个，服务器知道谁是队长)(会尝试创队)
    /// </summary>
    InviteReq = 1805,
    /// <summary>
    ///邀请人收到协议
    /// </summary>
    InviteRes = 1818,
    /// <summary>
    ///被邀请人收到邀请入队通知
    /// </summary>
    InviteNtf = 1806,
    /// <summary>
    ///被邀请人操作
    /// </summary>
    InviteOpReq = 1807,
    /// <summary>
    ///被邀请人操作的回复
    /// </summary>
    InviteOpRes = 1834,
    /// <summary>
    ///队长收到队员邀请他人入队
    /// </summary>
    MemInviteNtf = 1808,
    /// <summary>
    ///队长收到队员邀请他人入队的反馈 同意或者拒绝(同意服务器则走邀请流程)
    /// </summary>
    MemInviteOpReq = 1809,
    /// <summary>
    ///玩家请求暂离
    /// </summary>
    MemTmpLeaveReq = 1810,
    /// <summary>
    ///队员请求归队
    /// </summary>
    MemBackReq = 1812,
    /// <summary>
    ///队长召回队员
    /// </summary>
    CallBackReq = 1837,
    /// <summary>
    ///队员收到召回通知
    /// </summary>
    CallBackNtf = 1835,
    /// <summary>
    ///队员回复召回
    /// </summary>
    CallBackOpReq = 1836,
    /// <summary>
    ///玩家请求离队
    /// </summary>
    MemLeaveReq = 1813,
    /// <summary>
    ///玩家离队通知
    /// </summary>
    MemLeaveNtf = 1814,
    /// <summary>
    ///玩家进入队伍通知
    /// </summary>
    MemEnterNtf = 1815,
    /// <summary>
    ///创建队伍请求
    /// </summary>
    CreateTeamReq = 1816,
    /// <summary>
    ///踢人 直接返回 CmdTeamMemLeaveNtf
    /// </summary>
    KickMemReq = 1819,
    /// <summary>
    ///被踢的人收到的通知
    /// </summary>
    BeKickedNtf = 1820,
    /// <summary>
    ///移交队长
    /// </summary>
    TransLeaderReq = 1821,
    /// <summary>
    ///移交队长通知 因为队员位置改了 重新发一遍队员信息
    /// </summary>
    TransLeaderNtf = 1822,
    /// <summary>
    ///申请带队
    /// </summary>
    ApplyLeadingReq = 1824,
    /// <summary>
    ///申请带队通知
    /// </summary>
    ApplyLeadingNtf = 1825,
    /// <summary>
    ///响应申请带队的操作 同意或拒绝
    /// </summary>
    ApplyLeadingOpReq = 1826,
    /// <summary>
    ///申请带队结果
    /// </summary>
    ApplyLeadingResultNtf = 1827,
    /// <summary>
    ///队长委托指挥(取消委托指挥)
    /// </summary>
    EntrustCommandReq = 1828,
    /// <summary>
    ///委托指挥更新
    /// </summary>
    EntrustCommandNtf = 1829,
    /// <summary>
    /// 登录时、恢复默认时通知预设指令数据
    /// </summary>
    CommandDataNtf = 1830,
    /// <summary>
    ///编辑指挥预设(修改，新增，删除)
    /// </summary>
    EditCommandReq = 1831,
    EditCommandRes = 1832,
    /// <summary>
    ///恢复默认指令
    /// </summary>
    ResetAllCommandReq = 1833,
    /// <summary>
    ///设置快捷指挥
    /// </summary>
    EditQuickCommandReq = 1881,
    EditQuickCommandRes = 1882,
    /// <summary>
    ///登录通知自定义目标
    /// </summary>
    CustomInfoDataNtf = 1838,
    /// <summary>
    ///更改队伍目标请求
    /// </summary>
    EditTargetReq = 1839,
    EditTargetRes = 1840,
    /// <summary>
    ///队伍目标更新广播
    /// </summary>
    TargetUpdateNtf = 1841,
    /// <summary>
    ///修改自定义目标
    /// </summary>
    EditCustomInfoReq = 1842,
    EditCustomInfoRes = 1843,
    /// <summary>
    ///修改队伍描述 
    /// </summary>
    EditDescReq = 1844,
    EditDescNtf = 1845,
    /// <summary>
    ///请求匹配操作(队长or散人)
    /// </summary>
    MatchingOpReq = 1846,
    /// <summary>
    ///匹配状态队伍广播
    /// </summary>
    MatchingNtf = 1847,
    /// <summary>
    ///请求队伍列表
    /// </summary>
    QueryMatchListReq = 1848,
    QueryMatchListRes = 1849,
    /// <summary>
    ///队长同步状态
    /// </summary>
    SyncStat = 1861,
    /// <summary>
    ///队员主动请求队长状态(用于断线重连)
    /// </summary>
    SyncGetStatReq = 1862,
    /// <summary>
    ///通知队长同步状态
    /// </summary>
    SyncGetStatNtf = 1863,
    /// <summary>
    ///同步功能组(确定队长执行的功能，对话，小游戏等)
    /// </summary>
    SyncNpcFunc = 1866,
    /// <summary>
    ///同步对话选择操作
    /// </summary>
    SyncTalkChoice = 1868,
    /// <summary>
    ///同步进入cutscene
    /// </summary>
    SyncCutScene = 1869,
    /// <summary>
    ///同步cutscene结束操作
    /// </summary>
    SyncCutSceneEnd = 1870,
    /// <summary>
    ///同步进入字幕
    /// </summary>
    SyncSubTitle = 1871,
    /// <summary>
    ///同步护镖开始
    /// </summary>
    SyncConvoyStart = 1873,
    /// <summary>
    ///同步护镖结束
    /// </summary>
    SyncConvoyEnd = 1874,
    /// <summary>
    ///同步npc跟随角色
    /// </summary>
    SyncFollowStart = 1883,
    SyncFollowEnd = 1884,
    /// <summary>
    ///同步玩家跟踪npc
    /// </summary>
    SyncTrackStart = 1885,
    SyncTrackEnd = 1886,
    /// <summary>
    ///gme通知请求
    /// </summary>
    GmenoticeReq = 1875,
    GmenoticeNtf = 1876,
    /// <summary>
    ///新密钥申请
    /// </summary>
    GmeauthReq = 1877,
    GmeauthAck = 1878,
    /// <summary>
    ///客户端进出gme房间
    /// </summary>
    GmeroomEnterExitRpt = 1879,
    /// <summary>
    ///服务器广播房间信息
    /// </summary>
    GmeroomInfoNtf = 1880,
    /// <summary>
    ///查看附近的玩家
    /// </summary>
    SearchNearRoleReq = 1887,
    SearchNearRoleRes = 1888,
    /// <summary>
    ///喊话招募
    /// </summary>
    LookForTeamReq = 1889,
    LookForTeamRes = 1890,
    /// <summary>
    ///触发切换组队目标
    /// </summary>
    TargetChangeReq = 1891,
    /// <summary>
    ///组队目标切换时通知队员
    /// </summary>
    TargetChangeNtf = 1892,
    /// <summary>
    ///更换队长时通知新队长社交破冰邀请的人员信息
    /// </summary>
    InviteSocialDataNtf = 1893,
    /// <summary>
    ///社交破冰 邀请队员加好友或家族
    /// </summary>
    InviteSocialReq = 1894,
    /// <summary>
    /// </summary>
    InviteSocialRes = 1895,
    /// <summary>
    ///调整站位顺序
    /// </summary>
    ChangeOrderReq = 1896,
    ChangeOrderNtf = 1897,
    /// <summary>
    /// 更换队长时通知队员队长的跳过按钮数据
    /// </summary>
    LeaderSkipBtnUpdateNtf = 1898,
    /// <summary>
    /// 8200+
    /// </summary>
    InviteSocialConfirmReq = 8201,
    InviteSocialConfirmRes = 8202,
  }

  public enum ErrorTeam {
    None = 0,
    /// <summary>
    ///玩家已经在队伍中
    /// </summary>
    InTeam = 1801,
    /// <summary>
    ///申请列表已经满了
    /// </summary>
    ApplyListFull = 1802,
    /// <summary>
    ///队伍不存在 可能已经解散了
    /// </summary>
    NotExist = 1803,
    /// <summary>
    ///被邀请的人不在线
    /// </summary>
    InviteRoleOffLine = 1804,
    /// <summary>
    ///邀请别人入队的人
    /// </summary>
    TeamInvitorNotInTeam = 1805,
    /// <summary>
    ///队员邀请别人入队 队长不在线
    /// </summary>
    MemInviteLeaderOffLine = 1807,
    /// <summary>
    ///目标已经在队伍
    /// </summary>
    TargetInTeam = 1808,
    /// <summary>
    ///队伍已满
    /// </summary>
    TeamIsFull = 1810,
    /// <summary>
    ///没有队伍
    /// </summary>
    NotInTeam = 1811,
    /// <summary>
    ///不是队长
    /// </summary>
    NotLeader = 1812,
    /// <summary>
    ///本服队伍已达上限
    /// </summary>
    MemoryFull = 1813,
    /// <summary>
    ///玩家不在内存中 玩家已经下线足够久了
    /// </summary>
    RoleNotExist = 1814,
    /// <summary>
    ///队长不能暂离
    /// </summary>
    LeaderCanNotTmpLeave = 1815,
    TransmemTmpLeave = 1816,
    TransmemOffline = 1817,
    /// <summary>
    ///没有队友可以移交队长
    /// </summary>
    TransButNoMember = 1818,
    /// <summary>
    ///已经处于暂离
    /// </summary>
    AlreadyTmpLeave = 1819,
    /// <summary>
    ///未暂离，不能回归、召回
    /// </summary>
    NotInTmpLeave = 1820,
    /// <summary>
    ///对方不在线
    /// </summary>
    TargetOffline = 1821,
    /// <summary>
    ///队长不能进行该操作
    /// </summary>
    LeaderIllegalOper = 1822,
    /// <summary>
    ///申请带队刚被拒绝，稍后再试
    /// </summary>
    ApplyLeadingFrequently = 1823,
    /// <summary>
    ///当前申请带队回复操作无效
    /// </summary>
    ExpiredApplyLeadingOp = 1824,
    /// <summary>
    ///自定义指令已满
    /// </summary>
    CustomCommandIsFull = 1825,
    /// <summary>
    ///自定义名称非法
    /// </summary>
    CustomCommandNameInvalid = 1826,
    /// <summary>
    ///暂时不能归队
    /// </summary>
    CannotBackTeamNow = 1827,
    /// <summary>
    ///组队目标表未找到
    /// </summary>
    TeamCsvnotFound = 1828,
    /// <summary>
    ///设置目标参数有误
    /// </summary>
    TargetParamInvalid = 1829,
    /// <summary>
    ///队伍描述非法
    /// </summary>
    TeamDescInvalid = 1830,
    /// <summary>
    ///队伍自定义目标名称非法
    /// </summary>
    TeamCustomInfoInvalid = 1831,
    /// <summary>
    ///等级不足，无法申请
    /// </summary>
    LevelNotMatch = 1832,
    /// <summary>
    ///请求队伍列表太频繁
    /// </summary>
    QueryMatchListToofrequency = 1833,
    /// <summary>
    ///该目标不能匹配
    /// </summary>
    TargetCannotMatch = 1834,
    /// <summary>
    ///正在匹配
    /// </summary>
    AlreadyMatching = 1835,
    /// <summary>
    ///匹配到了上次匹配的队伍
    /// </summary>
    MatchedTheSameTeam = 1836,
    /// <summary>
    ///自定义目标已满
    /// </summary>
    CustomTargetIsFull = 1837,
    /// <summary>
    ///不能更改默认指令
    /// </summary>
    CannotEditDefaultCommand = 1838,
    /// <summary>
    ///队长在战斗中不能归队
    /// </summary>
    LeaderInFightCannotBack = 1839,
    /// <summary>
    ///副本中不能进行该组队操作
    /// </summary>
    InvalidOperInIns = 1840,
    /// <summary>
    ///对方等级不足，无法入队
    /// </summary>
    JoinTeamLevelNotEnough = 1841,
    /// <summary>
    ///自定义名称超长
    /// </summary>
    CustomCommandNameOverLength = 1842,
    /// <summary>
    ///申请已发送，请稍后
    /// </summary>
    ApplyTeamWaittingConfirm = 1843,
    /// <summary>
    ///战斗中已经预先离队
    /// </summary>
    HadSetLeave = 1844,
    /// <summary>
    ///副本中不能创队
    /// </summary>
    InsCannotCreateTeam = 1845,
    /// <summary>
    ///该快捷按钮已设置过
    /// </summary>
    QuickCommandTagHasSet = 1846,
    /// <summary>
    ///搜索附近的角色太快
    /// </summary>
    SearchNearTooQuickly = 1847,
    /// <summary>
    ///找不到默认目标
    /// </summary>
    CannotFindDefaultTarget = 1848,
    /// <summary>
    ///邀请已过期
    /// </summary>
    InviteOverdue = 1849,
    /// <summary>
    ///当前无法入队
    /// </summary>
    CannotEnterTeam = 1850,
    /// <summary>
    ///暂时不能离队
    /// </summary>
    CannotLeaveTeamNow = 1851,
    /// <summary>
    ///ErrorTeam_CustomCannotLookForTeam = 1852;//自定义目标不能喊话招募
    /// </summary>
    LookForTeamContentInvalid = 1853,
    /// <summary>
    /// 喊话招募字符超长
    /// </summary>
    LookForTeamContentOverLength = 1854,
    /// <summary>
    ///喊话招募冷却未到
    /// </summary>
    LookForTeamCdcheckFailed = 1855,
    /// <summary>
    ///自己等级不足，无法组队
    /// </summary>
    JoinTeamSelfLevelNotEnough = 1856,
    /// <summary>
    ///战斗中不能进行该操作
    /// </summary>
    InvalidOperInFight = 1857,
    /// <summary>
    ///队长不在线
    /// </summary>
    LeaderOffLine = 1858,
    /// <summary>
    ///社交破冰，邀请cd未到
    /// </summary>
    InviteSocialCdcheckFailed = 1859,
    /// <summary>
    ///社交破冰，队友入队时间不够
    /// </summary>
    InviteSocialEnterTimeCheckFailed = 1860,
    /// <summary>
    ///副本内不能喊话
    /// </summary>
    CannotLookForTeamInIns = 1861,
    /// <summary>
    ///副本内不能匹配
    /// </summary>
    CannotMatchInIns = 1862,
    /// <summary>
    ///重复匹配入同一个队伍
    /// </summary>
    RepeateMatch = 1863,
    /// <summary>
    ///组队目标-天梯 限制咒传不超过3个
    /// </summary>
    TianTiTargetCondLimit = 1864,
  }

  public enum MemStatePart {
    Normal = 0,
    /// <summary>
    ///主动暂离
    /// </summary>
    ActiveTmpLeave = 1,
    /// <summary>
    ///离线
    /// </summary>
    Offline = 2,
    /// <summary>
    ///被动暂离（可恢复）
    /// </summary>
    PassiveTmpLeave = 4,
    /// <summary>
    ///进队or归队时强制暂离
    /// </summary>
    BackTmpLeave = 8,
    /// <summary>
    ///标记需退队
    /// </summary>
    BeforeLeave = 16,
    /// <summary>
    ///组合状态
    /// 4 + 8 + 16
    /// </summary>
    ForceTmpLeave = 28,
    /// <summary>
    /// 1 + 4 + 8 + 16
    /// </summary>
    TmpLeave = 29,
  }

  /// <summary>
  ///进队类型
  /// </summary>
  public enum TeamEnterType {
    /// <summary>
    ///无效值
    /// </summary>
    None = 0,
    /// <summary>
    ///申请进队
    /// </summary>
    Apply = 1,
    /// <summary>
    ///被邀请进队
    /// </summary>
    Invite = 2,
    /// <summary>
    ///匹配进队
    /// </summary>
    Match = 3,
    /// <summary>
    /// 便捷组队申请进队
    /// </summary>
    QuickApply = 4,
  }

  /// <summary>
  /// 申请入队类型
  /// </summary>
  public enum ApplyType {
    None = 0,
    /// <summary>
    /// 便捷组队申请
    /// </summary>
    Quick = 1,
    /// <summary>
    /// 聊天组队申请
    /// </summary>
    TeamChat = 2,
    /// <summary>
    /// 好友组队申请
    /// </summary>
    Friend = 3,
    /// <summary>
    /// 附近组队申请
    /// </summary>
    Near = 4,
  }

  public enum TeamInviteType {
    Active = 0,
    Tutor = 1,
    Brave = 2,
  }

  /// <summary>
  ///队员信息更新类别
  ///必要字段: memId
  /// </summary>
  public enum TeamMemInfoUpdateType {
    /// <summary>
    ///全部字段更新
    /// </summary>
    MemInfoUpdateAll = 0,
    MemInfoUpdateName = 2,
    MemInfoUpdateCareer = 6,
    MemInfoUpdateLevel = 10,
    MemInfoUpdateFashion = 11,
    /// <summary>
    /// 称号
    /// </summary>
    MemInfoUpdateTitle = 12,
    /// <summary>
    ///血条蓝条
    /// </summary>
    MemInfoUpdateHpMp = 13,
    /// <summary>
    ///职业等级改变
    /// </summary>
    MemInfoUpdateCareerRank = 14,
    /// <summary>
    ///头相框改变
    /// </summary>
    MemInfoUpdateHeadFrame = 15,
    /// <summary>
    ///公会信息 (id+名字+职位)
    /// </summary>
    MemInfoUpdateGuildInfo = 19,
    /// <summary>
    ///主手武器
    /// </summary>
    MemInfoUpdateWeapon = 21,
    /// <summary>
    /// 变身卡id
    /// </summary>
    MemInfoUpdateShapeShiftCardId = 22,
  }

  #endregion

  #region Messages
  public sealed class OneTeam : pb::IMessage {
    private static readonly pb::MessageParser<OneTeam> _parser = new pb::MessageParser<OneTeam>(() => new OneTeam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneTeam> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    /// <summary>
    /// =0时表示不在队伍中，下面其他信息均无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "leaderScenesvrId" field.</summary>
    public const int LeaderScenesvrIdFieldNumber = 2;
    private uint leaderScenesvrId_;
    /// <summary>
    ///客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderScenesvrId {
      get { return leaderScenesvrId_; }
      set {
        leaderScenesvrId_ = value;
      }
    }

    /// <summary>Field number for the "leaderMapUid" field.</summary>
    public const int LeaderMapUidFieldNumber = 3;
    private ulong leaderMapUid_;
    /// <summary>
    ///客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderMapUid {
      get { return leaderMapUid_; }
      set {
        leaderMapUid_ = value;
      }
    }

    /// <summary>Field number for the "leaderGuildId" field.</summary>
    public const int LeaderGuildIdFieldNumber = 4;
    private ulong leaderGuildId_;
    /// <summary>
    ///客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderGuildId {
      get { return leaderGuildId_; }
      set {
        leaderGuildId_ = value;
      }
    }

    /// <summary>Field number for the "leaderGuildName" field.</summary>
    public const int LeaderGuildNameFieldNumber = 11;
    private pb::ByteString leaderGuildName_ = pb::ByteString.Empty;
    /// <summary>
    ///客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderGuildName {
      get { return leaderGuildName_; }
      set {
        leaderGuildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.TeamMem> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.TeamMem.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamMem> mems_ = new pbc::RepeatedField<global::Packet.TeamMem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamMem> Mems {
      get { return mems_; }
    }

    /// <summary>Field number for the "applys" field.</summary>
    public const int ApplysFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.ApplyRole> _repeated_applys_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.ApplyRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.ApplyRole> applys_ = new pbc::RepeatedField<global::Packet.ApplyRole>();
    /// <summary>
    ///队长有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ApplyRole> Applys {
      get { return applys_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 7;
    private global::Packet.TeamTarget target_;
    /// <summary>
    /// 队伍目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "bMatching" field.</summary>
    public const int BMatchingFieldNumber = 8;
    private bool bMatching_;
    /// <summary>
    ///是否正在匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BMatching {
      get { return bMatching_; }
      set {
        bMatching_ = value;
      }
    }

    /// <summary>Field number for the "entrustMemId" field.</summary>
    public const int EntrustMemIdFieldNumber = 9;
    private ulong entrustMemId_;
    /// <summary>
    ///委托指挥人(0=未委托)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntrustMemId {
      get { return entrustMemId_; }
      set {
        entrustMemId_ = value;
      }
    }

    /// <summary>Field number for the "commandDatas" field.</summary>
    public const int CommandDatasFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Packet.TeamCommandData> _repeated_commandDatas_codec
        = pb::FieldCodec.ForMessage(82, global::Packet.TeamCommandData.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommandData> commandDatas_ = new pbc::RepeatedField<global::Packet.TeamCommandData>();
    /// <summary>
    ///队长和委托人的指令数据(size=2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommandData> CommandDatas {
      get { return commandDatas_; }
    }

    /// <summary>Field number for the "inviteSocialData" field.</summary>
    public const int InviteSocialDataFieldNumber = 12;
    private global::Packet.TeamInviteSocialData inviteSocialData_;
    /// <summary>
    ///只发给队长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInviteSocialData InviteSocialData {
      get { return inviteSocialData_; }
      set {
        inviteSocialData_ = value;
      }
    }

    /// <summary>Field number for the "skipTalkBtnList" field.</summary>
    public const int SkipTalkBtnListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Packet.TaskSkipTalkBtn> _repeated_skipTalkBtnList_codec
        = pb::FieldCodec.ForMessage(106, global::Packet.TaskSkipTalkBtn.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> skipTalkBtnList_ = new pbc::RepeatedField<global::Packet.TaskSkipTalkBtn>();
    /// <summary>
    ///队长设置的任务跳过剧情数据(只发给队员)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> SkipTalkBtnList {
      get { return skipTalkBtnList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (LeaderScenesvrId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeaderScenesvrId);
      }
      if (LeaderMapUid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LeaderMapUid);
      }
      if (LeaderGuildId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LeaderGuildId);
      }
      mems_.WriteTo(output, _repeated_mems_codec);
      applys_.WriteTo(output, _repeated_applys_codec);
      if (target_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Target);
      }
      if (BMatching != false) {
        output.WriteRawTag(64);
        output.WriteBool(BMatching);
      }
      if (EntrustMemId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EntrustMemId);
      }
      commandDatas_.WriteTo(output, _repeated_commandDatas_codec);
      if (LeaderGuildName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(LeaderGuildName);
      }
      if (inviteSocialData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(InviteSocialData);
      }
      skipTalkBtnList_.WriteTo(output, _repeated_skipTalkBtnList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (LeaderScenesvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderScenesvrId);
      }
      if (LeaderMapUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderMapUid);
      }
      if (LeaderGuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderGuildId);
      }
      if (LeaderGuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderGuildName);
      }
      size += mems_.CalculateSize(_repeated_mems_codec);
      size += applys_.CalculateSize(_repeated_applys_codec);
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (BMatching != false) {
        size += 1 + 1;
      }
      if (EntrustMemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntrustMemId);
      }
      size += commandDatas_.CalculateSize(_repeated_commandDatas_codec);
      if (inviteSocialData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InviteSocialData);
      }
      size += skipTalkBtnList_.CalculateSize(_repeated_skipTalkBtnList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            LeaderScenesvrId = input.ReadUInt32();
            break;
          }
          case 24: {
            LeaderMapUid = input.ReadUInt64();
            break;
          }
          case 32: {
            LeaderGuildId = input.ReadUInt64();
            break;
          }
          case 42: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
          case 50: {
            applys_.AddEntriesFrom(input, _repeated_applys_codec);
            break;
          }
          case 58: {
            if (target_ == null) {
              target_ = new global::Packet.TeamTarget();
            }
            input.ReadMessage(target_);
            break;
          }
          case 64: {
            BMatching = input.ReadBool();
            break;
          }
          case 72: {
            EntrustMemId = input.ReadUInt64();
            break;
          }
          case 82: {
            commandDatas_.AddEntriesFrom(input, _repeated_commandDatas_codec);
            break;
          }
          case 90: {
            LeaderGuildName = input.ReadBytes();
            break;
          }
          case 98: {
            if (inviteSocialData_ == null) {
              inviteSocialData_ = new global::Packet.TeamInviteSocialData();
            }
            input.ReadMessage(inviteSocialData_);
            break;
          }
          case 106: {
            skipTalkBtnList_.AddEntriesFrom(input, _repeated_skipTalkBtnList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamMem : pb::IMessage {
    private static readonly pb::MessageParser<TeamMem> _parser = new pb::MessageParser<TeamMem>(() => new TeamMem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMem> Parser { get { return _parser; } }

    /// <summary>Field number for the "memId" field.</summary>
    public const int MemIdFieldNumber = 1;
    private ulong memId_;
    /// <summary>
    ///roleId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemId {
      get { return memId_; }
      set {
        memId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fightPos" field.</summary>
    public const int FightPosFieldNumber = 3;
    private uint fightPos_;
    /// <summary>
    ///战斗站位: 1-5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightPos {
      get { return fightPos_; }
      set {
        fightPos_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "headId" field.</summary>
    public const int HeadIdFieldNumber = 5;
    private uint headId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 6;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private uint state_;
    /// <summary>
    ///bit0  是否暂离 bit1 是否离线((state &amp; (1 &lt;&lt; 0)) != 0)是否暂离, state &amp; ((1 &lt;&lt; 1)) != 0)是否离线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "memindex" field.</summary>
    public const int MemindexFieldNumber = 9;
    private int memindex_;
    /// <summary>
    ///客户端不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Memindex {
      get { return memindex_; }
      set {
        memindex_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 10;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "fashionList" field.</summary>
    public const int FashionListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionList_codec
        = pb::FieldCodec.ForMessage(90, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionList_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    /// <summary>
    ///时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionList {
      get { return fashionList_; }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 12;
    private uint title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "hpPer" field.</summary>
    public const int HpPerFieldNumber = 13;
    private uint hpPer_;
    /// <summary>
    ///hp百分比（0-100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HpPer {
      get { return hpPer_; }
      set {
        hpPer_ = value;
      }
    }

    /// <summary>Field number for the "mpPer" field.</summary>
    public const int MpPerFieldNumber = 14;
    private uint mpPer_;
    /// <summary>
    ///mp百分比（0-100）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MpPer {
      get { return mpPer_; }
      set {
        mpPer_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 15;
    private uint careerRank_;
    /// <summary>
    ///职业等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 16;
    private uint photo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    /// <summary>Field number for the "photoFrame" field.</summary>
    public const int PhotoFrameFieldNumber = 17;
    private uint photoFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoFrame {
      get { return photoFrame_; }
      set {
        photoFrame_ = value;
      }
    }

    /// <summary>Field number for the "teamLogo" field.</summary>
    public const int TeamLogoFieldNumber = 18;
    private uint teamLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamLogo {
      get { return teamLogo_; }
      set {
        teamLogo_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 23;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 19;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildPos" field.</summary>
    public const int GuildPosFieldNumber = 20;
    private uint guildPos_;
    /// <summary>
    ///公会职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPos {
      get { return guildPos_; }
      set {
        guildPos_ = value;
      }
    }

    /// <summary>Field number for the "weaponItemID" field.</summary>
    public const int WeaponItemIDFieldNumber = 21;
    private uint weaponItemID_;
    /// <summary>
    /// 主手武器的ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponItemID {
      get { return weaponItemID_; }
      set {
        weaponItemID_ = value;
      }
    }

    /// <summary>Field number for the "enterTime" field.</summary>
    public const int EnterTimeFieldNumber = 22;
    private uint enterTime_;
    /// <summary>
    ///入队时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnterTime {
      get { return enterTime_; }
      set {
        enterTime_ = value;
      }
    }

    /// <summary>Field number for the "shapeShiftCardId" field.</summary>
    public const int ShapeShiftCardIdFieldNumber = 24;
    private uint shapeShiftCardId_;
    /// <summary>
    /// 变身卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShapeShiftCardId {
      get { return shapeShiftCardId_; }
      set {
        shapeShiftCardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MemId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (FightPos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FightPos);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (HeadId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeadId);
      }
      if (Career != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Career);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(State);
      }
      if (Memindex != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Memindex);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Level);
      }
      fashionList_.WriteTo(output, _repeated_fashionList_codec);
      if (Title != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Title);
      }
      if (HpPer != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HpPer);
      }
      if (MpPer != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MpPer);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CareerRank);
      }
      if (Photo != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Photo);
      }
      if (PhotoFrame != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(PhotoFrame);
      }
      if (TeamLogo != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TeamLogo);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(GuildName);
      }
      if (GuildPos != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(GuildPos);
      }
      if (WeaponItemID != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(WeaponItemID);
      }
      if (EnterTime != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(EnterTime);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(GuildId);
      }
      if (ShapeShiftCardId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(ShapeShiftCardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (FightPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightPos);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Memindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Memindex);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += fashionList_.CalculateSize(_repeated_fashionList_codec);
      if (Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (HpPer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HpPer);
      }
      if (MpPer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MpPer);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (Photo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
      }
      if (PhotoFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PhotoFrame);
      }
      if (TeamLogo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamLogo);
      }
      if (GuildId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuildPos);
      }
      if (WeaponItemID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeaponItemID);
      }
      if (EnterTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnterTime);
      }
      if (ShapeShiftCardId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShapeShiftCardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            FightPos = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            HeadId = input.ReadUInt32();
            break;
          }
          case 48: {
            Career = input.ReadUInt32();
            break;
          }
          case 64: {
            State = input.ReadUInt32();
            break;
          }
          case 72: {
            Memindex = input.ReadInt32();
            break;
          }
          case 80: {
            Level = input.ReadUInt32();
            break;
          }
          case 90: {
            fashionList_.AddEntriesFrom(input, _repeated_fashionList_codec);
            break;
          }
          case 96: {
            Title = input.ReadUInt32();
            break;
          }
          case 104: {
            HpPer = input.ReadUInt32();
            break;
          }
          case 112: {
            MpPer = input.ReadUInt32();
            break;
          }
          case 120: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 128: {
            Photo = input.ReadUInt32();
            break;
          }
          case 136: {
            PhotoFrame = input.ReadUInt32();
            break;
          }
          case 144: {
            TeamLogo = input.ReadUInt32();
            break;
          }
          case 154: {
            GuildName = input.ReadBytes();
            break;
          }
          case 160: {
            GuildPos = input.ReadUInt32();
            break;
          }
          case 168: {
            WeaponItemID = input.ReadUInt32();
            break;
          }
          case 176: {
            EnterTime = input.ReadUInt32();
            break;
          }
          case 184: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 192: {
            ShapeShiftCardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ApplyRole : pb::IMessage {
    private static readonly pb::MessageParser<ApplyRole> _parser = new pb::MessageParser<ApplyRole>(() => new ApplyRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.TeamMem info_;
    /// <summary>
    ///其中某些字段无效，例如state，hpper等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamMem Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.TeamMem();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamTarget : pb::IMessage {
    private static readonly pb::MessageParser<TeamTarget> _parser = new pb::MessageParser<TeamTarget>(() => new TeamTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamTarget> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    ///scene只使用targetId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "customInfo" field.</summary>
    public const int CustomInfoFieldNumber = 3;
    private pb::ByteString customInfo_ = pb::ByteString.Empty;
    /// <summary>
    /// 只下发不上报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomInfo {
      get { return customInfo_; }
      set {
        customInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowLv" field.</summary>
    public const int LowLvFieldNumber = 4;
    private uint lowLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowLv {
      get { return lowLv_; }
      set {
        lowLv_ = value;
      }
    }

    /// <summary>Field number for the "highLv" field.</summary>
    public const int HighLvFieldNumber = 5;
    private uint highLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighLv {
      get { return highLv_; }
      set {
        highLv_ = value;
      }
    }

    /// <summary>Field number for the "autoApply" field.</summary>
    public const int AutoApplyFieldNumber = 6;
    private bool autoApply_;
    /// <summary>
    /// 是否自动匹配(自动同意)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoApply {
      get { return autoApply_; }
      set {
        autoApply_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private pb::ByteString desc_ = pb::ByteString.Empty;
    /// <summary>
    /// 队伍描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowRobot" field.</summary>
    public const int AllowRobotFieldNumber = 8;
    private bool allowRobot_;
    /// <summary>
    /// 是否允许匹配机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowRobot {
      get { return allowRobot_; }
      set {
        allowRobot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (CustomInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CustomInfo);
      }
      if (LowLv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LowLv);
      }
      if (HighLv != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HighLv);
      }
      if (AutoApply != false) {
        output.WriteRawTag(48);
        output.WriteBool(AutoApply);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Desc);
      }
      if (AllowRobot != false) {
        output.WriteRawTag(64);
        output.WriteBool(AllowRobot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (CustomInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomInfo);
      }
      if (LowLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowLv);
      }
      if (HighLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighLv);
      }
      if (AutoApply != false) {
        size += 1 + 1;
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Desc);
      }
      if (AllowRobot != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 26: {
            CustomInfo = input.ReadBytes();
            break;
          }
          case 32: {
            LowLv = input.ReadUInt32();
            break;
          }
          case 40: {
            HighLv = input.ReadUInt32();
            break;
          }
          case 48: {
            AutoApply = input.ReadBool();
            break;
          }
          case 58: {
            Desc = input.ReadBytes();
            break;
          }
          case 64: {
            AllowRobot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///社交破冰信息记录
  /// </summary>
  public sealed class TeamInviteSocialData : pb::IMessage {
    private static readonly pb::MessageParser<TeamInviteSocialData> _parser = new pb::MessageParser<TeamInviteSocialData>(() => new TeamInviteSocialData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInviteSocialData> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastTriggerTime" field.</summary>
    public const int LastTriggerTimeFieldNumber = 1;
    private uint lastTriggerTime_;
    /// <summary>
    ///上次触发邀请的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTriggerTime {
      get { return lastTriggerTime_; }
      set {
        lastTriggerTime_ = value;
      }
    }

    /// <summary>Field number for the "lastRecordTime" field.</summary>
    public const int LastRecordTimeFieldNumber = 2;
    private uint lastRecordTime_;
    /// <summary>
    ///记录的时间， 凌晨5点刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRecordTime {
      get { return lastRecordTime_; }
      set {
        lastRecordTime_ = value;
      }
    }

    /// <summary>Field number for the "inviteFriendIds" field.</summary>
    public const int InviteFriendIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_inviteFriendIds_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> inviteFriendIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///邀请入家族的玩家id记录 size&lt;=10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InviteFriendIds {
      get { return inviteFriendIds_; }
    }

    /// <summary>Field number for the "inviteGuildMemIds" field.</summary>
    public const int InviteGuildMemIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_inviteGuildMemIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> inviteGuildMemIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///邀请入家族的玩家id记录 size&lt;=10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> InviteGuildMemIds {
      get { return inviteGuildMemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTriggerTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastTriggerTime);
      }
      if (LastRecordTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRecordTime);
      }
      inviteFriendIds_.WriteTo(output, _repeated_inviteFriendIds_codec);
      inviteGuildMemIds_.WriteTo(output, _repeated_inviteGuildMemIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTriggerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTriggerTime);
      }
      if (LastRecordTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRecordTime);
      }
      size += inviteFriendIds_.CalculateSize(_repeated_inviteFriendIds_codec);
      size += inviteGuildMemIds_.CalculateSize(_repeated_inviteGuildMemIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastTriggerTime = input.ReadUInt32();
            break;
          }
          case 16: {
            LastRecordTime = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            inviteFriendIds_.AddEntriesFrom(input, _repeated_inviteFriendIds_codec);
            break;
          }
          case 34:
          case 32: {
            inviteGuildMemIds_.AddEntriesFrom(input, _repeated_inviteGuildMemIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInfoNtf> _parser = new pb::MessageParser<CmdTeamInfoNtf>(() => new CmdTeamInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 1;
    private global::Packet.OneTeam teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.OneTeam TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "gmeauthbuffer" field.</summary>
    public const int GmeauthbufferFieldNumber = 2;
    private pb::ByteString gmeauthbuffer_ = pb::ByteString.Empty;
    /// <summary>
    ///gme语音 authbuffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Gmeauthbuffer {
      get { return gmeauthbuffer_; }
      set {
        gmeauthbuffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamInfo);
      }
      if (Gmeauthbuffer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Gmeauthbuffer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      if (Gmeauthbuffer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Gmeauthbuffer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Packet.OneTeam();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 18: {
            Gmeauthbuffer = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyReq> _parser = new pb::MessageParser<CmdTeamApplyReq>(() => new CmdTeamApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "applyType" field.</summary>
    public const int ApplyTypeFieldNumber = 2;
    private uint applyType_;
    /// <summary>
    /// ApplyType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            ApplyType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyRes> _parser = new pb::MessageParser<CmdTeamApplyRes>(() => new CmdTeamApplyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private uint ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyNtf> _parser = new pb::MessageParser<CmdTeamApplyNtf>(() => new CmdTeamApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyrole" field.</summary>
    public const int ApplyroleFieldNumber = 1;
    private global::Packet.ApplyRole applyrole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ApplyRole Applyrole {
      get { return applyrole_; }
      set {
        applyrole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (applyrole_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Applyrole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (applyrole_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Applyrole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (applyrole_ == null) {
              applyrole_ = new global::Packet.ApplyRole();
            }
            input.ReadMessage(applyrole_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyListOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyListOpReq> _parser = new pb::MessageParser<CmdTeamApplyListOpReq>(() => new CmdTeamApplyListOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyListOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private uint op_;
    /// <summary>
    ///0 接受 1 拒绝 2.不需要roleId 直接清空申请列表请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyListOpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyListOpRes> _parser = new pb::MessageParser<CmdTeamApplyListOpRes>(() => new CmdTeamApplyListOpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyListOpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyroles" field.</summary>
    public const int ApplyrolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ApplyRole> _repeated_applyroles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ApplyRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.ApplyRole> applyroles_ = new pbc::RepeatedField<global::Packet.ApplyRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ApplyRole> Applyroles {
      get { return applyroles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applyroles_.WriteTo(output, _repeated_applyroles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applyroles_.CalculateSize(_repeated_applyroles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            applyroles_.AddEntriesFrom(input, _repeated_applyroles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInviteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteReq> _parser = new pb::MessageParser<CmdTeamInviteReq>(() => new CmdTeamInviteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邀请人收到协议
  /// </summary>
  public sealed class CmdTeamInviteRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteRes> _parser = new pb::MessageParser<CmdTeamInviteRes>(() => new CmdTeamInviteRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamInviteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteNtf> _parser = new pb::MessageParser<CmdTeamInviteNtf>(() => new CmdTeamInviteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "invitorName" field.</summary>
    public const int InvitorNameFieldNumber = 1;
    private string invitorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvitorName {
      get { return invitorName_; }
      set {
        invitorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "invitorId" field.</summary>
    public const int InvitorIdFieldNumber = 3;
    private ulong invitorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitorId {
      get { return invitorId_; }
      set {
        invitorId_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 4;
    private ulong leaderId_;
    /// <summary>
    ///队伍简略信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 5;
    private string leaderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 6;
    private uint targetId_;
    /// <summary>
    ///目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "lowLv" field.</summary>
    public const int LowLvFieldNumber = 7;
    private uint lowLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowLv {
      get { return lowLv_; }
      set {
        lowLv_ = value;
      }
    }

    /// <summary>Field number for the "highLv" field.</summary>
    public const int HighLvFieldNumber = 8;
    private uint highLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighLv {
      get { return highLv_; }
      set {
        highLv_ = value;
      }
    }

    /// <summary>Field number for the "isTutor" field.</summary>
    public const int IsTutorFieldNumber = 9;
    private bool isTutor_;
    /// <summary>
    /// 是否为导师邀请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTutor {
      get { return isTutor_; }
      set {
        isTutor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InvitorName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InvitorName);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamId);
      }
      if (InvitorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(InvitorId);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(LeaderId);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LeaderName);
      }
      if (TargetId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TargetId);
      }
      if (LowLv != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LowLv);
      }
      if (HighLv != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HighLv);
      }
      if (IsTutor != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsTutor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InvitorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvitorName);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (InvitorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitorId);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (LowLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowLv);
      }
      if (HighLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighLv);
      }
      if (IsTutor != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InvitorName = input.ReadString();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 24: {
            InvitorId = input.ReadUInt64();
            break;
          }
          case 32: {
            LeaderId = input.ReadUInt64();
            break;
          }
          case 42: {
            LeaderName = input.ReadString();
            break;
          }
          case 48: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 56: {
            LowLv = input.ReadUInt32();
            break;
          }
          case 64: {
            HighLv = input.ReadUInt32();
            break;
          }
          case 72: {
            IsTutor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInviteOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteOpReq> _parser = new pb::MessageParser<CmdTeamInviteOpReq>(() => new CmdTeamInviteOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0 接受 1 拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "invitorId" field.</summary>
    public const int InvitorIdFieldNumber = 3;
    private ulong invitorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitorId {
      get { return invitorId_; }
      set {
        invitorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamId);
      }
      if (InvitorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(InvitorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (InvitorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 24: {
            InvitorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInviteOpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteOpRes> _parser = new pb::MessageParser<CmdTeamInviteOpRes>(() => new CmdTeamInviteOpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteOpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///玩家自己的选择(0:接受, 1:手动拒绝, 2:设置自动拒绝)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    /// <summary>
    /// = 0 为入队成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemInviteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemInviteNtf> _parser = new pb::MessageParser<CmdTeamMemInviteNtf>(() => new CmdTeamMemInviteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemInviteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "memId" field.</summary>
    public const int MemIdFieldNumber = 1;
    private ulong memId_;
    /// <summary>
    ///邀请者 队员的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemId {
      get { return memId_; }
      set {
        memId_ = value;
      }
    }

    /// <summary>Field number for the "targetName" field.</summary>
    public const int TargetNameFieldNumber = 2;
    private string targetName_ = "";
    /// <summary>
    ///被邀请者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private ulong targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MemId);
      }
      if (TargetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetName);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemId);
      }
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemId = input.ReadUInt64();
            break;
          }
          case 18: {
            TargetName = input.ReadString();
            break;
          }
          case 24: {
            TargetId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemInviteOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemInviteOpReq> _parser = new pb::MessageParser<CmdTeamMemInviteOpReq>(() => new CmdTeamMemInviteOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemInviteOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0 接受 1 拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "invitorId" field.</summary>
    public const int InvitorIdFieldNumber = 2;
    private ulong invitorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitorId {
      get { return invitorId_; }
      set {
        invitorId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private ulong targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (InvitorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(InvitorId);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (InvitorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitorId);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 16: {
            InvitorId = input.ReadUInt64();
            break;
          }
          case 24: {
            TargetId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemTmpLeaveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemTmpLeaveReq> _parser = new pb::MessageParser<CmdTeamMemTmpLeaveReq>(() => new CmdTeamMemTmpLeaveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemTmpLeaveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamMemStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemStateNtf> _parser = new pb::MessageParser<CmdTeamMemStateNtf>(() => new CmdTeamMemStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemBackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemBackReq> _parser = new pb::MessageParser<CmdTeamMemBackReq>(() => new CmdTeamMemBackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemBackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// =0为自己申请回归，队长可填入roleId召回队友(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///召回队友
  /// </summary>
  public sealed class CmdTeamCallBackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCallBackReq> _parser = new pb::MessageParser<CmdTeamCallBackReq>(() => new CmdTeamCallBackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCallBackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "memId" field.</summary>
    public const int MemIdFieldNumber = 1;
    private ulong memId_;
    /// <summary>
    /// 队员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemId {
      get { return memId_; }
      set {
        memId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamCallBackNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCallBackNtf> _parser = new pb::MessageParser<CmdTeamCallBackNtf>(() => new CmdTeamCallBackNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCallBackNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "invitorId" field.</summary>
    public const int InvitorIdFieldNumber = 1;
    private ulong invitorId_;
    /// <summary>
    ///发起召回的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InvitorId {
      get { return invitorId_; }
      set {
        invitorId_ = value;
      }
    }

    /// <summary>Field number for the "invitorName" field.</summary>
    public const int InvitorNameFieldNumber = 2;
    private pb::ByteString invitorName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InvitorName {
      get { return invitorName_; }
      set {
        invitorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InvitorId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(InvitorId);
      }
      if (InvitorName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(InvitorName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InvitorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InvitorId);
      }
      if (InvitorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InvitorName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InvitorId = input.ReadUInt64();
            break;
          }
          case 18: {
            InvitorName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamCallBackOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCallBackOpReq> _parser = new pb::MessageParser<CmdTeamCallBackOpReq>(() => new CmdTeamCallBackOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCallBackOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0-同意，1-拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemLeaveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemLeaveReq> _parser = new pb::MessageParser<CmdTeamMemLeaveReq>(() => new CmdTeamMemLeaveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemLeaveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamMemLeaveNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemLeaveNtf> _parser = new pb::MessageParser<CmdTeamMemLeaveNtf>(() => new CmdTeamMemLeaveNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemLeaveNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemEnterNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemEnterNtf> _parser = new pb::MessageParser<CmdTeamMemEnterNtf>(() => new CmdTeamMemEnterNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemEnterNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mem" field.</summary>
    public const int MemFieldNumber = 1;
    private global::Packet.TeamMem mem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamMem Mem {
      get { return mem_; }
      set {
        mem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mem_ == null) {
              mem_ = new global::Packet.TeamMem();
            }
            input.ReadMessage(mem_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamCreateTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCreateTeamReq> _parser = new pb::MessageParser<CmdTeamCreateTeamReq>(() => new CmdTeamCreateTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCreateTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    ///组队目标（0为表中默认第一条，自定义那个）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamKickMemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamKickMemReq> _parser = new pb::MessageParser<CmdTeamKickMemReq>(() => new CmdTeamKickMemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamKickMemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///被踢的玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamBeKickedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamBeKickedNtf> _parser = new pb::MessageParser<CmdTeamBeKickedNtf>(() => new CmdTeamBeKickedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamBeKickedNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamTransLeaderReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamTransLeaderReq> _parser = new pb::MessageParser<CmdTeamTransLeaderReq>(() => new CmdTeamTransLeaderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamTransLeaderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///转移到的队员roleId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamTransLeaderNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamTransLeaderNtf> _parser = new pb::MessageParser<CmdTeamTransLeaderNtf>(() => new CmdTeamTransLeaderNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamTransLeaderNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamMem> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamMem.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamMem> mems_ = new pbc::RepeatedField<global::Packet.TeamMem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamMem> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMemInfoUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMemInfoUpdateNtf> _parser = new pb::MessageParser<CmdTeamMemInfoUpdateNtf>(() => new CmdTeamMemInfoUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMemInfoUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "updateType" field.</summary>
    public const int UpdateTypeFieldNumber = 2;
    private uint updateType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "mem" field.</summary>
    public const int MemFieldNumber = 1;
    private global::Packet.TeamMem mem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamMem Mem {
      get { return mem_; }
      set {
        mem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mem);
      }
      if (UpdateType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UpdateType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdateType);
      }
      if (mem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mem_ == null) {
              mem_ = new global::Packet.TeamMem();
            }
            input.ReadMessage(mem_);
            break;
          }
          case 16: {
            UpdateType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ApplyLeadingRole : pb::IMessage {
    private static readonly pb::MessageParser<ApplyLeadingRole> _parser = new pb::MessageParser<ApplyLeadingRole>(() => new ApplyLeadingRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyLeadingRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    /// <summary>
    ///申请人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyLeadingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyLeadingReq> _parser = new pb::MessageParser<CmdTeamApplyLeadingReq>(() => new CmdTeamApplyLeadingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyLeadingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamApplyLeadingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyLeadingNtf> _parser = new pb::MessageParser<CmdTeamApplyLeadingNtf>(() => new CmdTeamApplyLeadingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyLeadingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///申请人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 3;
    private ulong voteId_;
    /// <summary>
    ///投票唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (VoteId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(VoteId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            VoteId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamApplyLeadingOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyLeadingOpReq> _parser = new pb::MessageParser<CmdTeamApplyLeadingOpReq>(() => new CmdTeamApplyLeadingOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyLeadingOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 申请带队的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private uint op_;
    /// <summary>
    ///0-同意，1-拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队长否决，所有人投票完毕，超时结束
  /// </summary>
  public sealed class CmdTeamApplyLeadingResultNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamApplyLeadingResultNtf> _parser = new pb::MessageParser<CmdTeamApplyLeadingResultNtf>(() => new CmdTeamApplyLeadingResultNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamApplyLeadingResultNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0-同意，1-拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "agreeList" field.</summary>
    public const int AgreeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ApplyLeadingRole> _repeated_agreeList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ApplyLeadingRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.ApplyLeadingRole> agreeList_ = new pbc::RepeatedField<global::Packet.ApplyLeadingRole>();
    /// <summary>
    ///同意列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ApplyLeadingRole> AgreeList {
      get { return agreeList_; }
    }

    /// <summary>Field number for the "refuseList" field.</summary>
    public const int RefuseListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.ApplyLeadingRole> _repeated_refuseList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.ApplyLeadingRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.ApplyLeadingRole> refuseList_ = new pbc::RepeatedField<global::Packet.ApplyLeadingRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ApplyLeadingRole> RefuseList {
      get { return refuseList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      agreeList_.WriteTo(output, _repeated_agreeList_codec);
      refuseList_.WriteTo(output, _repeated_refuseList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      size += agreeList_.CalculateSize(_repeated_agreeList_codec);
      size += refuseList_.CalculateSize(_repeated_refuseList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 18: {
            agreeList_.AddEntriesFrom(input, _repeated_agreeList_codec);
            break;
          }
          case 26: {
            refuseList_.AddEntriesFrom(input, _repeated_refuseList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///委托指挥
  /// </summary>
  public sealed class CmdTeamEntrustCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEntrustCommandReq> _parser = new pb::MessageParser<CmdTeamEntrustCommandReq>(() => new CmdTeamEntrustCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEntrustCommandReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "entrustMemId" field.</summary>
    public const int EntrustMemIdFieldNumber = 1;
    private ulong entrustMemId_;
    /// <summary>
    ///委托指挥的队员id(0=取消委任)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntrustMemId {
      get { return entrustMemId_; }
      set {
        entrustMemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntrustMemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntrustMemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntrustMemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntrustMemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntrustMemId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEntrustCommandNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEntrustCommandNtf> _parser = new pb::MessageParser<CmdTeamEntrustCommandNtf>(() => new CmdTeamEntrustCommandNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEntrustCommandNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "entrustMemId" field.</summary>
    public const int EntrustMemIdFieldNumber = 1;
    private ulong entrustMemId_;
    /// <summary>
    ///委托指挥的队员id(0=取消委任)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntrustMemId {
      get { return entrustMemId_; }
      set {
        entrustMemId_ = value;
      }
    }

    /// <summary>Field number for the "commandDatas" field.</summary>
    public const int CommandDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TeamCommandData> _repeated_commandDatas_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TeamCommandData.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommandData> commandDatas_ = new pbc::RepeatedField<global::Packet.TeamCommandData>();
    /// <summary>
    ///委托人的指令数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommandData> CommandDatas {
      get { return commandDatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntrustMemId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntrustMemId);
      }
      commandDatas_.WriteTo(output, _repeated_commandDatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntrustMemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntrustMemId);
      }
      size += commandDatas_.CalculateSize(_repeated_commandDatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntrustMemId = input.ReadUInt64();
            break;
          }
          case 18: {
            commandDatas_.AddEntriesFrom(input, _repeated_commandDatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单条指令
  /// </summary>
  public sealed class TeamCommand : pb::IMessage {
    private static readonly pb::MessageParser<TeamCommand> _parser = new pb::MessageParser<TeamCommand>(() => new TeamCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private pb::ByteString command_ = pb::ByteString.Empty;
    /// <summary>
    ///bool custom = 1;    // 是否用户自定义命令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quickTag" field.</summary>
    public const int QuickTagFieldNumber = 3;
    private uint quickTag_;
    /// <summary>
    ///快捷标记(0-5, 0=未标记)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuickTag {
      get { return quickTag_; }
      set {
        quickTag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Command);
      }
      if (QuickTag != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(QuickTag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Command);
      }
      if (QuickTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuickTag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Command = input.ReadBytes();
            break;
          }
          case 24: {
            QuickTag = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单组指令列表
  /// </summary>
  public sealed class TeamCommandList : pb::IMessage {
    private static readonly pb::MessageParser<TeamCommandList> _parser = new pb::MessageParser<TeamCommandList>(() => new TeamCommandList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamCommandList> Parser { get { return _parser; } }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommand> commands_ = new pbc::RepeatedField<global::Packet.TeamCommand>();
    /// <summary>
    /// 自定义指令列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommand> Commands {
      get { return commands_; }
    }

    /// <summary>Field number for the "defaults" field.</summary>
    public const int DefaultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TeamCommand> _repeated_defaults_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TeamCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommand> defaults_ = new pbc::RepeatedField<global::Packet.TeamCommand>();
    /// <summary>
    /// 默认列表（size=5 用于存储快捷标记）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommand> Defaults {
      get { return defaults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      defaults_.WriteTo(output, _repeated_defaults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      size += defaults_.CalculateSize(_repeated_defaults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
          case 18: {
            defaults_.AddEntriesFrom(input, _repeated_defaults_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///所有指令数据
  /// </summary>
  public sealed class TeamCommandData : pb::IMessage {
    private static readonly pb::MessageParser<TeamCommandData> _parser = new pb::MessageParser<TeamCommandData>(() => new TeamCommandData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamCommandData> Parser { get { return _parser; } }

    /// <summary>Field number for the "commandList" field.</summary>
    public const int CommandListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamCommandList> _repeated_commandList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamCommandList.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommandList> commandList_ = new pbc::RepeatedField<global::Packet.TeamCommandList>();
    /// <summary>
    /// 0:敌方指令列表， 1:友方指令列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommandList> CommandList {
      get { return commandList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commandList_.WriteTo(output, _repeated_commandList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commandList_.CalculateSize(_repeated_commandList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            commandList_.AddEntriesFrom(input, _repeated_commandList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamCommandDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCommandDataNtf> _parser = new pb::MessageParser<CmdTeamCommandDataNtf>(() => new CmdTeamCommandDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCommandDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TeamCommandData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamCommandData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TeamCommandData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///编辑指挥预设
  /// </summary>
  public sealed class CmdTeamEditCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditCommandReq> _parser = new pb::MessageParser<CmdTeamEditCommandReq>(() => new CmdTeamEditCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditCommandReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private bool self_;
    /// <summary>
    ///false-敌方，true-友方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    /// 自定义指令下标，若指定新位置表示新增指令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private pb::ByteString command_ = pb::ByteString.Empty;
    /// <summary>
    /// 若为空表示删除该条指令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Self != false) {
        output.WriteRawTag(8);
        output.WriteBool(Self);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Self != false) {
        size += 1 + 1;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Self = input.ReadBool();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 26: {
            Command = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditCommandRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditCommandRes> _parser = new pb::MessageParser<CmdTeamEditCommandRes>(() => new CmdTeamEditCommandRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditCommandRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 1;
    private bool self_;
    /// <summary>
    ///false-敌方，true-友方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TeamCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TeamCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamCommand> commands_ = new pbc::RepeatedField<global::Packet.TeamCommand>();
    /// <summary>
    /// 列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Self != false) {
        output.WriteRawTag(8);
        output.WriteBool(Self);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Self != false) {
        size += 1 + 1;
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Self = input.ReadBool();
            break;
          }
          case 18: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamResetAllCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamResetAllCommandReq> _parser = new pb::MessageParser<CmdTeamResetAllCommandReq>(() => new CmdTeamResetAllCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamResetAllCommandReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///编辑快捷指挥按钮
  /// </summary>
  public sealed class CmdTeamEditQuickCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditQuickCommandReq> _parser = new pb::MessageParser<CmdTeamEditQuickCommandReq>(() => new CmdTeamEditQuickCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditQuickCommandReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private uint tag_;
    /// <summary>
    ///快捷指挥下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 2;
    private bool set_;
    /// <summary>
    ///设置 or 取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 3;
    private bool custom_;
    /// <summary>
    /// set = true时填充下面内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Custom {
      get { return custom_; }
      set {
        custom_ = value;
      }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 4;
    private bool self_;
    /// <summary>
    ///false-敌方，true-友方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private uint index_;
    /// <summary>
    ///指令下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tag);
      }
      if (Set != false) {
        output.WriteRawTag(16);
        output.WriteBool(Set);
      }
      if (Custom != false) {
        output.WriteRawTag(24);
        output.WriteBool(Custom);
      }
      if (Self != false) {
        output.WriteRawTag(32);
        output.WriteBool(Self);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tag);
      }
      if (Set != false) {
        size += 1 + 1;
      }
      if (Custom != false) {
        size += 1 + 1;
      }
      if (Self != false) {
        size += 1 + 1;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadUInt32();
            break;
          }
          case 16: {
            Set = input.ReadBool();
            break;
          }
          case 24: {
            Custom = input.ReadBool();
            break;
          }
          case 32: {
            Self = input.ReadBool();
            break;
          }
          case 40: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditQuickCommandRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditQuickCommandRes> _parser = new pb::MessageParser<CmdTeamEditQuickCommandRes>(() => new CmdTeamEditQuickCommandRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditQuickCommandRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TeamCommandData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamCommandData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TeamCommandData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditTargetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditTargetReq> _parser = new pb::MessageParser<CmdTeamEditTargetReq>(() => new CmdTeamEditTargetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditTargetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Packet.TeamTarget target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Packet.TeamTarget();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditTargetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditTargetRes> _parser = new pb::MessageParser<CmdTeamEditTargetRes>(() => new CmdTeamEditTargetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditTargetRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///队伍目标数据更新后下发
  /// </summary>
  public sealed class CmdTeamTargetUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamTargetUpdateNtf> _parser = new pb::MessageParser<CmdTeamTargetUpdateNtf>(() => new CmdTeamTargetUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamTargetUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Packet.TeamTarget target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Packet.TeamTarget();
            }
            input.ReadMessage(target_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录下发自定义目标列表
  /// </summary>
  public sealed class CmdTeamCustomInfoDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamCustomInfoDataNtf> _parser = new pb::MessageParser<CmdTeamCustomInfoDataNtf>(() => new CmdTeamCustomInfoDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamCustomInfoDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "customInfoList" field.</summary>
    public const int CustomInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdTeamCustomInfoDataNtf.Types.CustomInfo> _repeated_customInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdTeamCustomInfoDataNtf.Types.CustomInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdTeamCustomInfoDataNtf.Types.CustomInfo> customInfoList_ = new pbc::RepeatedField<global::Packet.CmdTeamCustomInfoDataNtf.Types.CustomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdTeamCustomInfoDataNtf.Types.CustomInfo> CustomInfoList {
      get { return customInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      customInfoList_.WriteTo(output, _repeated_customInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += customInfoList_.CalculateSize(_repeated_customInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            customInfoList_.AddEntriesFrom(input, _repeated_customInfoList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTeamCustomInfoDataNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class CustomInfo : pb::IMessage {
        private static readonly pb::MessageParser<CustomInfo> _parser = new pb::MessageParser<CustomInfo>(() => new CustomInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "targetId" field.</summary>
        public const int TargetIdFieldNumber = 1;
        private uint targetId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TargetId {
          get { return targetId_; }
          set {
            targetId_ = value;
          }
        }

        /// <summary>Field number for the "customInfo" field.</summary>
        public const int CustomInfo_FieldNumber = 2;
        private pb::ByteString customInfo_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString CustomInfo_ {
          get { return customInfo_; }
          set {
            customInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TargetId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(TargetId);
          }
          if (CustomInfo_.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(CustomInfo_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TargetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
          }
          if (CustomInfo_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomInfo_);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TargetId = input.ReadUInt32();
                break;
              }
              case 18: {
                CustomInfo_ = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTeamEditCustomInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditCustomInfoReq> _parser = new pb::MessageParser<CmdTeamEditCustomInfoReq>(() => new CmdTeamEditCustomInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditCustomInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    /// play_type == 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "customInfo" field.</summary>
    public const int CustomInfoFieldNumber = 2;
    private pb::ByteString customInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomInfo {
      get { return customInfo_; }
      set {
        customInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (CustomInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CustomInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (CustomInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 18: {
            CustomInfo = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditCustomInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditCustomInfoRes> _parser = new pb::MessageParser<CmdTeamEditCustomInfoRes>(() => new CmdTeamEditCustomInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditCustomInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    /// play_type == 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "customInfo" field.</summary>
    public const int CustomInfoFieldNumber = 2;
    private pb::ByteString customInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomInfo {
      get { return customInfo_; }
      set {
        customInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (CustomInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CustomInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (CustomInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 18: {
            CustomInfo = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditDescReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditDescReq> _parser = new pb::MessageParser<CmdTeamEditDescReq>(() => new CmdTeamEditDescReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditDescReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 1;
    private pb::ByteString desc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Desc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Desc = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamEditDescNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamEditDescNtf> _parser = new pb::MessageParser<CmdTeamEditDescNtf>(() => new CmdTeamEditDescNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamEditDescNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 1;
    private pb::ByteString desc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Desc.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Desc = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMatchingOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMatchingOpReq> _parser = new pb::MessageParser<CmdTeamMatchingOpReq>(() => new CmdTeamMatchingOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMatchingOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0 开始匹配， 1取消匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private uint targetId_;
    /// <summary>
    /// 队伍目标(散人填充)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamMatchingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamMatchingNtf> _parser = new pb::MessageParser<CmdTeamMatchingNtf>(() => new CmdTeamMatchingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamMatchingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///0 开始匹配， 1取消匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private uint targetId_;
    /// <summary>
    ///目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///便捷组队队伍信息
  /// </summary>
  public sealed class TargetTeamInfo : pb::IMessage {
    private static readonly pb::MessageParser<TargetTeamInfo> _parser = new pb::MessageParser<TargetTeamInfo>(() => new TargetTeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetTeamInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 2;
    private global::Packet.TargetTeamInfo.Types.LeaderBrief leader_;
    /// <summary>
    ///队长简略信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TargetTeamInfo.Types.LeaderBrief Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    /// <summary>Field number for the "curNum" field.</summary>
    public const int CurNumFieldNumber = 3;
    private uint curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 4;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 5;
    private pb::ByteString desc_ = pb::ByteString.Empty;
    /// <summary>
    /// 队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "customInfo" field.</summary>
    public const int CustomInfoFieldNumber = 7;
    private pb::ByteString customInfo_ = pb::ByteString.Empty;
    /// <summary>
    ///自定义目标的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CustomInfo {
      get { return customInfo_; }
      set {
        customInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "briefs" field.</summary>
    public const int BriefsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.TargetTeamInfo.Types.MemBrief> _repeated_briefs_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.TargetTeamInfo.Types.MemBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.TargetTeamInfo.Types.MemBrief> briefs_ = new pbc::RepeatedField<global::Packet.TargetTeamInfo.Types.MemBrief>();
    /// <summary>
    ///队员(包括队长)的简略信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TargetTeamInfo.Types.MemBrief> Briefs {
      get { return briefs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (leader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Leader);
      }
      if (CurNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurNum);
      }
      if (TargetId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TargetId);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Desc);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CreateTime);
      }
      if (CustomInfo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(CustomInfo);
      }
      briefs_.WriteTo(output, _repeated_briefs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (leader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leader);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurNum);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Desc);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (CustomInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CustomInfo);
      }
      size += briefs_.CalculateSize(_repeated_briefs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (leader_ == null) {
              leader_ = new global::Packet.TargetTeamInfo.Types.LeaderBrief();
            }
            input.ReadMessage(leader_);
            break;
          }
          case 24: {
            CurNum = input.ReadUInt32();
            break;
          }
          case 32: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 42: {
            Desc = input.ReadBytes();
            break;
          }
          case 48: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 58: {
            CustomInfo = input.ReadBytes();
            break;
          }
          case 66: {
            briefs_.AddEntriesFrom(input, _repeated_briefs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TargetTeamInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class LeaderBrief : pb::IMessage {
        private static readonly pb::MessageParser<LeaderBrief> _parser = new pb::MessageParser<LeaderBrief>(() => new LeaderBrief());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaderBrief> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 3;
        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "career" field.</summary>
        public const int CareerFieldNumber = 4;
        private uint career_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Career {
          get { return career_; }
          set {
            career_ = value;
          }
        }

        /// <summary>Field number for the "careerRank" field.</summary>
        public const int CareerRankFieldNumber = 5;
        private uint careerRank_;
        /// <summary>
        ///职业等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CareerRank {
          get { return careerRank_; }
          set {
            careerRank_ = value;
          }
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 6;
        private uint heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroId {
          get { return heroId_; }
          set {
            heroId_ = value;
          }
        }

        /// <summary>Field number for the "photo" field.</summary>
        public const int PhotoFieldNumber = 7;
        private uint photo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Photo {
          get { return photo_; }
          set {
            photo_ = value;
          }
        }

        /// <summary>Field number for the "photoFrame" field.</summary>
        public const int PhotoFrameFieldNumber = 8;
        private uint photoFrame_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PhotoFrame {
          get { return photoFrame_; }
          set {
            photoFrame_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Name);
          }
          if (Level != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Level);
          }
          if (Career != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Career);
          }
          if (CareerRank != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(CareerRank);
          }
          if (HeroId != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(HeroId);
          }
          if (Photo != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Photo);
          }
          if (PhotoFrame != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(PhotoFrame);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Career != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
          }
          if (CareerRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
          }
          if (HeroId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
          }
          if (Photo != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
          }
          if (PhotoFrame != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoFrame);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                Name = input.ReadBytes();
                break;
              }
              case 24: {
                Level = input.ReadUInt32();
                break;
              }
              case 32: {
                Career = input.ReadUInt32();
                break;
              }
              case 40: {
                CareerRank = input.ReadUInt32();
                break;
              }
              case 48: {
                HeroId = input.ReadUInt32();
                break;
              }
              case 56: {
                Photo = input.ReadUInt32();
                break;
              }
              case 64: {
                PhotoFrame = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MemBrief : pb::IMessage {
        private static readonly pb::MessageParser<MemBrief> _parser = new pb::MessageParser<MemBrief>(() => new MemBrief());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemBrief> Parser { get { return _parser; } }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 1;
        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "career" field.</summary>
        public const int CareerFieldNumber = 2;
        private uint career_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Career {
          get { return career_; }
          set {
            career_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
          if (Career != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Career);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Career != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
              case 16: {
                Career = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTeamQueryMatchListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamQueryMatchListReq> _parser = new pb::MessageParser<CmdTeamQueryMatchListReq>(() => new CmdTeamQueryMatchListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamQueryMatchListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    ///targetId与playType只填充一个，找单目标或者某玩法的队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private global::Packet.UInt32Value playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UInt32Value PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (playType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (playType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (playType_ == null) {
              playType_ = new global::Packet.UInt32Value();
            }
            input.ReadMessage(playType_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamQueryMatchListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamQueryMatchListRes> _parser = new pb::MessageParser<CmdTeamQueryMatchListRes>(() => new CmdTeamQueryMatchListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamQueryMatchListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TargetTeamInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TargetTeamInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TargetTeamInfo> list_ = new pbc::RepeatedField<global::Packet.TargetTeamInfo>();
    /// <summary>
    /// 目标队伍列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TargetTeamInfo> List {
      get { return list_; }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 3;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "teamNum" field.</summary>
    public const int TeamNumFieldNumber = 4;
    private uint teamNum_;
    /// <summary>
    ///等待匹配队伍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamNum {
      get { return teamNum_; }
      set {
        teamNum_ = value;
      }
    }

    /// <summary>Field number for the "roleNum" field.</summary>
    public const int RoleNumFieldNumber = 5;
    private uint roleNum_;
    /// <summary>
    ///等待匹配玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleNum {
      get { return roleNum_; }
      set {
        roleNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (PlayType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayType);
      }
      if (TeamNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TeamNum);
      }
      if (RoleNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoleNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (TeamNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNum);
      }
      if (RoleNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 32: {
            TeamNum = input.ReadUInt32();
            break;
          }
          case 40: {
            RoleNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步状态, 队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncStat : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncStat> _parser = new pb::MessageParser<CmdTeamSyncStat>(() => new CmdTeamSyncStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncStat> Parser { get { return _parser; } }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 1;
    private uint stat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stat != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stat = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队员请求同步状态
  /// </summary>
  public sealed class CmdTeamSyncGetStatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncGetStatReq> _parser = new pb::MessageParser<CmdTeamSyncGetStatReq>(() => new CmdTeamSyncGetStatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncGetStatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///通知队长需要同步状态
  /// </summary>
  public sealed class CmdTeamSyncGetStatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncGetStatNtf> _parser = new pb::MessageParser<CmdTeamSyncGetStatNtf>(() => new CmdTeamSyncGetStatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncGetStatNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///同步功能组, 队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncNpcFunc : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncNpcFunc> _parser = new pb::MessageParser<CmdTeamSyncNpcFunc>(() => new CmdTeamSyncNpcFunc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncNpcFunc> Parser { get { return _parser; } }

    /// <summary>Field number for the "nNpcId" field.</summary>
    public const int NNpcIdFieldNumber = 1;
    private ulong nNpcId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NNpcId {
      get { return nNpcId_; }
      set {
        nNpcId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    /// <summary>
    ///任务表id （=0表示不是通过npc触发）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "funcId" field.</summary>
    public const int FuncIdFieldNumber = 3;
    private uint funcId_;
    /// <summary>
    ///功能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FuncId {
      get { return funcId_; }
      set {
        funcId_ = value;
      }
    }

    /// <summary>Field number for the "paramId" field.</summary>
    public const int ParamIdFieldNumber = 4;
    private uint paramId_;
    /// <summary>
    ///功能参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParamId {
      get { return paramId_; }
      set {
        paramId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NNpcId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (FuncId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FuncId);
      }
      if (ParamId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ParamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NNpcId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (FuncId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FuncId);
      }
      if (ParamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            FuncId = input.ReadUInt32();
            break;
          }
          case 32: {
            ParamId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步对话选择, 队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncTalkChoice : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncTalkChoice> _parser = new pb::MessageParser<CmdTeamSyncTalkChoice>(() => new CmdTeamSyncTalkChoice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncTalkChoice> Parser { get { return _parser; } }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 1;
    private uint choice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Choice {
      get { return choice_; }
      set {
        choice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Choice != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Choice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Choice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Choice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Choice = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步开始过场动画,队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncCutScene : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncCutScene> _parser = new pb::MessageParser<CmdTeamSyncCutScene>(() => new CmdTeamSyncCutScene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncCutScene> Parser { get { return _parser; } }

    /// <summary>Field number for the "cutSceneId" field.</summary>
    public const int CutSceneIdFieldNumber = 1;
    private uint cutSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CutSceneId {
      get { return cutSceneId_; }
      set {
        cutSceneId_ = value;
      }
    }

    /// <summary>Field number for the "teleport" field.</summary>
    public const int TeleportFieldNumber = 2;
    private bool teleport_;
    /// <summary>
    ///下次传送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Teleport {
      get { return teleport_; }
      set {
        teleport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutSceneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CutSceneId);
      }
      if (Teleport != false) {
        output.WriteRawTag(16);
        output.WriteBool(Teleport);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutSceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CutSceneId);
      }
      if (Teleport != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CutSceneId = input.ReadUInt32();
            break;
          }
          case 16: {
            Teleport = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步结束过场动画(只有队友和队长触发了同一个cutScne队友才受队长控制)
  ///队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncCutSceneEnd : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncCutSceneEnd> _parser = new pb::MessageParser<CmdTeamSyncCutSceneEnd>(() => new CmdTeamSyncCutSceneEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncCutSceneEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "cutSceneId" field.</summary>
    public const int CutSceneIdFieldNumber = 1;
    private uint cutSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CutSceneId {
      get { return cutSceneId_; }
      set {
        cutSceneId_ = value;
      }
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 2;
    private bool skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CutSceneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CutSceneId);
      }
      if (Skip != false) {
        output.WriteRawTag(16);
        output.WriteBool(Skip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CutSceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CutSceneId);
      }
      if (Skip != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CutSceneId = input.ReadUInt32();
            break;
          }
          case 16: {
            Skip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步开始字幕,队长请求,队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncSubTitle : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncSubTitle> _parser = new pb::MessageParser<CmdTeamSyncSubTitle>(() => new CmdTeamSyncSubTitle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncSubTitle> Parser { get { return _parser; } }

    /// <summary>Field number for the "subTitleId" field.</summary>
    public const int SubTitleIdFieldNumber = 1;
    private uint subTitleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubTitleId {
      get { return subTitleId_; }
      set {
        subTitleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubTitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SubTitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubTitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubTitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SubTitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步护镖开始,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncConvoyStart : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncConvoyStart> _parser = new pb::MessageParser<CmdTeamSyncConvoyStart>(() => new CmdTeamSyncConvoyStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncConvoyStart> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步护镖结束,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncConvoyEnd : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncConvoyEnd> _parser = new pb::MessageParser<CmdTeamSyncConvoyEnd>(() => new CmdTeamSyncConvoyEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncConvoyEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步npc跟随开始,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncFollowStart : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncFollowStart> _parser = new pb::MessageParser<CmdTeamSyncFollowStart>(() => new CmdTeamSyncFollowStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncFollowStart> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步npc跟随结束,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncFollowEnd : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncFollowEnd> _parser = new pb::MessageParser<CmdTeamSyncFollowEnd>(() => new CmdTeamSyncFollowEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncFollowEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步玩家跟踪npc开始,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncTrackStart : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncTrackStart> _parser = new pb::MessageParser<CmdTeamSyncTrackStart>(() => new CmdTeamSyncTrackStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncTrackStart> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步玩家跟踪npc结束,队长请求，队长和队友收到
  /// </summary>
  public sealed class CmdTeamSyncTrackEnd : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSyncTrackEnd> _parser = new pb::MessageParser<CmdTeamSyncTrackEnd>(() => new CmdTeamSyncTrackEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSyncTrackEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamGMENoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMENoticeReq> _parser = new pb::MessageParser<CmdTeamGMENoticeReq>(() => new CmdTeamGMENoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMENoticeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamGMENoticeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMENoticeNtf> _parser = new pb::MessageParser<CmdTeamGMENoticeNtf>(() => new CmdTeamGMENoticeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMENoticeNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamGMEAuthReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMEAuthReq> _parser = new pb::MessageParser<CmdTeamGMEAuthReq>(() => new CmdTeamGMEAuthReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMEAuthReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "isTeam" field.</summary>
    public const int IsTeamFieldNumber = 1;
    private bool isTeam_;
    /// <summary>
    ///是否team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeam {
      get { return isTeam_; }
      set {
        isTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTeam != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsTeam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTeam != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsTeam = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamGMEAuthAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMEAuthAck> _parser = new pb::MessageParser<CmdTeamGMEAuthAck>(() => new CmdTeamGMEAuthAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMEAuthAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "authbuffer" field.</summary>
    public const int AuthbufferFieldNumber = 1;
    private pb::ByteString authbuffer_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Authbuffer {
      get { return authbuffer_; }
      set {
        authbuffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isTeam" field.</summary>
    public const int IsTeamFieldNumber = 2;
    private bool isTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeam {
      get { return isTeam_; }
      set {
        isTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Authbuffer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Authbuffer);
      }
      if (IsTeam != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTeam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Authbuffer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Authbuffer);
      }
      if (IsTeam != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Authbuffer = input.ReadBytes();
            break;
          }
          case 16: {
            IsTeam = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamGMERoomEnterExitRpt : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMERoomEnterExitRpt> _parser = new pb::MessageParser<CmdTeamGMERoomEnterExitRpt>(() => new CmdTeamGMERoomEnterExitRpt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMERoomEnterExitRpt> Parser { get { return _parser; } }

    /// <summary>Field number for the "bEnter" field.</summary>
    public const int BEnterFieldNumber = 1;
    private bool bEnter_;
    /// <summary>
    ///true 进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BEnter {
      get { return bEnter_; }
      set {
        bEnter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BEnter != false) {
        output.WriteRawTag(8);
        output.WriteBool(BEnter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BEnter != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BEnter = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamGMERoomInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamGMERoomInfoNtf> _parser = new pb::MessageParser<CmdTeamGMERoomInfoNtf>(() => new CmdTeamGMERoomInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamGMERoomInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///房间现在的用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamNearRoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<TeamNearRoleInfo> _parser = new pb::MessageParser<TeamNearRoleInfo>(() => new TeamNearRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamNearRoleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "headId" field.</summary>
    public const int HeadIdFieldNumber = 4;
    private uint headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 5;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (HeadId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeadId);
      }
      if (Career != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeadId = input.ReadUInt32();
            break;
          }
          case 40: {
            Career = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamSearchNearRoleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSearchNearRoleReq> _parser = new pb::MessageParser<CmdTeamSearchNearRoleReq>(() => new CmdTeamSearchNearRoleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSearchNearRoleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamSearchNearRoleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamSearchNearRoleRes> _parser = new pb::MessageParser<CmdTeamSearchNearRoleRes>(() => new CmdTeamSearchNearRoleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamSearchNearRoleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleList" field.</summary>
    public const int RoleListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamNearRoleInfo> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamNearRoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamNearRoleInfo> roleList_ = new pbc::RepeatedField<global::Packet.TeamNearRoleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamNearRoleInfo> RoleList {
      get { return roleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleList_.WriteTo(output, _repeated_roleList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///喊话招募
  /// </summary>
  public sealed class CmdTeamLookForTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamLookForTeamReq> _parser = new pb::MessageParser<CmdTeamLookForTeamReq>(() => new CmdTeamLookForTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamLookForTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private uint chatType_;
    /// <summary>
    /// 参见：social.proto， ChatType
    ///只允许两个频道： ChatType_Guild = 1; ChatType_LookForTeam = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    /// <summary>
    ///自定义喊话内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    /// <summary>
    ///客户端自定义字段：
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChatType);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatType);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChatType = input.ReadUInt32();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成功发送返回
  /// </summary>
  public sealed class CmdTeamLookForTeamRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamLookForTeamRes> _parser = new pb::MessageParser<CmdTeamLookForTeamRes>(() => new CmdTeamLookForTeamRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamLookForTeamRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamTargetChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamTargetChangeReq> _parser = new pb::MessageParser<CmdTeamTargetChangeReq>(() => new CmdTeamTargetChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamTargetChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    /// z组队-组队目标 表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "in" field.</summary>
    public const int InFieldNumber = 2;
    private bool in_;
    /// <summary>
    ///切入 or 切出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool In {
      get { return in_; }
      set {
        in_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (In != false) {
        output.WriteRawTag(16);
        output.WriteBool(In);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (In != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            In = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知所有队员
  /// </summary>
  public sealed class CmdTeamTargetChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamTargetChangeNtf> _parser = new pb::MessageParser<CmdTeamTargetChangeNtf>(() => new CmdTeamTargetChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamTargetChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "lowLv" field.</summary>
    public const int LowLvFieldNumber = 2;
    private uint lowLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowLv {
      get { return lowLv_; }
      set {
        lowLv_ = value;
      }
    }

    /// <summary>Field number for the "highLv" field.</summary>
    public const int HighLvFieldNumber = 3;
    private uint highLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighLv {
      get { return highLv_; }
      set {
        highLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (LowLv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LowLv);
      }
      if (HighLv != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HighLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (LowLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowLv);
      }
      if (HighLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 16: {
            LowLv = input.ReadUInt32();
            break;
          }
          case 24: {
            HighLv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更换队长后通知队长邀请记录
  /// </summary>
  public sealed class CmdTeamInviteSocialDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteSocialDataNtf> _parser = new pb::MessageParser<CmdTeamInviteSocialDataNtf>(() => new CmdTeamInviteSocialDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteSocialDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TeamInviteSocialData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInviteSocialData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TeamInviteSocialData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///队伍中有队员入队超过10分钟，且不在列表中触发
  /// </summary>
  public sealed class CmdTeamInviteSocialReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteSocialReq> _parser = new pb::MessageParser<CmdTeamInviteSocialReq>(() => new CmdTeamInviteSocialReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteSocialReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTeamInviteSocialRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteSocialRes> _parser = new pb::MessageParser<CmdTeamInviteSocialRes>(() => new CmdTeamInviteSocialRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteSocialRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///邀请类型(1为好友邀请，2为家族邀请)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Packet.TeamInviteSocialData data_;
    /// <summary>
    ///邀请完后更新记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInviteSocialData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "memIds" field.</summary>
    public const int MemIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_memIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> memIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///本次触发邀请的队员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MemIds {
      get { return memIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      memIds_.WriteTo(output, _repeated_memIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memIds_.CalculateSize(_repeated_memIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Packet.TeamInviteSocialData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 34:
          case 32: {
            memIds_.AddEntriesFrom(input, _repeated_memIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInviteSocialConfirmReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteSocialConfirmReq> _parser = new pb::MessageParser<CmdTeamInviteSocialConfirmReq>(() => new CmdTeamInviteSocialConfirmReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteSocialConfirmReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 1;
    private bool send_;
    /// <summary>
    ///是否发送邀请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Send {
      get { return send_; }
      set {
        send_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///邀请类型(1为好友邀请，2为家族邀请)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "memIds" field.</summary>
    public const int MemIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_memIds_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> memIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///本次触发邀请的队员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MemIds {
      get { return memIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Send != false) {
        output.WriteRawTag(8);
        output.WriteBool(Send);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      memIds_.WriteTo(output, _repeated_memIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Send != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += memIds_.CalculateSize(_repeated_memIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Send = input.ReadBool();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            memIds_.AddEntriesFrom(input, _repeated_memIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamInviteSocialConfirmRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamInviteSocialConfirmRes> _parser = new pb::MessageParser<CmdTeamInviteSocialConfirmRes>(() => new CmdTeamInviteSocialConfirmRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamInviteSocialConfirmRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 1;
    private bool send_;
    /// <summary>
    ///是否发送邀请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Send {
      get { return send_; }
      set {
        send_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///邀请类型(1为好友邀请，2为家族邀请)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Packet.TeamInviteSocialData data_;
    /// <summary>
    ///邀请完后更新记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInviteSocialData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Send != false) {
        output.WriteRawTag(8);
        output.WriteBool(Send);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Send != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Send = input.ReadBool();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Packet.TeamInviteSocialData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamChangeOrderReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamChangeOrderReq> _parser = new pb::MessageParser<CmdTeamChangeOrderReq>(() => new CmdTeamChangeOrderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamChangeOrderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleA" field.</summary>
    public const int RoleAFieldNumber = 1;
    private ulong roleA_;
    /// <summary>
    ///欲交换的两名队友
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleA {
      get { return roleA_; }
      set {
        roleA_ = value;
      }
    }

    /// <summary>Field number for the "roleB" field.</summary>
    public const int RoleBFieldNumber = 2;
    private ulong roleB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleB {
      get { return roleB_; }
      set {
        roleB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleA != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleA);
      }
      if (RoleB != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleB);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleA != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleA);
      }
      if (RoleB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleB);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleA = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleB = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTeamChangeOrderNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamChangeOrderNtf> _parser = new pb::MessageParser<CmdTeamChangeOrderNtf>(() => new CmdTeamChangeOrderNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamChangeOrderNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamMem> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamMem.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamMem> mems_ = new pbc::RepeatedField<global::Packet.TeamMem>();
    /// <summary>
    ///所有队员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamMem> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///只发给队员
  /// </summary>
  public sealed class CmdTeamLeaderSkipBtnUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTeamLeaderSkipBtnUpdateNtf> _parser = new pb::MessageParser<CmdTeamLeaderSkipBtnUpdateNtf>(() => new CmdTeamLeaderSkipBtnUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTeamLeaderSkipBtnUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "all" field.</summary>
    public const int AllFieldNumber = 1;
    private bool all_;
    /// <summary>
    ///是否为全部数据 ， =false: 只更新对应key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool All {
      get { return all_; }
      set {
        all_ = value;
      }
    }

    /// <summary>Field number for the "skipBtnList" field.</summary>
    public const int SkipBtnListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TaskSkipTalkBtn> _repeated_skipBtnList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TaskSkipTalkBtn.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> skipBtnList_ = new pbc::RepeatedField<global::Packet.TaskSkipTalkBtn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> SkipBtnList {
      get { return skipBtnList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (All != false) {
        output.WriteRawTag(8);
        output.WriteBool(All);
      }
      skipBtnList_.WriteTo(output, _repeated_skipBtnList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (All != false) {
        size += 1 + 1;
      }
      size += skipBtnList_.CalculateSize(_repeated_skipBtnList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            All = input.ReadBool();
            break;
          }
          case 18: {
            skipBtnList_.AddEntriesFrom(input, _repeated_skipBtnList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
