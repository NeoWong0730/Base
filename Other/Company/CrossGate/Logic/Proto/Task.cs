// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 1700+
  /// </summary>
  public enum CmdTask {
    None = 0,
    /// <summary>
    ///数据通知
    /// </summary>
    DataNtf = 1701,
    /// <summary>
    ///领取任务
    /// </summary>
    AcceptTaskReq = 1702,
    AcceptTaskRes = 1703,
    /// <summary>
    ///提交任务
    /// </summary>
    CommitTaskReq = 1704,
    CommitTaskRes = 1705,
    /// <summary>
    ///放弃任务
    /// </summary>
    AbandonTaskReq = 1706,
    AbandonTaskRes = 1707,
    /// <summary>
    ///设置当前正在寻路任务，用于不遇怪
    /// </summary>
    CurdoningTaskReq = 1708,
    /// <summary>
    ///更新任务
    /// </summary>
    UpdateTaskNtf = 1709,
    /// <summary>
    ///追踪任务
    /// </summary>
    TraceTaskReq = 1710,
    TraceTaskRes = 1711,
    /// <summary>
    ///客户端更新任务状态
    /// </summary>
    UpdateTaskStatusReq = 1712,
    /// <summary>
    ///请求共享任务
    /// </summary>
    ShareTaskReq = 1713,
    /// <summary>
    ///发送共享任务通知(主动共享任务或队长接受任务时发送)
    /// </summary>
    ShareTaskNtf = 1714,
    /// <summary>
    ///收到共享任务的玩家操作
    /// </summary>
    ShareTaskOpReq = 1715,
    ShareTaskOpRes = 1733,
    /// <summary>
    ///共享任务反馈
    /// </summary>
    ShareTaskFeedbackNtf = 1716,
    /// <summary>
    ///线索任务数据通知
    /// </summary>
    ClueDataNtf = 1717,
    /// <summary>
    ///更新线索任务第一名通知
    /// </summary>
    ClueRankNtf = 1718,
    /// <summary>
    ///请求上交道具
    /// </summary>
    SubmitItemReq = 1719,
    SubmitItemRes = 1720,
    /// <summary>
    ///通过任务进战斗
    /// </summary>
    EnterBattleReq = 1721,
    /// <summary>
    ///地域防范事件登录通知
    /// </summary>
    RingTaskNtf = 1722,
    /// <summary>
    ///事件接取or放弃(进队，队长接取，放弃时)
    /// </summary>
    RingTaskChangeNtf = 1723,
    /// <summary>
    ///接取地域防范事件请求
    /// </summary>
    AcceptRingTaskReq = 1724,
    /// <summary>
    ///放弃地域防范事件请求
    /// </summary>
    GiveUpRingTaskReq = 1725,
    /// <summary>
    ///广播队伍地域防范事件完成
    /// </summary>
    RingTaskFinishNtf = 1726,
    /// <summary>
    ///通知队长执行地域防范任务失败(废弃)
    /// </summary>
    DoRingTaskFailNtf = 1727,
    /// <summary>
    ///地域防范任务数据更新
    /// </summary>
    RingTaskUpdateNtf = 1732,
    /// <summary>
    ///请求已完成任务列表
    /// </summary>
    GetFinishedTaskReq = 1728,
    GetFinishedTaskRes = 1729,
    /// <summary>
    ///酒吧事件初始通知 就叫bar吧 
    /// </summary>
    CmdBarAllEventNtf = 1730,
    /// <summary>
    ///刷新事件
    /// </summary>
    CmdBarRefresghReq = 1731,
    /// <summary>
    ///执行任务战斗失败通知
    /// </summary>
    DoBattleFailNtf = 1734,
    /// <summary>
    ///更新某类任务完成列表
    /// </summary>
    UpdateFinishedNtf = 1735,
    /// <summary>
    ///请求开始限时任务
    /// </summary>
    StartTimeLimitReq = 1736,
    StartTimeLimitRes = 1737,
    /// <summary>
    ///请求结束限时任务
    /// </summary>
    EndTimeLimitReq = 1738,
    EndTimeLimitRes = 1739,
    /// <summary>
    ///跟踪任务进战斗
    /// </summary>
    TrackEnterBattleReq = 1740,
    /// <summary>
    ///请求上交宠物
    /// </summary>
    SubmitPetReq = 1741,
    SubmitPetRes = 1742,
    /// <summary>
    ///更改任务跳过剧情开关设置
    /// </summary>
    SkipTalkBtnChangeReq = 1743,
    /// <summary>
    ///任务跳过剧情开关更新
    /// </summary>
    SkipTalkBtnUpdateNtf = 1744,
  }

  public enum ErrorTask {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///任务id错误
    /// </summary>
    TaskId = 1701,
    /// <summary>
    ///已领取该任务
    /// </summary>
    Accepted = 1702,
    /// <summary>
    ///玩家等级不符合要求
    /// </summary>
    RoleLv = 1703,
    /// <summary>
    ///玩家职业不符合要求
    /// </summary>
    RoleCareer = 1704,
    /// <summary>
    ///前置任务未完成
    /// </summary>
    PreposeTask = 1705,
    /// <summary>
    ///任务时间段错误
    /// </summary>
    TimeQuantum = 1706,
    /// <summary>
    ///已经完成了该任务
    /// </summary>
    NoReset = 1707,
    /// <summary>
    ///未接受此任务
    /// </summary>
    NoSuchTask = 1708,
    /// <summary>
    ///任务未完成
    /// </summary>
    NoFinished = 1709,
    /// <summary>
    ///任务不可放弃
    /// </summary>
    NoAbandon = 1710,
    /// <summary>
    ///该任务不可以设置追踪
    /// </summary>
    TraceUnable = 1711,
    /// <summary>
    ///该类别任务最大追踪数量为0
    /// </summary>
    TraceCategory = 1712,
    /// <summary>
    ///与目标距离过远
    /// </summary>
    DistanceFar = 1713,
    /// <summary>
    ///任务已更改
    /// </summary>
    TaskChanged = 1714,
    /// <summary>
    ///任务表配置出错
    /// </summary>
    Csverror = 1715,
    /// <summary>
    ///玩家不在任务目标地图
    /// </summary>
    MapOut = 1716,
    /// <summary>
    ///不可主动请求接取或放弃主线任务
    /// </summary>
    MainOpt = 1717,
    /// <summary>
    ///主线任务重复
    /// </summary>
    MainRepeat = 1718,
    /// <summary>
    ///任务所需道具不足
    /// </summary>
    ItemNone = 1719,
    /// <summary>
    ///XXX离你太远不能共享任务
    /// </summary>
    ShareDistanceFar = 1720,
    /// <summary>
    ///玩家没有在队伍里，不能共享任务
    /// </summary>
    NoTeam = 1721,
    /// <summary>
    ///该任务无法共享
    /// </summary>
    NoShare = 1722,
    /// <summary>
    ///XXX拒绝了该共享任务
    /// </summary>
    ShareRefuse = 1723,
    /// <summary>
    ///主线任务无法共享
    /// </summary>
    ShareMain = 1724,
    /// <summary>
    ///请选择一个任务奖励
    /// </summary>
    SeleDrop = 1725,
    /// <summary>
    ///线索任务配置表没有对应id
    /// </summary>
    ClueTaskId = 1726,
    /// <summary>
    ///不满足线索任务触发所需等级
    /// </summary>
    CondLevel = 1727,
    /// <summary>
    ///不满足线索任务所需侦探/冒险等级
    /// </summary>
    CondClueLevel = 1728,
    /// <summary>
    ///不满足线索任务触发需完成任务id
    /// </summary>
    CondTaskid = 1729,
    /// <summary>
    ///不满足线索任务需要解锁地图id
    /// </summary>
    CondMapid = 1730,
    /// <summary>
    ///不满足线索任务触发特殊条件id
    /// </summary>
    CondSpecialCondiid = 1731,
    /// <summary>
    ///客户端请求更新任务状态，position超过最大值
    /// </summary>
    UpdateTaskStatus = 1732,
    /// <summary>
    ///未找到对应的对话选择表id
    /// </summary>
    CsvtalkChooseId = 1733,
    /// <summary>
    ///请求的对话选择任务选择id错误
    /// </summary>
    TalkChooseId = 1734,
    /// <summary>
    ///该任务放弃后不可重接
    /// </summary>
    ResetAccept = 1735,
    /// <summary>
    ///任务已完成（任务进度已满）
    /// </summary>
    IsCompleted = 1736,
    /// <summary>
    ///验证任务时，请求参数错误
    /// </summary>
    CheckTaskPara = 1737,
    /// <summary>
    ///该任务由对话选择后接受
    /// </summary>
    TalkSeleTask = 1738,
    /// <summary>
    ///没发现npc
    /// </summary>
    NotFoundNpc = 1739,
    /// <summary>
    ///任务子目标类型错误
    /// </summary>
    TargetType = 1740,
    /// <summary>
    ///任务npc功能未开放
    /// </summary>
    FunctionOpen = 1741,
    /// <summary>
    ///不能重复接取地域防范事件
    /// </summary>
    HasAcceptedRingTask = 1742,
    /// <summary>
    ///当前时间无可接取的事件
    /// </summary>
    NoneRingTaskCanAcceptNow = 1743,
    /// <summary>
    ///最低等级不符，无可接事件
    /// </summary>
    RingTaskLevelNotEnough = 1744,
    /// <summary>
    ///队伍参与人数不足，不能接取事件
    /// </summary>
    RingTaskMemNumNotEnough = 1745,
    /// <summary>
    ///未接取事件
    /// </summary>
    NotAcceptRingTask = 1746,
    /// <summary>
    ///不能手动接取该任务
    /// </summary>
    UnsupportManualAccept = 1747,
    /// <summary>
    ///地域防范事件表格未找到
    /// </summary>
    RingTaskCsvnotFound = 1748,
    /// <summary>
    ///该任务已追踪
    /// </summary>
    Traced = 1749,
    /// <summary>
    ///该任务未追踪
    /// </summary>
    NoTrace = 1750,
    /// <summary>
    ///地域防范任务执行条件检查失败
    /// </summary>
    RingTaskCondCheckFaild = 1751,
    /// <summary>
    ///任务目标执行条件不满足
    /// </summary>
    TaskOrder = 1752,
    /// <summary>
    ///战斗任务进入检查失败
    /// </summary>
    TaskDoBattleCheckFail = 1753,
    /// <summary>
    ///调查未完成，无法接受任务
    /// </summary>
    NotInvestigate = 1754,
    /// <summary>
    ///该任务目标不是限时任务
    /// </summary>
    NotTimeLimit = 1755,
    /// <summary>
    ///已开启该任务目标限时任务
    /// </summary>
    StartTimeLimit = 1756,
    /// <summary>
    ///限时任务未开启或已超时
    /// </summary>
    TimeLimit = 1757,
    /// <summary>
    ///生活技能等级不足，无法接取任务
    /// </summary>
    LifeSkillLv = 1758,
    /// <summary>
    ///找不到该任务的csvinfo
    /// </summary>
    CannotFoundInfo = 1759,
    /// <summary>
    ///宠物上交不满足条件
    /// </summary>
    SubmitPetCondition = 1760,
    /// <summary>
    ///该跳过剧情按钮无效， 无对应的任务
    /// </summary>
    SkipTalkBtnInvalid = 1761,
    /// <summary>
    ///进阶任务条件配置错误
    /// </summary>
    PromoteCareerCfgError = 1762,
  }

  public enum TaskActiveReason {
    None = 0,
    /// <summary>
    ///  任务增加经验
    /// </summary>
    TaskAddExp = 1701,
    /// <summary>
    ///  提交任务
    /// </summary>
    Commit = 1702,
    /// <summary>
    ///  采集
    /// </summary>
    Collect = 1703,
    /// <summary>
    ///地域防范完成任务
    /// </summary>
    RingTaskCommit = 1704,
    /// <summary>
    ///地域防范靠谱礼盒
    /// </summary>
    RingTaskReliable = 1705,
    /// <summary>
    /// 酒吧事件
    /// </summary>
    TaskBar = 1706,
    /// <summary>
    /// 任务跳过
    /// </summary>
    Skip = 1707,
  }

  /// <summary>
  ///共享任务玩家操作
  /// </summary>
  public enum TaskShareCode {
    None = 0,
    /// <summary>
    ///xx接受了任务
    /// </summary>
    Accept = 1701,
    /// <summary>
    ///xx拒绝了任务
    /// </summary>
    Refuse = 1702,
    /// <summary>
    ///xx条件不足，无法接受任务
    /// </summary>
    NoCondition = 1703,
    /// <summary>
    ///xx离你太远，无法接受任务
    /// </summary>
    DistanceFar = 1704,
    /// <summary>
    ///xx已完成了该任务
    /// </summary>
    Finished = 1705,
    /// <summary>
    ///xx已接受了该任务
    /// </summary>
    Accepted = 1706,
  }

  #endregion

  #region Messages
  public sealed class TaskProcess : pb::IMessage {
    private static readonly pb::MessageParser<TaskProcess> _parser = new pb::MessageParser<TaskProcess>(() => new TaskProcess());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskProcess> Parser { get { return _parser; } }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    /// <summary>
    ///任务目标位置(第一位为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "targetProcess" field.</summary>
    public const int TargetProcessFieldNumber = 2;
    private uint targetProcess_;
    /// <summary>
    ///目标进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetProcess {
      get { return targetProcess_; }
      set {
        targetProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (TargetProcess != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (TargetProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetProcess = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TaskUnit : pb::IMessage {
    private static readonly pb::MessageParser<TaskUnit> _parser = new pb::MessageParser<TaskUnit>(() => new TaskUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TaskProcess> _repeated_process_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TaskProcess.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskProcess> process_ = new pbc::RepeatedField<global::Packet.TaskProcess>();
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskProcess> Process {
      get { return process_; }
    }

    /// <summary>Field number for the "timeLimitIndex" field.</summary>
    public const int TimeLimitIndexFieldNumber = 3;
    private int timeLimitIndex_;
    /// <summary>
    ///开启了限时任务的子任务(-1为未开启)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLimitIndex {
      get { return timeLimitIndex_; }
      set {
        timeLimitIndex_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private uint endTime_;
    /// <summary>
    ///限时任务结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      process_.WriteTo(output, _repeated_process_codec);
      if (TimeLimitIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimeLimitIndex);
      }
      if (EndTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      size += process_.CalculateSize(_repeated_process_codec);
      if (TimeLimitIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLimitIndex);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 18: {
            process_.AddEntriesFrom(input, _repeated_process_codec);
            break;
          }
          case 24: {
            TimeLimitIndex = input.ReadInt32();
            break;
          }
          case 32: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///数据通知
  /// </summary>
  public sealed class CmdTaskDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskDataNtf> _parser = new pb::MessageParser<CmdTaskDataNtf>(() => new CmdTaskDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskInfo" field.</summary>
    public const int TaskInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TaskUnit> _repeated_taskInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TaskUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskUnit> taskInfo_ = new pbc::RepeatedField<global::Packet.TaskUnit>();
    /// <summary>
    ///任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskUnit> TaskInfo {
      get { return taskInfo_; }
    }

    /// <summary>Field number for the "taskVersion" field.</summary>
    public const int TaskVersionFieldNumber = 2;
    private uint taskVersion_;
    /// <summary>
    ///任务版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskVersion {
      get { return taskVersion_; }
      set {
        taskVersion_ = value;
      }
    }

    /// <summary>Field number for the "traceTasks" field.</summary>
    public const int TraceTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_traceTasks_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> traceTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///追踪任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TraceTasks {
      get { return traceTasks_; }
    }

    /// <summary>Field number for the "discardTasks" field.</summary>
    public const int DiscardTasksFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_discardTasks_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> discardTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///禁选任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DiscardTasks {
      get { return discardTasks_; }
    }

    /// <summary>Field number for the "skipBtnList" field.</summary>
    public const int SkipBtnListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.TaskSkipTalkBtn> _repeated_skipBtnList_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.TaskSkipTalkBtn.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> skipBtnList_ = new pbc::RepeatedField<global::Packet.TaskSkipTalkBtn>();
    /// <summary>
    ///跳过剧情开关 （有对应key的表示已经设置过）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> SkipBtnList {
      get { return skipBtnList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskInfo_.WriteTo(output, _repeated_taskInfo_codec);
      if (TaskVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskVersion);
      }
      traceTasks_.WriteTo(output, _repeated_traceTasks_codec);
      discardTasks_.WriteTo(output, _repeated_discardTasks_codec);
      skipBtnList_.WriteTo(output, _repeated_skipBtnList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskInfo_.CalculateSize(_repeated_taskInfo_codec);
      if (TaskVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskVersion);
      }
      size += traceTasks_.CalculateSize(_repeated_traceTasks_codec);
      size += discardTasks_.CalculateSize(_repeated_discardTasks_codec);
      size += skipBtnList_.CalculateSize(_repeated_skipBtnList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskInfo_.AddEntriesFrom(input, _repeated_taskInfo_codec);
            break;
          }
          case 16: {
            TaskVersion = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            traceTasks_.AddEntriesFrom(input, _repeated_traceTasks_codec);
            break;
          }
          case 34:
          case 32: {
            discardTasks_.AddEntriesFrom(input, _repeated_discardTasks_codec);
            break;
          }
          case 42: {
            skipBtnList_.AddEntriesFrom(input, _repeated_skipBtnList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求已完成任务列表
  /// </summary>
  public sealed class CmdTaskGetFinishedTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskGetFinishedTaskReq> _parser = new pb::MessageParser<CmdTaskGetFinishedTaskReq>(() => new CmdTaskGetFinishedTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskGetFinishedTaskReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTaskGetFinishedTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskGetFinishedTaskRes> _parser = new pb::MessageParser<CmdTaskGetFinishedTaskRes>(() => new CmdTaskGetFinishedTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskGetFinishedTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskVersion" field.</summary>
    public const int TaskVersionFieldNumber = 1;
    private uint taskVersion_;
    /// <summary>
    ///任务版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskVersion {
      get { return taskVersion_; }
      set {
        taskVersion_ = value;
      }
    }

    /// <summary>Field number for the "finishTasks" field.</summary>
    public const int FinishTasksFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_finishTasks_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> finishTasks_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已完成任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FinishTasks {
      get { return finishTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskVersion);
      }
      finishTasks_.WriteTo(output, _repeated_finishTasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskVersion);
      }
      size += finishTasks_.CalculateSize(_repeated_finishTasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskVersion = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            finishTasks_.AddEntriesFrom(input, _repeated_finishTasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取任务
  /// </summary>
  public sealed class CmdTaskAcceptTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskAcceptTaskReq> _parser = new pb::MessageParser<CmdTaskAcceptTaskReq>(() => new CmdTaskAcceptTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskAcceptTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 2;
    private ulong npcUId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskAcceptTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskAcceptTaskRes> _parser = new pb::MessageParser<CmdTaskAcceptTaskRes>(() => new CmdTaskAcceptTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskAcceptTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskInfo" field.</summary>
    public const int TaskInfoFieldNumber = 1;
    private global::Packet.TaskUnit taskInfo_;
    /// <summary>
    ///任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TaskUnit TaskInfo {
      get { return taskInfo_; }
      set {
        taskInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (taskInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TaskInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (taskInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (taskInfo_ == null) {
              taskInfo_ = new global::Packet.TaskUnit();
            }
            input.ReadMessage(taskInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提交任务
  /// </summary>
  public sealed class CmdTaskCommitTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskCommitTaskReq> _parser = new pb::MessageParser<CmdTaskCommitTaskReq>(() => new CmdTaskCommitTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskCommitTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 2;
    private ulong npcUId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    /// <summary>Field number for the "dropId" field.</summary>
    public const int DropIdFieldNumber = 3;
    private uint dropId_;
    /// <summary>
    ///掉落id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DropId {
      get { return dropId_; }
      set {
        dropId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUId);
      }
      if (DropId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DropId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      if (DropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DropId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUId = input.ReadUInt64();
            break;
          }
          case 24: {
            DropId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskCommitTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskCommitTaskRes> _parser = new pb::MessageParser<CmdTaskCommitTaskRes>(() => new CmdTaskCommitTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskCommitTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///放弃任务
  /// </summary>
  public sealed class CmdTaskAbandonTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskAbandonTaskReq> _parser = new pb::MessageParser<CmdTaskAbandonTaskReq>(() => new CmdTaskAbandonTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskAbandonTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskAbandonTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskAbandonTaskRes> _parser = new pb::MessageParser<CmdTaskAbandonTaskRes>(() => new CmdTaskAbandonTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskAbandonTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置当前正在寻路任务
  /// </summary>
  public sealed class CmdTaskCurdoningTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskCurdoningTaskReq> _parser = new pb::MessageParser<CmdTaskCurdoningTaskReq>(() => new CmdTaskCurdoningTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskCurdoningTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新任务
  /// </summary>
  public sealed class CmdTaskUpdateTaskNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskUpdateTaskNtf> _parser = new pb::MessageParser<CmdTaskUpdateTaskNtf>(() => new CmdTaskUpdateTaskNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskUpdateTaskNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskInfo" field.</summary>
    public const int TaskInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TaskUnit> _repeated_taskInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TaskUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskUnit> taskInfo_ = new pbc::RepeatedField<global::Packet.TaskUnit>();
    /// <summary>
    ///任务更新数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskUnit> TaskInfo {
      get { return taskInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskInfo_.WriteTo(output, _repeated_taskInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskInfo_.CalculateSize(_repeated_taskInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskInfo_.AddEntriesFrom(input, _repeated_taskInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///追踪任务
  /// </summary>
  public sealed class CmdTaskTraceTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskTraceTaskReq> _parser = new pb::MessageParser<CmdTaskTraceTaskReq>(() => new CmdTaskTraceTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskTraceTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "isAddTrace" field.</summary>
    public const int IsAddTraceFieldNumber = 1;
    private bool isAddTrace_;
    /// <summary>
    ///取消追踪-false，添加追踪-true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAddTrace {
      get { return isAddTrace_; }
      set {
        isAddTrace_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "isAuto" field.</summary>
    public const int IsAutoFieldNumber = 3;
    private bool isAuto_;
    /// <summary>
    ///是否是自动追踪的任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAuto {
      get { return isAuto_; }
      set {
        isAuto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAddTrace != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAddTrace);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (IsAuto != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAuto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsAddTrace != false) {
        size += 1 + 1;
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (IsAuto != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAddTrace = input.ReadBool();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsAuto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskTraceTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskTraceTaskRes> _parser = new pb::MessageParser<CmdTaskTraceTaskRes>(() => new CmdTaskTraceTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskTraceTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "addTaskId" field.</summary>
    public const int AddTaskIdFieldNumber = 1;
    private uint addTaskId_;
    /// <summary>
    ///添加追踪任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddTaskId {
      get { return addTaskId_; }
      set {
        addTaskId_ = value;
      }
    }

    /// <summary>Field number for the "subTaskId" field.</summary>
    public const int SubTaskIdFieldNumber = 2;
    private uint subTaskId_;
    /// <summary>
    ///取消追踪任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubTaskId {
      get { return subTaskId_; }
      set {
        subTaskId_ = value;
      }
    }

    /// <summary>Field number for the "isAuto" field.</summary>
    public const int IsAutoFieldNumber = 3;
    private bool isAuto_;
    /// <summary>
    ///是否是自动追踪的任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAuto {
      get { return isAuto_; }
      set {
        isAuto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AddTaskId);
      }
      if (SubTaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubTaskId);
      }
      if (IsAuto != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAuto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddTaskId);
      }
      if (SubTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubTaskId);
      }
      if (IsAuto != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddTaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubTaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsAuto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端更新任务状态
  /// </summary>
  public sealed class CmdTaskUpdateTaskStatusReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskUpdateTaskStatusReq> _parser = new pb::MessageParser<CmdTaskUpdateTaskStatusReq>(() => new CmdTaskUpdateTaskStatusReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskUpdateTaskStatusReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 2;
    private ulong npcUId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private uint position_;
    /// <summary>
    ///要更新的任务目标位置(第一位为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 4;
    private uint opt_;
    /// <summary>
    ///对话选择任务选择id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "talkChooseId" field.</summary>
    public const int TalkChooseIdFieldNumber = 5;
    private uint talkChooseId_;
    /// <summary>
    ///对话选择表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalkChooseId {
      get { return talkChooseId_; }
      set {
        talkChooseId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Position);
      }
      if (Opt != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Opt);
      }
      if (TalkChooseId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TalkChooseId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Opt);
      }
      if (TalkChooseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalkChooseId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUId = input.ReadUInt64();
            break;
          }
          case 24: {
            Position = input.ReadUInt32();
            break;
          }
          case 32: {
            Opt = input.ReadUInt32();
            break;
          }
          case 40: {
            TalkChooseId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求共享任务
  /// </summary>
  public sealed class CmdTaskShareTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskShareTaskReq> _parser = new pb::MessageParser<CmdTaskShareTaskReq>(() => new CmdTaskShareTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskShareTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送共享任务通知(主动共享任务或队长接受任务时发送)
  /// </summary>
  public sealed class CmdTaskShareTaskNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskShareTaskNtf> _parser = new pb::MessageParser<CmdTaskShareTaskNtf>(() => new CmdTaskShareTaskNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskShareTaskNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    /// <summary>
    ///发送共享任务的玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到共享任务的玩家操作
  /// </summary>
  public sealed class CmdTaskShareTaskOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskShareTaskOpReq> _parser = new pb::MessageParser<CmdTaskShareTaskOpReq>(() => new CmdTaskShareTaskOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskShareTaskOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private uint op_;
    /// <summary>
    ///0 接受 1 拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private string roleName_ = "";
    /// <summary>
    ///发送共享任务的玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Op);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Op = input.ReadUInt32();
            break;
          }
          case 26: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskShareTaskOpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskShareTaskOpRes> _parser = new pb::MessageParser<CmdTaskShareTaskOpRes>(() => new CmdTaskShareTaskOpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskShareTaskOpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private uint op_;
    /// <summary>
    ///0 接受 1 拒绝
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///共享任务反馈
  /// </summary>
  public sealed class CmdTaskShareTaskFeedbackNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskShareTaskFeedbackNtf> _parser = new pb::MessageParser<CmdTaskShareTaskFeedbackNtf>(() => new CmdTaskShareTaskFeedbackNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskShareTaskFeedbackNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 1;
    private string roleName_ = "";
    /// <summary>
    ///玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    /// <summary>
    ///玩家操作状态,TaskShareCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoleName);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoleName = input.ReadString();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ClueTaskUnit : pb::IMessage {
    private static readonly pb::MessageParser<ClueTaskUnit> _parser = new pb::MessageParser<ClueTaskUnit>(() => new ClueTaskUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClueTaskUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "clueTaskId" field.</summary>
    public const int ClueTaskIdFieldNumber = 1;
    private uint clueTaskId_;
    /// <summary>
    ///线索任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClueTaskId {
      get { return clueTaskId_; }
      set {
        clueTaskId_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 2;
    private uint finishTime_;
    /// <summary>
    ///任务完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///是否是第一个完成任务，0-否，1-是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClueTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClueTaskId);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishTime);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClueTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClueTaskId);
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClueTaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishTime = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///线索任务数据通知
  /// </summary>
  public sealed class CmdTaskClueDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskClueDataNtf> _parser = new pb::MessageParser<CmdTaskClueDataNtf>(() => new CmdTaskClueDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskClueDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "clueTaskInfo" field.</summary>
    public const int ClueTaskInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ClueTaskUnit> _repeated_clueTaskInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ClueTaskUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.ClueTaskUnit> clueTaskInfo_ = new pbc::RepeatedField<global::Packet.ClueTaskUnit>();
    /// <summary>
    ///线索任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ClueTaskUnit> ClueTaskInfo {
      get { return clueTaskInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clueTaskInfo_.WriteTo(output, _repeated_clueTaskInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clueTaskInfo_.CalculateSize(_repeated_clueTaskInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            clueTaskInfo_.AddEntriesFrom(input, _repeated_clueTaskInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新线索任务第一名通知
  /// </summary>
  public sealed class CmdTaskClueRankNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskClueRankNtf> _parser = new pb::MessageParser<CmdTaskClueRankNtf>(() => new CmdTaskClueRankNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskClueRankNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "clueTaskId" field.</summary>
    public const int ClueTaskIdFieldNumber = 1;
    private uint clueTaskId_;
    /// <summary>
    ///线索任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClueTaskId {
      get { return clueTaskId_; }
      set {
        clueTaskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClueTaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClueTaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClueTaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClueTaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClueTaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求上交道具
  /// </summary>
  public sealed class CmdTaskSubmitItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSubmitItemReq> _parser = new pb::MessageParser<CmdTaskSubmitItemReq>(() => new CmdTaskSubmitItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSubmitItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 2;
    private ulong npcUId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private uint position_;
    /// <summary>
    ///要更新的任务目标位置(第一位为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUId = input.ReadUInt64();
            break;
          }
          case 24: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskSubmitItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSubmitItemRes> _parser = new pb::MessageParser<CmdTaskSubmitItemRes>(() => new CmdTaskSubmitItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSubmitItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///要更新的任务目标位置(第一位为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskEnterBattleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskEnterBattleReq> _parser = new pb::MessageParser<CmdTaskEnterBattleReq>(() => new CmdTaskEnterBattleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskEnterBattleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskIndex" field.</summary>
    public const int TaskIndexFieldNumber = 3;
    private uint taskIndex_;
    /// <summary>
    ///子任务目标？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (TaskIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskIndex);
      }
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskRingTaskNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskRingTaskNtf> _parser = new pb::MessageParser<CmdTaskRingTaskNtf>(() => new CmdTaskRingTaskNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskRingTaskNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "ringId" field.</summary>
    public const int RingIdFieldNumber = 1;
    private uint ringId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RingId {
      get { return ringId_; }
      set {
        ringId_ = value;
      }
    }

    /// <summary>Field number for the "rewardLimit" field.</summary>
    public const int RewardLimitFieldNumber = 2;
    private global::Packet.ResLimit rewardLimit_;
    /// <summary>
    ///单倍次数信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit RewardLimit {
      get { return rewardLimit_; }
      set {
        rewardLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RingId);
      }
      if (rewardLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RewardLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RingId);
      }
      if (rewardLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RingId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (rewardLimit_ == null) {
              rewardLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(rewardLimit_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskRingTaskChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskRingTaskChangeNtf> _parser = new pb::MessageParser<CmdTaskRingTaskChangeNtf>(() => new CmdTaskRingTaskChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskRingTaskChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "ringId" field.</summary>
    public const int RingIdFieldNumber = 1;
    private uint ringId_;
    /// <summary>
    /// 0为取消\未接取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RingId {
      get { return ringId_; }
      set {
        ringId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskAcceptRingTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskAcceptRingTaskReq> _parser = new pb::MessageParser<CmdTaskAcceptRingTaskReq>(() => new CmdTaskAcceptRingTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskAcceptRingTaskReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTaskGiveUpRingTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskGiveUpRingTaskReq> _parser = new pb::MessageParser<CmdTaskGiveUpRingTaskReq>(() => new CmdTaskGiveUpRingTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskGiveUpRingTaskReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTaskRingTaskFinishNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskRingTaskFinishNtf> _parser = new pb::MessageParser<CmdTaskRingTaskFinishNtf>(() => new CmdTaskRingTaskFinishNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskRingTaskFinishNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "ringId" field.</summary>
    public const int RingIdFieldNumber = 1;
    private uint ringId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RingId {
      get { return ringId_; }
      set {
        ringId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RingId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RingId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RingId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RingId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///执行失败详细信息(废弃)
  /// </summary>
  public sealed class CmdTaskDoRingTaskFailNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskDoRingTaskFailNtf> _parser = new pb::MessageParser<CmdTaskDoRingTaskFailNtf>(() => new CmdTaskDoRingTaskFailNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskDoRingTaskFailNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "numErr" field.</summary>
    public const int NumErrFieldNumber = 1;
    private global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemNumError numErr_;
    /// <summary>
    ///以下错误选其一
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemNumError NumErr {
      get { return numErr_; }
      set {
        numErr_ = value;
      }
    }

    /// <summary>Field number for the "lvlErr" field.</summary>
    public const int LvlErrFieldNumber = 2;
    private global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemLvlError lvlErr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemLvlError LvlErr {
      get { return lvlErr_; }
      set {
        lvlErr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (numErr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NumErr);
      }
      if (lvlErr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LvlErr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (numErr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumErr);
      }
      if (lvlErr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LvlErr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (numErr_ == null) {
              numErr_ = new global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemNumError();
            }
            input.ReadMessage(numErr_);
            break;
          }
          case 18: {
            if (lvlErr_ == null) {
              lvlErr_ = new global::Packet.CmdTaskDoRingTaskFailNtf.Types.MemLvlError();
            }
            input.ReadMessage(lvlErr_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTaskDoRingTaskFailNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MemNumError : pb::IMessage {
        private static readonly pb::MessageParser<MemNumError> _parser = new pb::MessageParser<MemNumError>(() => new MemNumError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemNumError> Parser { get { return _parser; } }

        /// <summary>Field number for the "nowNum" field.</summary>
        public const int NowNumFieldNumber = 1;
        private uint nowNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NowNum {
          get { return nowNum_; }
          set {
            nowNum_ = value;
          }
        }

        /// <summary>Field number for the "needNum" field.</summary>
        public const int NeedNumFieldNumber = 2;
        private uint needNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NeedNum {
          get { return needNum_; }
          set {
            needNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NowNum != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(NowNum);
          }
          if (NeedNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NeedNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NowNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowNum);
          }
          if (NeedNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NowNum = input.ReadUInt32();
                break;
              }
              case 16: {
                NeedNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MemLvlError : pb::IMessage {
        private static readonly pb::MessageParser<MemLvlError> _parser = new pb::MessageParser<MemLvlError>(() => new MemLvlError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemLvlError> Parser { get { return _parser; } }

        /// <summary>Field number for the "mems" field.</summary>
        public const int MemsFieldNumber = 1;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_mems_codec
            = pb::FieldCodec.ForBytes(10);
        private readonly pbc::RepeatedField<pb::ByteString> mems_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Mems {
          get { return mems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          mems_.WriteTo(output, _repeated_mems_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += mems_.CalculateSize(_repeated_mems_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                mems_.AddEntriesFrom(input, _repeated_mems_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTaskRingTaskUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskRingTaskUpdateNtf> _parser = new pb::MessageParser<CmdTaskRingTaskUpdateNtf>(() => new CmdTaskRingTaskUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskRingTaskUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardLimit" field.</summary>
    public const int RewardLimitFieldNumber = 1;
    private global::Packet.ResLimit rewardLimit_;
    /// <summary>
    ///更新单倍奖励次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit RewardLimit {
      get { return rewardLimit_; }
      set {
        rewardLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rewardLimit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rewardLimit_ == null) {
              rewardLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(rewardLimit_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBarAllEventNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBarAllEventNtf> _parser = new pb::MessageParser<CmdBarAllEventNtf>(() => new CmdBarAllEventNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBarAllEventNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "usedTimes" field.</summary>
    public const int UsedTimesFieldNumber = 1;
    private uint usedTimes_;
    /// <summary>
    ///已经完成的事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedTimes {
      get { return usedTimes_; }
      set {
        usedTimes_ = value;
      }
    }

    /// <summary>Field number for the "expireDay" field.</summary>
    public const int ExpireDayFieldNumber = 2;
    private uint expireDay_;
    /// <summary>
    ///次数过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireDay {
      get { return expireDay_; }
      set {
        expireDay_ = value;
      }
    }

    /// <summary>Field number for the "hasFreshed" field.</summary>
    public const int HasFreshedFieldNumber = 3;
    private bool hasFreshed_;
    /// <summary>
    ///是否已经刷过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFreshed {
      get { return hasFreshed_; }
      set {
        hasFreshed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsedTimes != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UsedTimes);
      }
      if (ExpireDay != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExpireDay);
      }
      if (HasFreshed != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasFreshed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedTimes);
      }
      if (ExpireDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireDay);
      }
      if (HasFreshed != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UsedTimes = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireDay = input.ReadUInt32();
            break;
          }
          case 24: {
            HasFreshed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBarRefresghReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBarRefresghReq> _parser = new pb::MessageParser<CmdBarRefresghReq>(() => new CmdBarRefresghReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBarRefresghReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTaskDoBattleFailNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskDoBattleFailNtf> _parser = new pb::MessageParser<CmdTaskDoBattleFailNtf>(() => new CmdTaskDoBattleFailNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskDoBattleFailNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskCategory" field.</summary>
    public const int TaskCategoryFieldNumber = 1;
    private uint taskCategory_;
    /// <summary>
    ///任务类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskCategory {
      get { return taskCategory_; }
      set {
        taskCategory_ = value;
      }
    }

    /// <summary>Field number for the "numErr" field.</summary>
    public const int NumErrFieldNumber = 2;
    private global::Packet.CmdTaskDoBattleFailNtf.Types.MemNumError numErr_;
    /// <summary>
    ///以下错误选其一
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTaskDoBattleFailNtf.Types.MemNumError NumErr {
      get { return numErr_; }
      set {
        numErr_ = value;
      }
    }

    /// <summary>Field number for the "lvlErr" field.</summary>
    public const int LvlErrFieldNumber = 3;
    private global::Packet.CmdTaskDoBattleFailNtf.Types.MemLvlError lvlErr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTaskDoBattleFailNtf.Types.MemLvlError LvlErr {
      get { return lvlErr_; }
      set {
        lvlErr_ = value;
      }
    }

    /// <summary>Field number for the "funcOpenErr" field.</summary>
    public const int FuncOpenErrFieldNumber = 4;
    private global::Packet.CmdTaskDoBattleFailNtf.Types.FuncOpenError funcOpenErr_;
    /// <summary>
    ///功能开启检测失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTaskDoBattleFailNtf.Types.FuncOpenError FuncOpenErr {
      get { return funcOpenErr_; }
      set {
        funcOpenErr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskCategory != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskCategory);
      }
      if (numErr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NumErr);
      }
      if (lvlErr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LvlErr);
      }
      if (funcOpenErr_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FuncOpenErr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskCategory);
      }
      if (numErr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumErr);
      }
      if (lvlErr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LvlErr);
      }
      if (funcOpenErr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FuncOpenErr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskCategory = input.ReadUInt32();
            break;
          }
          case 18: {
            if (numErr_ == null) {
              numErr_ = new global::Packet.CmdTaskDoBattleFailNtf.Types.MemNumError();
            }
            input.ReadMessage(numErr_);
            break;
          }
          case 26: {
            if (lvlErr_ == null) {
              lvlErr_ = new global::Packet.CmdTaskDoBattleFailNtf.Types.MemLvlError();
            }
            input.ReadMessage(lvlErr_);
            break;
          }
          case 34: {
            if (funcOpenErr_ == null) {
              funcOpenErr_ = new global::Packet.CmdTaskDoBattleFailNtf.Types.FuncOpenError();
            }
            input.ReadMessage(funcOpenErr_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTaskDoBattleFailNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MemNumError : pb::IMessage {
        private static readonly pb::MessageParser<MemNumError> _parser = new pb::MessageParser<MemNumError>(() => new MemNumError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemNumError> Parser { get { return _parser; } }

        /// <summary>Field number for the "nowNum" field.</summary>
        public const int NowNumFieldNumber = 1;
        private uint nowNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NowNum {
          get { return nowNum_; }
          set {
            nowNum_ = value;
          }
        }

        /// <summary>Field number for the "needNum" field.</summary>
        public const int NeedNumFieldNumber = 2;
        private uint needNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NeedNum {
          get { return needNum_; }
          set {
            needNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NowNum != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(NowNum);
          }
          if (NeedNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NeedNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NowNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowNum);
          }
          if (NeedNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NowNum = input.ReadUInt32();
                break;
              }
              case 16: {
                NeedNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MemLvlError : pb::IMessage {
        private static readonly pb::MessageParser<MemLvlError> _parser = new pb::MessageParser<MemLvlError>(() => new MemLvlError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemLvlError> Parser { get { return _parser; } }

        /// <summary>Field number for the "mems" field.</summary>
        public const int MemsFieldNumber = 1;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_mems_codec
            = pb::FieldCodec.ForBytes(10);
        private readonly pbc::RepeatedField<pb::ByteString> mems_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Mems {
          get { return mems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          mems_.WriteTo(output, _repeated_mems_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += mems_.CalculateSize(_repeated_mems_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                mems_.AddEntriesFrom(input, _repeated_mems_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class FuncOpenError : pb::IMessage {
        private static readonly pb::MessageParser<FuncOpenError> _parser = new pb::MessageParser<FuncOpenError>(() => new FuncOpenError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FuncOpenError> Parser { get { return _parser; } }

        /// <summary>Field number for the "mems" field.</summary>
        public const int MemsFieldNumber = 1;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_mems_codec
            = pb::FieldCodec.ForBytes(10);
        private readonly pbc::RepeatedField<pb::ByteString> mems_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Mems {
          get { return mems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          mems_.WriteTo(output, _repeated_mems_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += mems_.CalculateSize(_repeated_mems_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                mems_.AddEntriesFrom(input, _repeated_mems_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTaskUpdateFinishedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskUpdateFinishedNtf> _parser = new pb::MessageParser<CmdTaskUpdateFinishedNtf>(() => new CmdTaskUpdateFinishedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskUpdateFinishedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskClass" field.</summary>
    public const int TaskClassFieldNumber = 1;
    private uint taskClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskClass {
      get { return taskClass_; }
      set {
        taskClass_ = value;
      }
    }

    /// <summary>Field number for the "finishTasks" field.</summary>
    public const int FinishTasksFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_finishTasks_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> finishTasks_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FinishTasks {
      get { return finishTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskClass != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskClass);
      }
      finishTasks_.WriteTo(output, _repeated_finishTasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskClass);
      }
      size += finishTasks_.CalculateSize(_repeated_finishTasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskClass = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            finishTasks_.AddEntriesFrom(input, _repeated_finishTasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求开始限时任务
  /// </summary>
  public sealed class CmdTaskStartTimeLimitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskStartTimeLimitReq> _parser = new pb::MessageParser<CmdTaskStartTimeLimitReq>(() => new CmdTaskStartTimeLimitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskStartTimeLimitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskStartTimeLimitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskStartTimeLimitRes> _parser = new pb::MessageParser<CmdTaskStartTimeLimitRes>(() => new CmdTaskStartTimeLimitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskStartTimeLimitRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求结束限时任务
  /// </summary>
  public sealed class CmdTaskEndTimeLimitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskEndTimeLimitReq> _parser = new pb::MessageParser<CmdTaskEndTimeLimitReq>(() => new CmdTaskEndTimeLimitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskEndTimeLimitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskEndTimeLimitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskEndTimeLimitRes> _parser = new pb::MessageParser<CmdTaskEndTimeLimitRes>(() => new CmdTaskEndTimeLimitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskEndTimeLimitRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskTrackEnterBattleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskTrackEnterBattleReq> _parser = new pb::MessageParser<CmdTaskTrackEnterBattleReq>(() => new CmdTaskTrackEnterBattleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskTrackEnterBattleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskIndex" field.</summary>
    public const int TaskIndexFieldNumber = 2;
    private uint taskIndex_;
    /// <summary>
    ///子任务目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 3;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (TaskIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskIndex);
      }
      if (BattleId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求上交宠物
  /// </summary>
  public sealed class CmdTaskSubmitPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSubmitPetReq> _parser = new pb::MessageParser<CmdTaskSubmitPetReq>(() => new CmdTaskSubmitPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSubmitPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "petUId" field.</summary>
    public const int PetUIdFieldNumber = 2;
    private uint petUId_;
    /// <summary>
    ///pet唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUId {
      get { return petUId_; }
      set {
        petUId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private uint position_;
    /// <summary>
    ///要更新的任务目标位置(第一位为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 4;
    private ulong npcUId_;
    /// <summary>
    ///npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (PetUId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUId);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Position);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NpcUId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (PetUId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUId = input.ReadUInt32();
            break;
          }
          case 24: {
            Position = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcUId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTaskSubmitPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSubmitPetRes> _parser = new pb::MessageParser<CmdTaskSubmitPetRes>(() => new CmdTaskSubmitPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSubmitPetRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///跳过剧情按钮切换
  /// </summary>
  public sealed class CmdTaskSkipTalkBtnChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSkipTalkBtnChangeReq> _parser = new pb::MessageParser<CmdTaskSkipTalkBtnChangeReq>(() => new CmdTaskSkipTalkBtnChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSkipTalkBtnChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 2;
    private bool skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Key);
      }
      if (Skip != false) {
        output.WriteRawTag(16);
        output.WriteBool(Skip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Skip != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadUInt32();
            break;
          }
          case 16: {
            Skip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///跳过剧情按钮的数据更新
  /// </summary>
  public sealed class CmdTaskSkipTalkBtnUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTaskSkipTalkBtnUpdateNtf> _parser = new pb::MessageParser<CmdTaskSkipTalkBtnUpdateNtf>(() => new CmdTaskSkipTalkBtnUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTaskSkipTalkBtnUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "btnUpdate" field.</summary>
    public const int BtnUpdateFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TaskSkipTalkBtn> _repeated_btnUpdate_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TaskSkipTalkBtn.Parser);
    private readonly pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> btnUpdate_ = new pbc::RepeatedField<global::Packet.TaskSkipTalkBtn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TaskSkipTalkBtn> BtnUpdate {
      get { return btnUpdate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      btnUpdate_.WriteTo(output, _repeated_btnUpdate_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += btnUpdate_.CalculateSize(_repeated_btnUpdate_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            btnUpdate_.AddEntriesFrom(input, _repeated_btnUpdate_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
