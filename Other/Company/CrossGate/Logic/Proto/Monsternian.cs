// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monsternian.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///9600
  /// </summary>
  public enum CmdMonsterNian {
    None = 0,
    Begin = 9600,
    /// <summary>
    /// 上线推送
    /// </summary>
    DataNty = 9601,
    /// <summary>
    /// 请求挑战年兽
    /// </summary>
    ChallengeReq = 9602,
    /// <summary>
    /// 请求兑换年糕
    /// </summary>
    ExchangeReq = 9603,
    /// <summary>
    /// 通知兑换年糕
    /// </summary>
    ExchangeNty = 9604,
    /// <summary>
    /// 请求购买爆竹
    /// </summary>
    PurchaseReq = 9605,
    /// <summary>
    /// 通知每日刷新
    /// </summary>
    DailyResetNty = 9606,
    /// <summary>
    /// 通知累积伤害
    /// </summary>
    TotalDamageNty = 9607,
    /// <summary>
    /// 请求领取累积伤害奖励
    /// </summary>
    DamageRewardReq = 9608,
    /// <summary>
    /// 通知领取累积伤害奖励
    /// </summary>
    DamageRewardNty = 9609,
    /// <summary>
    /// 通知战斗场次
    /// </summary>
    FightStageNty = 9610,
  }

  public enum ErrorMonsterNian {
    None = 0,
    /// <summary>
    /// 不在第一阶段内
    /// </summary>
    NotBeforeChallenge = 9601,
    /// <summary>
    /// 不在第一阶段后
    /// </summary>
    NotAfterChallenge = 9602,
    /// <summary>
    /// 不在第二阶段内
    /// </summary>
    NotInChallenge = 9603,
    /// <summary>
    /// 兑换次数不足
    /// </summary>
    NoLeftExchangeTimes = 9604,
    /// <summary>
    /// 不能组队挑战
    /// </summary>
    CanNotChallengeInTeam = 9605,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 9606,
    /// <summary>
    /// 无法创建战斗
    /// </summary>
    CanNotCreateFight = 9607,
    /// <summary>
    /// 没有可领取的累积伤害奖励
    /// </summary>
    NoDamageRewardToPick = 9608,
    /// <summary>
    /// 没有鞭炮无法挑战
    /// </summary>
    NoItemToUse = 9609,
    /// <summary>
    /// 功能未开启
    /// </summary>
    FunctionNotOpen = 9610,
    /// <summary>
    /// 单次购买数量过多
    /// </summary>
    TooManyItemsToPurchase = 9611,
  }

  public enum MonsterNianActiveReason {
    None = 0,
    /// <summary>
    /// 年糕兑换
    /// </summary>
    Exchange = 9601,
    /// <summary>
    /// 排名奖励
    /// </summary>
    RankReward = 9602,
    /// <summary>
    /// 挑战胜利
    /// </summary>
    Challenge = 9603,
    /// <summary>
    /// 购买爆竹
    /// </summary>
    Purchase = 9604,
    /// <summary>
    /// 累积伤害奖励
    /// </summary>
    DamageReward = 9605,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 年兽-每日
  /// </summary>
  public sealed class MonsterNianDaily : pb::IMessage {
    private static readonly pb::MessageParser<MonsterNianDaily> _parser = new pb::MessageParser<MonsterNianDaily>(() => new MonsterNianDaily());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterNianDaily> Parser { get { return _parser; } }

    /// <summary>Field number for the "nextresettime" field.</summary>
    public const int NextresettimeFieldNumber = 1;
    private uint nextresettime_;
    /// <summary>
    /// 下次重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nextresettime {
      get { return nextresettime_; }
      set {
        nextresettime_ = value;
      }
    }

    /// <summary>Field number for the "leftexchangetimes" field.</summary>
    public const int LeftexchangetimesFieldNumber = 2;
    private uint leftexchangetimes_;
    /// <summary>
    /// 剩余兑换次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leftexchangetimes {
      get { return leftexchangetimes_; }
      set {
        leftexchangetimes_ = value;
      }
    }

    /// <summary>Field number for the "fightstage" field.</summary>
    public const int FightstageFieldNumber = 3;
    private uint fightstage_;
    /// <summary>
    /// 当前战斗场次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fightstage {
      get { return fightstage_; }
      set {
        fightstage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nextresettime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nextresettime);
      }
      if (Leftexchangetimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Leftexchangetimes);
      }
      if (Fightstage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fightstage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nextresettime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nextresettime);
      }
      if (Leftexchangetimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leftexchangetimes);
      }
      if (Fightstage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fightstage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nextresettime = input.ReadUInt32();
            break;
          }
          case 16: {
            Leftexchangetimes = input.ReadUInt32();
            break;
          }
          case 24: {
            Fightstage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 年兽-活动
  /// </summary>
  public sealed class MonsterNianActivity : pb::IMessage {
    private static readonly pb::MessageParser<MonsterNianActivity> _parser = new pb::MessageParser<MonsterNianActivity>(() => new MonsterNianActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterNianActivity> Parser { get { return _parser; } }

    /// <summary>Field number for the "totaldamage" field.</summary>
    public const int TotaldamageFieldNumber = 1;
    private uint totaldamage_;
    /// <summary>
    /// 累积伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Totaldamage {
      get { return totaldamage_; }
      set {
        totaldamage_ = value;
      }
    }

    /// <summary>Field number for the "damagerewardid" field.</summary>
    public const int DamagerewardidFieldNumber = 2;
    private uint damagerewardid_;
    /// <summary>
    /// 已领取累积伤害奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damagerewardid {
      get { return damagerewardid_; }
      set {
        damagerewardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Totaldamage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Totaldamage);
      }
      if (Damagerewardid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Damagerewardid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Totaldamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totaldamage);
      }
      if (Damagerewardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damagerewardid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Totaldamage = input.ReadUInt32();
            break;
          }
          case 16: {
            Damagerewardid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 年兽
  /// </summary>
  public sealed class MonsterNian : pb::IMessage {
    private static readonly pb::MessageParser<MonsterNian> _parser = new pb::MessageParser<MonsterNian>(() => new MonsterNian());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterNian> Parser { get { return _parser; } }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 1;
    private global::Packet.MonsterNianDaily daily_;
    /// <summary>
    /// 每日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MonsterNianDaily Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 2;
    private global::Packet.MonsterNianActivity activity_;
    /// <summary>
    /// 活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MonsterNianActivity Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (daily_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Daily);
      }
      if (activity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Activity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (daily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Daily);
      }
      if (activity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (daily_ == null) {
              daily_ = new global::Packet.MonsterNianDaily();
            }
            input.ReadMessage(daily_);
            break;
          }
          case 18: {
            if (activity_ == null) {
              activity_ = new global::Packet.MonsterNianActivity();
            }
            input.ReadMessage(activity_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMonsterNianDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianDataNty> _parser = new pb::MessageParser<CmdMonsterNianDataNty>(() => new CmdMonsterNianDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.MonsterNian data_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MonsterNian Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.MonsterNian();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdMonsterNianChallengeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianChallengeReq> _parser = new pb::MessageParser<CmdMonsterNianChallengeReq>(() => new CmdMonsterNianChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianChallengeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdMonsterNianExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianExchangeReq> _parser = new pb::MessageParser<CmdMonsterNianExchangeReq>(() => new CmdMonsterNianExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianExchangeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMonsterNianExchangeNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianExchangeNty> _parser = new pb::MessageParser<CmdMonsterNianExchangeNty>(() => new CmdMonsterNianExchangeNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianExchangeNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "leftexchangetimes" field.</summary>
    public const int LeftexchangetimesFieldNumber = 1;
    private uint leftexchangetimes_;
    /// <summary>
    /// 剩余兑换次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leftexchangetimes {
      get { return leftexchangetimes_; }
      set {
        leftexchangetimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Leftexchangetimes != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Leftexchangetimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leftexchangetimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leftexchangetimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Leftexchangetimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMonsterNianPurchaseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianPurchaseReq> _parser = new pb::MessageParser<CmdMonsterNianPurchaseReq>(() => new CmdMonsterNianPurchaseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianPurchaseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    /// <summary>
    /// 购买个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMonsterNianDailyResetNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianDailyResetNty> _parser = new pb::MessageParser<CmdMonsterNianDailyResetNty>(() => new CmdMonsterNianDailyResetNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianDailyResetNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 1;
    private global::Packet.MonsterNianDaily daily_;
    /// <summary>
    /// 每日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MonsterNianDaily Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (daily_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Daily);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (daily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Daily);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (daily_ == null) {
              daily_ = new global::Packet.MonsterNianDaily();
            }
            input.ReadMessage(daily_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMonsterNianTotalDamageNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianTotalDamageNty> _parser = new pb::MessageParser<CmdMonsterNianTotalDamageNty>(() => new CmdMonsterNianTotalDamageNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianTotalDamageNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "totaldamage" field.</summary>
    public const int TotaldamageFieldNumber = 1;
    private uint totaldamage_;
    /// <summary>
    /// 累积伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Totaldamage {
      get { return totaldamage_; }
      set {
        totaldamage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Totaldamage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Totaldamage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Totaldamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totaldamage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Totaldamage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdMonsterNianDamageRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianDamageRewardReq> _parser = new pb::MessageParser<CmdMonsterNianDamageRewardReq>(() => new CmdMonsterNianDamageRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianDamageRewardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMonsterNianDamageRewardNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianDamageRewardNty> _parser = new pb::MessageParser<CmdMonsterNianDamageRewardNty>(() => new CmdMonsterNianDamageRewardNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianDamageRewardNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "damagerewardid" field.</summary>
    public const int DamagerewardidFieldNumber = 1;
    private uint damagerewardid_;
    /// <summary>
    /// 已领取的累积伤害奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damagerewardid {
      get { return damagerewardid_; }
      set {
        damagerewardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damagerewardid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Damagerewardid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damagerewardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damagerewardid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Damagerewardid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMonsterNianFightStageNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMonsterNianFightStageNty> _parser = new pb::MessageParser<CmdMonsterNianFightStageNty>(() => new CmdMonsterNianFightStageNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMonsterNianFightStageNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "fightstage" field.</summary>
    public const int FightstageFieldNumber = 1;
    private uint fightstage_;
    /// <summary>
    /// 当前战斗场次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fightstage {
      get { return fightstage_; }
      set {
        fightstage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fightstage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fightstage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fightstage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fightstage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fightstage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
