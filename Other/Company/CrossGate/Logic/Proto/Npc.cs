// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdNpc {
    None = 0,
    ActivateNpcReq = 1900,
    ActivateNpcRes = 1901,
    /// <summary>
    ///激活过得npc通知
    /// </summary>
    ActivatedNpcNtf = 1902,
    /// <summary>
    ///开始拾取资源
    /// </summary>
    ResourceBeginReq = 1903,
    ResourceBeginRes = 1904,
    /// <summary>
    ///视野拾取资源通知
    /// </summary>
    ResourceNtf = 1905,
    /// <summary>
    ///拾取资源结束
    /// </summary>
    ResourceEndReq = 1906,
    ResourceEndRes = 1907,
    GetActiveRewardReq = 1908,
    GetActiveRewardAck = 1909,
    /// <summary>
    ///进入战斗
    /// </summary>
    EnterBattleReq = 1910,
    /// <summary>
    ///采集道具信息通知
    /// </summary>
    CollectionNtf = 1911,
    /// <summary>
    ///对话选择，只处理最后一步
    /// </summary>
    DialogueChooseReq = 1912,
    DialogueChooseAck = 1913,
    /// <summary>
    ///小知识那边一个隐身npc范围触发，其实除了上边的采集、进入战斗，理论上都可以使用这条协议，然后处理相应的逻辑
    /// </summary>
    NpcTriggerReq = 1914,
    /// <summary>
    ///npc 调查
    /// </summary>
    InvestigateReq = 1915,
    InvestigateAck = 1916,
    /// <summary>
    ///所有调查过的id
    /// </summary>
    InvestigateNtf = 1917,
    BossBattleFailNtf = 1919,
    BattleStateNtf = 1920,
    /// <summary>
    ///所有完成过的密语id
    /// </summary>
    RiddleNtf = 1921,
    /// <summary>
    ///请求完成npc密语
    /// </summary>
    RiddleReq = 1922,
    RiddleRes = 1923,
    /// <summary>
    ///npc对话
    /// </summary>
    NpcDialogueReq = 1924,
    /// <summary>
    ///采集失败
    /// </summary>
    ResourceErrNtf = 1925,
  }

  public enum ErrorNpc {
    None = 0,
    /// <summary>
    ///激活失败
    /// </summary>
    ActiveFail = 1900,
    /// <summary>
    ///已经激活
    /// </summary>
    Activated = 1901,
    /// <summary>
    ///交互失败
    /// </summary>
    ResourceFailed = 1902,
    /// <summary>
    ///其他人在拾取
    /// </summary>
    OtherBeginResource = 1903,
    /// <summary>
    ///等级不对
    /// </summary>
    LvlError = 1904,
    /// <summary>
    ///领奖条件不足
    /// </summary>
    CannotGetReward = 1905,
    /// <summary>
    ///领过了
    /// </summary>
    HasGot = 1906,
    /// <summary>
    ///进入战斗失败
    /// </summary>
    BattleFail = 1907,
    /// <summary>
    ///配置错误 npc不可激活
    /// </summary>
    CfgErr = 1908,
    /// <summary>
    ///距离太远
    /// </summary>
    FarAway = 1909,
    /// <summary>
    /// npc看不见
    /// </summary>
    CannotSee = 1910,
    /// <summary>
    /// 采集已达上限
    /// </summary>
    GetFull = 1911,
    /// <summary>
    /// 进入战斗失败
    /// </summary>
    EnterBattleFail = 1912,
    /// <summary>
    ///未发现npc
    /// </summary>
    NpcNotFound = 1913,
    /// <summary>
    ///战斗id不为0
    /// </summary>
    BattleIdnot0 = 1914,
    /// <summary>
    ///配置不存在
    /// </summary>
    CfgNotFound = 1915,
    /// <summary>
    ///对话选择错误
    /// </summary>
    DialogueChoose = 1916,
    /// <summary>
    ///对话选择不合法
    /// </summary>
    DialogueIllegal = 1917,
    /// <summary>
    ///道具不足
    /// </summary>
    ItemNotEnough = 1918,
    /// <summary>
    ///在战斗中
    /// </summary>
    InBattle = 1919,
    /// <summary>
    ///活力不足
    /// </summary>
    Energy = 1920,
    /// <summary>
    ///技能不足
    /// </summary>
    SkillLack = 1931,
    /// <summary>
    ///操作非法
    /// </summary>
    Illegal = 1932,
    /// <summary>
    ///调查过了
    /// </summary>
    HasInvested = 1933,
    /// <summary>
    ///无任务
    /// </summary>
    NoTaskErr = 1934,
    /// <summary>
    ///条件不满足
    /// </summary>
    CondErr = 1935,
    /// <summary>
    ///次数不足
    /// </summary>
    ResourceNoCount = 1936,
    /// <summary>
    ///uid不同
    /// </summary>
    ResourceUid = 1937,
    /// <summary>
    /// 采集时间不对
    /// </summary>
    ResourceTimeErr = 1938,
    /// <summary>
    ///玩家id不同
    /// </summary>
    ResourceRoleIdNotSame = 1939,
    /// <summary>
    ///无效的npc触发
    /// </summary>
    InvaildTrigger = 1940,
    /// <summary>
    ///已完成该密语
    /// </summary>
    HasRiddle = 1941,
    /// <summary>
    ///密语参数配置错误
    /// </summary>
    RiddlePara = 1942,
    /// <summary>
    ///无效的npc对话
    /// </summary>
    InvaildDialogue = 1943,
    /// <summary>
    ///bag is full
    /// </summary>
    BagFull = 1944,
    /// <summary>
    ///采集条件限制
    /// </summary>
    ResourceLimit = 1945,
  }

  public enum NpcActiveReason {
    None = 0,
    /// <summary>
    ///密语奖励
    /// </summary>
    Riddle = 1901,
    /// <summary>
    ///探索奖励
    /// </summary>
    Exploration = 1902,
    /// <summary>
    ///调查奖励
    /// </summary>
    Investigate = 1903,
  }

  public enum NPC_CMD {
    Npc = 0,
    SetBattleId = 1,
    Born = 2,
    Destroy = 3,
    Bubble = 4,
    EnterBattle = 5,
    BattleFail = 6,
    BattleResult = 7,
  }

  #endregion

  #region Messages
  public sealed class CmdNpcActivateNpcReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcActivateNpcReq> _parser = new pb::MessageParser<CmdNpcActivateNpcReq>(() => new CmdNpcActivateNpcReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcActivateNpcReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uId" field.</summary>
    public const int UIdFieldNumber = 1;
    private ulong uId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcActivateNpcRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcActivateNpcRes> _parser = new pb::MessageParser<CmdNpcActivateNpcRes>(() => new CmdNpcActivateNpcRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcActivateNpcRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///npcid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcActivatedNpcNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcActivatedNpcNtf> _parser = new pb::MessageParser<CmdNpcActivatedNpcNtf>(() => new CmdNpcActivatedNpcNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcActivatedNpcNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activatedInfoId" field.</summary>
    public const int ActivatedInfoIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_activatedInfoId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> activatedInfoId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ActivatedInfoId {
      get { return activatedInfoId_; }
    }

    /// <summary>Field number for the "proList" field.</summary>
    public const int ProListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess> _repeated_proList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess> proList_ = new pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess> ProList {
      get { return proList_; }
    }

    /// <summary>Field number for the "gotRewards" field.</summary>
    public const int GotRewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_gotRewards_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> gotRewards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///领过奖的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GotRewards {
      get { return gotRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activatedInfoId_.WriteTo(output, _repeated_activatedInfoId_codec);
      proList_.WriteTo(output, _repeated_proList_codec);
      gotRewards_.WriteTo(output, _repeated_gotRewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activatedInfoId_.CalculateSize(_repeated_activatedInfoId_codec);
      size += proList_.CalculateSize(_repeated_proList_codec);
      size += gotRewards_.CalculateSize(_repeated_gotRewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            activatedInfoId_.AddEntriesFrom(input, _repeated_activatedInfoId_codec);
            break;
          }
          case 18: {
            proList_.AddEntriesFrom(input, _repeated_proList_codec);
            break;
          }
          case 26:
          case 24: {
            gotRewards_.AddEntriesFrom(input, _repeated_gotRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdNpcActivatedNpcNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MapProcess : pb::IMessage {
        private static readonly pb::MessageParser<MapProcess> _parser = new pb::MessageParser<MapProcess>(() => new MapProcess());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapProcess> Parser { get { return _parser; } }

        /// <summary>Field number for the "mapId" field.</summary>
        public const int MapIdFieldNumber = 1;
        private uint mapId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MapId {
          get { return mapId_; }
          set {
            mapId_ = value;
          }
        }

        /// <summary>Field number for the "process" field.</summary>
        public const int ProcessFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Types.PP> _repeated_process_codec
            = pb::FieldCodec.ForMessage(18, global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Types.PP.Parser);
        private readonly pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Types.PP> process_ = new pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Types.PP>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.CmdNpcActivatedNpcNtf.Types.MapProcess.Types.PP> Process {
          get { return process_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MapId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(MapId);
          }
          process_.WriteTo(output, _repeated_process_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MapId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
          }
          size += process_.CalculateSize(_repeated_process_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MapId = input.ReadUInt32();
                break;
              }
              case 18: {
                process_.AddEntriesFrom(input, _repeated_process_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MapProcess message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static class Types {
          public sealed class PP : pb::IMessage {
            private static readonly pb::MessageParser<PP> _parser = new pb::MessageParser<PP>(() => new PP());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PP> Parser { get { return _parser; } }

            /// <summary>Field number for the "markType" field.</summary>
            public const int MarkTypeFieldNumber = 1;
            private uint markType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MarkType {
              get { return markType_; }
              set {
                markType_ = value;
              }
            }

            /// <summary>Field number for the "markCount" field.</summary>
            public const int MarkCountFieldNumber = 2;
            private uint markCount_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MarkCount {
              get { return markCount_; }
              set {
                markCount_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MarkType != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(MarkType);
              }
              if (MarkCount != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(MarkCount);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MarkType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarkType);
              }
              if (MarkCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarkCount);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    MarkType = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    MarkCount = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed class CmdNpcResourceBeginReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceBeginReq> _parser = new pb::MessageParser<CmdNpcResourceBeginReq>(() => new CmdNpcResourceBeginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceBeginReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "pickType" field.</summary>
    public const int PickTypeFieldNumber = 2;
    private uint pickType_;
    /// <summary>
    /// 客户端表现type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PickType {
      get { return pickType_; }
      set {
        pickType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (PickType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PickType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (PickType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            PickType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcResourceBeginRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceBeginRes> _parser = new pb::MessageParser<CmdNpcResourceBeginRes>(() => new CmdNpcResourceBeginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceBeginRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "pickType" field.</summary>
    public const int PickTypeFieldNumber = 2;
    private uint pickType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PickType {
      get { return pickType_; }
      set {
        pickType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (PickType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PickType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (PickType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            PickType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcResourceNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceNtf> _parser = new pb::MessageParser<CmdNpcResourceNtf>(() => new CmdNpcResourceNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "uRoleId" field.</summary>
    public const int URoleIdFieldNumber = 2;
    private ulong uRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong URoleId {
      get { return uRoleId_; }
      set {
        uRoleId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 3;
    private bool process_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (URoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(URoleId);
      }
      if (Process != false) {
        output.WriteRawTag(24);
        output.WriteBool(Process);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (URoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(URoleId);
      }
      if (Process != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            URoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            Process = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcResourceEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceEndReq> _parser = new pb::MessageParser<CmdNpcResourceEndReq>(() => new CmdNpcResourceEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceEndReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "bCancel" field.</summary>
    public const int BCancelFieldNumber = 2;
    private bool bCancel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCancel {
      get { return bCancel_; }
      set {
        bCancel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (BCancel != false) {
        output.WriteRawTag(16);
        output.WriteBool(BCancel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (BCancel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            BCancel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcResourceEndRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceEndRes> _parser = new pb::MessageParser<CmdNpcResourceEndRes>(() => new CmdNpcResourceEndRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceEndRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private uint group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    /// <summary>
    ///uint32 itype = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (Group != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Group);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            Group = input.ReadUInt32();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcGetActiveRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcGetActiveRewardReq> _parser = new pb::MessageParser<CmdNpcGetActiveRewardReq>(() => new CmdNpcGetActiveRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcGetActiveRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcGetActiveRewardAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcGetActiveRewardAck> _parser = new pb::MessageParser<CmdNpcGetActiveRewardAck>(() => new CmdNpcGetActiveRewardAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcGetActiveRewardAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcEnterBattleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcEnterBattleReq> _parser = new pb::MessageParser<CmdNpcEnterBattleReq>(() => new CmdNpcEnterBattleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcEnterBattleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "fightId" field.</summary>
    public const int FightIdFieldNumber = 2;
    private uint fightId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightId {
      get { return fightId_; }
      set {
        fightId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (FightId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FightId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (FightId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            FightId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcCollectionNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcCollectionNtf> _parser = new pb::MessageParser<CmdNpcCollectionNtf>(() => new CmdNpcCollectionNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcCollectionNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private global::Packet.CollectionList list_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CollectionList List {
      get { return list_; }
      set {
        list_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (list_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(List);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (list_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(List);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (list_ == null) {
              list_ = new global::Packet.CollectionList();
            }
            input.ReadMessage(list_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcDialogueChooseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcDialogueChooseReq> _parser = new pb::MessageParser<CmdNpcDialogueChooseReq>(() => new CmdNpcDialogueChooseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcDialogueChooseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskIndex" field.</summary>
    public const int TaskIndexFieldNumber = 3;
    private uint taskIndex_;
    /// <summary>
    ///任务步骤(子目标）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    /// <summary>Field number for the "dialogueId" field.</summary>
    public const int DialogueIdFieldNumber = 4;
    private uint dialogueId_;
    /// <summary>
    /// 对话选择id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DialogueId {
      get { return dialogueId_; }
      set {
        dialogueId_ = value;
      }
    }

    /// <summary>Field number for the "dialogueOption" field.</summary>
    public const int DialogueOptionFieldNumber = 5;
    private uint dialogueOption_;
    /// <summary>
    ///对话选项 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DialogueOption {
      get { return dialogueOption_; }
      set {
        dialogueOption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (TaskIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskIndex);
      }
      if (DialogueId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DialogueId);
      }
      if (DialogueOption != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DialogueOption);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      if (DialogueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DialogueId);
      }
      if (DialogueOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DialogueOption);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            DialogueId = input.ReadUInt32();
            break;
          }
          case 40: {
            DialogueOption = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcDialogueChooseAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcDialogueChooseAck> _parser = new pb::MessageParser<CmdNpcDialogueChooseAck>(() => new CmdNpcDialogueChooseAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcDialogueChooseAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskIndex" field.</summary>
    public const int TaskIndexFieldNumber = 3;
    private uint taskIndex_;
    /// <summary>
    ///任务步骤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    /// <summary>Field number for the "dialogueId" field.</summary>
    public const int DialogueIdFieldNumber = 4;
    private uint dialogueId_;
    /// <summary>
    /// 对话选择id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DialogueId {
      get { return dialogueId_; }
      set {
        dialogueId_ = value;
      }
    }

    /// <summary>Field number for the "dialogueOption" field.</summary>
    public const int DialogueOptionFieldNumber = 5;
    private uint dialogueOption_;
    /// <summary>
    ///对话选项 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DialogueOption {
      get { return dialogueOption_; }
      set {
        dialogueOption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (TaskIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskIndex);
      }
      if (DialogueId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DialogueId);
      }
      if (DialogueOption != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DialogueOption);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      if (DialogueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DialogueId);
      }
      if (DialogueOption != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DialogueOption);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            TaskIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            DialogueId = input.ReadUInt32();
            break;
          }
          case 40: {
            DialogueOption = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcNpcTriggerReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcNpcTriggerReq> _parser = new pb::MessageParser<CmdNpcNpcTriggerReq>(() => new CmdNpcNpcTriggerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcNpcTriggerReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    /// <summary>
    ///npc的uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcInvestigateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcInvestigateReq> _parser = new pb::MessageParser<CmdNpcInvestigateReq>(() => new CmdNpcInvestigateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcInvestigateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///调查id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 2;
    private ulong npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 3;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskIndex" field.</summary>
    public const int TaskIndexFieldNumber = 4;
    private uint taskIndex_;
    /// <summary>
    ///任务子目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (NpcId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TaskId);
      }
      if (TaskIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TaskIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (NpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcId = input.ReadUInt64();
            break;
          }
          case 24: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 32: {
            TaskIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcInvestigateAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcInvestigateAck> _parser = new pb::MessageParser<CmdNpcInvestigateAck>(() => new CmdNpcInvestigateAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcInvestigateAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 2;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (NpcInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NpcInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcInvestigateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcInvestigateNtf> _parser = new pb::MessageParser<CmdNpcInvestigateNtf>(() => new CmdNpcInvestigateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcInvestigateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcBossBattleFailNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcBossBattleFailNtf> _parser = new pb::MessageParser<CmdNpcBossBattleFailNtf>(() => new CmdNpcBossBattleFailNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcBossBattleFailNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "npc_uid" field.</summary>
    public const int NpcUidFieldNumber = 2;
    private ulong npcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private uint result_;
    /// <summary>
    ///0失败  1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            NpcUid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcBattleStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcBattleStateNtf> _parser = new pb::MessageParser<CmdNpcBattleStateNtf>(() => new CmdNpcBattleStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcBattleStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private ulong npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    ///为 0 则为战斗结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NpcId);
      }
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcId);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///所有完成过的密语id
  /// </summary>
  public sealed class CmdNpcRiddleNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcRiddleNtf> _parser = new pb::MessageParser<CmdNpcRiddleNtf>(() => new CmdNpcRiddleNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcRiddleNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///密语id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求完成npc密语
  /// </summary>
  public sealed class CmdNpcRiddleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcRiddleReq> _parser = new pb::MessageParser<CmdNpcRiddleReq>(() => new CmdNpcRiddleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcRiddleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///密语id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "npcUid" field.</summary>
    public const int NpcUidFieldNumber = 2;
    private ulong npcUid_;
    /// <summary>
    ///密语npc uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (NpcUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcRiddleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcRiddleRes> _parser = new pb::MessageParser<CmdNpcRiddleRes>(() => new CmdNpcRiddleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcRiddleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///密语id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///npc对话
  /// </summary>
  public sealed class CmdNpcNpcDialogueReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcNpcDialogueReq> _parser = new pb::MessageParser<CmdNpcNpcDialogueReq>(() => new CmdNpcNpcDialogueReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcNpcDialogueReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uNpcId" field.</summary>
    public const int UNpcIdFieldNumber = 1;
    private ulong uNpcId_;
    /// <summary>
    ///npc的uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UNpcId {
      get { return uNpcId_; }
      set {
        uNpcId_ = value;
      }
    }

    /// <summary>Field number for the "dialogueId" field.</summary>
    public const int DialogueIdFieldNumber = 2;
    private uint dialogueId_;
    /// <summary>
    /// 对话id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DialogueId {
      get { return dialogueId_; }
      set {
        dialogueId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UNpcId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UNpcId);
      }
      if (DialogueId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DialogueId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UNpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UNpcId);
      }
      if (DialogueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DialogueId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UNpcId = input.ReadUInt64();
            break;
          }
          case 16: {
            DialogueId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdNpcResourceErrNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdNpcResourceErrNtf> _parser = new pb::MessageParser<CmdNpcResourceErrNtf>(() => new CmdNpcResourceErrNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdNpcResourceErrNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
