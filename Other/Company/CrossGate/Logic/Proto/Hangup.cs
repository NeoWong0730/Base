// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hangup.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///2100 +
  /// </summary>
  public enum CmdHangUp {
    None = 0,
    /// <summary>
    ///在线，离线挂机
    /// </summary>
    HangUpOpReq = 2101,
    /// <summary>
    ///玩家更新挂机操作请求应答
    /// </summary>
    HangUpOpRes = 2102,
    /// <summary>
    ///挂机打怪相关
    /// </summary>
    DataNtf = 2111,
    /// <summary>
    ///设置引魔香状态
    /// </summary>
    EnemySwitchReq = 2112,
    /// <summary>
    ///引魔香状态改变通知
    /// </summary>
    EnemySwitchNtf = 2113,
    /// <summary>
    ///开启or关闭卡时
    /// </summary>
    WorkingHourOpReq = 2116,
    WorkingHourOpNtf = 2117,
    /// <summary>
    ///卡时更新
    /// </summary>
    WorkingHourUpdateNtf = 2118,
    /// <summary>
    ///休息时累计经验值更新
    /// </summary>
    RestExpUpdateNtf = 2119,
    /// <summary>
    ///进入挂机或者抓宠状态时， 上报挂机打怪参数
    /// </summary>
    ReportHangUpStatusReq = 2120,
    ReportHangUpStatusRes = 2121,
  }

  public enum ErrorHangUp {
    None = 0,
    /// <summary>
    ///在线挂机错误码
    /// </summary>
    RoleNotExist = 2101,
    /// <summary>
    ///挂机事件不存在
    /// </summary>
    EventNotExist = 2102,
    /// <summary>
    ///挂机操作不存在
    /// </summary>
    HangUpOpNotExist = 2103,
    /// <summary>
    ///表不存在
    /// </summary>
    Csvnull = 2104,
    /// <summary>
    ///挂机状态错误
    /// </summary>
    HangUpState = 2105,
    /// <summary>
    ///角色刚创建
    /// </summary>
    RoleJustCreate = 2106,
    /// <summary>
    ///不满足在线挂机等级
    /// </summary>
    NoMeetOnlineLevel = 2107,
    /// <summary>
    ///离线时间为0
    /// </summary>
    OfflineTimeZero = 2108,
    /// <summary>
    ///挂机打怪
    /// </summary>
    CannotSwitchEnemyOnOff = 2121,
    /// <summary>
    ///点数不足
    /// </summary>
    PointNotEnough = 2122,
    /// <summary>
    ///挂机点已激活
    /// </summary>
    PointAlreadyActive = 2123,
    /// <summary>
    ///道具补卡时周次数使用限制
    /// </summary>
    ItemWeekTimesLimit = 2124,
    /// <summary>
    ///卡时已满，不能补充
    /// </summary>
    PointIsMax = 2125,
    /// <summary>
    ///功能未开启
    /// </summary>
    WorkingHourNotOpen = 2126,
    /// <summary>
    ///未设置自动挂机
    /// </summary>
    AutoOnlineHangUpNotSetted = 2127,
    /// <summary>
    ///已在挂机中
    /// </summary>
    IsHangingUp = 2128,
    /// <summary>
    ///疲劳值已满
    /// </summary>
    FullTiredPer = 2129,
    /// <summary>
    ///找不到挂机层数配置
    /// </summary>
    CannotFindHangUpLayerState = 2130,
    /// <summary>
    ///没有离线挂机权
    /// </summary>
    NoRightToOfflineHangUp = 2131,
    /// <summary>
    ///队伍队员无法发起在线挂机
    /// </summary>
    TeamMemCannotOnlineHangUp = 2132,
    /// <summary>
    ///匹配中不允许在线挂机
    /// </summary>
    Matching2133 = 2133,
    /// <summary>
    ///地图禁止在线挂机
    /// </summary>
    AutoOnlineHangUpForbidden = 2134,
  }

  public enum HangUpOperator {
    /// <summary>
    /// 默认非法值
    /// </summary>
    None = 0,
    /// <summary>
    /// 请求开始挂机
    /// </summary>
    StartHangUp = 1,
    /// <summary>
    /// 请求结束在线挂机
    /// </summary>
    EndOnlineHangUp = 2,
    /// <summary>
    /// 请求结束离线挂机
    /// </summary>
    EndOfflineHangUp = 3,
  }

  public enum HangUpActiveReason {
    /// <summary>
    /// 无
    /// </summary>
    None = 0,
    /// <summary>
    /// 在线挂机结束增加经验
    /// </summary>
    OnlineEndAddExp = 2101,
    /// <summary>
    /// 离线挂机结束增加经验
    /// </summary>
    OfflineEndAddExp = 2102,
    /// <summary>
    /// 使用道具增加卡时
    /// </summary>
    WorkingHourAddUseItem = 2110,
    /// <summary>
    /// 持续恢复卡时
    /// </summary>
    WorkingHourAddResume = 2111,
  }

  #endregion

  #region Messages
  /// <summary>
  ///玩家在线挂机操作请求
  /// </summary>
  public sealed class CmdHangUpHangUpOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpHangUpOpReq> _parser = new pb::MessageParser<CmdHangUpHangUpOpReq>(() => new CmdHangUpHangUpOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpHangUpOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "hangUpOpReq" field.</summary>
    public const int HangUpOpReqFieldNumber = 1;
    private uint hangUpOpReq_;
    /// <summary>
    ///挂机请求操作 HangUpOperator_StartHangUp:开始挂机  HangUpOperator_EndOnlineHangUp:结束在线挂机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HangUpOpReq {
      get { return hangUpOpReq_; }
      set {
        hangUpOpReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HangUpOpReq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HangUpOpReq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HangUpOpReq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HangUpOpReq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HangUpOpReq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家在线挂机操作请求应答
  /// </summary>
  public sealed class CmdHangUpHangUpOpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpHangUpOpRes> _parser = new pb::MessageParser<CmdHangUpHangUpOpRes>(() => new CmdHangUpHangUpOpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpHangUpOpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hangUpOpType" field.</summary>
    public const int HangUpOpTypeFieldNumber = 1;
    private uint hangUpOpType_;
    /// <summary>
    ///挂机请求操作 HangUpOperator_StartHangUp:开始挂机  HangUpOperator_EndOnlineHangUp:结束在线挂机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HangUpOpType {
      get { return hangUpOpType_; }
      set {
        hangUpOpType_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private uint targetId_;
    /// <summary>
    ///挂机层数表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "petTid" field.</summary>
    public const int PetTidFieldNumber = 3;
    private uint petTid_;
    /// <summary>
    ///pettid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetTid {
      get { return petTid_; }
      set {
        petTid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HangUpOpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HangUpOpType);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TargetId);
      }
      if (PetTid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PetTid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HangUpOpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HangUpOpType);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (PetTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetTid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HangUpOpType = input.ReadUInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 24: {
            PetTid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 挂机宠物自动贩卖
  /// </summary>
  public sealed class HangUpAutoSoldPet : pb::IMessage {
    private static readonly pb::MessageParser<HangUpAutoSoldPet> _parser = new pb::MessageParser<HangUpAutoSoldPet>(() => new HangUpAutoSoldPet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpAutoSoldPet> Parser { get { return _parser; } }

    /// <summary>Field number for the "pettid" field.</summary>
    public const int PettidFieldNumber = 1;
    private uint pettid_;
    /// <summary>
    /// pettid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pettid {
      get { return pettid_; }
      set {
        pettid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    /// 贩卖数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "income" field.</summary>
    public const int IncomeFieldNumber = 3;
    private uint income_;
    /// <summary>
    /// 贩卖收入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Income {
      get { return income_; }
      set {
        income_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pettid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pettid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
      if (Income != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Income);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pettid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pettid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (Income != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Income);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pettid = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
          case 24: {
            Income = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 挂机奖励
  /// </summary>
  public sealed class HangUpReward : pb::IMessage {
    private static readonly pb::MessageParser<HangUpReward> _parser = new pb::MessageParser<HangUpReward>(() => new HangUpReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private ulong exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> item_ = new pbc::RepeatedField<global::Packet.Item>();
    /// <summary>
    ///道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> Item {
      get { return item_; }
    }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PetUnit> _repeated_pet_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetUnit> pet_ = new pbc::RepeatedField<global::Packet.PetUnit>();
    /// <summary>
    ///宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetUnit> Pet {
      get { return pet_; }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 4;
    private uint lastTime_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "autoSoldPet" field.</summary>
    public const int AutoSoldPetFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.HangUpAutoSoldPet> _repeated_autoSoldPet_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.HangUpAutoSoldPet.Parser);
    private readonly pbc::RepeatedField<global::Packet.HangUpAutoSoldPet> autoSoldPet_ = new pbc::RepeatedField<global::Packet.HangUpAutoSoldPet>();
    /// <summary>
    /// 宠物自动贩卖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.HangUpAutoSoldPet> AutoSoldPet {
      get { return autoSoldPet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Exp);
      }
      item_.WriteTo(output, _repeated_item_codec);
      pet_.WriteTo(output, _repeated_pet_codec);
      if (LastTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastTime);
      }
      autoSoldPet_.WriteTo(output, _repeated_autoSoldPet_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      size += pet_.CalculateSize(_repeated_pet_codec);
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      size += autoSoldPet_.CalculateSize(_repeated_autoSoldPet_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt64();
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 26: {
            pet_.AddEntriesFrom(input, _repeated_pet_codec);
            break;
          }
          case 32: {
            LastTime = input.ReadUInt32();
            break;
          }
          case 42: {
            autoSoldPet_.AddEntriesFrom(input, _repeated_autoSoldPet_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每月挂机奖励
  /// </summary>
  public sealed class HangUpMonthReward : pb::IMessage {
    private static readonly pb::MessageParser<HangUpMonthReward> _parser = new pb::MessageParser<HangUpMonthReward>(() => new HangUpMonthReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpMonthReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private ulong exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 2;
    private uint lastTime_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 3;
    private uint resetTime_;
    /// <summary>
    ///重置的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Exp);
      }
      if (LastTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastTime);
      }
      if (ResetTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResetTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt64();
            break;
          }
          case 16: {
            LastTime = input.ReadUInt32();
            break;
          }
          case 24: {
            ResetTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpDataNtf> _parser = new pb::MessageParser<CmdHangUpDataNtf>(() => new CmdHangUpDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "enemyOnOff" field.</summary>
    public const int EnemyOnOffFieldNumber = 1;
    private bool enemyOnOff_;
    /// <summary>
    ///挂机打怪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnemyOnOff {
      get { return enemyOnOff_; }
      set {
        enemyOnOff_ = value;
      }
    }

    /// <summary>Field number for the "restExp" field.</summary>
    public const int RestExpFieldNumber = 3;
    private long restExp_;
    /// <summary>
    ///本日休息时累计的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RestExp {
      get { return restExp_; }
      set {
        restExp_ = value;
      }
    }

    /// <summary>Field number for the "restExpTime" field.</summary>
    public const int RestExpTimeFieldNumber = 4;
    private uint restExpTime_;
    /// <summary>
    ///上次累计休息经验值的时间(过凌晨5点相当于restExp=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RestExpTime {
      get { return restExpTime_; }
      set {
        restExpTime_ = value;
      }
    }

    /// <summary>Field number for the "hangUpInfoId" field.</summary>
    public const int HangUpInfoIdFieldNumber = 10;
    private uint hangUpInfoId_;
    /// <summary>
    ///挂机状态的挂机点（在线挂机层数表)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HangUpInfoId {
      get { return hangUpInfoId_; }
      set {
        hangUpInfoId_ = value;
      }
    }

    /// <summary>Field number for the "petInfoId" field.</summary>
    public const int PetInfoIdFieldNumber = 11;
    private uint petInfoId_;
    /// <summary>
    ///抓宠状态的宠物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetInfoId {
      get { return petInfoId_; }
      set {
        petInfoId_ = value;
      }
    }

    /// <summary>Field number for the "workingHourOpened" field.</summary>
    public const int WorkingHourOpenedFieldNumber = 6;
    private bool workingHourOpened_;
    /// <summary>
    ///打卡相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WorkingHourOpened {
      get { return workingHourOpened_; }
      set {
        workingHourOpened_ = value;
      }
    }

    /// <summary>Field number for the "workingHourPoint" field.</summary>
    public const int WorkingHourPointFieldNumber = 7;
    private uint workingHourPoint_;
    /// <summary>
    ///卡时点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WorkingHourPoint {
      get { return workingHourPoint_; }
      set {
        workingHourPoint_ = value;
      }
    }

    /// <summary>Field number for the "lastOfflineReward" field.</summary>
    public const int LastOfflineRewardFieldNumber = 8;
    private global::Packet.HangUpReward lastOfflineReward_;
    /// <summary>
    ///上次离线挂机奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.HangUpReward LastOfflineReward {
      get { return lastOfflineReward_; }
      set {
        lastOfflineReward_ = value;
      }
    }

    /// <summary>Field number for the "monthOfflineReward" field.</summary>
    public const int MonthOfflineRewardFieldNumber = 9;
    private global::Packet.HangUpMonthReward monthOfflineReward_;
    /// <summary>
    ///本月离线挂机奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.HangUpMonthReward MonthOfflineReward {
      get { return monthOfflineReward_; }
      set {
        monthOfflineReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnemyOnOff != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnemyOnOff);
      }
      if (RestExp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RestExp);
      }
      if (RestExpTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RestExpTime);
      }
      if (WorkingHourOpened != false) {
        output.WriteRawTag(48);
        output.WriteBool(WorkingHourOpened);
      }
      if (WorkingHourPoint != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(WorkingHourPoint);
      }
      if (lastOfflineReward_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastOfflineReward);
      }
      if (monthOfflineReward_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MonthOfflineReward);
      }
      if (HangUpInfoId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PetInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnemyOnOff != false) {
        size += 1 + 1;
      }
      if (RestExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RestExp);
      }
      if (RestExpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RestExpTime);
      }
      if (HangUpInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetInfoId);
      }
      if (WorkingHourOpened != false) {
        size += 1 + 1;
      }
      if (WorkingHourPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorkingHourPoint);
      }
      if (lastOfflineReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastOfflineReward);
      }
      if (monthOfflineReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonthOfflineReward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnemyOnOff = input.ReadBool();
            break;
          }
          case 24: {
            RestExp = input.ReadInt64();
            break;
          }
          case 32: {
            RestExpTime = input.ReadUInt32();
            break;
          }
          case 48: {
            WorkingHourOpened = input.ReadBool();
            break;
          }
          case 56: {
            WorkingHourPoint = input.ReadUInt32();
            break;
          }
          case 66: {
            if (lastOfflineReward_ == null) {
              lastOfflineReward_ = new global::Packet.HangUpReward();
            }
            input.ReadMessage(lastOfflineReward_);
            break;
          }
          case 74: {
            if (monthOfflineReward_ == null) {
              monthOfflineReward_ = new global::Packet.HangUpMonthReward();
            }
            input.ReadMessage(monthOfflineReward_);
            break;
          }
          case 80: {
            HangUpInfoId = input.ReadUInt32();
            break;
          }
          case 88: {
            PetInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpEnemySwitchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpEnemySwitchReq> _parser = new pb::MessageParser<CmdHangUpEnemySwitchReq>(() => new CmdHangUpEnemySwitchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpEnemySwitchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "enemyOnOff" field.</summary>
    public const int EnemyOnOffFieldNumber = 1;
    private bool enemyOnOff_;
    /// <summary>
    ///引怪、避怪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnemyOnOff {
      get { return enemyOnOff_; }
      set {
        enemyOnOff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnemyOnOff != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnemyOnOff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnemyOnOff != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnemyOnOff = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpEnemySwitchNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpEnemySwitchNtf> _parser = new pb::MessageParser<CmdHangUpEnemySwitchNtf>(() => new CmdHangUpEnemySwitchNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpEnemySwitchNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "enemyOnOff" field.</summary>
    public const int EnemyOnOffFieldNumber = 1;
    private bool enemyOnOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnemyOnOff {
      get { return enemyOnOff_; }
      set {
        enemyOnOff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnemyOnOff != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnemyOnOff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnemyOnOff != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnemyOnOff = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpWorkingHourOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpWorkingHourOpReq> _parser = new pb::MessageParser<CmdHangUpWorkingHourOpReq>(() => new CmdHangUpWorkingHourOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpWorkingHourOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    ///开启or关闭卡时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpWorkingHourOpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpWorkingHourOpNtf> _parser = new pb::MessageParser<CmdHangUpWorkingHourOpNtf>(() => new CmdHangUpWorkingHourOpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpWorkingHourOpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "opened" field.</summary>
    public const int OpenedFieldNumber = 1;
    private bool opened_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Opened {
      get { return opened_; }
      set {
        opened_ = value;
      }
    }

    /// <summary>Field number for the "pointUsedUp" field.</summary>
    public const int PointUsedUpFieldNumber = 2;
    private bool pointUsedUp_;
    /// <summary>
    ///是否卡时耗尽关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PointUsedUp {
      get { return pointUsedUp_; }
      set {
        pointUsedUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opened != false) {
        output.WriteRawTag(8);
        output.WriteBool(Opened);
      }
      if (PointUsedUp != false) {
        output.WriteRawTag(16);
        output.WriteBool(PointUsedUp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opened != false) {
        size += 1 + 1;
      }
      if (PointUsedUp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Opened = input.ReadBool();
            break;
          }
          case 16: {
            PointUsedUp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpWorkingHourUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpWorkingHourUpdateNtf> _parser = new pb::MessageParser<CmdHangUpWorkingHourUpdateNtf>(() => new CmdHangUpWorkingHourUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpWorkingHourUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "workingHourPoint" field.</summary>
    public const int WorkingHourPointFieldNumber = 1;
    private uint workingHourPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WorkingHourPoint {
      get { return workingHourPoint_; }
      set {
        workingHourPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkingHourPoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WorkingHourPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkingHourPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorkingHourPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WorkingHourPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpRestExpUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpRestExpUpdateNtf> _parser = new pb::MessageParser<CmdHangUpRestExpUpdateNtf>(() => new CmdHangUpRestExpUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpRestExpUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "restExp" field.</summary>
    public const int RestExpFieldNumber = 1;
    private long restExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RestExp {
      get { return restExp_; }
      set {
        restExp_ = value;
      }
    }

    /// <summary>Field number for the "restExpTime" field.</summary>
    public const int RestExpTimeFieldNumber = 2;
    private uint restExpTime_;
    /// <summary>
    ///若为0表示不需要更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RestExpTime {
      get { return restExpTime_; }
      set {
        restExpTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RestExp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RestExp);
      }
      if (RestExpTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RestExpTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RestExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RestExp);
      }
      if (RestExpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RestExpTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RestExp = input.ReadInt64();
            break;
          }
          case 16: {
            RestExpTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器记录挂机点数据，用于登录下发
  /// </summary>
  public sealed class CmdHangUpReportHangUpStatusReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpReportHangUpStatusReq> _parser = new pb::MessageParser<CmdHangUpReportHangUpStatusReq>(() => new CmdHangUpReportHangUpStatusReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpReportHangUpStatusReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "hangUpInfoId" field.</summary>
    public const int HangUpInfoIdFieldNumber = 1;
    private uint hangUpInfoId_;
    /// <summary>
    ///只有一个id生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HangUpInfoId {
      get { return hangUpInfoId_; }
      set {
        hangUpInfoId_ = value;
      }
    }

    /// <summary>Field number for the "petInfoId" field.</summary>
    public const int PetInfoIdFieldNumber = 2;
    private uint petInfoId_;
    /// <summary>
    ///抓宠状态的宠物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetInfoId {
      get { return petInfoId_; }
      set {
        petInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HangUpInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HangUpInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HangUpInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHangUpReportHangUpStatusRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdHangUpReportHangUpStatusRes> _parser = new pb::MessageParser<CmdHangUpReportHangUpStatusRes>(() => new CmdHangUpReportHangUpStatusRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHangUpReportHangUpStatusRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hangUpInfoId" field.</summary>
    public const int HangUpInfoIdFieldNumber = 1;
    private uint hangUpInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HangUpInfoId {
      get { return hangUpInfoId_; }
      set {
        hangUpInfoId_ = value;
      }
    }

    /// <summary>Field number for the "petInfoId" field.</summary>
    public const int PetInfoIdFieldNumber = 2;
    private uint petInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetInfoId {
      get { return petInfoId_; }
      set {
        petInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HangUpInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HangUpInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HangUpInfoId);
      }
      if (PetInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HangUpInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
