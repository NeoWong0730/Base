// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: petlottery.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7900 金宠抽奖
  /// </summary>
  public enum CmdPetLottery {
    None = 0,
    /// <summary>
    ///请求数据  --1
    /// </summary>
    InfoReq = 7900,
    /// <summary>
    ///任务返回  --2
    /// </summary>
    InfoNtf = 7901,
    /// <summary>
    ///领取任务奖励
    /// </summary>
    GetTaskAwardReq = 7902,
    /// <summary>
    ///领取任务奖励返回
    /// </summary>
    GetTaskAwardRes = 7903,
    /// <summary>
    ///任务状态更新
    /// </summary>
    TaskUpdateNtf = 7904,
    /// <summary>
    ///大奖返回
    /// </summary>
    FinalAwardNtf = 7905,
    /// <summary>
    ///请求奖券状态 --3
    /// </summary>
    CodeStateReq = 7906,
    /// <summary>
    ///奖券状态返回 --4
    /// </summary>
    CodeStateRes = 7907,
  }

  public enum ErrorPetLottery {
    None = 0,
    /// <summary>
    ///配置不存在
    /// </summary>
    CsvnotFound = 7900,
    /// <summary>
    ///领取失败,请重试
    /// </summary>
    GetFail = 7901,
    /// <summary>
    ///完成任务后领取
    /// </summary>
    NeedFinishTask = 7902,
  }

  #endregion

  #region Messages
  public sealed class PetLotteryTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetLotteryTaskInfo> _parser = new pb::MessageParser<PetLotteryTaskInfo>(() => new PetLotteryTaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetLotteryTaskInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class FinalAwardInfo : pb::IMessage {
    private static readonly pb::MessageParser<FinalAwardInfo> _parser = new pb::MessageParser<FinalAwardInfo>(() => new FinalAwardInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinalAwardInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headId" field.</summary>
    public const int HeadIdFieldNumber = 3;
    private uint headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "headFrameId" field.</summary>
    public const int HeadFrameIdFieldNumber = 5;
    private uint headFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrameId {
      get { return headFrameId_; }
      set {
        headFrameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (HeadId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeadId);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (HeadFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeadFrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadId);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (HeadFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            HeadId = input.ReadUInt32();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            HeadFrameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryInfoReq> _parser = new pb::MessageParser<CmdPetLotteryInfoReq>(() => new CmdPetLotteryInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    /// <summary>
    ///运营活动表-活动规则表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryInfoNtf> _parser = new pb::MessageParser<CmdPetLotteryInfoNtf>(() => new CmdPetLotteryInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    /// <summary>
    ///运营活动表-活动规则表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PetLotteryTaskInfo> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PetLotteryTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetLotteryTaskInfo> tasks_ = new pbc::RepeatedField<global::Packet.PetLotteryTaskInfo>();
    /// <summary>
    ///任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetLotteryTaskInfo> Tasks {
      get { return tasks_; }
    }

    /// <summary>Field number for the "codes" field.</summary>
    public const int CodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PetLotteryCodeState> _repeated_codes_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PetLotteryCodeState.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetLotteryCodeState> codes_ = new pbc::RepeatedField<global::Packet.PetLotteryCodeState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetLotteryCodeState> Codes {
      get { return codes_; }
    }

    /// <summary>Field number for the "isDayChange" field.</summary>
    public const int IsDayChangeFieldNumber = 4;
    private bool isDayChange_;
    /// <summary>
    ///是否是5点跨天推送 false:登录请求返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDayChange {
      get { return isDayChange_; }
      set {
        isDayChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      tasks_.WriteTo(output, _repeated_tasks_codec);
      codes_.WriteTo(output, _repeated_codes_codec);
      if (IsDayChange != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsDayChange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      size += codes_.CalculateSize(_repeated_codes_codec);
      if (IsDayChange != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 18: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
          case 26: {
            codes_.AddEntriesFrom(input, _repeated_codes_codec);
            break;
          }
          case 32: {
            IsDayChange = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryCodeStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryCodeStateReq> _parser = new pb::MessageParser<CmdPetLotteryCodeStateReq>(() => new CmdPetLotteryCodeStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryCodeStateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "lotteryCodes" field.</summary>
    public const int LotteryCodesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_lotteryCodes_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lotteryCodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LotteryCodes {
      get { return lotteryCodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      lotteryCodes_.WriteTo(output, _repeated_lotteryCodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      size += lotteryCodes_.CalculateSize(_repeated_lotteryCodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            lotteryCodes_.AddEntriesFrom(input, _repeated_lotteryCodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PetLotteryCodeState : pb::IMessage {
    private static readonly pb::MessageParser<PetLotteryCodeState> _parser = new pb::MessageParser<PetLotteryCodeState>(() => new PetLotteryCodeState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetLotteryCodeState> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "lotteryCode" field.</summary>
    public const int LotteryCodeFieldNumber = 2;
    private uint lotteryCode_;
    /// <summary>
    ///抽奖号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LotteryCode {
      get { return lotteryCode_; }
      set {
        lotteryCode_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    ///0:未中奖 1:幸运奖 2:特等奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (LotteryCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LotteryCode);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (LotteryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LotteryCode);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            LotteryCode = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryCodeStateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryCodeStateRes> _parser = new pb::MessageParser<CmdPetLotteryCodeStateRes>(() => new CmdPetLotteryCodeStateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryCodeStateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "codeState" field.</summary>
    public const int CodeStateFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetLotteryCodeState> _repeated_codeState_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetLotteryCodeState.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetLotteryCodeState> codeState_ = new pbc::RepeatedField<global::Packet.PetLotteryCodeState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetLotteryCodeState> CodeState {
      get { return codeState_; }
    }

    /// <summary>Field number for the "finalAwardInfo" field.</summary>
    public const int FinalAwardInfoFieldNumber = 2;
    private global::Packet.FinalAwardInfo finalAwardInfo_;
    /// <summary>
    ///特等奖中奖信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FinalAwardInfo FinalAwardInfo {
      get { return finalAwardInfo_; }
      set {
        finalAwardInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      codeState_.WriteTo(output, _repeated_codeState_codec);
      if (finalAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FinalAwardInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += codeState_.CalculateSize(_repeated_codeState_codec);
      if (finalAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalAwardInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            codeState_.AddEntriesFrom(input, _repeated_codeState_codec);
            break;
          }
          case 18: {
            if (finalAwardInfo_ == null) {
              finalAwardInfo_ = new global::Packet.FinalAwardInfo();
            }
            input.ReadMessage(finalAwardInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryGetTaskAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryGetTaskAwardReq> _parser = new pb::MessageParser<CmdPetLotteryGetTaskAwardReq>(() => new CmdPetLotteryGetTaskAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryGetTaskAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    /// <summary>
    ///运营活动表-活动规则表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryGetTaskAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryGetTaskAwardRes> _parser = new pb::MessageParser<CmdPetLotteryGetTaskAwardRes>(() => new CmdPetLotteryGetTaskAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryGetTaskAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    /// <summary>
    ///运营活动表-活动规则表Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "codes" field.</summary>
    public const int CodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PetLotteryCodeState> _repeated_codes_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PetLotteryCodeState.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetLotteryCodeState> codes_ = new pbc::RepeatedField<global::Packet.PetLotteryCodeState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetLotteryCodeState> Codes {
      get { return codes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      codes_.WriteTo(output, _repeated_codes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      size += codes_.CalculateSize(_repeated_codes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 18: {
            codes_.AddEntriesFrom(input, _repeated_codes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryFinalAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryFinalAwardNtf> _parser = new pb::MessageParser<CmdPetLotteryFinalAwardNtf>(() => new CmdPetLotteryFinalAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryFinalAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "lotteryCode" field.</summary>
    public const int LotteryCodeFieldNumber = 1;
    private uint lotteryCode_;
    /// <summary>
    ///特等奖号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LotteryCode {
      get { return lotteryCode_; }
      set {
        lotteryCode_ = value;
      }
    }

    /// <summary>Field number for the "finalAwardInfo" field.</summary>
    public const int FinalAwardInfoFieldNumber = 2;
    private global::Packet.FinalAwardInfo finalAwardInfo_;
    /// <summary>
    ///中奖人信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FinalAwardInfo FinalAwardInfo {
      get { return finalAwardInfo_; }
      set {
        finalAwardInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LotteryCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LotteryCode);
      }
      if (finalAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FinalAwardInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LotteryCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LotteryCode);
      }
      if (finalAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalAwardInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LotteryCode = input.ReadUInt32();
            break;
          }
          case 18: {
            if (finalAwardInfo_ == null) {
              finalAwardInfo_ = new global::Packet.FinalAwardInfo();
            }
            input.ReadMessage(finalAwardInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLotteryTaskUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLotteryTaskUpdateNtf> _parser = new pb::MessageParser<CmdPetLotteryTaskUpdateNtf>(() => new CmdPetLotteryTaskUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLotteryTaskUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private global::Packet.PetLotteryTaskInfo infos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetLotteryTaskInfo Infos {
      get { return infos_; }
      set {
        infos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      if (infos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Infos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      if (infos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (infos_ == null) {
              infos_ = new global::Packet.PetLotteryTaskInfo();
            }
            input.ReadMessage(infos_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
