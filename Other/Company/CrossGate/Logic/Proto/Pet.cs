// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 1500+
  /// </summary>
  public enum CmdPet {
    None = 0,
    /// <summary>
    ///初始选宠请求 2.0
    /// </summary>
    InitSelectReq = 1501,
    /// <summary>
    ///玩家上线的时候发送的一条纵览协议
    ///此协议会发送整个背包宠物列表、临时背包宠物列表、宠物系统基本信息、当前出战宠物得像
    ///发送的列表仅仅有宠物基本信息、宠物详细信息需要再请求，请求之后缓存
    ///银行宠物列表不在这条信息发
    /// </summary>
    SysInfoNtf = 1502,
    /// <summary>
    ///获得宠物通知 2.0
    /// </summary>
    AddPetNtf = 1503,
    /// <summary>
    ///宠物经验通知 2.0
    /// </summary>
    AddExpNtf = 1505,
    /// <summary>
    ///进入游戏只是发了宠物简略信息，这个是请求宠物信息 2.0 返回CmdPetGetPetInfoNtf
    /// </summary>
    GetPetInfoReq = 1506,
    /// <summary>
    ///  2.0
    /// </summary>
    PetInfoNtf = 1507,
    /// <summary>
    ///设置宠物出战 2.0
    /// </summary>
    SetCurrentPetReq = 1508,
    /// <summary>
    ///设置宠物出战 2.0
    /// </summary>
    SetCurrentPetRes = 1509,
    /// <summary>
    ///改变宠物位置请求 2.0
    /// </summary>
    ChangePositionReq = 1510,
    /// <summary>
    ///2.0
    /// </summary>
    ChangePositionRes = 1511,
    /// <summary>
    ///宠物改名请求2.0
    /// </summary>
    RenameReq = 1512,
    /// <summary>
    ///2.0
    /// </summary>
    RenameRes = 1513,
    /// <summary>
    ///放生宠物请求 2.0
    /// </summary>
    AbandonPetReq = 1514,
    /// <summary>
    /// </summary>
    AbandonPetRes = 1515,
    /// <summary>
    ///请求分配自由属性点 2.0 返回CmdPetGetPetInfoNtf
    /// </summary>
    AllocPointReq = 1516,
    /// <summary>
    ///请求重置已分配属性点 2.0 返回CmdPetGetPetInfoNtf
    /// </summary>
    ResetPointReq = 1517,
    /// <summary>
    ///请求设置自动属性点 2.0 
    /// </summary>
    SetAutoPointReq = 1518,
    /// <summary>
    ///请求设置自动属性点 2.0 
    /// </summary>
    SetAutoPointRes = 1519,
    /// <summary>
    ///请求学习技能 2.0 返回CmdPetGetPetInfoNtf
    /// </summary>
    LearnSkillReq = 1521,
    /// <summary>
    ///请求学习技能 2.0 返回CmdPetGetPetInfoNtf
    /// </summary>
    LearnSkillRes = 1522,
    /// <summary>
    ///返回CmdPetGetPetInfoNtf 重置
    /// </summary>
    AllocEnhancePointReq = 1523,
    /// <summary>
    /// </summary>
    EnhanceExpNtf = 1526,
    /// <summary>
    ///请求使用宠物培养道具 2.0 部分返回CmdPetGetPetInfoNtf
    /// </summary>
    GroomUseItemReq = 1527,
    /// <summary>
    ///忠诚度更新，参战 2.0
    /// </summary>
    LoyaltyNtf = 1528,
    /// <summary>
    ///援助信息请求 上线并不会发 玩家点开的时候发 2.0
    /// </summary>
    AutoBlinkInfoReq = 1531,
    /// <summary>
    ///援助信息 2.0
    /// </summary>
    AutoBlinkInfoRes = 1532,
    /// <summary>
    ///2.0
    /// </summary>
    SkillLevelUpReq = 1533,
    /// <summary>
    ///2.0
    /// </summary>
    SkillLevelUpRes = 1534,
    /// <summary>
    ///2.0
    /// </summary>
    SkillAddExpReq = 1535,
    /// <summary>
    ///2.0
    /// </summary>
    SkillAddExpRes = 1536,
    /// <summary>
    ///2.0 宠物兑换 是分解那个 返回CmdPet_AbandonPetRes
    /// </summary>
    DeComposeReq = 1537,
    /// <summary>
    ///请求宠物背包解锁
    /// </summary>
    BagUnlockReq = 1538,
    /// <summary>
    /// </summary>
    BagUnlockRes = 1539,
    /// <summary>
    ///设置援助列表
    /// </summary>
    AutoBlinkSetReq = 1540,
    /// <summary>
    ///遗忘技能
    /// </summary>
    RemoveSkillReq = 1542,
    /// <summary>
    /// </summary>
    RemoveSkillRes = 1543,
    /// <summary>
    ///返回CmdPetGetPetInfoNtf
    /// </summary>
    EnhancePointResetReq = 1544,
    /// <summary>
    ///请求宠物改造
    /// </summary>
    RemakeReq = 1548,
    RemakeRes = 1549,
    /// <summary>
    ///重置改造(废弃)
    /// </summary>
    RemakeResetReq = 1550,
    /// <summary>
    ///重置改造(废弃)
    /// </summary>
    RemakeResetRes = 1545,
    /// <summary>
    ///获取宠物图鉴数据请求
    /// </summary>
    GetHandbookReq = 1551,
    GetHandbookRes = 1552,
    /// <summary>
    ///请求激活宠物
    /// </summary>
    ActivateReq = 1553,
    ActivateRes = 1554,
    /// <summary>
    ///请求提升宠物好感度
    /// </summary>
    LoveExpUpReq = 1555,
    LoveExpUpRes = 1556,
    /// <summary>
    ///请求解封背景故事
    /// </summary>
    ActivateStoryReq = 1557,
    ActivateStoryRes = 1558,
    /// <summary>
    ///自动激活背景故事数据通知
    /// </summary>
    AutoActivateStoryNtf = 1559,
    /// <summary>
    ///宠物图鉴发现者通知
    /// </summary>
    DiscovererNtf = 1560,
    /// <summary>
    ///请求从宠物临时背包中取出
    /// </summary>
    OutFromPetTempPackReq = 1561,
    OutFromPetTempPackRes = 1562,
    /// <summary>
    ///宠物临时背包更新通知
    /// </summary>
    TempPackNtf = 1563,
    /// <summary>
    ///请求宠物临时背包信息
    /// </summary>
    TempPackReq = 1564,
    /// <summary>
    ///请求宠物银行信息
    /// </summary>
    GetBankInfoReq = 1565,
    GetBankInfoRes = 1566,
    /// <summary>
    ///请求宠物银行解锁
    /// </summary>
    BankUnlockReq = 1567,
    BankUnlockRes = 1568,
    /// <summary>
    ///请求宠物银行操作
    /// </summary>
    BankMoveReq = 1569,
    BankMoveRes = 1570,
    /// <summary>
    ///兑换金宠
    /// </summary>
    ExchangeGoldPetReq = 1571,
    /// <summary>
    ///可能不需要 先写着
    /// </summary>
    ExchangeGoldPetRes = 1572,
    /// <summary>
    ///重生金宠就是再来点兑换的东西 把宠物之换掉，不会跟献祭宠物重复
    /// </summary>
    ReExchangeGoldPetReq = 1573,
    /// <summary>
    /// 加了次数 上线发一次
    /// </summary>
    ReExchangeGoldPetRes = 1574,
    /// <summary>
    /// 宠物回复同步
    /// </summary>
    RecoverNtf = 1575,
    /// <summary>
    ///全服加点请求 客户端每隔一个小时请求一下？
    /// </summary>
    AllPlayerAllocInfoReq = 1576,
    /// <summary>
    /// 全服推荐加点返回
    /// </summary>
    AllPlayerAllocInfoRes = 1577,
    /// <summary>
    ///宠物遇到通知
    /// </summary>
    TriggerNtf = 1578,
    /// <summary>
    ///上下坐骑
    /// </summary>
    SetCurrentMountReq = 1579,
    /// <summary>
    /// </summary>
    SetCurrentMountRes = 1580,
    /// <summary>
    ///坐骑驯化
    /// </summary>
    MountdomesticationReq = 1581,
    /// <summary>
    ///坐骑驯化
    /// </summary>
    MountdomesticationRes = 1582,
    /// <summary>
    ///坐骑到期请求
    /// </summary>
    MountExpiredReq = 1583,
    /// <summary>
    ///坐骑到期返回
    /// </summary>
    MountExpiredRes = 1584,
    /// <summary>
    ///宠物跟随
    /// </summary>
    SetFollowPetReq = 1585,
    /// <summary>
    ///宠物返回
    /// </summary>
    SetFollowPetRes = 1586,
    /// <summary>
    ///临时背包批量放生
    /// </summary>
    TempBagBatchAbandonPetReq = 1587,
    /// <summary>
    /// </summary>
    TempBagBatchAbandonPetRes = 1588,
    /// <summary>
    ///请求宠物改造选择 返回CmdPetGetPetInfoNtf 也会返回CmdPet_RemakeSelectRes 共客户端做表现
    /// </summary>
    RemakeSelectReq = 1589,
    RemakeSelectRes = 1590,
    /// <summary>
    ///改造领悟技能
    /// </summary>
    RemakeLearnSkillReq = 1591,
    RemakeLearnSkillRes = 1592,
    /// <summary>
    ///改造选择领悟技能
    /// </summary>
    RemakeSelectSkillReq = 1593,
    RemakeSelectSkillRes = 1594,
    /// <summary>
    ///改造重塑档位
    /// </summary>
    RemakeReGradeReq = 1595,
    RemakeReGradeRes = 1596,
    /// <summary>
    ///改造选择重塑档位
    /// </summary>
    RemakeSelectGradeReq = 1597,
    RemakeSelectGradeRes = 1598,
    /// <summary>
    ///契约的建立
    /// </summary>
    ContractSetUpReq = 7800,
    /// <summary>
    ///契约的建立 返回
    /// </summary>
    ContractSetUpRes = 7801,
    /// <summary>
    ///契约的取消
    /// </summary>
    ContractCancleReq = 7802,
    /// <summary>
    ///契约的取消 返回
    /// </summary>
    ContractCancleRes = 7803,
    /// <summary>
    ///骑术技能学习
    /// </summary>
    RidingSkillLearnReq = 7804,
    /// <summary>
    ///骑术技能学习返回
    /// </summary>
    RidingSkillLearnRes = 7805,
    /// <summary>
    ///骑术技能遗忘
    /// </summary>
    RidingSkillForgetReq = 7806,
    /// <summary>
    ///骑术技能遗忘返回
    /// </summary>
    RidingSkillForgetRes = 7807,
    /// <summary>
    ///骑术充能
    /// </summary>
    RidingSkillAddEnergyReq = 7808,
    /// <summary>
    ///骑术能量改变
    /// </summary>
    RidingSkillEnergyChangeNtf = 7809,
    /// <summary>
    ///坐骑兑换  //返回CmdPet_AbandonPetRes
    /// </summary>
    MountExchangeReq = 7810,
    /// <summary>
    ///获取宠物技能消耗 //返回CmdPetPetInfoNtf
    /// </summary>
    GetRidingSkillCostReq = 7811,
    /// <summary>
    ///契约信息更新
    /// </summary>
    ContractInfoUpdateNtf = 7812,
    /// <summary>
    ///封印宠物设置
    /// </summary>
    CatchSetReq = 7813,
    /// <summary>
    ///封印宠物设置返回
    /// </summary>
    CatchSetRes = 7814,
    /// <summary>
    ///封印设置
    /// </summary>
    CatchSettingsReq = 7815,
    /// <summary>
    ///封印设置返回
    /// </summary>
    CatchSettingsRes = 7816,
    /// <summary>
    ///新增唯一宠物的InfoId
    /// </summary>
    UniquePetAddNtf = 7817,
    /// <summary>
    ///请求宠物进阶
    /// </summary>
    UpStageReq = 7818,
    UpStageRes = 7819,
    /// <summary>
    ///请求金宠印记兑换  //返回CmdPet_AbandonPetRes
    /// </summary>
    StampExchangeReq = 7820,
    /// <summary>
    ///特殊金宠兑换
    /// </summary>
    ExchangeSpecialGoldPetReq = 7821,
    /// <summary>
    ///特殊金宠抽奖次数更新
    /// </summary>
    ExchangeSpecialGoldPetCountRes = 7822,
    /// <summary>
    ///吃果实
    /// </summary>
    EatFruitReq = 7823,
    /// <summary>
    ///吃果实
    /// </summary>
    EatFruitRes = 7824,
    /// <summary>
    ///战斗中获取福袋
    /// </summary>
    FightGetLuckyBagNtf = 7825,
    /// <summary>
    ///增加加点方案
    /// </summary>
    AllocPointPlanAddReq = 7826,
    /// <summary>
    ///增加加点方案
    /// </summary>
    AllocPointPlanAddRes = 7827,
    /// <summary>
    ///加点方案改名
    /// </summary>
    AllocPointPlanRenameReq = 7828,
    /// <summary>
    ///加点方案改名
    /// </summary>
    AllocPointPlanRenameRes = 7829,
    /// <summary>
    ///使用加点方案
    /// </summary>
    AllocPointPlanUseReq = 7830,
    /// <summary>
    ///使用加点方案
    /// </summary>
    AllocPointPlanUseRes = 7831,
    /// <summary>
    ///属性修正方案增加
    /// </summary>
    AllocEnhancePlanAddReq = 7832,
    /// <summary>
    ///属性修正方案增加
    /// </summary>
    AllocEnhancePlanAddRes = 7833,
    /// <summary>
    ///属性修正方案改名
    /// </summary>
    AllocEnhancePlanRenameReq = 7834,
    /// <summary>
    ///属性修正方案改名
    /// </summary>
    AllocEnhancePlanRenameRes = 7835,
    /// <summary>
    ///使用修正方案
    /// </summary>
    AllocEnhancePlanUseReq = 7836,
    /// <summary>
    ///定向金宠兑换
    /// </summary>
    ExchangTargetGoldPetReq = 7837,
    /// <summary>
    ///定向金宠兑换
    /// </summary>
    ExchangTargetGoldPetRes = 7838,
    /// <summary>
    ///使用修正方案返回
    /// </summary>
    AllocEnhancePlanUseRes = 7839,
    /// <summary>
    ///获得宠物加点方案属性
    /// </summary>
    GetPointPlanAttrReq = 7840,
    /// <summary>
    ///获得宠物加点方案属性返回
    /// </summary>
    GetPointPlanAttrRes = 7841,
    /// <summary>
    ///单个宠物加点方案属性更新
    /// </summary>
    SinglePointPlanAttrUpdateNtf = 7842,
    /// <summary>
    ///宠物等级回退
    /// </summary>
    LevelDownReq = 7843,
    /// <summary>
    ///宠物魔魂激活
    /// </summary>
    SoulActiveReq = 7844,
    /// <summary>
    ///宠物魔魂激活
    /// </summary>
    SoulActiveRes = 7845,
    /// <summary>
    ///增加改造系数
    /// </summary>
    SoulAddRemakeCountReq = 7846,
    /// <summary>
    ///增加改造次数
    /// </summary>
    SoulAddRemakeCountRes = 7847,
    /// <summary>
    ///装配/卸下魂珠
    /// </summary>
    SoulAssembleBeadReq = 7848,
    /// <summary>
    ///装配/卸下魂珠
    /// </summary>
    SoulAssembleBeadRes = 7849,
    /// <summary>
    ///魂珠操作
    /// </summary>
    SoulBeadOperateReq = 7850,
    /// <summary>
    ///魂珠操作返回
    /// </summary>
    SoulBeadOperateRes = 7851,
    /// <summary>
    ///魂珠初始化
    /// </summary>
    SoulBeadInitNtf = 7852,
    /// <summary>
    ///首发出战宠物列表请求
    /// </summary>
    FightPetSetListReq = 7853,
    /// <summary>
    ///首发出战宠物列表请求
    /// </summary>
    FightPetSetListRes = 7854,
    /// <summary>
    ///首发出战宠物请求
    /// </summary>
    FightPetSetReq = 7855,
    /// <summary>
    ///首发出战宠物请求
    /// </summary>
    FightPetSetRes = 7856,
    /// <summary>
    ///宠物好感度经验一键升级请求
    /// </summary>
    LoveExpUpAllReq = 7857,
    /// <summary>
    ///宠物好感度经验一键升级返回
    /// </summary>
    LoveExpUpAllRes = 7858,
    /// <summary>
    ///获取驯养信息
    /// </summary>
    GetDomesticationReq = 7859,
    GetDomesticationRes = 7860,
    /// <summary>
    ///开始驯养请求
    /// </summary>
    DomesticationStartReq = 7861,
    DomesticationStartRes = 7862,
    /// <summary>
    ///领取驯养奖励请求
    /// </summary>
    DomesticationEndReq = 7863,
    DomesticationEndRes = 7864,
    /// <summary>
    ///刷新驯养任务请求
    /// </summary>
    DomesticationRefreshReq = 7865,
    DomesticationRefreshRes = 7866,
    /// <summary>
    ///加驯请求
    /// </summary>
    DomesticationAddReq = 7867,
    DomesticationAddRes = 7868,
    /// <summary>
    ///宠物升级魂珠信息
    /// </summary>
    SoulBeadUpgradeInfoNtf = 7869,
    /// <summary>
    ///契约位升级
    /// </summary>
    ContractLevelUpReq = 7870,
    /// <summary>
    ///契约位升级
    /// </summary>
    ContractLevelUpRes = 7871,
    /// <summary>
    ///获得驯养通知
    /// </summary>
    DomesticationExpNtf = 7872,
    /// <summary>
    ///给宠物上锁
    /// </summary>
    LockPetReq = 7873,
    /// <summary>
    /// </summary>
    LockPetRes = 7874,
    /// <summary>
    ///激活宠物外观
    /// </summary>
    ActiveFashionReq = 7875,
    /// <summary>
    ///激活宠物外观
    /// </summary>
    ActiveFashionRes = 7876,
    /// <summary>
    ///激活宠物外观颜色
    /// </summary>
    ActiveFashionColorReq = 7877,
    /// <summary>
    ///激活宠物外观颜色
    /// </summary>
    ActiveFashionColorRes = 7878,
    /// <summary>
    ///穿脱宠物外观
    /// </summary>
    DressOnOffFashionReq = 7879,
    /// <summary>
    ///穿脱宠物外观
    /// </summary>
    DressOnOffFashionRes = 7880,
  }

  public enum ErrorPet {
    None = 0,
    /// <summary>
    ///配置表没有该宠物id
    /// </summary>
    CsvPetId = 1501,
    /// <summary>
    ///配置表参数出错
    /// </summary>
    CsvParaErr = 1502,
    /// <summary>
    ///已领取初始宠物
    /// </summary>
    PetInitGot = 1503,
    /// <summary>
    ///获取宠物出错
    /// </summary>
    AddPetError = 1504,
    /// <summary>
    ///宠物uid错误,玩家没有该宠物
    /// </summary>
    PetNotExist = 1505,
    /// <summary>
    ///该宠物未出战
    /// </summary>
    NoneFight = 1506,
    /// <summary>
    ///该宠物已出战
    /// </summary>
    IsFight = 1507,
    /// <summary>
    ///未达宠物参战等级
    /// </summary>
    ParticipationLv = 1508,
    /// <summary>
    ///宠物超过玩家等级x，无法参战
    /// </summary>
    OverRoleLvMax = 1509,
    /// <summary>
    ///名称长度非法
    /// </summary>
    NameInvalid = 1510,
    /// <summary>
    ///名字含有非utf8字符,名称非法
    /// </summary>
    NameInvalidutf8 = 1511,
    /// <summary>
    ///宠物已满，无法获得新宠物
    /// </summary>
    PetFull = 1512,
    /// <summary>
    ///宠物经验值已达上限，无法获得经验
    /// </summary>
    PetExpMax = 1513,
    /// <summary>
    ///宠物经验值已满
    /// </summary>
    PetExpFull = 1514,
    /// <summary>
    ///宠物等级不能超过人物等级x
    /// </summary>
    PetLvFull = 1515,
    /// <summary>
    /// 未分配的潜能点数不足
    /// </summary>
    PointNotEnough = 1516,
    /// <summary>
    /// 无效的潜能点数
    /// </summary>
    PointInvalid = 1517,
    /// <summary>
    /// 超过该属性最大可分配点数（每种属性最多只能加可分配点数的一半）
    /// </summary>
    PointMax = 1518,
    /// <summary>
    /// 今日洗练次数已用尽，请明日再来
    /// </summary>
    DailyTrainingFull = 1519,
    /// <summary>
    /// 宠物没有该技能
    /// </summary>
    NonSkill = 1520,
    /// <summary>
    /// 该技能不可锁定
    /// </summary>
    SkillNonLock = 1521,
    /// <summary>
    /// 融合前需取消宠物技能锁定
    /// </summary>
    FusionLockSkill = 1522,
    /// <summary>
    /// 金卡宠只能和非金卡宠融合
    /// </summary>
    FusionGold = 1523,
    /// <summary>
    /// 没有可顶替的技能
    /// </summary>
    NonIdleSkill = 1524,
    /// <summary>
    /// 宠物培养道具id错误
    /// </summary>
    GroomNonItemId = 1525,
    /// <summary>
    /// 宠物档位提升次数已到上限
    /// </summary>
    GroomGradeMax = 1526,
    /// <summary>
    /// 宠物成长提升次数已到上限
    /// </summary>
    GroomGrowthMax = 1527,
    /// <summary>
    /// 该魔契未激活
    /// </summary>
    DeviceNonActivated = 1528,
    /// <summary>
    /// 该魔契已激活
    /// </summary>
    DeviceIsActivated = 1529,
    /// <summary>
    /// 魔契id错误，未找到对应魔契
    /// </summary>
    DeviceId = 1530,
    /// <summary>
    /// 魔契数量已达最大
    /// </summary>
    DeviceMax = 1531,
    /// <summary>
    /// 必须先激活前一个魔契
    /// </summary>
    DevicePrevNonAcvite = 1532,
    /// <summary>
    /// 该魔契无法通过消耗道具激活
    /// </summary>
    DeviceItemActive = 1533,
    /// <summary>
    /// 跨服场景内无法使用该功能
    /// </summary>
    Kuafu = 1534,
    /// <summary>
    /// 玩家等级不够，无法突破
    /// </summary>
    DeviceRoleLv = 1535,
    /// <summary>
    /// 魔契契合度不够，无法突破
    /// </summary>
    DeviceNonExp = 1536,
    /// <summary>
    /// 魔契突破次数已达最大
    /// </summary>
    DeviceSurmountMax = 1537,
    /// <summary>
    /// 魔契强化加点,该属性无法强化
    /// </summary>
    DeviceAttrId = 1538,
    /// <summary>
    /// 魔契强化加点,强化点数不足
    /// </summary>
    DeviceNonSpoint = 1539,
    /// <summary>
    /// 魔契强化加点,强化加点已到上限
    /// </summary>
    DeviceAttrPointMax = 1540,
    /// <summary>
    /// 可用于转换的宠物经验不足
    /// </summary>
    DevicePetExp = 1541,
    /// <summary>
    /// 宠物技能数已到上限
    /// </summary>
    SkillMax = 1542,
    /// <summary>
    /// 宠物已有该技能
    /// </summary>
    SkillRepeated = 1543,
    /// <summary>
    /// 锁定技能数已到最大
    /// </summary>
    SkillLockMax = 1544,
    /// <summary>
    /// 该宠物不可改造或改造次数已达最大
    /// </summary>
    RemakeMax = 1545,
    /// <summary>
    /// 宠物等级不足
    /// </summary>
    PetLv = 1546,
    /// <summary>
    /// 该图鉴已激活
    /// </summary>
    HandbookActivated = 1547,
    /// <summary>
    /// 该图鉴未激活
    /// </summary>
    HandbookNonActivated = 1548,
    /// <summary>
    /// 该背景故事已激活或前置故事未激活
    /// </summary>
    StoryActive = 1549,
    /// <summary>
    /// 未满足背景故事激活条件
    /// </summary>
    StoryActiveCondition = 1550,
    /// <summary>
    /// 宠物数量上限, 转移至宠物临时背包
    /// </summary>
    FullToTempPack = 1551,
    /// <summary>
    /// 宠物临时背包为空
    /// </summary>
    TempPackEmpty = 1552,
    /// <summary>
    /// 宠物仓库未解锁
    /// </summary>
    BankNotUnlock = 1553,
    /// <summary>
    /// 宠物仓库配置报错
    /// </summary>
    BankCsverr = 1554,
    /// <summary>
    /// 宠物仓库解锁数上限
    /// </summary>
    BankLvMax = 1555,
    /// <summary>
    /// 宠物仓库解锁消耗不足
    /// </summary>
    BankConsLess = 1556,
    /// <summary>
    /// 宠物仓库移动失败
    /// </summary>
    BankMoveErr = 1557,
    /// <summary>
    /// 宠物仓库已满
    /// </summary>
    BankFull = 1558,
    /// <summary>
    /// 宠物仓库-获取宠物失败
    /// </summary>
    BankPetErr = 1559,
    /// <summary>
    /// 宠物仓库取出失败-宠物栏已满
    /// </summary>
    BankPetFull = 1560,
    /// <summary>
    /// 宠物栏已满, 无法使用道具
    /// </summary>
    PetMaxNotUseItem = 1561,
    /// <summary>
    /// 宠物已绑定
    /// </summary>
    Bind = 1562,
    /// <summary>
    /// 宠物禁售期
    /// </summary>
    LockPeriod = 1563,
    /// <summary>
    /// 绑定宠物无法洗练
    /// </summary>
    BindNotTraining = 1564,
    /// <summary>
    /// 绑定宠物无法进行培养
    /// </summary>
    BindNotGroom = 1565,
    /// <summary>
    /// 绑定宠物无法进行合成
    /// </summary>
    BindNotFusion = 1566,
    /// <summary>
    /// 绑定宠物无法学习技能
    /// </summary>
    BindNotLearnSkill = 1567,
    /// <summary>
    /// 绑定宠物无法绑定技能
    /// </summary>
    BindNotLockSkill = 1568,
    /// <summary>
    /// 只有配置的重置才能重置
    /// </summary>
    GoldPetReExchange = 1569,
    /// <summary>
    /// 宠物功能未开启
    /// </summary>
    FunctionNotOpen = 1570,
    StoryNotSubmit = 1571,
    /// <summary>
    ///人物等级不满足宠物参战等级
    /// </summary>
    FightLevelLimit = 1572,
    /// <summary>
    ///换位置的时候发过来的位置无效
    /// </summary>
    NewPos = 1573,
    /// <summary>
    ///使用技能书 发过来的类型不对
    /// </summary>
    SkillBook = 1574,
    /// <summary>
    ///使用技能书 已经有更高等级或者相同等级得
    /// </summary>
    SkillHas = 1575,
    /// <summary>
    ///技能满了
    /// </summary>
    SkillFull = 1576,
    /// <summary>
    ///抵抗等级到达人物最高等级
    /// </summary>
    EnhanceLevelMax = 1578,
    /// <summary>
    ///改造书没配置
    /// </summary>
    BuildBookNotFound = 1579,
    /// <summary>
    ///已经达到最高改造次数
    /// </summary>
    MaxBuildCount = 1580,
    /// <summary>
    ///发生了异常 技能升级没找到技能
    /// </summary>
    NotHasSkill = 1581,
    /// <summary>
    ///发生了异常 找不到技能配置
    /// </summary>
    NotHasSkillInfo = 1582,
    /// <summary>
    ///技能已经满级
    /// </summary>
    SkillLevelMax = 1583,
    /// <summary>
    ///升级的时候经验不够
    /// </summary>
    SkillExpNotEnough = 1584,
    /// <summary>
    ///评分不够分解
    /// </summary>
    DeComposeScoreLimit = 1585,
    /// <summary>
    ///分解没有道具
    /// </summary>
    DecomposeItemNone = 1586,
    /// <summary>
    ///兑换强化经验的时候客户端发过来的经验不足
    /// </summary>
    ExpNotEnough = 1587,
    /// <summary>
    ///强化精灵配置错误
    /// </summary>
    EnhanceBook = 1588,
    /// <summary>
    ///最后一个宠物不能放生 -//最后一只宠物不能进行此操作
    /// </summary>
    LastPetNotAbandon = 1589,
    /// <summary>
    ///绑定的不能兑换
    /// </summary>
    DecomposeBindLimit = 1590,
    /// <summary>
    ///绑定的不能改造
    /// </summary>
    BindNotRemake = 1591,
    /// <summary>
    ///绑定的不能遗忘技能
    /// </summary>
    BindNotRemoveSkill = 1592,
    /// <summary>
    ///绑定得不能金宠兑换
    /// </summary>
    GoldPetReExchangeBindLimit = 1593,
    /// <summary>
    ///分配点数的时候找不到等级的配置
    /// </summary>
    EnhanceLevel = 1594,
    /// <summary>
    ///强化经验没法继续提升受宠物等级限制
    /// </summary>
    EnhanceLevelPetLevelLimit = 1595,
    /// <summary>
    ///忠诚度没法继续提升受宠物等级限制
    /// </summary>
    LoyatyFull = 1596,
    /// <summary>
    ///宠物得好感度最高等级
    /// </summary>
    LoveLevelMax = 1597,
    /// <summary>
    ///最后一个宠物不能存入隐含
    /// </summary>
    LastPetCannotMove = 1598,
    /// <summary>
    ///骑宠已经驯化
    /// </summary>
    MountDomesticationRepeat = 1599,
    /// <summary>
    ///非骑宠
    /// </summary>
    NotIsMount = 1600,
    /// <summary>
    ///限时宠物不能操作
    /// </summary>
    ExpiredPetNoGrowUp = 1601,
    /// <summary>
    /// 骑宠不能同时骑乘和出战
    /// </summary>
    MountNotFightAndRide = 1602,
    /// <summary>
    /// 限时骑宠不能出战
    /// </summary>
    LimitTimeMountNotFight = 1603,
    /// <summary>
    /// 资源采集中不能骑乘
    /// </summary>
    CanNotMountOnResourceCollecting = 1604,
    /// <summary>
    /// 改造技能数量已达上限
    /// </summary>
    RebuildSkillMax = 1605,
    /// <summary>
    /// 宠物改造状态错误，无法改造
    /// </summary>
    RebuildStateBuild = 1606,
    /// <summary>
    /// 不在改造中，无法保存
    /// </summary>
    RebuildStateBuildSave = 1607,
    /// <summary>
    /// 宠物改造状态错误，无法领悟技能
    /// </summary>
    RebuildStateSkill = 1608,
    /// <summary>
    /// 不在领悟技能中，无法保存
    /// </summary>
    RebuildStateSkillSave = 1609,
    /// <summary>
    /// 宠物改造状态错误，无法重铸改造
    /// </summary>
    RebuildStateRegrade = 1610,
    /// <summary>
    /// 不在重铸改造中，无法保存
    /// </summary>
    RebuildStateRegradeSave = 1611,
    /// <summary>
    /// 当前技能栏无法领悟技能
    /// </summary>
    RebuildSkillPosition = 1612,
    /// <summary>
    /// 宠物改造次数错误
    /// </summary>
    RebuildCount = 1613,
    /// <summary>
    /// 保存领悟技能-位置请求错误
    /// </summary>
    RebuildSkillSavePosi = 1614,
    /// <summary>
    /// 保存领悟技能技能-id不存在
    /// </summary>
    RebuildSkillSaveIdNone = 1615,
    /// <summary>
    /// 保存领悟技能-已领悟
    /// </summary>
    RebuildSkillSaveHas = 1617,
    /// <summary>
    /// 重铸需要改造次数不足
    /// </summary>
    RebuildReGradeNeedCount = 1618,
    /// <summary>
    ///兑换品质没达到
    /// </summary>
    DeComposeQualityLimit = 1619,
    /// <summary>
    ///该宠物不能骑乘
    /// </summary>
    NotRideThisPet = 1620,
    /// <summary>
    ///出战宠物不能寄存
    /// </summary>
    FightCanNotMoveToBank = 1621,
    /// <summary>
    ///出战宠物不能兑换 -//出战宠物不能进行此操作
    /// </summary>
    FightCanNotDecompose = 1622,
    /// <summary>
    ///出战宠物不能重生1金宠
    /// </summary>
    FightCanNotExchange = 1623,
    /// <summary>
    ///出战宠物不能贩卖
    /// </summary>
    FightCanNotTrade = 1624,
    /// <summary>
    ///改造重置请求index错误
    /// </summary>
    RebuildIndex = 1625,
    /// <summary>
    ///改造重置扣除总档位错误
    /// </summary>
    RebuildCostGrade = 1626,
    /// <summary>
    ///请先卸下宠物身上的宠物元核 -//请先卸下宠物身上的宠物元核
    /// </summary>
    HasPetEquip = 1627,
    /// <summary>
    ///该宠物无法装配宠物元核
    /// </summary>
    CanNotFitPetEquip = 1628,
    /// <summary>
    ///坐骑未驯化不能建立契约
    /// </summary>
    NeedMountDomestication = 7800,
    /// <summary>
    ///限时宠物不能建立契约
    /// </summary>
    TimeLimitCannotContract = 7801,
    /// <summary>
    ///已建立契约需要解除契约后操作
    /// </summary>
    ContractOthers = 7802,
    /// <summary>
    ///契约位置错误
    /// </summary>
    ContractPosError = 7803,
    /// <summary>
    ///契约配置错误
    /// </summary>
    ContractCfgError = 7804,
    /// <summary>
    ///骑术技能参数配置错误
    /// </summary>
    RidingSkillParamError = 7805,
    /// <summary>
    ///骑术技能已满
    /// </summary>
    RidingSkillFull = 7806,
    /// <summary>
    ///骑术能量已满
    /// </summary>
    RidingSkillEnergyFull = 7807,
    /// <summary>
    ///宠物参数表骑术能量道具增加骑术值0
    /// </summary>
    RidingSkillEnergyAdd = 7808,
    /// <summary>
    ///专属骑术技能不能遗忘
    /// </summary>
    RidingSkillNotForget = 7809,
    /// <summary>
    ///不存在目标骑术技能
    /// </summary>
    RidingSkillNotExist = 7810,
    /// <summary>
    ///骑乘中的坐骑不能兑换
    /// </summary>
    RideMountCanNotExchange = 7811,
    /// <summary>
    ///未驯化的宠物不能兑换
    /// </summary>
    MountNeedDomestication = 7812,
    /// <summary>
    ///跟随宠物不能兑换
    /// </summary>
    FollowPetCanNotExchange = 7813,
    /// <summary>
    ///没有骑术技能不能兑换
    /// </summary>
    NoRidingSkill = 7814,
    /// <summary>
    ///骑术功能未开启
    /// </summary>
    RoleLevelTooLow = 7815,
    /// <summary>
    ///该宠物不能转化为对应技能书
    /// </summary>
    MountCanNotExchange = 7816,
    /// <summary>
    ///战斗中不能建立取消契约关系
    /// </summary>
    FightingNotOpContract = 7817,
    /// <summary>
    ///战斗中不能学习遗忘骑术技能
    /// </summary>
    FightingNotOpRidingSkill = 7818,
    /// <summary>
    ///契约位宠物不能兑换
    /// </summary>
    ContractCannotExchange = 7819,
    /// <summary>
    ///该宠物不能设置封印
    /// </summary>
    PetCanNotSetCatch = 7820,
    /// <summary>
    ///该宠物只能获得一只,不能重复获得
    /// </summary>
    UniquePetRepeat = 7821,
    /// <summary>
    ///王宠不能兑换删除上架
    /// </summary>
    UniquePetCannotRemove = 7822,
    /// <summary>
    ///该宠物不可进阶
    /// </summary>
    CannotUpStage = 7823,
    /// <summary>
    ///该宠物进阶次数已满
    /// </summary>
    UpStageMax = 7824,
    /// <summary>
    ///该宠物进阶等级不足
    /// </summary>
    UpStageLv = 7825,
    /// <summary>
    ///宠物进阶表配置错误
    /// </summary>
    UpStageCsvErr = 7826,
    /// <summary>
    ///宠物印记兑换评分不足
    /// </summary>
    StampExchangeScoreLimit = 7827,
    /// <summary>
    ///宠物印记兑换没有道具
    /// </summary>
    StampExchangeItemNone = 7828,
    /// <summary>
    ///已经拥有同类型的骑术技能
    /// </summary>
    SameRidingSkill = 7829,
    /// <summary>
    ///宠物方案索引错误
    /// </summary>
    PetPlanIndexError = 7830,
    /// <summary>
    ///该宠物不能降级
    /// </summary>
    LevelDownError = 7831,
    /// <summary>
    ///卸下宠物魂珠后重试
    /// </summary>
    HasSoulBeads = 7832,
    /// <summary>
    ///限时宠物不能使用
    /// </summary>
    SoulTimeLimitPet = 7833,
    /// <summary>
    ///该宠物不能激活魔魂
    /// </summary>
    SoulCannotActive = 7834,
    /// <summary>
    ///该宠物已经激活魔魂
    /// </summary>
    SoulHasActive = 7835,
    /// <summary>
    ///魔魂配置错误
    /// </summary>
    SoulCsvError = 7836,
    /// <summary>
    ///消耗的宠物档位不达标
    /// </summary>
    SoulPetFailPassGrade = 7837,
    /// <summary>
    ///消耗的宠物评分不达标
    /// </summary>
    SoulPetFailPassPower = 7838,
    /// <summary>
    ///宠物魔魂还未激活
    /// </summary>
    SoulHasNotActive = 7839,
    /// <summary>
    ///该魂珠已经激活
    /// </summary>
    SoulBeadHasActived = 7840,
    /// <summary>
    ///该魂珠还未激活
    /// </summary>
    SoulBeadNotActived = 7841,
    /// <summary>
    ///魂珠类型错误
    /// </summary>
    SoulBeadTypeError = 7842,
    /// <summary>
    ///魂珠不存在
    /// </summary>
    SoulBeadError = 7843,
    /// <summary>
    ///消耗的宠物卡片类型不达标
    /// </summary>
    SoulPetFailPassType = 7844,
    /// <summary>
    ///需要消耗同名宠物
    /// </summary>
    SoulPetFailPassSame = 7845,
    /// <summary>
    ///宠物首发设置战斗类型错误
    /// </summary>
    FightPetSetFightTypeError = 7846,
    /// <summary>
    ///宠物首发设置类型错误
    /// </summary>
    FightPetSetTypeError = 7847,
    /// <summary>
    ///魂珠技能库错误
    /// </summary>
    SoulBeadSkillLib = 7848,
    /// <summary>
    ///保存/删除技能重复操作
    /// </summary>
    SoulBeadSkillOpRepeat = 7849,
    /// <summary>
    ///魂珠已经卸下
    /// </summary>
    SoulBeadTakeOff = 7850,
    /// <summary>
    ///传参错误,不能消耗宠物自己
    /// </summary>
    SoulPetCostIsSelf = 7851,
    /// <summary>
    ///传参错误,该技能尚未激活 不能随机
    /// </summary>
    SoulBeadSkillNotActive = 7852,
    /// <summary>
    ///装配魂珠等级不足,增加改造位失败
    /// </summary>
    SoulBeadLevelNotEnough = 7853,
    /// <summary>
    ///宠物等级不足,激活魔魂失败
    /// </summary>
    SoulActivePetLvNotEnough = 7854,
    /// <summary>
    ///世界等级不足,激活魔魂失败
    /// </summary>
    SoulActiveWorldLvNotEnough = 7855,
    /// <summary>
    ///该魂珠已被装备,选择其它魂珠
    /// </summary>
    SoulBeadOnOtherPet = 7856,
    /// <summary>
    ///未找到驯养任务
    /// </summary>
    NoneDomesticationTask = 7857,
    /// <summary>
    ///正在驯养任务中
    /// </summary>
    InDomesticationTask = 7858,
    /// <summary>
    ///驯养配置错误
    /// </summary>
    DomesticationCsvErr = 7859,
    /// <summary>
    ///驯养任务条件不满足
    /// </summary>
    DomesticationCondi = 7860,
    /// <summary>
    ///驯养任务加训次数已满
    /// </summary>
    DomesticationAddMax = 7861,
    /// <summary>
    ///没有可领取的驯养任务奖励
    /// </summary>
    DomesticationAward = 7862,
    /// <summary>
    ///宠物升级魂珠次数不足
    /// </summary>
    UpgradeBeadsCountNotEnough = 7863,
    /// <summary>
    ///契约位已满级
    /// </summary>
    ContractLevelMax = 7864,
    /// <summary>
    ///契约位突破消耗道具不达标
    /// </summary>
    ContractCostItemError = 7865,
    /// <summary>
    ///坐骑尚未驯化
    /// </summary>
    MountNotDomestication = 7866,
    /// <summary>
    ///消耗道具的品质不合要求
    /// </summary>
    ItemNotMatchNeedQuality = 7867,
    /// <summary>
    ///锁上了
    /// </summary>
    Locked = 7868,
    /// <summary>
    ///一键升级图鉴结束
    /// </summary>
    LoveExpUpAllEnd = 7869,
    /// <summary>
    ///宠物外观已激活
    /// </summary>
    FashionActivated = 7870,
    /// <summary>
    ///宠物外观未激活
    /// </summary>
    FashionNotActivate = 7871,
    /// <summary>
    ///宠物外观颜色已激活
    /// </summary>
    FashionColorActivated = 7872,
    /// <summary>
    ///宠物外观颜色未激活
    /// </summary>
    FashionColorNotActivate = 7873,
    /// <summary>
    ///宠物外观表配置错误
    /// </summary>
    FashionCsvError = 7874,
    /// <summary>
    ///请脱下宠物外观后重试
    /// </summary>
    FashionNeedTakeOff = 7875,
  }

  public enum PetActiveReason {
    None = 0,
    /// <summary>
    ///初始选宠请求
    /// </summary>
    InitSelect = 1501,
    /// <summary>
    ///玩家主动放生宠物
    /// </summary>
    AbandonPet = 1502,
    /// <summary>
    ///融合失去宠物
    /// </summary>
    FusionLose = 1503,
    /// <summary>
    ///融合获得宠物
    /// </summary>
    FusionGet = 1504,
    /// <summary>
    ///道具获得宠物
    /// </summary>
    ItemGet = 1505,
    /// <summary>
    ///GM指令获得宠物
    /// </summary>
    Gmadd = 1506,
    /// <summary>
    ///封印获得宠物
    /// </summary>
    Catch = 1507,
    /// <summary>
    ///兑换金宠
    /// </summary>
    Exchange = 1508,
    /// <summary>
    ///重置兑换金宠
    /// </summary>
    ReExchange = 1509,
    /// <summary>
    ///  宠物重置加点
    /// </summary>
    ResetPoint = 1510,
    /// <summary>
    ///  宠物洗练
    /// </summary>
    Training = 1511,
    /// <summary>
    ///  宠物锁定技能
    /// </summary>
    LockSkill = 1512,
    /// <summary>
    ///  宠物培养
    /// </summary>
    Groom = 1513,
    /// <summary>
    ///  激活魔契
    /// </summary>
    AddDevice = 1514,
    /// <summary>
    ///  魔契技能洗练
    /// </summary>
    DeviceTraining = 1515,
    /// <summary>
    ///  魔契强化加点重置
    /// </summary>
    DeviceRePoint = 1516,
    /// <summary>
    ///  宠物改造
    /// </summary>
    PetRemake = 1517,
    /// <summary>
    ///  宠物图鉴
    /// </summary>
    Handbook = 1518,
    /// <summary>
    ///  宠物好感度
    /// </summary>
    LoveExp = 1519,
    /// <summary>
    ///  宠物银行解锁
    /// </summary>
    UnlockBank = 1520,
    /// <summary>
    ///宠物技能打书
    /// </summary>
    AddSkill = 1521,
    /// <summary>
    ///技能增加经验
    /// </summary>
    SkillAddExp = 1522,
    /// <summary>
    ///技能升级
    /// </summary>
    SkillLevelUp = 1523,
    /// <summary>
    ///宠物分解 根据评分兑换
    /// </summary>
    DeCompose = 1524,
    /// <summary>
    ///从临时背包取出来
    /// </summary>
    OutFromTemp = 1525,
    /// <summary>
    ///解锁宠物格子
    /// </summary>
    UnlockBag = 1526,
    /// <summary>
    /// 宠物改造重置
    /// </summary>
    PetRemakeReset = 1527,
    /// <summary>
    /// 宠物-交易行
    /// </summary>
    Trade = 1528,
    /// <summary>
    /// GM增加宠物经验
    /// </summary>
    GmAddPetExp = 1529,
    /// <summary>
    /// 战斗减少忠诚度
    /// </summary>
    BattleDecLoyal = 1530,
    /// <summary>
    /// 骑宠驯化
    /// </summary>
    MountDomestication = 1531,
    /// <summary>
    ///宠物过期
    /// </summary>
    Expired = 1532,
    /// <summary>
    ///遗忘技能返还道具
    /// </summary>
    RmskillReturnItem = 1533,
    /// <summary>
    /// 任务上交宠物
    /// </summary>
    TaskSubmitLose = 1534,
    /// <summary>
    ///  宠物改造-领悟技能
    /// </summary>
    PetRemakeSkill = 1535,
    /// <summary>
    ///  宠物改造-重铸档位
    /// </summary>
    PetRemakeReGrade = 1536,
    CatchAutoAbandon = 1537,
    /// <summary>
    ///增加骑术能量
    /// </summary>
    AddEnergy = 1538,
    /// <summary>
    ///坐骑兑换
    /// </summary>
    MountExchange = 1539,
    /// <summary>
    ///增加坐骑技能
    /// </summary>
    MountAddSkill = 1540,
    /// <summary>
    ///恢复道具
    /// </summary>
    Revert = 1541,
    /// <summary>
    ///宠物进阶
    /// </summary>
    UpStage = 1542,
    /// <summary>
    ///特殊金宠兑换
    /// </summary>
    SpecialGoldPetExchange = 1543,
    /// <summary>
    ///宠物印记兑换
    /// </summary>
    StampExchange = 1544,
    /// <summary>
    ///吃果实
    /// </summary>
    EatFruit = 1545,
    /// <summary>
    ///指定金宠合成
    /// </summary>
    TargetGoldPet = 1546,
    /// <summary>
    ///获取福袋
    /// </summary>
    GetLuckyBag = 1547,
    /// <summary>
    ///宠物降级
    /// </summary>
    LevelDown = 1548,
    /// <summary>
    ///宠物魔魂消耗
    /// </summary>
    SoulCost = 1549,
    /// <summary>
    ///宠物魔魂增加改造次数消耗
    /// </summary>
    SoulAddRemakeCountCost = 1550,
    /// <summary>
    ///魂珠激活
    /// </summary>
    SoulBeadActive = 1551,
    /// <summary>
    ///魂珠升级
    /// </summary>
    SoulBeadLevel = 1552,
    /// <summary>
    ///魂珠随机技能
    /// </summary>
    SoulBeadRandSkill = 1553,
    /// <summary>
    ///宠物驯养奖励
    /// </summary>
    Domestication = 1554,
    /// <summary>
    ///宠物驯养刷新
    /// </summary>
    DomesticationRefresh = 1555,
    /// <summary>
    ///宠物驯养加训
    /// </summary>
    DomesticationAdd = 1556,
    /// <summary>
    ///契约位强化
    /// </summary>
    ContractLevelUp = 1557,
    /// <summary>
    ///雪玲好感度重置返回
    /// </summary>
    PetLoveExpResetBack = 1558,
    /// <summary>
    ///宠物外观
    /// </summary>
    PetFashion = 1559,
  }

  public enum EnumLostPetType {
    None = 0,
    /// <summary>
    ///放生
    /// </summary>
    Abandon = 1,
    /// <summary>
    ///分解兑换
    /// </summary>
    Decompose = 2,
    /// <summary>
    ///金宠重生
    /// </summary>
    ReExchange = 3,
    /// <summary>
    ///上架交易行
    /// </summary>
    Trade = 4,
    /// <summary>
    ///任务上交宠物
    /// </summary>
    TaskSubmit = 5,
    /// <summary>
    ///坐骑兑换
    /// </summary>
    MountExchange = 6,
    /// <summary>
    ///玩家恢复高级宠物之前先删掉原来的
    /// </summary>
    Revert = 7,
    /// <summary>
    ///金宠印记兑换
    /// </summary>
    StampExchange = 8,
    /// <summary>
    ///魔魂消耗
    /// </summary>
    SoulCost = 9,
  }

  /// <summary>
  ///宠物所在位置类型
  /// </summary>
  public enum EnumPetPosType {
    /// <summary>
    ///宠物背包
    /// </summary>
    Bag = 0,
    /// <summary>
    ///宠物临时背包
    /// </summary>
    TempBag = 1,
    /// <summary>
    ///宠物银行
    /// </summary>
    Bank = 2,
  }

  /// <summary>
  ///宠物改造状态
  /// </summary>
  public enum EnumPetBuildState {
    /// <summary>
    ///空闲
    /// </summary>
    None = 0,
    /// <summary>
    ///改造中
    /// </summary>
    Building = 1,
    /// <summary>
    ///领悟技能
    /// </summary>
    LearnSkill = 2,
    /// <summary>
    ///重塑档位
    /// </summary>
    ReGrade = 3,
    /// <summary>
    ///改造重置中
    /// </summary>
    ReBuilding = 4,
  }

  public enum PetUnitEnum {
    None = 0,
    SimplePet = 1,
    BaseSkill = 2,
    BuildUnit = 4,
    EnhanceUnit = 8,
    BaseGrade = 16,
    PetBaseAttr = 32,
    PetPkAttr = 64,
    SkillCost = 128,
    PetEquip = 256,
    SoulBead = 512,
    All = 268435455,
  }

  public enum GroomType {
    None = 0,
    /// <summary>
    ///增加经验
    /// </summary>
    Exp = 1,
    /// <summary>
    ///增加忠诚度
    /// </summary>
    Loaylty = 2,
    /// <summary>
    ///抵抗属性强化
    /// </summary>
    Enhance = 3,
  }

  public enum PetSoulBeadOpType {
    SoulBeadOpTypeNull = 0,
    /// <summary>
    ///激活魂珠
    /// </summary>
    SoulBeadOpTypeActive = 1,
    /// <summary>
    ///升级魂珠-道具
    /// </summary>
    SoulBeadOpTypeLevelUpItem = 2,
    /// <summary>
    ///升级魂珠-宠物
    /// </summary>
    SoulBeadOpTypeLevelUpPet = 3,
    /// <summary>
    ///随机魂珠技能
    /// </summary>
    SoulBeadOpTypeRandSkill = 4,
    /// <summary>
    ///保存魂珠技能
    /// </summary>
    SoulBeadOpTypeSaveSkill = 5,
    /// <summary>
    ///放弃魂珠技能
    /// </summary>
    SoulBeadOpTypeDeleteSkill = 6,
  }

  #endregion

  #region Messages
  public sealed class PetPointPlanInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetPointPlanInfo> _parser = new pb::MessageParser<PetPointPlanInfo>(() => new PetPointPlanInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetPointPlanInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "usePoint" field.</summary>
    public const int UsePointFieldNumber = 1;
    private uint usePoint_;
    /// <summary>
    ///已分配的点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePoint {
      get { return usePoint_; }
      set {
        usePoint_ = value;
      }
    }

    /// <summary>Field number for the "vitAssign" field.</summary>
    public const int VitAssignFieldNumber = 2;
    private uint vitAssign_;
    /// <summary>
    /// 已分配的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitAssign {
      get { return vitAssign_; }
      set {
        vitAssign_ = value;
      }
    }

    /// <summary>Field number for the "snhAssign" field.</summary>
    public const int SnhAssignFieldNumber = 3;
    private uint snhAssign_;
    /// <summary>
    /// 已分配的力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhAssign {
      get { return snhAssign_; }
      set {
        snhAssign_ = value;
      }
    }

    /// <summary>Field number for the "intenAssign" field.</summary>
    public const int IntenAssignFieldNumber = 4;
    private uint intenAssign_;
    /// <summary>
    /// 已分配的强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenAssign {
      get { return intenAssign_; }
      set {
        intenAssign_ = value;
      }
    }

    /// <summary>Field number for the "speedAssign" field.</summary>
    public const int SpeedAssignFieldNumber = 5;
    private uint speedAssign_;
    /// <summary>
    /// 已分配的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedAssign {
      get { return speedAssign_; }
      set {
        speedAssign_ = value;
      }
    }

    /// <summary>Field number for the "magicAssign" field.</summary>
    public const int MagicAssignFieldNumber = 6;
    private uint magicAssign_;
    /// <summary>
    /// 已分配的魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicAssign {
      get { return magicAssign_; }
      set {
        magicAssign_ = value;
      }
    }

    /// <summary>Field number for the "autoselect" field.</summary>
    public const int AutoselectFieldNumber = 7;
    private uint autoselect_;
    /// <summary>
    ///0代表没选  5, 7, 9, 11, 13
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Autoselect {
      get { return autoselect_; }
      set {
        autoselect_ = value;
      }
    }

    /// <summary>Field number for the "resetCount" field.</summary>
    public const int ResetCountFieldNumber = 8;
    private uint resetCount_;
    /// <summary>
    ///属性重置次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetCount {
      get { return resetCount_; }
      set {
        resetCount_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///是否启用自动加点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 10;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    /// <summary>
    ///方案名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsePoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UsePoint);
      }
      if (VitAssign != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitAssign);
      }
      if (SnhAssign != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhAssign);
      }
      if (IntenAssign != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenAssign);
      }
      if (SpeedAssign != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedAssign);
      }
      if (MagicAssign != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicAssign);
      }
      if (Autoselect != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Autoselect);
      }
      if (ResetCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ResetCount);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsePoint);
      }
      if (VitAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitAssign);
      }
      if (SnhAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhAssign);
      }
      if (IntenAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenAssign);
      }
      if (SpeedAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedAssign);
      }
      if (MagicAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicAssign);
      }
      if (Autoselect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Autoselect);
      }
      if (ResetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetCount);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UsePoint = input.ReadUInt32();
            break;
          }
          case 16: {
            VitAssign = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhAssign = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenAssign = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedAssign = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicAssign = input.ReadUInt32();
            break;
          }
          case 56: {
            Autoselect = input.ReadUInt32();
            break;
          }
          case 64: {
            ResetCount = input.ReadUInt32();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
          case 82: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class PetPointPlansData : pb::IMessage {
    private static readonly pb::MessageParser<PetPointPlansData> _parser = new pb::MessageParser<PetPointPlansData>(() => new PetPointPlansData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetPointPlansData> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentPlanIndex" field.</summary>
    public const int CurrentPlanIndexFieldNumber = 1;
    private uint currentPlanIndex_;
    /// <summary>
    ///当前使用方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentPlanIndex {
      get { return currentPlanIndex_; }
      set {
        currentPlanIndex_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PetPointPlanInfo> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PetPointPlanInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetPointPlanInfo> plans_ = new pbc::RepeatedField<global::Packet.PetPointPlanInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetPointPlanInfo> Plans {
      get { return plans_; }
    }

    /// <summary>Field number for the "totalPoint" field.</summary>
    public const int TotalPointFieldNumber = 3;
    private uint totalPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPoint {
      get { return totalPoint_; }
      set {
        totalPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrentPlanIndex);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
      if (TotalPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPlanIndex);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      if (TotalPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentPlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
          case 24: {
            TotalPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物的一些加点属性信息
  /// </summary>
  public sealed class PetBaseAttr : pb::IMessage {
    private static readonly pb::MessageParser<PetBaseAttr> _parser = new pb::MessageParser<PetBaseAttr>(() => new PetBaseAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetBaseAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "surplusPoint" field.</summary>
    public const int SurplusPointFieldNumber = 1;
    private uint surplusPoint_;
    /// <summary>
    /// 未分配的属性点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SurplusPoint {
      get { return surplusPoint_; }
      set {
        surplusPoint_ = value;
      }
    }

    /// <summary>Field number for the "vitAssign" field.</summary>
    public const int VitAssignFieldNumber = 2;
    private uint vitAssign_;
    /// <summary>
    /// 已分配的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitAssign {
      get { return vitAssign_; }
      set {
        vitAssign_ = value;
      }
    }

    /// <summary>Field number for the "snhAssign" field.</summary>
    public const int SnhAssignFieldNumber = 3;
    private uint snhAssign_;
    /// <summary>
    /// 已分配的力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhAssign {
      get { return snhAssign_; }
      set {
        snhAssign_ = value;
      }
    }

    /// <summary>Field number for the "intenAssign" field.</summary>
    public const int IntenAssignFieldNumber = 4;
    private uint intenAssign_;
    /// <summary>
    /// 已分配的强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenAssign {
      get { return intenAssign_; }
      set {
        intenAssign_ = value;
      }
    }

    /// <summary>Field number for the "speedAssign" field.</summary>
    public const int SpeedAssignFieldNumber = 5;
    private uint speedAssign_;
    /// <summary>
    /// 已分配的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedAssign {
      get { return speedAssign_; }
      set {
        speedAssign_ = value;
      }
    }

    /// <summary>Field number for the "magicAssign" field.</summary>
    public const int MagicAssignFieldNumber = 6;
    private uint magicAssign_;
    /// <summary>
    /// 已分配的魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicAssign {
      get { return magicAssign_; }
      set {
        magicAssign_ = value;
      }
    }

    /// <summary>Field number for the "autoselect" field.</summary>
    public const int AutoselectFieldNumber = 7;
    private uint autoselect_;
    /// <summary>
    ///0代表没选  5, 7, 9, 11, 13
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Autoselect {
      get { return autoselect_; }
      set {
        autoselect_ = value;
      }
    }

    /// <summary>Field number for the "resetCount" field.</summary>
    public const int ResetCountFieldNumber = 8;
    private uint resetCount_;
    /// <summary>
    ///属性重置次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetCount {
      get { return resetCount_; }
      set {
        resetCount_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 9;
    private bool enabled_;
    /// <summary>
    ///是否启用自动加点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SurplusPoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SurplusPoint);
      }
      if (VitAssign != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitAssign);
      }
      if (SnhAssign != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhAssign);
      }
      if (IntenAssign != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenAssign);
      }
      if (SpeedAssign != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedAssign);
      }
      if (MagicAssign != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicAssign);
      }
      if (Autoselect != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Autoselect);
      }
      if (ResetCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ResetCount);
      }
      if (Enabled != false) {
        output.WriteRawTag(72);
        output.WriteBool(Enabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SurplusPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SurplusPoint);
      }
      if (VitAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitAssign);
      }
      if (SnhAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhAssign);
      }
      if (IntenAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenAssign);
      }
      if (SpeedAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedAssign);
      }
      if (MagicAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicAssign);
      }
      if (Autoselect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Autoselect);
      }
      if (ResetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetCount);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SurplusPoint = input.ReadUInt32();
            break;
          }
          case 16: {
            VitAssign = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhAssign = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenAssign = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedAssign = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicAssign = input.ReadUInt32();
            break;
          }
          case 56: {
            Autoselect = input.ReadUInt32();
            break;
          }
          case 64: {
            ResetCount = input.ReadUInt32();
            break;
          }
          case 72: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物属性
  /// </summary>
  public sealed class PetPkAttr : pb::IMessage {
    private static readonly pb::MessageParser<PetPkAttr> _parser = new pb::MessageParser<PetPkAttr>(() => new PetPkAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetPkAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetPkAttr.Types.AttrPair> _repeated_attr_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetPkAttr.Types.AttrPair.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetPkAttr.Types.AttrPair> attr_ = new pbc::RepeatedField<global::Packet.PetPkAttr.Types.AttrPair>();
    /// <summary>
    ///属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetPkAttr.Types.AttrPair> Attr {
      get { return attr_; }
    }

    /// <summary>Field number for the "curHp" field.</summary>
    public const int CurHpFieldNumber = 2;
    private long curHp_;
    /// <summary>
    ///当前生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "curMp" field.</summary>
    public const int CurMpFieldNumber = 3;
    private long curMp_;
    /// <summary>
    ///当前魔力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attr_.WriteTo(output, _repeated_attr_codec);
      if (CurHp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurHp);
      }
      if (CurMp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attr_.CalculateSize(_repeated_attr_codec);
      if (CurHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHp);
      }
      if (CurMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attr_.AddEntriesFrom(input, _repeated_attr_codec);
            break;
          }
          case 16: {
            CurHp = input.ReadInt64();
            break;
          }
          case 24: {
            CurMp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PetPkAttr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AttrPair : pb::IMessage {
        private static readonly pb::MessageParser<AttrPair> _parser = new pb::MessageParser<AttrPair>(() => new AttrPair());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttrPair> Parser { get { return _parser; } }

        /// <summary>Field number for the "attrId" field.</summary>
        public const int AttrIdFieldNumber = 1;
        private uint attrId_;
        /// <summary>
        ///属性id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrId {
          get { return attrId_; }
          set {
            attrId_ = value;
          }
        }

        /// <summary>Field number for the "attrValue" field.</summary>
        public const int AttrValueFieldNumber = 2;
        private long attrValue_;
        /// <summary>
        ///属性值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AttrValue {
          get { return attrValue_; }
          set {
            attrValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AttrId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AttrId);
          }
          if (AttrValue != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(AttrValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AttrId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
          }
          if (AttrValue != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttrValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AttrId = input.ReadUInt32();
                break;
              }
              case 16: {
                AttrValue = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///简略宠物信息，如果不够客户端可以补充
  /// </summary>
  public sealed class SimplePet : pb::IMessage {
    private static readonly pb::MessageParser<SimplePet> _parser = new pb::MessageParser<SimplePet>(() => new SimplePet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimplePet> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 2;
    private uint petId_;
    /// <summary>
    ///宠物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "loyalty" field.</summary>
    public const int LoyaltyFieldNumber = 3;
    private uint loyalty_;
    /// <summary>
    ///忠诚度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Loyalty {
      get { return loyalty_; }
      set {
        loyalty_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    ///评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "bind" field.</summary>
    public const int BindFieldNumber = 5;
    private bool bind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bind {
      get { return bind_; }
      set {
        bind_ = value;
      }
    }

    /// <summary>Field number for the "lockPeriod" field.</summary>
    public const int LockPeriodFieldNumber = 6;
    private int lockPeriod_;
    /// <summary>
    ///禁售期-结束时间戳 (-1永久禁售, 单位:天)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockPeriod {
      get { return lockPeriod_; }
      set {
        lockPeriod_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 7;
    private ulong exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名称（为空使用默认名称）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rare" field.</summary>
    public const int RareFieldNumber = 10;
    private bool rare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rare {
      get { return rare_; }
      set {
        rare_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 11;
    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "loyalDecCount" field.</summary>
    public const int LoyalDecCountFieldNumber = 12;
    private uint loyalDecCount_;
    /// <summary>
    ///忠诚度扣除累计值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoyalDecCount {
      get { return loyalDecCount_; }
      set {
        loyalDecCount_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 14;
    private uint race_;
    /// <summary>
    ///bool inrank = 13;// 服务器字段 客户端不需要(已废除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "initpower" field.</summary>
    public const int InitpowerFieldNumber = 15;
    private uint initpower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Initpower {
      get { return initpower_; }
      set {
        initpower_ = value;
      }
    }

    /// <summary>Field number for the "expiredTick" field.</summary>
    public const int ExpiredTickFieldNumber = 16;
    private uint expiredTick_;
    /// <summary>
    ///0:永久宠物  >0:宠物到期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpiredTick {
      get { return expiredTick_; }
      set {
        expiredTick_ = value;
      }
    }

    /// <summary>Field number for the "mountDomestication" field.</summary>
    public const int MountDomesticationFieldNumber = 17;
    private uint mountDomestication_;
    /// <summary>
    ///是否驯化 == 0未驯化 1:驯化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountDomestication {
      get { return mountDomestication_; }
      set {
        mountDomestication_ = value;
      }
    }

    /// <summary>Field number for the "uniqueSignId" field.</summary>
    public const int UniqueSignIdFieldNumber = 18;
    private pb::ByteString uniqueSignId_ = pb::ByteString.Empty;
    /// <summary>
    ///全局唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UniqueSignId {
      get { return uniqueSignId_; }
      set {
        uniqueSignId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lableId" field.</summary>
    public const int LableIdFieldNumber = 19;
    private uint lableId_;
    /// <summary>
    ///宠物银行标签id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LableId {
      get { return lableId_; }
      set {
        lableId_ = value;
      }
    }

    /// <summary>Field number for the "contractPetUid" field.</summary>
    public const int ContractPetUidFieldNumber = 20;
    private uint contractPetUid_;
    /// <summary>
    ///契约宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractPetUid {
      get { return contractPetUid_; }
      set {
        contractPetUid_ = value;
      }
    }

    /// <summary>Field number for the "contractPets" field.</summary>
    public const int ContractPetsFieldNumber = 21;
    private static readonly pb::FieldCodec<uint> _repeated_contractPets_codec
        = pb::FieldCodec.ForUInt32(170);
    private readonly pbc::RepeatedField<uint> contractPets_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///契约位宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ContractPets {
      get { return contractPets_; }
    }

    /// <summary>Field number for the "petStage" field.</summary>
    public const int PetStageFieldNumber = 22;
    private uint petStage_;
    /// <summary>
    ///宠物进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetStage {
      get { return petStage_; }
      set {
        petStage_ = value;
      }
    }

    /// <summary>Field number for the "buildRemakeLuck" field.</summary>
    public const int BuildRemakeLuckFieldNumber = 23;
    private uint buildRemakeLuck_;
    /// <summary>
    ///改造图纸幸运值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildRemakeLuck {
      get { return buildRemakeLuck_; }
      set {
        buildRemakeLuck_ = value;
      }
    }

    /// <summary>Field number for the "buildSkillLuck" field.</summary>
    public const int BuildSkillLuckFieldNumber = 24;
    private uint buildSkillLuck_;
    /// <summary>
    ///改造技能幸运值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildSkillLuck {
      get { return buildSkillLuck_; }
      set {
        buildSkillLuck_ = value;
      }
    }

    /// <summary>Field number for the "contractLevel" field.</summary>
    public const int ContractLevelFieldNumber = 25;
    private uint contractLevel_;
    /// <summary>
    ///契约位等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractLevel {
      get { return contractLevel_; }
      set {
        contractLevel_ = value;
      }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 26;
    private uint fashionId_;
    /// <summary>
    ///时装Id;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "fashionColorIndex" field.</summary>
    public const int FashionColorIndexFieldNumber = 27;
    private uint fashionColorIndex_;
    /// <summary>
    ///时装颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionColorIndex {
      get { return fashionColorIndex_; }
      set {
        fashionColorIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetId);
      }
      if (Loyalty != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Loyalty);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
      if (Bind != false) {
        output.WriteRawTag(40);
        output.WriteBool(Bind);
      }
      if (LockPeriod != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LockPeriod);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Level);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Name);
      }
      if (Rare != false) {
        output.WriteRawTag(80);
        output.WriteBool(Rare);
      }
      if (Quality != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Quality);
      }
      if (LoyalDecCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(LoyalDecCount);
      }
      if (Race != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Race);
      }
      if (Initpower != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Initpower);
      }
      if (ExpiredTick != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ExpiredTick);
      }
      if (MountDomestication != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MountDomestication);
      }
      if (UniqueSignId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(UniqueSignId);
      }
      if (LableId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(LableId);
      }
      if (ContractPetUid != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ContractPetUid);
      }
      contractPets_.WriteTo(output, _repeated_contractPets_codec);
      if (PetStage != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PetStage);
      }
      if (BuildRemakeLuck != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(BuildRemakeLuck);
      }
      if (BuildSkillLuck != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(BuildSkillLuck);
      }
      if (ContractLevel != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(ContractLevel);
      }
      if (FashionId != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(FashionId);
      }
      if (FashionColorIndex != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(FashionColorIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (Loyalty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Loyalty);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Bind != false) {
        size += 1 + 1;
      }
      if (LockPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockPeriod);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Rare != false) {
        size += 1 + 1;
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (LoyalDecCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoyalDecCount);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Race);
      }
      if (Initpower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Initpower);
      }
      if (ExpiredTick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExpiredTick);
      }
      if (MountDomestication != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MountDomestication);
      }
      if (UniqueSignId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(UniqueSignId);
      }
      if (LableId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LableId);
      }
      if (ContractPetUid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ContractPetUid);
      }
      size += contractPets_.CalculateSize(_repeated_contractPets_codec);
      if (PetStage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PetStage);
      }
      if (BuildRemakeLuck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildRemakeLuck);
      }
      if (BuildSkillLuck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuildSkillLuck);
      }
      if (ContractLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ContractLevel);
      }
      if (FashionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (FashionColorIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FashionColorIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            PetId = input.ReadUInt32();
            break;
          }
          case 24: {
            Loyalty = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
          case 40: {
            Bind = input.ReadBool();
            break;
          }
          case 48: {
            LockPeriod = input.ReadInt32();
            break;
          }
          case 56: {
            Exp = input.ReadUInt64();
            break;
          }
          case 64: {
            Level = input.ReadUInt32();
            break;
          }
          case 74: {
            Name = input.ReadBytes();
            break;
          }
          case 80: {
            Rare = input.ReadBool();
            break;
          }
          case 88: {
            Quality = input.ReadUInt32();
            break;
          }
          case 96: {
            LoyalDecCount = input.ReadUInt32();
            break;
          }
          case 112: {
            Race = input.ReadUInt32();
            break;
          }
          case 120: {
            Initpower = input.ReadUInt32();
            break;
          }
          case 128: {
            ExpiredTick = input.ReadUInt32();
            break;
          }
          case 136: {
            MountDomestication = input.ReadUInt32();
            break;
          }
          case 146: {
            UniqueSignId = input.ReadBytes();
            break;
          }
          case 152: {
            LableId = input.ReadUInt32();
            break;
          }
          case 160: {
            ContractPetUid = input.ReadUInt32();
            break;
          }
          case 170:
          case 168: {
            contractPets_.AddEntriesFrom(input, _repeated_contractPets_codec);
            break;
          }
          case 176: {
            PetStage = input.ReadUInt32();
            break;
          }
          case 184: {
            BuildRemakeLuck = input.ReadUInt32();
            break;
          }
          case 192: {
            BuildSkillLuck = input.ReadUInt32();
            break;
          }
          case 200: {
            ContractLevel = input.ReadUInt32();
            break;
          }
          case 208: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 216: {
            FashionColorIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物技能相关
  /// </summary>
  public sealed class BaseSkill : pb::IMessage {
    private static readonly pb::MessageParser<BaseSkill> _parser = new pb::MessageParser<BaseSkill>(() => new BaseSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseSkill> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillGrids" field.</summary>
    public const int SkillGridsFieldNumber = 1;
    private uint skillGrids_;
    /// <summary>
    ///技能栏位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillGrids {
      get { return skillGrids_; }
      set {
        skillGrids_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///宠物技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "uniqueSkills" field.</summary>
    public const int UniqueSkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_uniqueSkills_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> uniqueSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///专属技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UniqueSkills {
      get { return uniqueSkills_; }
    }

    /// <summary>Field number for the "skillExp" field.</summary>
    public const int SkillExpFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_skillExp_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> skillExp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///对应于2中每个技能的经验 数组长度跟2一样
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillExp {
      get { return skillExp_; }
    }

    /// <summary>Field number for the "uniqueRidingSkills" field.</summary>
    public const int UniqueRidingSkillsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_uniqueRidingSkills_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> uniqueRidingSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///专属骑术技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UniqueRidingSkills {
      get { return uniqueRidingSkills_; }
    }

    /// <summary>Field number for the "ridingSkills" field.</summary>
    public const int RidingSkillsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_ridingSkills_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> ridingSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///骑术
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RidingSkills {
      get { return ridingSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillGrids != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillGrids);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      uniqueSkills_.WriteTo(output, _repeated_uniqueSkills_codec);
      skillExp_.WriteTo(output, _repeated_skillExp_codec);
      uniqueRidingSkills_.WriteTo(output, _repeated_uniqueRidingSkills_codec);
      ridingSkills_.WriteTo(output, _repeated_ridingSkills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillGrids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillGrids);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += uniqueSkills_.CalculateSize(_repeated_uniqueSkills_codec);
      size += skillExp_.CalculateSize(_repeated_skillExp_codec);
      size += uniqueRidingSkills_.CalculateSize(_repeated_uniqueRidingSkills_codec);
      size += ridingSkills_.CalculateSize(_repeated_ridingSkills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillGrids = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 26:
          case 24: {
            uniqueSkills_.AddEntriesFrom(input, _repeated_uniqueSkills_codec);
            break;
          }
          case 34:
          case 32: {
            skillExp_.AddEntriesFrom(input, _repeated_skillExp_codec);
            break;
          }
          case 42:
          case 40: {
            uniqueRidingSkills_.AddEntriesFrom(input, _repeated_uniqueRidingSkills_codec);
            break;
          }
          case 50:
          case 48: {
            ridingSkills_.AddEntriesFrom(input, _repeated_ridingSkills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改造技能相关
  /// </summary>
  public sealed class BuildUnit : pb::IMessage {
    private static readonly pb::MessageParser<BuildUnit> _parser = new pb::MessageParser<BuildUnit>(() => new BuildUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "buildCount" field.</summary>
    public const int BuildCountFieldNumber = 1;
    private uint buildCount_;
    /// <summary>
    ///改造次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildCount {
      get { return buildCount_; }
      set {
        buildCount_ = value;
      }
    }

    /// <summary>Field number for the "buildSkills" field.</summary>
    public const int BuildSkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_buildSkills_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> buildSkills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///改造技能列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BuildSkills {
      get { return buildSkills_; }
    }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 3;
    private uint vitGrade_;
    /// <summary>
    ///改造档位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 4;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 5;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 6;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 7;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    /// <summary>Field number for the "buildState" field.</summary>
    public const int BuildStateFieldNumber = 8;
    private uint buildState_;
    /// <summary>
    ///EnumPetBuildState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildState {
      get { return buildState_; }
      set {
        buildState_ = value;
      }
    }

    /// <summary>Field number for the "vitGradeTemp" field.</summary>
    public const int VitGradeTempFieldNumber = 9;
    private uint vitGradeTemp_;
    /// <summary>
    ///未保存的改造档位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGradeTemp {
      get { return vitGradeTemp_; }
      set {
        vitGradeTemp_ = value;
      }
    }

    /// <summary>Field number for the "snhGradeTemp" field.</summary>
    public const int SnhGradeTempFieldNumber = 10;
    private uint snhGradeTemp_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGradeTemp {
      get { return snhGradeTemp_; }
      set {
        snhGradeTemp_ = value;
      }
    }

    /// <summary>Field number for the "intenGradeTemp" field.</summary>
    public const int IntenGradeTempFieldNumber = 11;
    private uint intenGradeTemp_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGradeTemp {
      get { return intenGradeTemp_; }
      set {
        intenGradeTemp_ = value;
      }
    }

    /// <summary>Field number for the "speedGradeTemp" field.</summary>
    public const int SpeedGradeTempFieldNumber = 12;
    private uint speedGradeTemp_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGradeTemp {
      get { return speedGradeTemp_; }
      set {
        speedGradeTemp_ = value;
      }
    }

    /// <summary>Field number for the "magicGradeTemp" field.</summary>
    public const int MagicGradeTempFieldNumber = 13;
    private uint magicGradeTemp_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGradeTemp {
      get { return magicGradeTemp_; }
      set {
        magicGradeTemp_ = value;
      }
    }

    /// <summary>Field number for the "skillPosition" field.</summary>
    public const int SkillPositionFieldNumber = 14;
    private uint skillPosition_;
    /// <summary>
    ///未保存的改造技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillPosition {
      get { return skillPosition_; }
      set {
        skillPosition_ = value;
      }
    }

    /// <summary>Field number for the "skillTemp" field.</summary>
    public const int SkillTempFieldNumber = 15;
    private static readonly pb::FieldCodec<uint> _repeated_skillTemp_codec
        = pb::FieldCodec.ForUInt32(122);
    private readonly pbc::RepeatedField<uint> skillTemp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 改造技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillTemp {
      get { return skillTemp_; }
    }

    /// <summary>Field number for the "gradeScore" field.</summary>
    public const int GradeScoreFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_gradeScore_codec
        = pb::FieldCodec.ForUInt32(130);
    private readonly pbc::RepeatedField<uint> gradeScore_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 改造评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GradeScore {
      get { return gradeScore_; }
    }

    /// <summary>Field number for the "gradeScoreTemp" field.</summary>
    public const int GradeScoreTempFieldNumber = 17;
    private uint gradeScoreTemp_;
    /// <summary>
    /// 未保存的改造评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GradeScoreTemp {
      get { return gradeScoreTemp_; }
      set {
        gradeScoreTemp_ = value;
      }
    }

    /// <summary>Field number for the "eachBuildGrade" field.</summary>
    public const int EachBuildGradeFieldNumber = 18;
    private static readonly pb::FieldCodec<uint> _repeated_eachBuildGrade_codec
        = pb::FieldCodec.ForUInt32(146);
    private readonly pbc::RepeatedField<uint> eachBuildGrade_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每次改造新增的总档位数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EachBuildGrade {
      get { return eachBuildGrade_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 19;
    private uint index_;
    /// <summary>
    ///重置操作的是几改（从1开始，1改=1。正常改造（非重置）该值为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "vitGradeTempTotal" field.</summary>
    public const int VitGradeTempTotalFieldNumber = 20;
    private uint vitGradeTempTotal_;
    /// <summary>
    ///未保存的总改造档位(重置改造未保存会发送该值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGradeTempTotal {
      get { return vitGradeTempTotal_; }
      set {
        vitGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "snhGradeTempTotal" field.</summary>
    public const int SnhGradeTempTotalFieldNumber = 21;
    private uint snhGradeTempTotal_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGradeTempTotal {
      get { return snhGradeTempTotal_; }
      set {
        snhGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "intenGradeTempTotal" field.</summary>
    public const int IntenGradeTempTotalFieldNumber = 22;
    private uint intenGradeTempTotal_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGradeTempTotal {
      get { return intenGradeTempTotal_; }
      set {
        intenGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "speedGradeTempTotal" field.</summary>
    public const int SpeedGradeTempTotalFieldNumber = 23;
    private uint speedGradeTempTotal_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGradeTempTotal {
      get { return speedGradeTempTotal_; }
      set {
        speedGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "magicGradeTempTotal" field.</summary>
    public const int MagicGradeTempTotalFieldNumber = 24;
    private uint magicGradeTempTotal_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGradeTempTotal {
      get { return magicGradeTempTotal_; }
      set {
        magicGradeTempTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuildCount);
      }
      buildSkills_.WriteTo(output, _repeated_buildSkills_codec);
      if (VitGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MagicGrade);
      }
      if (BuildState != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BuildState);
      }
      if (VitGradeTemp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(VitGradeTemp);
      }
      if (SnhGradeTemp != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SnhGradeTemp);
      }
      if (IntenGradeTemp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(IntenGradeTemp);
      }
      if (SpeedGradeTemp != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SpeedGradeTemp);
      }
      if (MagicGradeTemp != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(MagicGradeTemp);
      }
      if (SkillPosition != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SkillPosition);
      }
      skillTemp_.WriteTo(output, _repeated_skillTemp_codec);
      gradeScore_.WriteTo(output, _repeated_gradeScore_codec);
      if (GradeScoreTemp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(GradeScoreTemp);
      }
      eachBuildGrade_.WriteTo(output, _repeated_eachBuildGrade_codec);
      if (Index != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Index);
      }
      if (VitGradeTempTotal != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(VitGradeTempTotal);
      }
      if (SnhGradeTempTotal != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SnhGradeTempTotal);
      }
      if (IntenGradeTempTotal != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(IntenGradeTempTotal);
      }
      if (SpeedGradeTempTotal != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(SpeedGradeTempTotal);
      }
      if (MagicGradeTempTotal != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MagicGradeTempTotal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildCount);
      }
      size += buildSkills_.CalculateSize(_repeated_buildSkills_codec);
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      if (BuildState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildState);
      }
      if (VitGradeTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGradeTemp);
      }
      if (SnhGradeTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGradeTemp);
      }
      if (IntenGradeTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGradeTemp);
      }
      if (SpeedGradeTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGradeTemp);
      }
      if (MagicGradeTemp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGradeTemp);
      }
      if (SkillPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillPosition);
      }
      size += skillTemp_.CalculateSize(_repeated_skillTemp_codec);
      size += gradeScore_.CalculateSize(_repeated_gradeScore_codec);
      if (GradeScoreTemp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GradeScoreTemp);
      }
      size += eachBuildGrade_.CalculateSize(_repeated_eachBuildGrade_codec);
      if (Index != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (VitGradeTempTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VitGradeTempTotal);
      }
      if (SnhGradeTempTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SnhGradeTempTotal);
      }
      if (IntenGradeTempTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IntenGradeTempTotal);
      }
      if (SpeedGradeTempTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGradeTempTotal);
      }
      if (MagicGradeTempTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagicGradeTempTotal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuildCount = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            buildSkills_.AddEntriesFrom(input, _repeated_buildSkills_codec);
            break;
          }
          case 24: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 56: {
            MagicGrade = input.ReadUInt32();
            break;
          }
          case 64: {
            BuildState = input.ReadUInt32();
            break;
          }
          case 72: {
            VitGradeTemp = input.ReadUInt32();
            break;
          }
          case 80: {
            SnhGradeTemp = input.ReadUInt32();
            break;
          }
          case 88: {
            IntenGradeTemp = input.ReadUInt32();
            break;
          }
          case 96: {
            SpeedGradeTemp = input.ReadUInt32();
            break;
          }
          case 104: {
            MagicGradeTemp = input.ReadUInt32();
            break;
          }
          case 112: {
            SkillPosition = input.ReadUInt32();
            break;
          }
          case 122:
          case 120: {
            skillTemp_.AddEntriesFrom(input, _repeated_skillTemp_codec);
            break;
          }
          case 130:
          case 128: {
            gradeScore_.AddEntriesFrom(input, _repeated_gradeScore_codec);
            break;
          }
          case 136: {
            GradeScoreTemp = input.ReadUInt32();
            break;
          }
          case 146:
          case 144: {
            eachBuildGrade_.AddEntriesFrom(input, _repeated_eachBuildGrade_codec);
            break;
          }
          case 152: {
            Index = input.ReadUInt32();
            break;
          }
          case 160: {
            VitGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 168: {
            SnhGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 176: {
            IntenGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 184: {
            SpeedGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 192: {
            MagicGradeTempTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///强化相关
  /// </summary>
  public sealed class EnhanceUnit : pb::IMessage {
    private static readonly pb::MessageParser<EnhanceUnit> _parser = new pb::MessageParser<EnhanceUnit>(() => new EnhanceUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnhanceUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "freeEnhancePoint" field.</summary>
    public const int FreeEnhancePointFieldNumber = 1;
    private uint freeEnhancePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeEnhancePoint {
      get { return freeEnhancePoint_; }
      set {
        freeEnhancePoint_ = value;
      }
    }

    /// <summary>Field number for the "enhancelvl" field.</summary>
    public const int EnhancelvlFieldNumber = 2;
    private uint enhancelvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhancelvl {
      get { return enhancelvl_; }
      set {
        enhancelvl_ = value;
      }
    }

    /// <summary>Field number for the "enhanceexp" field.</summary>
    public const int EnhanceexpFieldNumber = 3;
    private uint enhanceexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhanceexp {
      get { return enhanceexp_; }
      set {
        enhanceexp_ = value;
      }
    }

    /// <summary>Field number for the "allocPointId" field.</summary>
    public const int AllocPointIdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_allocPointId_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> allocPointId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///抵抗强化分配属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AllocPointId {
      get { return allocPointId_; }
    }

    /// <summary>Field number for the "allocPointValue" field.</summary>
    public const int AllocPointValueFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_allocPointValue_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> allocPointValue_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///抵抗强化分配属性值 数组长度一定等于 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AllocPointValue {
      get { return allocPointValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeEnhancePoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FreeEnhancePoint);
      }
      if (Enhancelvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Enhanceexp);
      }
      allocPointId_.WriteTo(output, _repeated_allocPointId_codec);
      allocPointValue_.WriteTo(output, _repeated_allocPointValue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeEnhancePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeEnhancePoint);
      }
      if (Enhancelvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhanceexp);
      }
      size += allocPointId_.CalculateSize(_repeated_allocPointId_codec);
      size += allocPointValue_.CalculateSize(_repeated_allocPointValue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeEnhancePoint = input.ReadUInt32();
            break;
          }
          case 16: {
            Enhancelvl = input.ReadUInt32();
            break;
          }
          case 24: {
            Enhanceexp = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            allocPointId_.AddEntriesFrom(input, _repeated_allocPointId_codec);
            break;
          }
          case 42:
          case 40: {
            allocPointValue_.AddEntriesFrom(input, _repeated_allocPointValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EnhancePlanInfo : pb::IMessage {
    private static readonly pb::MessageParser<EnhancePlanInfo> _parser = new pb::MessageParser<EnhancePlanInfo>(() => new EnhancePlanInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnhancePlanInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "usePoint" field.</summary>
    public const int UsePointFieldNumber = 1;
    private uint usePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePoint {
      get { return usePoint_; }
      set {
        usePoint_ = value;
      }
    }

    /// <summary>Field number for the "allocPointId" field.</summary>
    public const int AllocPointIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_allocPointId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> allocPointId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///抵抗强化分配属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AllocPointId {
      get { return allocPointId_; }
    }

    /// <summary>Field number for the "allocPointValue" field.</summary>
    public const int AllocPointValueFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_allocPointValue_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> allocPointValue_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///抵抗强化分配属性值 数组长度一定等于 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AllocPointValue {
      get { return allocPointValue_; }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 4;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsePoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UsePoint);
      }
      allocPointId_.WriteTo(output, _repeated_allocPointId_codec);
      allocPointValue_.WriteTo(output, _repeated_allocPointValue_codec);
      if (PlanName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsePoint);
      }
      size += allocPointId_.CalculateSize(_repeated_allocPointId_codec);
      size += allocPointValue_.CalculateSize(_repeated_allocPointValue_codec);
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UsePoint = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            allocPointId_.AddEntriesFrom(input, _repeated_allocPointId_codec);
            break;
          }
          case 26:
          case 24: {
            allocPointValue_.AddEntriesFrom(input, _repeated_allocPointValue_codec);
            break;
          }
          case 34: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class EnhancePlansData : pb::IMessage {
    private static readonly pb::MessageParser<EnhancePlansData> _parser = new pb::MessageParser<EnhancePlansData>(() => new EnhancePlansData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnhancePlansData> Parser { get { return _parser; } }

    /// <summary>Field number for the "enhancelvl" field.</summary>
    public const int EnhancelvlFieldNumber = 1;
    private uint enhancelvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhancelvl {
      get { return enhancelvl_; }
      set {
        enhancelvl_ = value;
      }
    }

    /// <summary>Field number for the "enhanceexp" field.</summary>
    public const int EnhanceexpFieldNumber = 2;
    private uint enhanceexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhanceexp {
      get { return enhanceexp_; }
      set {
        enhanceexp_ = value;
      }
    }

    /// <summary>Field number for the "totalPoint" field.</summary>
    public const int TotalPointFieldNumber = 3;
    private uint totalPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPoint {
      get { return totalPoint_; }
      set {
        totalPoint_ = value;
      }
    }

    /// <summary>Field number for the "currentPlanIndex" field.</summary>
    public const int CurrentPlanIndexFieldNumber = 4;
    private uint currentPlanIndex_;
    /// <summary>
    ///当前使用方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentPlanIndex {
      get { return currentPlanIndex_; }
      set {
        currentPlanIndex_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.EnhancePlanInfo> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.EnhancePlanInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.EnhancePlanInfo> plans_ = new pbc::RepeatedField<global::Packet.EnhancePlanInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.EnhancePlanInfo> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enhancelvl != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Enhanceexp);
      }
      if (TotalPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalPoint);
      }
      if (CurrentPlanIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentPlanIndex);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enhancelvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhanceexp);
      }
      if (TotalPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPoint);
      }
      if (CurrentPlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPlanIndex);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enhancelvl = input.ReadUInt32();
            break;
          }
          case 16: {
            Enhanceexp = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalPoint = input.ReadUInt32();
            break;
          }
          case 32: {
            CurrentPlanIndex = input.ReadUInt32();
            break;
          }
          case 42: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RidingSkillCost : pb::IMessage {
    private static readonly pb::MessageParser<RidingSkillCost> _parser = new pb::MessageParser<RidingSkillCost>(() => new RidingSkillCost());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RidingSkillCost> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillCostInfo" field.</summary>
    public const int SkillCostInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RidingSkillCost.Types.SkillCost> _repeated_skillCostInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RidingSkillCost.Types.SkillCost.Parser);
    private readonly pbc::RepeatedField<global::Packet.RidingSkillCost.Types.SkillCost> skillCostInfo_ = new pbc::RepeatedField<global::Packet.RidingSkillCost.Types.SkillCost>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RidingSkillCost.Types.SkillCost> SkillCostInfo {
      get { return skillCostInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillCostInfo_.WriteTo(output, _repeated_skillCostInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillCostInfo_.CalculateSize(_repeated_skillCostInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillCostInfo_.AddEntriesFrom(input, _repeated_skillCostInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RidingSkillCost message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class SkillCost : pb::IMessage {
        private static readonly pb::MessageParser<SkillCost> _parser = new pb::MessageParser<SkillCost>(() => new SkillCost());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SkillCost> Parser { get { return _parser; } }

        /// <summary>Field number for the "skillId" field.</summary>
        public const int SkillIdFieldNumber = 1;
        private uint skillId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SkillId {
          get { return skillId_; }
          set {
            skillId_ = value;
          }
        }

        /// <summary>Field number for the "totalEnergy" field.</summary>
        public const int TotalEnergyFieldNumber = 2;
        private uint totalEnergy_;
        /// <summary>
        ///累计消耗能量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalEnergy {
          get { return totalEnergy_; }
          set {
            totalEnergy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SkillId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SkillId);
          }
          if (TotalEnergy != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(TotalEnergy);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SkillId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
          }
          if (TotalEnergy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalEnergy);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SkillId = input.ReadUInt32();
                break;
              }
              case 16: {
                TotalEnergy = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class BaseGrade : pb::IMessage {
    private static readonly pb::MessageParser<BaseGrade> _parser = new pb::MessageParser<BaseGrade>(() => new BaseGrade());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseGrade> Parser { get { return _parser; } }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 1;
    private uint vitGrade_;
    /// <summary>
    ///初始档位 是否满档客户端自己算吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 2;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 3;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 4;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 5;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    /// <summary>Field number for the "lostGrade" field.</summary>
    public const int LostGradeFieldNumber = 6;
    private uint lostGrade_;
    /// <summary>
    ///掉档数 服务器用的· 客户端不想自己算也可以用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LostGrade {
      get { return lostGrade_; }
      set {
        lostGrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VitGrade != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MagicGrade);
      }
      if (LostGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LostGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      if (LostGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LostGrade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 16: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 24: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            MagicGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            LostGrade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物装备相关
  /// </summary>
  public sealed class PetEquipUnit : pb::IMessage {
    private static readonly pb::MessageParser<PetEquipUnit> _parser = new pb::MessageParser<PetEquipUnit>(() => new PetEquipUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetEquipUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> item_ = new pbc::RepeatedField<global::Packet.Item>();
    /// <summary>
    ///宠物元核(宠物装备)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PetSoulUnit : pb::IMessage {
    private static readonly pb::MessageParser<PetSoulUnit> _parser = new pb::MessageParser<PetSoulUnit>(() => new PetSoulUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetSoulUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "isActive" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "remakeCount" field.</summary>
    public const int RemakeCountFieldNumber = 3;
    private uint remakeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemakeCount {
      get { return remakeCount_; }
      set {
        remakeCount_ = value;
      }
    }

    /// <summary>Field number for the "soulBeads" field.</summary>
    public const int SoulBeadsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_soulBeads_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> soulBeads_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///长度固定 目前为4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SoulBeads {
      get { return soulBeads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (RemakeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RemakeCount);
      }
      soulBeads_.WriteTo(output, _repeated_soulBeads_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (RemakeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemakeCount);
      }
      size += soulBeads_.CalculateSize(_repeated_soulBeads_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            RemakeCount = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            soulBeads_.AddEntriesFrom(input, _repeated_soulBeads_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PetFashionData : pb::IMessage {
    private static readonly pb::MessageParser<PetFashionData> _parser = new pb::MessageParser<PetFashionData>(() => new PetFashionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetFashionData> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "colorActive" field.</summary>
    public const int ColorActiveFieldNumber = 2;
    private uint colorActive_;
    /// <summary>
    ///激活的染色方案 低位->高位 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorActive {
      get { return colorActive_; }
      set {
        colorActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ColorActive != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ColorActive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ColorActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorActive);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ColorActive = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物数据 宠物模块华 每一条都是对象，如果协议中不为null就用协议中的数据赋值给客户端本地数据
  /// </summary>
  public sealed class PetUnit : pb::IMessage {
    private static readonly pb::MessageParser<PetUnit> _parser = new pb::MessageParser<PetUnit>(() => new PetUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "simpleInfo" field.</summary>
    public const int SimpleInfoFieldNumber = 2;
    private global::Packet.SimplePet simpleInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SimplePet SimpleInfo {
      get { return simpleInfo_; }
      set {
        simpleInfo_ = value;
      }
    }

    /// <summary>Field number for the "gradeInfo" field.</summary>
    public const int GradeInfoFieldNumber = 3;
    private global::Packet.BaseGrade gradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BaseGrade GradeInfo {
      get { return gradeInfo_; }
      set {
        gradeInfo_ = value;
      }
    }

    /// <summary>Field number for the "baseAttr" field.</summary>
    public const int BaseAttrFieldNumber = 4;
    private global::Packet.PetBaseAttr baseAttr_;
    /// <summary>
    ///一级属性(弃用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetBaseAttr BaseAttr {
      get { return baseAttr_; }
      set {
        baseAttr_ = value;
      }
    }

    /// <summary>Field number for the "pkAttr" field.</summary>
    public const int PkAttrFieldNumber = 5;
    private global::Packet.PetPkAttr pkAttr_;
    /// <summary>
    ///高级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetPkAttr PkAttr {
      get { return pkAttr_; }
      set {
        pkAttr_ = value;
      }
    }

    /// <summary>Field number for the "baseSkillInfo" field.</summary>
    public const int BaseSkillInfoFieldNumber = 6;
    private global::Packet.BaseSkill baseSkillInfo_;
    /// <summary>
    ///基础技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BaseSkill BaseSkillInfo {
      get { return baseSkillInfo_; }
      set {
        baseSkillInfo_ = value;
      }
    }

    /// <summary>Field number for the "buildInfo" field.</summary>
    public const int BuildInfoFieldNumber = 7;
    private global::Packet.BuildUnit buildInfo_;
    /// <summary>
    ///改造相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BuildUnit BuildInfo {
      get { return buildInfo_; }
      set {
        buildInfo_ = value;
      }
    }

    /// <summary>Field number for the "enhanceInfo" field.</summary>
    public const int EnhanceInfoFieldNumber = 8;
    private global::Packet.EnhanceUnit enhanceInfo_;
    /// <summary>
    ///强化相关(弃用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.EnhanceUnit EnhanceInfo {
      get { return enhanceInfo_; }
      set {
        enhanceInfo_ = value;
      }
    }

    /// <summary>Field number for the "skillCostInfo" field.</summary>
    public const int SkillCostInfoFieldNumber = 9;
    private global::Packet.RidingSkillCost skillCostInfo_;
    /// <summary>
    ///技能消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RidingSkillCost SkillCostInfo {
      get { return skillCostInfo_; }
      set {
        skillCostInfo_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 10;
    private ulong roleId_;
    /// <summary>
    ///恢复道具用 埋得时候把玩家id埋进去，防止运营乱恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "petEquipInfo" field.</summary>
    public const int PetEquipInfoFieldNumber = 11;
    private global::Packet.PetEquipUnit petEquipInfo_;
    /// <summary>
    ///宠物元核(宠物装备)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetEquipUnit PetEquipInfo {
      get { return petEquipInfo_; }
      set {
        petEquipInfo_ = value;
      }
    }

    /// <summary>Field number for the "petPointPlanData" field.</summary>
    public const int PetPointPlanDataFieldNumber = 12;
    private global::Packet.PetPointPlansData petPointPlanData_;
    /// <summary>
    ///新一级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetPointPlansData PetPointPlanData {
      get { return petPointPlanData_; }
      set {
        petPointPlanData_ = value;
      }
    }

    /// <summary>Field number for the "enhancePlansData" field.</summary>
    public const int EnhancePlansDataFieldNumber = 13;
    private global::Packet.EnhancePlansData enhancePlansData_;
    /// <summary>
    ///新 强化相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.EnhancePlansData EnhancePlansData {
      get { return enhancePlansData_; }
      set {
        enhancePlansData_ = value;
      }
    }

    /// <summary>Field number for the "petSoulUnit" field.</summary>
    public const int PetSoulUnitFieldNumber = 14;
    private global::Packet.PetSoulUnit petSoulUnit_;
    /// <summary>
    ///魔魂信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetSoulUnit PetSoulUnit {
      get { return petSoulUnit_; }
      set {
        petSoulUnit_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 15;
    private bool islocked_;
    /// <summary>
    ///是否加锁了，加锁有些系统不能消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleInfo);
      }
      if (gradeInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GradeInfo);
      }
      if (baseAttr_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BaseAttr);
      }
      if (pkAttr_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PkAttr);
      }
      if (baseSkillInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BaseSkillInfo);
      }
      if (buildInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BuildInfo);
      }
      if (enhanceInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EnhanceInfo);
      }
      if (skillCostInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SkillCostInfo);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RoleId);
      }
      if (petEquipInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PetEquipInfo);
      }
      if (petPointPlanData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PetPointPlanData);
      }
      if (enhancePlansData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EnhancePlansData);
      }
      if (petSoulUnit_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PetSoulUnit);
      }
      if (Islocked != false) {
        output.WriteRawTag(120);
        output.WriteBool(Islocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (simpleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleInfo);
      }
      if (gradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradeInfo);
      }
      if (baseAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAttr);
      }
      if (pkAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PkAttr);
      }
      if (baseSkillInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseSkillInfo);
      }
      if (buildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildInfo);
      }
      if (enhanceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnhanceInfo);
      }
      if (skillCostInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkillCostInfo);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (petEquipInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetEquipInfo);
      }
      if (petPointPlanData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetPointPlanData);
      }
      if (enhancePlansData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnhancePlansData);
      }
      if (petSoulUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetSoulUnit);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (simpleInfo_ == null) {
              simpleInfo_ = new global::Packet.SimplePet();
            }
            input.ReadMessage(simpleInfo_);
            break;
          }
          case 26: {
            if (gradeInfo_ == null) {
              gradeInfo_ = new global::Packet.BaseGrade();
            }
            input.ReadMessage(gradeInfo_);
            break;
          }
          case 34: {
            if (baseAttr_ == null) {
              baseAttr_ = new global::Packet.PetBaseAttr();
            }
            input.ReadMessage(baseAttr_);
            break;
          }
          case 42: {
            if (pkAttr_ == null) {
              pkAttr_ = new global::Packet.PetPkAttr();
            }
            input.ReadMessage(pkAttr_);
            break;
          }
          case 50: {
            if (baseSkillInfo_ == null) {
              baseSkillInfo_ = new global::Packet.BaseSkill();
            }
            input.ReadMessage(baseSkillInfo_);
            break;
          }
          case 58: {
            if (buildInfo_ == null) {
              buildInfo_ = new global::Packet.BuildUnit();
            }
            input.ReadMessage(buildInfo_);
            break;
          }
          case 66: {
            if (enhanceInfo_ == null) {
              enhanceInfo_ = new global::Packet.EnhanceUnit();
            }
            input.ReadMessage(enhanceInfo_);
            break;
          }
          case 74: {
            if (skillCostInfo_ == null) {
              skillCostInfo_ = new global::Packet.RidingSkillCost();
            }
            input.ReadMessage(skillCostInfo_);
            break;
          }
          case 80: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 90: {
            if (petEquipInfo_ == null) {
              petEquipInfo_ = new global::Packet.PetEquipUnit();
            }
            input.ReadMessage(petEquipInfo_);
            break;
          }
          case 98: {
            if (petPointPlanData_ == null) {
              petPointPlanData_ = new global::Packet.PetPointPlansData();
            }
            input.ReadMessage(petPointPlanData_);
            break;
          }
          case 106: {
            if (enhancePlansData_ == null) {
              enhancePlansData_ = new global::Packet.EnhancePlansData();
            }
            input.ReadMessage(enhancePlansData_);
            break;
          }
          case 114: {
            if (petSoulUnit_ == null) {
              petSoulUnit_ = new global::Packet.PetSoulUnit();
            }
            input.ReadMessage(petSoulUnit_);
            break;
          }
          case 120: {
            Islocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///初始选宠请求
  /// </summary>
  public sealed class CmdPetInitSelectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetInitSelectReq> _parser = new pb::MessageParser<CmdPetInitSelectReq>(() => new CmdPetInitSelectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetInitSelectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSysInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSysInfoNtf> _parser = new pb::MessageParser<CmdPetSysInfoNtf>(() => new CmdPetSysInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSysInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bagNum" field.</summary>
    public const int BagNumFieldNumber = 1;
    private uint bagNum_;
    /// <summary>
    ///已经开的免费格子数，这个是由玩家等级决定的，服务器发过来吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BagNum {
      get { return bagNum_; }
      set {
        bagNum_ = value;
      }
    }

    /// <summary>Field number for the "costbagNum" field.</summary>
    public const int CostbagNumFieldNumber = 2;
    private uint costbagNum_;
    /// <summary>
    ///解锁得格子数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostbagNum {
      get { return costbagNum_; }
      set {
        costbagNum_ = value;
      }
    }

    /// <summary>Field number for the "currPetUid" field.</summary>
    public const int CurrPetUidFieldNumber = 3;
    private uint currPetUid_;
    /// <summary>
    ///当前出战宠物uid 0表示当前没有出战宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrPetUid {
      get { return currPetUid_; }
      set {
        currPetUid_ = value;
      }
    }

    /// <summary>Field number for the "hasGetInitPet" field.</summary>
    public const int HasGetInitPetFieldNumber = 5;
    private bool hasGetInitPet_;
    /// <summary>
    ///是否已经领取初始宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetInitPet {
      get { return hasGetInitPet_; }
      set {
        hasGetInitPet_ = value;
      }
    }

    /// <summary>Field number for the "bagList" field.</summary>
    public const int BagListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.PetUnit> _repeated_bagList_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.PetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetUnit> bagList_ = new pbc::RepeatedField<global::Packet.PetUnit>();
    /// <summary>
    ///背包宠物列表、就是宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetUnit> BagList {
      get { return bagList_; }
    }

    /// <summary>Field number for the "tempBagList" field.</summary>
    public const int TempBagListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.PetUnit> _repeated_tempBagList_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.PetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetUnit> tempBagList_ = new pbc::RepeatedField<global::Packet.PetUnit>();
    /// <summary>
    ///临时背包列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetUnit> TempBagList {
      get { return tempBagList_; }
    }

    /// <summary>Field number for the "currPetMaxHp" field.</summary>
    public const int CurrPetMaxHpFieldNumber = 8;
    private long currPetMaxHp_;
    /// <summary>
    ///出战宠物最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrPetMaxHp {
      get { return currPetMaxHp_; }
      set {
        currPetMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "currPetHp" field.</summary>
    public const int CurrPetHpFieldNumber = 9;
    private long currPetHp_;
    /// <summary>
    ///出战宠物当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrPetHp {
      get { return currPetHp_; }
      set {
        currPetHp_ = value;
      }
    }

    /// <summary>Field number for the "currPetMaxMp" field.</summary>
    public const int CurrPetMaxMpFieldNumber = 10;
    private long currPetMaxMp_;
    /// <summary>
    ///出战宠物最大魔量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrPetMaxMp {
      get { return currPetMaxMp_; }
      set {
        currPetMaxMp_ = value;
      }
    }

    /// <summary>Field number for the "currPetMp" field.</summary>
    public const int CurrPetMpFieldNumber = 11;
    private long currPetMp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrPetMp {
      get { return currPetMp_; }
      set {
        currPetMp_ = value;
      }
    }

    /// <summary>Field number for the "curMountUid" field.</summary>
    public const int CurMountUidFieldNumber = 12;
    private uint curMountUid_;
    /// <summary>
    ///坐骑Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurMountUid {
      get { return curMountUid_; }
      set {
        curMountUid_ = value;
      }
    }

    /// <summary>Field number for the "curFollowPetUid" field.</summary>
    public const int CurFollowPetUidFieldNumber = 13;
    private uint curFollowPetUid_;
    /// <summary>
    ///跟随宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurFollowPetUid {
      get { return curFollowPetUid_; }
      set {
        curFollowPetUid_ = value;
      }
    }

    /// <summary>Field number for the "ridingEnergy" field.</summary>
    public const int RidingEnergyFieldNumber = 14;
    private uint ridingEnergy_;
    /// <summary>
    ///骑术能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RidingEnergy {
      get { return ridingEnergy_; }
      set {
        ridingEnergy_ = value;
      }
    }

    /// <summary>Field number for the "skillCostResetTick" field.</summary>
    public const int SkillCostResetTickFieldNumber = 15;
    private uint skillCostResetTick_;
    /// <summary>
    ///骑术技能消耗重置时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillCostResetTick {
      get { return skillCostResetTick_; }
      set {
        skillCostResetTick_ = value;
      }
    }

    /// <summary>Field number for the "uniquePetInfoIds" field.</summary>
    public const int UniquePetInfoIdsFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_uniquePetInfoIds_codec
        = pb::FieldCodec.ForUInt32(130);
    private readonly pbc::RepeatedField<uint> uniquePetInfoIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///唯一宠物InfoId 拥有该宠物才发,没有不发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UniquePetInfoIds {
      get { return uniquePetInfoIds_; }
    }

    /// <summary>Field number for the "fashions" field.</summary>
    public const int FashionsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Packet.PetFashionData> _repeated_fashions_codec
        = pb::FieldCodec.ForMessage(138, global::Packet.PetFashionData.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetFashionData> fashions_ = new pbc::RepeatedField<global::Packet.PetFashionData>();
    /// <summary>
    ///宠物时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetFashionData> Fashions {
      get { return fashions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BagNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BagNum);
      }
      if (CostbagNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CostbagNum);
      }
      if (CurrPetUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurrPetUid);
      }
      if (HasGetInitPet != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasGetInitPet);
      }
      bagList_.WriteTo(output, _repeated_bagList_codec);
      tempBagList_.WriteTo(output, _repeated_tempBagList_codec);
      if (CurrPetMaxHp != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CurrPetMaxHp);
      }
      if (CurrPetHp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CurrPetHp);
      }
      if (CurrPetMaxMp != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CurrPetMaxMp);
      }
      if (CurrPetMp != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(CurrPetMp);
      }
      if (CurMountUid != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CurMountUid);
      }
      if (CurFollowPetUid != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurFollowPetUid);
      }
      if (RidingEnergy != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RidingEnergy);
      }
      if (SkillCostResetTick != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SkillCostResetTick);
      }
      uniquePetInfoIds_.WriteTo(output, _repeated_uniquePetInfoIds_codec);
      fashions_.WriteTo(output, _repeated_fashions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BagNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagNum);
      }
      if (CostbagNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostbagNum);
      }
      if (CurrPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrPetUid);
      }
      if (HasGetInitPet != false) {
        size += 1 + 1;
      }
      size += bagList_.CalculateSize(_repeated_bagList_codec);
      size += tempBagList_.CalculateSize(_repeated_tempBagList_codec);
      if (CurrPetMaxHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrPetMaxHp);
      }
      if (CurrPetHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrPetHp);
      }
      if (CurrPetMaxMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrPetMaxMp);
      }
      if (CurrPetMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrPetMp);
      }
      if (CurMountUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurMountUid);
      }
      if (CurFollowPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurFollowPetUid);
      }
      if (RidingEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RidingEnergy);
      }
      if (SkillCostResetTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillCostResetTick);
      }
      size += uniquePetInfoIds_.CalculateSize(_repeated_uniquePetInfoIds_codec);
      size += fashions_.CalculateSize(_repeated_fashions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BagNum = input.ReadUInt32();
            break;
          }
          case 16: {
            CostbagNum = input.ReadUInt32();
            break;
          }
          case 24: {
            CurrPetUid = input.ReadUInt32();
            break;
          }
          case 40: {
            HasGetInitPet = input.ReadBool();
            break;
          }
          case 50: {
            bagList_.AddEntriesFrom(input, _repeated_bagList_codec);
            break;
          }
          case 58: {
            tempBagList_.AddEntriesFrom(input, _repeated_tempBagList_codec);
            break;
          }
          case 64: {
            CurrPetMaxHp = input.ReadInt64();
            break;
          }
          case 72: {
            CurrPetHp = input.ReadInt64();
            break;
          }
          case 80: {
            CurrPetMaxMp = input.ReadInt64();
            break;
          }
          case 88: {
            CurrPetMp = input.ReadInt64();
            break;
          }
          case 96: {
            CurMountUid = input.ReadUInt32();
            break;
          }
          case 104: {
            CurFollowPetUid = input.ReadUInt32();
            break;
          }
          case 112: {
            RidingEnergy = input.ReadUInt32();
            break;
          }
          case 120: {
            SkillCostResetTick = input.ReadUInt32();
            break;
          }
          case 130:
          case 128: {
            uniquePetInfoIds_.AddEntriesFrom(input, _repeated_uniquePetInfoIds_codec);
            break;
          }
          case 138: {
            fashions_.AddEntriesFrom(input, _repeated_fashions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetUniquePetAddNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetUniquePetAddNtf> _parser = new pb::MessageParser<CmdPetUniquePetAddNtf>(() => new CmdPetUniquePetAddNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetUniquePetAddNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "addInfoId" field.</summary>
    public const int AddInfoIdFieldNumber = 1;
    private uint addInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddInfoId {
      get { return addInfoId_; }
      set {
        addInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AddInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAutoBlinkInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAutoBlinkInfoReq> _parser = new pb::MessageParser<CmdPetAutoBlinkInfoReq>(() => new CmdPetAutoBlinkInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAutoBlinkInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetAutoBlinkInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAutoBlinkInfoRes> _parser = new pb::MessageParser<CmdPetAutoBlinkInfoRes>(() => new CmdPetAutoBlinkInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAutoBlinkInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///玩家可以设置顺序，拥有援助技能的宠物自动进列表、失去技能的自动消失 只有前5个起作用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uid {
      get { return uid_; }
    }

    /// <summary>Field number for the "useAutoBlink" field.</summary>
    public const int UseAutoBlinkFieldNumber = 2;
    private bool useAutoBlink_;
    /// <summary>
    ///是否使用援助
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAutoBlink {
      get { return useAutoBlink_; }
      set {
        useAutoBlink_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
      if (UseAutoBlink != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseAutoBlink);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      if (UseAutoBlink != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
          case 16: {
            UseAutoBlink = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得宠物通知
  /// </summary>
  public sealed class CmdPetAddPetNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAddPetNtf> _parser = new pb::MessageParser<CmdPetAddPetNtf>(() => new CmdPetAddPetNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAddPetNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 1;
    private global::Packet.PetUnit pet_;
    /// <summary>
    /// 宠物数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private uint reason_;
    /// <summary>
    /// 来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///1背包 2 临时背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pet);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reason);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pet_ == null) {
              pet_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(pet_);
            break;
          }
          case 16: {
            Reason = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetEnhanceExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetEnhanceExpNtf> _parser = new pb::MessageParser<CmdPetEnhanceExpNtf>(() => new CmdPetEnhanceExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetEnhanceExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "enhancelvl" field.</summary>
    public const int EnhancelvlFieldNumber = 2;
    private uint enhancelvl_;
    /// <summary>
    ///强化等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhancelvl {
      get { return enhancelvl_; }
      set {
        enhancelvl_ = value;
      }
    }

    /// <summary>Field number for the "enhanceexp" field.</summary>
    public const int EnhanceexpFieldNumber = 3;
    private uint enhanceexp_;
    /// <summary>
    ///强化exp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Enhanceexp {
      get { return enhanceexp_; }
      set {
        enhanceexp_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///如果是用经验兑换的 把宠物经验更新一下.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "totalPoint" field.</summary>
    public const int TotalPointFieldNumber = 5;
    private uint totalPoint_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPoint {
      get { return totalPoint_; }
      set {
        totalPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Enhancelvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Enhanceexp);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
      if (TotalPoint != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Enhancelvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhancelvl);
      }
      if (Enhanceexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Enhanceexp);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (TotalPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Enhancelvl = input.ReadUInt32();
            break;
          }
          case 24: {
            Enhanceexp = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物经验通知
  /// </summary>
  public sealed class CmdPetAddExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAddExpNtf> _parser = new pb::MessageParser<CmdPetAddExpNtf>(() => new CmdPetAddExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAddExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petExpInfo" field.</summary>
    public const int PetExpInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetAddExpNtf.Types.PetAddExpUnit> _repeated_petExpInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetAddExpNtf.Types.PetAddExpUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetAddExpNtf.Types.PetAddExpUnit> petExpInfo_ = new pbc::RepeatedField<global::Packet.CmdPetAddExpNtf.Types.PetAddExpUnit>();
    /// <summary>
    ///宠物经验信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetAddExpNtf.Types.PetAddExpUnit> PetExpInfo {
      get { return petExpInfo_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private uint reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petExpInfo_.WriteTo(output, _repeated_petExpInfo_codec);
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petExpInfo_.CalculateSize(_repeated_petExpInfo_codec);
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            petExpInfo_.AddEntriesFrom(input, _repeated_petExpInfo_codec);
            break;
          }
          case 16: {
            Reason = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetAddExpNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PetAddExpUnit : pb::IMessage {
        private static readonly pb::MessageParser<PetAddExpUnit> _parser = new pb::MessageParser<PetAddExpUnit>(() => new PetAddExpUnit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PetAddExpUnit> Parser { get { return _parser; } }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private uint uid_;
        /// <summary>
        ///宠物uid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Uid {
          get { return uid_; }
          set {
            uid_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private uint level_;
        /// <summary>
        ///当前等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "exp" field.</summary>
        public const int ExpFieldNumber = 3;
        private ulong exp_;
        /// <summary>
        ///本次升级后剩余的经验
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Exp {
          get { return exp_; }
          set {
            exp_ = value;
          }
        }

        /// <summary>Field number for the "addExp" field.</summary>
        public const int AddExpFieldNumber = 4;
        private ulong addExp_;
        /// <summary>
        ///本次操作增加的经验值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AddExp {
          get { return addExp_; }
          set {
            addExp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Uid);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          if (Exp != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Exp);
          }
          if (AddExp != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(AddExp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Exp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
          }
          if (AddExp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddExp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uid = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 24: {
                Exp = input.ReadUInt64();
                break;
              }
              case 32: {
                AddExp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///获取宠物栏宠物数据请求
  ///背包一下全请求吧 银行、临时背包一个个请求
  /// </summary>
  public sealed class CmdPetGetPetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetPetInfoReq> _parser = new pb::MessageParser<CmdPetGetPetInfoReq>(() => new CmdPetGetPetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetPetInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_petUid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> petUid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PetUid {
      get { return petUid_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///0 背包 1 临时背包 2宠物银行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "banklabel" field.</summary>
    public const int BanklabelFieldNumber = 3;
    private uint banklabel_;
    /// <summary>
    ///1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Banklabel {
      get { return banklabel_; }
      set {
        banklabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petUid_.WriteTo(output, _repeated_petUid_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Banklabel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Banklabel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petUid_.CalculateSize(_repeated_petUid_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Banklabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Banklabel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            petUid_.AddEntriesFrom(input, _repeated_petUid_codec);
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Banklabel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///很多培养协议都会返回这一条，用于更新宠物对应的属性对象
  ///请求宠物信息也会返回这一条
  ///里边的宠物对象的每一条属性都是对象，如果协议中不为null就用协议中的数据赋值给客户端本地数据
  /// </summary>
  public sealed class CmdPetPetInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetPetInfoNtf> _parser = new pb::MessageParser<CmdPetPetInfoNtf>(() => new CmdPetPetInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetPetInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetUnit> _repeated_petInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetUnit> petInfo_ = new pbc::RepeatedField<global::Packet.PetUnit>();
    /// <summary>
    ///宠物数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetUnit> PetInfo {
      get { return petInfo_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///0 背包 1 临时背包 2宠物银行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "banklabel" field.</summary>
    public const int BanklabelFieldNumber = 3;
    private uint banklabel_;
    /// <summary>
    ///1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Banklabel {
      get { return banklabel_; }
      set {
        banklabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petInfo_.WriteTo(output, _repeated_petInfo_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Banklabel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Banklabel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petInfo_.CalculateSize(_repeated_petInfo_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Banklabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Banklabel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            petInfo_.AddEntriesFrom(input, _repeated_petInfo_codec);
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Banklabel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改变宠物状态请求
  /// </summary>
  public sealed class CmdPetSetCurrentPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetCurrentPetReq> _parser = new pb::MessageParser<CmdPetSetCurrentPetReq>(() => new CmdPetSetCurrentPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetCurrentPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid 0 标识休息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSetCurrentPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetCurrentPetRes> _parser = new pb::MessageParser<CmdPetSetCurrentPetRes>(() => new CmdPetSetCurrentPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetCurrentPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentuid" field.</summary>
    public const int CurrentuidFieldNumber = 1;
    private uint currentuid_;
    /// <summary>
    ///当前出战宠物uid 0表示当前没有出战宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentuid {
      get { return currentuid_; }
      set {
        currentuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currentuid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Currentuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currentuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Currentuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改变宠物位置请求
  /// </summary>
  public sealed class CmdPetChangePositionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetChangePositionReq> _parser = new pb::MessageParser<CmdPetChangePositionReq>(() => new CmdPetChangePositionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetChangePositionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "newPosition" field.</summary>
    public const int NewPositionFieldNumber = 2;
    private uint newPosition_;
    /// <summary>
    ///宠物新位置 从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewPosition {
      get { return newPosition_; }
      set {
        newPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (NewPosition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (NewPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            NewPosition = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetChangePositionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetChangePositionRes> _parser = new pb::MessageParser<CmdPetChangePositionRes>(() => new CmdPetChangePositionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetChangePositionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "newPosition" field.</summary>
    public const int NewPositionFieldNumber = 2;
    private uint newPosition_;
    /// <summary>
    ///宠物新位置 从 0 开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewPosition {
      get { return newPosition_; }
      set {
        newPosition_ = value;
      }
    }

    /// <summary>Field number for the "oldPetUid" field.</summary>
    public const int OldPetUidFieldNumber = 3;
    private uint oldPetUid_;
    /// <summary>
    ///被顶掉位置的宠物uid 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldPetUid {
      get { return oldPetUid_; }
      set {
        oldPetUid_ = value;
      }
    }

    /// <summary>Field number for the "oldPetNewPosition" field.</summary>
    public const int OldPetNewPositionFieldNumber = 4;
    private uint oldPetNewPosition_;
    /// <summary>
    ///被顶掉位置的宠物新位置 从 0 开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldPetNewPosition {
      get { return oldPetNewPosition_; }
      set {
        oldPetNewPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (NewPosition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewPosition);
      }
      if (OldPetUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OldPetUid);
      }
      if (OldPetNewPosition != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OldPetNewPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (NewPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewPosition);
      }
      if (OldPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldPetUid);
      }
      if (OldPetNewPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldPetNewPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            NewPosition = input.ReadUInt32();
            break;
          }
          case 24: {
            OldPetUid = input.ReadUInt32();
            break;
          }
          case 32: {
            OldPetNewPosition = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物改名请求
  /// </summary>
  public sealed class CmdPetRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRenameReq> _parser = new pb::MessageParser<CmdPetRenameReq>(() => new CmdPetRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    /// <summary>
    ///新名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRenameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRenameRes> _parser = new pb::MessageParser<CmdPetRenameRes>(() => new CmdPetRenameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRenameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    /// <summary>
    ///新名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///放生宠物请求
  /// </summary>
  public sealed class CmdPetAbandonPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAbandonPetReq> _parser = new pb::MessageParser<CmdPetAbandonPetReq>(() => new CmdPetAbandonPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAbandonPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAbandonPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAbandonPetRes> _parser = new pb::MessageParser<CmdPetAbandonPetRes>(() => new CmdPetAbandonPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAbandonPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///1放生 2 兑换 3...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求分配自由属性点
  /// </summary>
  public sealed class CmdPetAllocPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointReq> _parser = new pb::MessageParser<CmdPetAllocPointReq>(() => new CmdPetAllocPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "vit" field.</summary>
    public const int VitFieldNumber = 2;
    private uint vit_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vit {
      get { return vit_; }
      set {
        vit_ = value;
      }
    }

    /// <summary>Field number for the "snh" field.</summary>
    public const int SnhFieldNumber = 3;
    private uint snh_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Snh {
      get { return snh_; }
      set {
        snh_ = value;
      }
    }

    /// <summary>Field number for the "inten" field.</summary>
    public const int IntenFieldNumber = 4;
    private uint inten_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Inten {
      get { return inten_; }
      set {
        inten_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private uint speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 6;
    private uint magic_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 7;
    private uint planIndex_;
    /// <summary>
    ///方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Vit != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Vit);
      }
      if (Snh != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Snh);
      }
      if (Inten != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Inten);
      }
      if (Speed != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Speed);
      }
      if (Magic != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Magic);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Vit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vit);
      }
      if (Snh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Snh);
      }
      if (Inten != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Inten);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (Magic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Magic);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Vit = input.ReadUInt32();
            break;
          }
          case 24: {
            Snh = input.ReadUInt32();
            break;
          }
          case 32: {
            Inten = input.ReadUInt32();
            break;
          }
          case 40: {
            Speed = input.ReadUInt32();
            break;
          }
          case 48: {
            Magic = input.ReadUInt32();
            break;
          }
          case 56: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回分配自由属性点
  /// </summary>
  public sealed class CmdPetAllocPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointRes> _parser = new pb::MessageParser<CmdPetAllocPointRes>(() => new CmdPetAllocPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求重置已分配属性点
  /// </summary>
  public sealed class CmdPetResetPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetResetPointReq> _parser = new pb::MessageParser<CmdPetResetPointReq>(() => new CmdPetResetPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetResetPointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    /// <summary>
    ///方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetResetPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetResetPointRes> _parser = new pb::MessageParser<CmdPetResetPointRes>(() => new CmdPetResetPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetResetPointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "resetPointCount" field.</summary>
    public const int ResetPointCountFieldNumber = 2;
    private uint resetPointCount_;
    /// <summary>
    ///属性重置次数(用于免费重置,0-免费, 1-消耗物品)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetPointCount {
      get { return resetPointCount_; }
      set {
        resetPointCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ResetPointCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResetPointCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ResetPointCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetPointCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ResetPointCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物洗练
  /// </summary>
  public sealed class CmdPetTrainingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTrainingReq> _parser = new pb::MessageParser<CmdPetTrainingReq>(() => new CmdPetTrainingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTrainingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetTrainingRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTrainingRes> _parser = new pb::MessageParser<CmdPetTrainingRes>(() => new CmdPetTrainingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTrainingRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求学习技能
  /// </summary>
  public sealed class CmdPetLearnSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLearnSkillReq> _parser = new pb::MessageParser<CmdPetLearnSkillReq>(() => new CmdPetLearnSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLearnSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///技能书id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLearnSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLearnSkillRes> _parser = new pb::MessageParser<CmdPetLearnSkillRes>(() => new CmdPetLearnSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLearnSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 2;
    private uint skillType_;
    /// <summary>
    ///类型 1技能列表 2改造技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求锁定技能
  /// </summary>
  public sealed class CmdPetLockSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLockSkillReq> _parser = new pb::MessageParser<CmdPetLockSkillReq>(() => new CmdPetLockSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLockSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "isLock" field.</summary>
    public const int IsLockFieldNumber = 3;
    private bool isLock_;
    /// <summary>
    ///false-取消锁定，true-锁定技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (IsLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLockSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLockSkillRes> _parser = new pb::MessageParser<CmdPetLockSkillRes>(() => new CmdPetLockSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLockSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "isLock" field.</summary>
    public const int IsLockFieldNumber = 3;
    private bool isLock_;
    /// <summary>
    ///false-取消锁定，true-锁定技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (IsLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求使用宠物培养道具
  /// </summary>
  public sealed class CmdPetGroomUseItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGroomUseItemReq> _parser = new pb::MessageParser<CmdPetGroomUseItemReq>(() => new CmdPetGroomUseItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGroomUseItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 3;
    private uint itemCount_;
    /// <summary>
    ///道具数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private uint type_;
    /// <summary>
    ///客户端把类型发过来吧 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemCount);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemCount = input.ReadUInt32();
            break;
          }
          case 32: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLoyaltyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLoyaltyNtf> _parser = new pb::MessageParser<CmdPetLoyaltyNtf>(() => new CmdPetLoyaltyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLoyaltyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "loyalty" field.</summary>
    public const int LoyaltyFieldNumber = 2;
    private uint loyalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Loyalty {
      get { return loyalty_; }
      set {
        loyalty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Loyalty != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Loyalty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Loyalty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Loyalty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Loyalty = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物融合
  /// </summary>
  public sealed class CmdPetFusionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFusionReq> _parser = new pb::MessageParser<CmdPetFusionReq>(() => new CmdPetFusionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFusionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid1" field.</summary>
    public const int Uid1FieldNumber = 1;
    private uint uid1_;
    /// <summary>
    ///第一只宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid1 {
      get { return uid1_; }
      set {
        uid1_ = value;
      }
    }

    /// <summary>Field number for the "uid2" field.</summary>
    public const int Uid2FieldNumber = 2;
    private uint uid2_;
    /// <summary>
    ///第二只宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid2 {
      get { return uid2_; }
      set {
        uid2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid1);
      }
      if (Uid2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid1);
      }
      if (Uid2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetFusionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFusionRes> _parser = new pb::MessageParser<CmdPetFusionRes>(() => new CmdPetFusionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFusionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "newPet" field.</summary>
    public const int NewPetFieldNumber = 1;
    private global::Packet.PetUnit newPet_;
    /// <summary>
    ///融合获得的新宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit NewPet {
      get { return newPet_; }
      set {
        newPet_ = value;
      }
    }

    /// <summary>Field number for the "uid1" field.</summary>
    public const int Uid1FieldNumber = 2;
    private uint uid1_;
    /// <summary>
    ///第一只宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid1 {
      get { return uid1_; }
      set {
        uid1_ = value;
      }
    }

    /// <summary>Field number for the "uid2" field.</summary>
    public const int Uid2FieldNumber = 3;
    private uint uid2_;
    /// <summary>
    ///第二只宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid2 {
      get { return uid2_; }
      set {
        uid2_ = value;
      }
    }

    /// <summary>Field number for the "saveUid" field.</summary>
    public const int SaveUidFieldNumber = 4;
    private uint saveUid_;
    /// <summary>
    ///融合继承的宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SaveUid {
      get { return saveUid_; }
      set {
        saveUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newPet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewPet);
      }
      if (Uid1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid1);
      }
      if (Uid2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid2);
      }
      if (SaveUid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SaveUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newPet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPet);
      }
      if (Uid1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid1);
      }
      if (Uid2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid2);
      }
      if (SaveUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newPet_ == null) {
              newPet_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(newPet_);
            break;
          }
          case 16: {
            Uid1 = input.ReadUInt32();
            break;
          }
          case 24: {
            Uid2 = input.ReadUInt32();
            break;
          }
          case 32: {
            SaveUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物改造
  /// </summary>
  public sealed class CmdPetRemakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeReq> _parser = new pb::MessageParser<CmdPetRemakeReq>(() => new CmdPetRemakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///书id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///重置操作的是几改（从1开始，1改=1。正常改造（非重置）该值为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取宠物图鉴数据请求
  /// </summary>
  public sealed class CmdPetGetHandbookReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetHandbookReq> _parser = new pb::MessageParser<CmdPetGetHandbookReq>(() => new CmdPetGetHandbookReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetHandbookReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetTriggerNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTriggerNtf> _parser = new pb::MessageParser<CmdPetTriggerNtf>(() => new CmdPetTriggerNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTriggerNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///配置里的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetGetHandbookRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetHandbookRes> _parser = new pb::MessageParser<CmdPetGetHandbookRes>(() => new CmdPetGetHandbookRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetHandbookRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "handbookInfo" field.</summary>
    public const int HandbookInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetGetHandbookRes.Types.HandbookData> _repeated_handbookInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetGetHandbookRes.Types.HandbookData.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HandbookData> handbookInfo_ = new pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HandbookData>();
    /// <summary>
    ///宠物图鉴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HandbookData> HandbookInfo {
      get { return handbookInfo_; }
    }

    /// <summary>Field number for the "hbServerInfo" field.</summary>
    public const int HbServerInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdPetGetHandbookRes.Types.HBSeverData> _repeated_hbServerInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdPetGetHandbookRes.Types.HBSeverData.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HBSeverData> hbServerInfo_ = new pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HBSeverData>();
    /// <summary>
    ///宠物图鉴全服信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetGetHandbookRes.Types.HBSeverData> HbServerInfo {
      get { return hbServerInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      handbookInfo_.WriteTo(output, _repeated_handbookInfo_codec);
      hbServerInfo_.WriteTo(output, _repeated_hbServerInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += handbookInfo_.CalculateSize(_repeated_handbookInfo_codec);
      size += hbServerInfo_.CalculateSize(_repeated_hbServerInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            handbookInfo_.AddEntriesFrom(input, _repeated_handbookInfo_codec);
            break;
          }
          case 18: {
            hbServerInfo_.AddEntriesFrom(input, _repeated_hbServerInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetGetHandbookRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class HandbookData : pb::IMessage {
        private static readonly pb::MessageParser<HandbookData> _parser = new pb::MessageParser<HandbookData>(() => new HandbookData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HandbookData> Parser { get { return _parser; } }

        /// <summary>Field number for the "petId" field.</summary>
        public const int PetIdFieldNumber = 1;
        private uint petId_;
        /// <summary>
        ///宠物petId
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetId {
          get { return petId_; }
          set {
            petId_ = value;
          }
        }

        /// <summary>Field number for the "loveExp" field.</summary>
        public const int LoveExpFieldNumber = 3;
        private uint loveExp_;
        /// <summary>
        ///好感度经验
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LoveExp {
          get { return loveExp_; }
          set {
            loveExp_ = value;
          }
        }

        /// <summary>Field number for the "loveLevel" field.</summary>
        public const int LoveLevelFieldNumber = 4;
        private uint loveLevel_;
        /// <summary>
        ///好感度等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LoveLevel {
          get { return loveLevel_; }
          set {
            loveLevel_ = value;
          }
        }

        /// <summary>Field number for the "loveBreak" field.</summary>
        public const int LoveBreakFieldNumber = 5;
        private uint loveBreak_;
        /// <summary>
        ///当前好感度突破次数 废弃
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LoveBreak {
          get { return loveBreak_; }
          set {
            loveBreak_ = value;
          }
        }

        /// <summary>Field number for the "storyId" field.</summary>
        public const int StoryIdFieldNumber = 6;
        private uint storyId_;
        /// <summary>
        ///已激活的背景故事 废弃
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StoryId {
          get { return storyId_; }
          set {
            storyId_ = value;
          }
        }

        /// <summary>Field number for the "storyIdIng" field.</summary>
        public const int StoryIdIngFieldNumber = 7;
        private uint storyIdIng_;
        /// <summary>
        ///正在激活中的背景故事 废弃
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StoryIdIng {
          get { return storyIdIng_; }
          set {
            storyIdIng_ = value;
          }
        }

        /// <summary>Field number for the "flag" field.</summary>
        public const int FlagFieldNumber = 8;
        private uint flag_;
        /// <summary>
        ///1:只激活图鉴 2:只是遇到 3:图鉴激活也遇到 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Flag {
          get { return flag_; }
          set {
            flag_ = value;
          }
        }

        /// <summary>Field number for the "clickStory" field.</summary>
        public const int ClickStoryFieldNumber = 9;
        private static readonly pb::FieldCodec<uint> _repeated_clickStory_codec
            = pb::FieldCodec.ForUInt32(74);
        private readonly pbc::RepeatedField<uint> clickStory_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///已经点过相应等级的背景故事
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ClickStory {
          get { return clickStory_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PetId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PetId);
          }
          if (LoveExp != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(LoveExp);
          }
          if (LoveLevel != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(LoveLevel);
          }
          if (LoveBreak != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(LoveBreak);
          }
          if (StoryId != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(StoryId);
          }
          if (StoryIdIng != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(StoryIdIng);
          }
          if (Flag != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Flag);
          }
          clickStory_.WriteTo(output, _repeated_clickStory_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
          }
          if (LoveExp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveExp);
          }
          if (LoveLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveLevel);
          }
          if (LoveBreak != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveBreak);
          }
          if (StoryId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoryId);
          }
          if (StoryIdIng != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoryIdIng);
          }
          if (Flag != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
          }
          size += clickStory_.CalculateSize(_repeated_clickStory_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PetId = input.ReadUInt32();
                break;
              }
              case 24: {
                LoveExp = input.ReadUInt32();
                break;
              }
              case 32: {
                LoveLevel = input.ReadUInt32();
                break;
              }
              case 40: {
                LoveBreak = input.ReadUInt32();
                break;
              }
              case 48: {
                StoryId = input.ReadUInt32();
                break;
              }
              case 56: {
                StoryIdIng = input.ReadUInt32();
                break;
              }
              case 64: {
                Flag = input.ReadUInt32();
                break;
              }
              case 74:
              case 72: {
                clickStory_.AddEntriesFrom(input, _repeated_clickStory_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class HBSeverData : pb::IMessage {
        private static readonly pb::MessageParser<HBSeverData> _parser = new pb::MessageParser<HBSeverData>(() => new HBSeverData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HBSeverData> Parser { get { return _parser; } }

        /// <summary>Field number for the "petId" field.</summary>
        public const int PetIdFieldNumber = 1;
        private uint petId_;
        /// <summary>
        ///宠物petId
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetId {
          get { return petId_; }
          set {
            petId_ = value;
          }
        }

        /// <summary>Field number for the "discovererName" field.</summary>
        public const int DiscovererNameFieldNumber = 2;
        private string discovererName_ = "";
        /// <summary>
        ///宠物图鉴发现者
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DiscovererName {
          get { return discovererName_; }
          set {
            discovererName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PetId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PetId);
          }
          if (DiscovererName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DiscovererName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
          }
          if (DiscovererName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscovererName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PetId = input.ReadUInt32();
                break;
              }
              case 18: {
                DiscovererName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///请求激活宠物
  /// </summary>
  public sealed class CmdPetActivateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActivateReq> _parser = new pb::MessageParser<CmdPetActivateReq>(() => new CmdPetActivateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActivateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetActivateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActivateRes> _parser = new pb::MessageParser<CmdPetActivateRes>(() => new CmdPetActivateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActivateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求提升宠物好感度
  /// </summary>
  public sealed class CmdPetLoveExpUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLoveExpUpReq> _parser = new pb::MessageParser<CmdPetLoveExpUpReq>(() => new CmdPetLoveExpUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLoveExpUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///使用道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "chipCount" field.</summary>
    public const int ChipCountFieldNumber = 3;
    private uint chipCount_;
    /// <summary>
    ///使用碎片升级次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChipCount {
      get { return chipCount_; }
      set {
        chipCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (ChipCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChipCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (ChipCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChipCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            ChipCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLoveExpUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLoveExpUpRes> _parser = new pb::MessageParser<CmdPetLoveExpUpRes>(() => new CmdPetLoveExpUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLoveExpUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "loveExp" field.</summary>
    public const int LoveExpFieldNumber = 2;
    private uint loveExp_;
    /// <summary>
    ///好感度经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoveExp {
      get { return loveExp_; }
      set {
        loveExp_ = value;
      }
    }

    /// <summary>Field number for the "loveLevel" field.</summary>
    public const int LoveLevelFieldNumber = 3;
    private uint loveLevel_;
    /// <summary>
    ///好感度等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoveLevel {
      get { return loveLevel_; }
      set {
        loveLevel_ = value;
      }
    }

    /// <summary>Field number for the "loveBreak" field.</summary>
    public const int LoveBreakFieldNumber = 4;
    private uint loveBreak_;
    /// <summary>
    ///当前好感度突破次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoveBreak {
      get { return loveBreak_; }
      set {
        loveBreak_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (LoveExp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LoveExp);
      }
      if (LoveLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LoveLevel);
      }
      if (LoveBreak != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LoveBreak);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (LoveExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveExp);
      }
      if (LoveLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveLevel);
      }
      if (LoveBreak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveBreak);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            LoveExp = input.ReadUInt32();
            break;
          }
          case 24: {
            LoveLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            LoveBreak = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宠物好感度经验一键升级请求
  /// </summary>
  public sealed class CmdPetLoveExpUpAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLoveExpUpAllReq> _parser = new pb::MessageParser<CmdPetLoveExpUpAllReq>(() => new CmdPetLoveExpUpAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLoveExpUpAllReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 宠物好感度经验一键升级返回
  /// </summary>
  public sealed class CmdPetLoveExpUpAllRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLoveExpUpAllRes> _parser = new pb::MessageParser<CmdPetLoveExpUpAllRes>(() => new CmdPetLoveExpUpAllRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLoveExpUpAllRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petList" field.</summary>
    public const int PetListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetLoveExpUpRes> _repeated_petList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetLoveExpUpRes.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetLoveExpUpRes> petList_ = new pbc::RepeatedField<global::Packet.CmdPetLoveExpUpRes>();
    /// <summary>
    /// 有改变的宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetLoveExpUpRes> PetList {
      get { return petList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petList_.WriteTo(output, _repeated_petList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petList_.CalculateSize(_repeated_petList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            petList_.AddEntriesFrom(input, _repeated_petList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求解封背景故事
  /// </summary>
  public sealed class CmdPetActivateStoryReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActivateStoryReq> _parser = new pb::MessageParser<CmdPetActivateStoryReq>(() => new CmdPetActivateStoryReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActivateStoryReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "loveId" field.</summary>
    public const int LoveIdFieldNumber = 2;
    private uint loveId_;
    /// <summary>
    ///好感度突破表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoveId {
      get { return loveId_; }
      set {
        loveId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (LoveId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LoveId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (LoveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            LoveId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetActivateStoryRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActivateStoryRes> _parser = new pb::MessageParser<CmdPetActivateStoryRes>(() => new CmdPetActivateStoryRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActivateStoryRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "storyId" field.</summary>
    public const int StoryIdFieldNumber = 2;
    private uint storyId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StoryId {
      get { return storyId_; }
      set {
        storyId_ = value;
      }
    }

    /// <summary>Field number for the "storyIdIng" field.</summary>
    public const int StoryIdIngFieldNumber = 3;
    private uint storyIdIng_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StoryIdIng {
      get { return storyIdIng_; }
      set {
        storyIdIng_ = value;
      }
    }

    /// <summary>Field number for the "loveId" field.</summary>
    public const int LoveIdFieldNumber = 4;
    private uint loveId_;
    /// <summary>
    ///好感度突破表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoveId {
      get { return loveId_; }
      set {
        loveId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (StoryId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StoryId);
      }
      if (StoryIdIng != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StoryIdIng);
      }
      if (LoveId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LoveId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (StoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoryId);
      }
      if (StoryIdIng != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoryIdIng);
      }
      if (LoveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoveId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            StoryId = input.ReadUInt32();
            break;
          }
          case 24: {
            StoryIdIng = input.ReadUInt32();
            break;
          }
          case 32: {
            LoveId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自动激活背景故事数据通知
  /// </summary>
  public sealed class CmdPetAutoActivateStoryNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAutoActivateStoryNtf> _parser = new pb::MessageParser<CmdPetAutoActivateStoryNtf>(() => new CmdPetAutoActivateStoryNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAutoActivateStoryNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "storyIdIng" field.</summary>
    public const int StoryIdIngFieldNumber = 2;
    private uint storyIdIng_;
    /// <summary>
    ///背景故事Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StoryIdIng {
      get { return storyIdIng_; }
      set {
        storyIdIng_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (StoryIdIng != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StoryIdIng);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (StoryIdIng != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StoryIdIng);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            StoryIdIng = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物图鉴发现者通知
  /// </summary>
  public sealed class CmdPetDiscovererNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDiscovererNtf> _parser = new pb::MessageParser<CmdPetDiscovererNtf>(() => new CmdPetDiscovererNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDiscovererNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "discovererName" field.</summary>
    public const int DiscovererNameFieldNumber = 2;
    private string discovererName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiscovererName {
      get { return discovererName_; }
      set {
        discovererName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (DiscovererName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiscovererName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (DiscovererName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscovererName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 18: {
            DiscovererName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求从宠物临时背包取出
  /// </summary>
  public sealed class CmdPetOutFromPetTempPackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetOutFromPetTempPackReq> _parser = new pb::MessageParser<CmdPetOutFromPetTempPackReq>(() => new CmdPetOutFromPetTempPackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetOutFromPetTempPackReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetOutFromPetTempPackRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetOutFromPetTempPackRes> _parser = new pb::MessageParser<CmdPetOutFromPetTempPackRes>(() => new CmdPetOutFromPetTempPackRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetOutFromPetTempPackRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pets" field.</summary>
    public const int PetsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_pets_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> pets_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///临时背包宠物信息 客户端接收这条消息把临时背包的转到背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pets {
      get { return pets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pets_.WriteTo(output, _repeated_pets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pets_.CalculateSize(_repeated_pets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            pets_.AddEntriesFrom(input, _repeated_pets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物临时背包
  /// </summary>
  public sealed class CmdPetTempPackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTempPackReq> _parser = new pb::MessageParser<CmdPetTempPackReq>(() => new CmdPetTempPackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTempPackReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///宠物临时背包更新通知
  /// </summary>
  public sealed class CmdPetTempPackNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTempPackNtf> _parser = new pb::MessageParser<CmdPetTempPackNtf>(() => new CmdPetTempPackNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTempPackNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "uids" field.</summary>
    public const int UidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///临时宠物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uids {
      get { return uids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _repeated_uids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uids_.CalculateSize(_repeated_uids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uids_.AddEntriesFrom(input, _repeated_uids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物银行信息
  /// </summary>
  public sealed class CmdPetGetBankInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetBankInfoReq> _parser = new pb::MessageParser<CmdPetGetBankInfoReq>(() => new CmdPetGetBankInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetBankInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "labelId" field.</summary>
    public const int LabelIdFieldNumber = 1;
    private uint labelId_;
    /// <summary>
    /// 银行标签页编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 2;
    private ulong npcUId_;
    /// <summary>
    /// 银行npc唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LabelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LabelId);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LabelId);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LabelId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetGetBankInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetBankInfoRes> _parser = new pb::MessageParser<CmdPetGetBankInfoRes>(() => new CmdPetGetBankInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetBankInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bankCount" field.</summary>
    public const int BankCountFieldNumber = 1;
    private uint bankCount_;
    /// <summary>
    ///宠物银行分页数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BankCount {
      get { return bankCount_; }
      set {
        bankCount_ = value;
      }
    }

    /// <summary>Field number for the "labelId" field.</summary>
    public const int LabelIdFieldNumber = 2;
    private uint labelId_;
    /// <summary>
    ///银行标签页编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PetUnit> _repeated_petInfo_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PetUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetUnit> petInfo_ = new pbc::RepeatedField<global::Packet.PetUnit>();
    /// <summary>
    ///宠物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetUnit> PetInfo {
      get { return petInfo_; }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_pos_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> pos_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///为了petunit整齐放这了 服务器保证跟3得size一样 一一对应
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pos {
      get { return pos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BankCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BankCount);
      }
      if (LabelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LabelId);
      }
      petInfo_.WriteTo(output, _repeated_petInfo_codec);
      pos_.WriteTo(output, _repeated_pos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BankCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BankCount);
      }
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LabelId);
      }
      size += petInfo_.CalculateSize(_repeated_petInfo_codec);
      size += pos_.CalculateSize(_repeated_pos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BankCount = input.ReadUInt32();
            break;
          }
          case 16: {
            LabelId = input.ReadUInt32();
            break;
          }
          case 26: {
            petInfo_.AddEntriesFrom(input, _repeated_petInfo_codec);
            break;
          }
          case 34:
          case 32: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物银行解锁
  /// </summary>
  public sealed class CmdPetBankUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBankUnlockReq> _parser = new pb::MessageParser<CmdPetBankUnlockReq>(() => new CmdPetBankUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBankUnlockReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetBankUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBankUnlockRes> _parser = new pb::MessageParser<CmdPetBankUnlockRes>(() => new CmdPetBankUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBankUnlockRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bankCount" field.</summary>
    public const int BankCountFieldNumber = 1;
    private uint bankCount_;
    /// <summary>
    ///更新宠物银行分页数量    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BankCount {
      get { return bankCount_; }
      set {
        bankCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BankCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BankCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BankCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BankCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BankCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物银行操作
  /// </summary>
  public sealed class CmdPetBankMoveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBankMoveReq> _parser = new pb::MessageParser<CmdPetBankMoveReq>(() => new CmdPetBankMoveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBankMoveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 1;
    private uint moveType_;
    /// <summary>
    ///操作类型 1.存入 2.取出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "labelId" field.</summary>
    public const int LabelIdFieldNumber = 2;
    private uint labelId_;
    /// <summary>
    ///银行标签页编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 3;
    private uint petUid_;
    /// <summary>
    ///被操作的宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 4;
    private ulong npcUId_;
    /// <summary>
    ///银行npc唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MoveType);
      }
      if (LabelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LabelId);
      }
      if (PetUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PetUid);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NpcUId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveType);
      }
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LabelId);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoveType = input.ReadUInt32();
            break;
          }
          case 16: {
            LabelId = input.ReadUInt32();
            break;
          }
          case 24: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcUId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetBankMoveRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBankMoveRes> _parser = new pb::MessageParser<CmdPetBankMoveRes>(() => new CmdPetBankMoveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBankMoveRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 1;
    private uint moveType_;
    /// <summary>
    ///操作类型 1.存入 2.取出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "labelId" field.</summary>
    public const int LabelIdFieldNumber = 2;
    private uint labelId_;
    /// <summary>
    ///银行标签页编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LabelId {
      get { return labelId_; }
      set {
        labelId_ = value;
      }
    }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 3;
    private global::Packet.PetUnit petInfo_;
    /// <summary>
    ///被操作的宠物信息 客户端有宠物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit PetInfo {
      get { return petInfo_; }
      set {
        petInfo_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MoveType);
      }
      if (LabelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LabelId);
      }
      if (petInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PetInfo);
      }
      if (Uid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveType);
      }
      if (LabelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LabelId);
      }
      if (petInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetInfo);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoveType = input.ReadUInt32();
            break;
          }
          case 16: {
            LabelId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (petInfo_ == null) {
              petInfo_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(petInfo_);
            break;
          }
          case 32: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetExchangeGoldPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangeGoldPetReq> _parser = new pb::MessageParser<CmdPetExchangeGoldPetReq>(() => new CmdPetExchangeGoldPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangeGoldPetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetExchangeGoldPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangeGoldPetRes> _parser = new pb::MessageParser<CmdPetExchangeGoldPetRes>(() => new CmdPetExchangeGoldPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangeGoldPetRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetReExchangeGoldPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetReExchangeGoldPetReq> _parser = new pb::MessageParser<CmdPetReExchangeGoldPetReq>(() => new CmdPetReExchangeGoldPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetReExchangeGoldPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    /// <summary>
    ///宠物的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetReExchangeGoldPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetReExchangeGoldPetRes> _parser = new pb::MessageParser<CmdPetReExchangeGoldPetRes>(() => new CmdPetReExchangeGoldPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetReExchangeGoldPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "goldPetExchangeNum" field.</summary>
    public const int GoldPetExchangeNumFieldNumber = 1;
    private uint goldPetExchangeNum_;
    /// <summary>
    ///金宠兑换已经重生次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoldPetExchangeNum {
      get { return goldPetExchangeNum_; }
      set {
        goldPetExchangeNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoldPetExchangeNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoldPetExchangeNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoldPetExchangeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldPetExchangeNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoldPetExchangeNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宠物回复同步
  /// </summary>
  public sealed class CmdPetRecoverNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRecoverNtf> _parser = new pb::MessageParser<CmdPetRecoverNtf>(() => new CmdPetRecoverNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRecoverNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petAttrInfo" field.</summary>
    public const int PetAttrInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetRecoverNtf.Types.PetRecorverAttr> _repeated_petAttrInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetRecoverNtf.Types.PetRecorverAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetRecoverNtf.Types.PetRecorverAttr> petAttrInfo_ = new pbc::RepeatedField<global::Packet.CmdPetRecoverNtf.Types.PetRecorverAttr>();
    /// <summary>
    /// 宠物回复属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetRecoverNtf.Types.PetRecorverAttr> PetAttrInfo {
      get { return petAttrInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petAttrInfo_.WriteTo(output, _repeated_petAttrInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petAttrInfo_.CalculateSize(_repeated_petAttrInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            petAttrInfo_.AddEntriesFrom(input, _repeated_petAttrInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetRecoverNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PetRecorverAttr : pb::IMessage {
        private static readonly pb::MessageParser<PetRecorverAttr> _parser = new pb::MessageParser<PetRecorverAttr>(() => new PetRecorverAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PetRecorverAttr> Parser { get { return _parser; } }

        /// <summary>Field number for the "uid" field.</summary>
        public const int UidFieldNumber = 1;
        private uint uid_;
        /// <summary>
        /// 宠物uid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Uid {
          get { return uid_; }
          set {
            uid_ = value;
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 2;
        private ulong hp_;
        /// <summary>
        /// 当前血量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "mp" field.</summary>
        public const int MpFieldNumber = 3;
        private ulong mp_;
        /// <summary>
        /// 当前蓝量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Mp {
          get { return mp_; }
          set {
            mp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Uid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Uid);
          }
          if (Hp != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Hp);
          }
          if (Mp != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Mp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Uid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
          }
          if (Hp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Hp);
          }
          if (Mp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Mp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Uid = input.ReadUInt32();
                break;
              }
              case 16: {
                Hp = input.ReadUInt64();
                break;
              }
              case 24: {
                Mp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdPetSetAutoPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetAutoPointReq> _parser = new pb::MessageParser<CmdPetSetAutoPointReq>(() => new CmdPetSetAutoPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetAutoPointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoselect" field.</summary>
    public const int AutoselectFieldNumber = 1;
    private uint autoselect_;
    /// <summary>
    ///0代表没选  5, 7, 9, 11, 13 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Autoselect {
      get { return autoselect_; }
      set {
        autoselect_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    ///是否启用自动加点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 4;
    private uint planIndex_;
    /// <summary>
    ///方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Autoselect != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Autoselect);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Autoselect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Autoselect);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Autoselect = input.ReadUInt32();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
          case 32: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSetAutoPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetAutoPointRes> _parser = new pb::MessageParser<CmdPetSetAutoPointRes>(() => new CmdPetSetAutoPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetAutoPointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoselect" field.</summary>
    public const int AutoselectFieldNumber = 1;
    private uint autoselect_;
    /// <summary>
    ///0代表没选  5, 7, 9, 11, 13 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Autoselect {
      get { return autoselect_; }
      set {
        autoselect_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 2;
    private bool enabled_;
    /// <summary>
    ///是否启用自动加点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 4;
    private uint planIndex_;
    /// <summary>
    ///方案索引(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Autoselect != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Autoselect);
      }
      if (Enabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enabled);
      }
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Autoselect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Autoselect);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Autoselect = input.ReadUInt32();
            break;
          }
          case 16: {
            Enabled = input.ReadBool();
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
          case 32: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllPlayerAllocInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllPlayerAllocInfoReq> _parser = new pb::MessageParser<CmdPetAllPlayerAllocInfoReq>(() => new CmdPetAllPlayerAllocInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllPlayerAllocInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllPlayerAllocInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllPlayerAllocInfoRes> _parser = new pb::MessageParser<CmdPetAllPlayerAllocInfoRes>(() => new CmdPetAllPlayerAllocInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllPlayerAllocInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "nums" field.</summary>
    public const int NumsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_nums_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> nums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///每个属性加点人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Nums {
      get { return nums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      nums_.WriteTo(output, _repeated_nums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      size += nums_.CalculateSize(_repeated_nums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            nums_.AddEntriesFrom(input, _repeated_nums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeRes> _parser = new pb::MessageParser<CmdPetRemakeRes>(() => new CmdPetRemakeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 2;
    private uint vitGrade_;
    /// <summary>
    ///未保存的改造新增档位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 3;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 4;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 5;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 6;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_skillList_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> skillList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 未保存的改造新增技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "gradeScore" field.</summary>
    public const int GradeScoreFieldNumber = 8;
    private uint gradeScore_;
    /// <summary>
    /// 改造评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GradeScore {
      get { return gradeScore_; }
      set {
        gradeScore_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 9;
    private uint index_;
    /// <summary>
    ///重置操作的是几改（从1开始，1改=1。正常改造（非重置）该值为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "vitGradeTempTotal" field.</summary>
    public const int VitGradeTempTotalFieldNumber = 10;
    private uint vitGradeTempTotal_;
    /// <summary>
    ///未保存的总改造档位(重置改造未保存会发送该值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGradeTempTotal {
      get { return vitGradeTempTotal_; }
      set {
        vitGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "snhGradeTempTotal" field.</summary>
    public const int SnhGradeTempTotalFieldNumber = 11;
    private uint snhGradeTempTotal_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGradeTempTotal {
      get { return snhGradeTempTotal_; }
      set {
        snhGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "intenGradeTempTotal" field.</summary>
    public const int IntenGradeTempTotalFieldNumber = 12;
    private uint intenGradeTempTotal_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGradeTempTotal {
      get { return intenGradeTempTotal_; }
      set {
        intenGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "speedGradeTempTotal" field.</summary>
    public const int SpeedGradeTempTotalFieldNumber = 13;
    private uint speedGradeTempTotal_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGradeTempTotal {
      get { return speedGradeTempTotal_; }
      set {
        speedGradeTempTotal_ = value;
      }
    }

    /// <summary>Field number for the "magicGradeTempTotal" field.</summary>
    public const int MagicGradeTempTotalFieldNumber = 14;
    private uint magicGradeTempTotal_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGradeTempTotal {
      get { return magicGradeTempTotal_; }
      set {
        magicGradeTempTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (VitGrade != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicGrade);
      }
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (GradeScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(GradeScore);
      }
      if (Index != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Index);
      }
      if (VitGradeTempTotal != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(VitGradeTempTotal);
      }
      if (SnhGradeTempTotal != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SnhGradeTempTotal);
      }
      if (IntenGradeTempTotal != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IntenGradeTempTotal);
      }
      if (SpeedGradeTempTotal != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SpeedGradeTempTotal);
      }
      if (MagicGradeTempTotal != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MagicGradeTempTotal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (GradeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GradeScore);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (VitGradeTempTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGradeTempTotal);
      }
      if (SnhGradeTempTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGradeTempTotal);
      }
      if (IntenGradeTempTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGradeTempTotal);
      }
      if (SpeedGradeTempTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGradeTempTotal);
      }
      if (MagicGradeTempTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGradeTempTotal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicGrade = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 64: {
            GradeScore = input.ReadUInt32();
            break;
          }
          case 72: {
            Index = input.ReadUInt32();
            break;
          }
          case 80: {
            VitGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 88: {
            SnhGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 96: {
            IntenGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 104: {
            SpeedGradeTempTotal = input.ReadUInt32();
            break;
          }
          case 112: {
            MagicGradeTempTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置改造(废弃)
  /// </summary>
  public sealed class CmdPetRemakeResetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeResetReq> _parser = new pb::MessageParser<CmdPetRemakeResetReq>(() => new CmdPetRemakeResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置改造(废弃)
  /// </summary>
  public sealed class CmdPetRemakeResetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeResetRes> _parser = new pb::MessageParser<CmdPetRemakeResetRes>(() => new CmdPetRemakeResetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeResetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSkillLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSkillLevelUpReq> _parser = new pb::MessageParser<CmdPetSkillLevelUpReq>(() => new CmdPetSkillLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSkillLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSkillLevelUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSkillLevelUpRes> _parser = new pb::MessageParser<CmdPetSkillLevelUpRes>(() => new CmdPetSkillLevelUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSkillLevelUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "oskillId" field.</summary>
    public const int OskillIdFieldNumber = 2;
    private uint oskillId_;
    /// <summary>
    ///老的技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OskillId {
      get { return oskillId_; }
      set {
        oskillId_ = value;
      }
    }

    /// <summary>Field number for the "nskillId" field.</summary>
    public const int NskillIdFieldNumber = 3;
    private uint nskillId_;
    /// <summary>
    ///新的技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NskillId {
      get { return nskillId_; }
      set {
        nskillId_ = value;
      }
    }

    /// <summary>Field number for the "skillExp" field.</summary>
    public const int SkillExpFieldNumber = 4;
    private uint skillExp_;
    /// <summary>
    ///技能经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillExp {
      get { return skillExp_; }
      set {
        skillExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (OskillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OskillId);
      }
      if (NskillId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NskillId);
      }
      if (SkillExp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (OskillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OskillId);
      }
      if (NskillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NskillId);
      }
      if (SkillExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            OskillId = input.ReadUInt32();
            break;
          }
          case 24: {
            NskillId = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillExp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSkillAddExpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSkillAddExpReq> _parser = new pb::MessageParser<CmdPetSkillAddExpReq>(() => new CmdPetSkillAddExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSkillAddExpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemUid" field.</summary>
    public const int ItemUidFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_itemUid_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> itemUid_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///道具的uid 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ItemUid {
      get { return itemUid_; }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemNum_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemNum_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///数量 快速添加可能一堆不全过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNum {
      get { return itemNum_; }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 4;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "useSilverNum" field.</summary>
    public const int UseSilverNumFieldNumber = 5;
    private uint useSilverNum_;
    /// <summary>
    ///银币得数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSilverNum {
      get { return useSilverNum_; }
      set {
        useSilverNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemUid_.WriteTo(output, _repeated_itemUid_codec);
      itemNum_.WriteTo(output, _repeated_itemNum_codec);
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillId);
      }
      if (UseSilverNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UseSilverNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemUid_.CalculateSize(_repeated_itemUid_codec);
      size += itemNum_.CalculateSize(_repeated_itemNum_codec);
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (UseSilverNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSilverNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemUid_.AddEntriesFrom(input, _repeated_itemUid_codec);
            break;
          }
          case 18:
          case 16: {
            itemNum_.AddEntriesFrom(input, _repeated_itemNum_codec);
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 40: {
            UseSilverNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSkillAddExpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSkillAddExpRes> _parser = new pb::MessageParser<CmdPetSkillAddExpRes>(() => new CmdPetSkillAddExpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSkillAddExpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skillExp" field.</summary>
    public const int SkillExpFieldNumber = 3;
    private uint skillExp_;
    /// <summary>
    ///技能经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillExp {
      get { return skillExp_; }
      set {
        skillExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (SkillExp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SkillExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (SkillExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillExp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetDeComposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDeComposeReq> _parser = new pb::MessageParser<CmdPetDeComposeReq>(() => new CmdPetDeComposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDeComposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetBagUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBagUnlockReq> _parser = new pb::MessageParser<CmdPetBagUnlockReq>(() => new CmdPetBagUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBagUnlockReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetBagUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetBagUnlockRes> _parser = new pb::MessageParser<CmdPetBagUnlockRes>(() => new CmdPetBagUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetBagUnlockRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "costGrids" field.</summary>
    public const int CostGridsFieldNumber = 1;
    private uint costGrids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostGrids {
      get { return costGrids_; }
      set {
        costGrids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostGrids != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CostGrids);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostGrids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostGrids);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CostGrids = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAutoBlinkSetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAutoBlinkSetReq> _parser = new pb::MessageParser<CmdPetAutoBlinkSetReq>(() => new CmdPetAutoBlinkSetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAutoBlinkSetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uid {
      get { return uid_; }
    }

    /// <summary>Field number for the "useautoblink" field.</summary>
    public const int UseautoblinkFieldNumber = 2;
    private bool useautoblink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Useautoblink {
      get { return useautoblink_; }
      set {
        useautoblink_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
      if (Useautoblink != false) {
        output.WriteRawTag(16);
        output.WriteBool(Useautoblink);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      if (Useautoblink != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
          case 16: {
            Useautoblink = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemoveSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemoveSkillReq> _parser = new pb::MessageParser<CmdPetRemoveSkillReq>(() => new CmdPetRemoveSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemoveSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///类型客户端传一下吧 1 专属技能 2 一般技能 3 改造技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemoveSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemoveSkillRes> _parser = new pb::MessageParser<CmdPetRemoveSkillRes>(() => new CmdPetRemoveSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemoveSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_skillid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> skillid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 剩余技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skillid {
      get { return skillid_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///类型客户端传一下吧 1 专属技能 2 一般技能 3 改造技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillexp" field.</summary>
    public const int SkillexpFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_skillexp_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> skillexp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///剩余技能经验跟1size一样2一一对应
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skillexp {
      get { return skillexp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillid_.WriteTo(output, _repeated_skillid_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
      skillexp_.WriteTo(output, _repeated_skillexp_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillid_.CalculateSize(_repeated_skillid_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      size += skillexp_.CalculateSize(_repeated_skillexp_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            skillid_.AddEntriesFrom(input, _repeated_skillid_codec);
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            skillexp_.AddEntriesFrom(input, _repeated_skillexp_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocEnhancePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePointReq> _parser = new pb::MessageParser<CmdPetAllocEnhancePointReq>(() => new CmdPetAllocEnhancePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_attrId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> attrId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///用两个数组发过来 1发id 2发点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AttrId {
      get { return attrId_; }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_points_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> points_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 4;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attrId_.WriteTo(output, _repeated_attrId_codec);
      points_.WriteTo(output, _repeated_points_codec);
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Uid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attrId_.CalculateSize(_repeated_attrId_codec);
      size += points_.CalculateSize(_repeated_points_codec);
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            attrId_.AddEntriesFrom(input, _repeated_attrId_codec);
            break;
          }
          case 18:
          case 16: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 24: {
            Uid = input.ReadUInt32();
            break;
          }
          case 32: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetEnhancePointResetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetEnhancePointResetReq> _parser = new pb::MessageParser<CmdPetEnhancePointResetReq>(() => new CmdPetEnhancePointResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetEnhancePointResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物骑乘请求
  /// </summary>
  public sealed class CmdPetSetCurrentMountReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetCurrentMountReq> _parser = new pb::MessageParser<CmdPetSetCurrentMountReq>(() => new CmdPetSetCurrentMountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetCurrentMountReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///骑宠uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSetCurrentMountRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetCurrentMountRes> _parser = new pb::MessageParser<CmdPetSetCurrentMountRes>(() => new CmdPetSetCurrentMountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetCurrentMountRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentuid" field.</summary>
    public const int CurrentuidFieldNumber = 1;
    private uint currentuid_;
    /// <summary>
    ///骑宠uid 0表示当前没有骑坐骑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentuid {
      get { return currentuid_; }
      set {
        currentuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currentuid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Currentuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currentuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Currentuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐骑驯化
  /// </summary>
  public sealed class CmdPetMountdomesticationReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetMountdomesticationReq> _parser = new pb::MessageParser<CmdPetMountdomesticationReq>(() => new CmdPetMountdomesticationReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetMountdomesticationReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///骑宠uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetMountdomesticationRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetMountdomesticationRes> _parser = new pb::MessageParser<CmdPetMountdomesticationRes>(() => new CmdPetMountdomesticationRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetMountdomesticationRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///骑宠uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐骑到期请求
  /// </summary>
  public sealed class CmdPetMountExpiredReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetMountExpiredReq> _parser = new pb::MessageParser<CmdPetMountExpiredReq>(() => new CmdPetMountExpiredReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetMountExpiredReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///坐骑到期返回
  /// </summary>
  public sealed class CmdPetMountExpiredRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetMountExpiredRes> _parser = new pb::MessageParser<CmdPetMountExpiredRes>(() => new CmdPetMountExpiredRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetMountExpiredRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物跟随请求
  /// </summary>
  public sealed class CmdPetSetFollowPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetFollowPetReq> _parser = new pb::MessageParser<CmdPetSetFollowPetReq>(() => new CmdPetSetFollowPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetFollowPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSetFollowPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSetFollowPetRes> _parser = new pb::MessageParser<CmdPetSetFollowPetRes>(() => new CmdPetSetFollowPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSetFollowPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///uid 0表示当前没有跟随宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetTempBagBatchAbandonPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTempBagBatchAbandonPetReq> _parser = new pb::MessageParser<CmdPetTempBagBatchAbandonPetReq>(() => new CmdPetTempBagBatchAbandonPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTempBagBatchAbandonPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetTempBagBatchAbandonPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetTempBagBatchAbandonPetRes> _parser = new pb::MessageParser<CmdPetTempBagBatchAbandonPetRes>(() => new CmdPetTempBagBatchAbandonPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetTempBagBatchAbandonPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_uid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> uid_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求宠物改造选择
  /// </summary>
  public sealed class CmdPetRemakeSelectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectReq> _parser = new pb::MessageParser<CmdPetRemakeSelectReq>(() => new CmdPetRemakeSelectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 2;
    private uint select_;
    /// <summary>
    ///0-放弃,1-确定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Select {
      get { return select_; }
      set {
        select_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Select != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Select);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Select != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Select);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Select = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeSelectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectRes> _parser = new pb::MessageParser<CmdPetRemakeSelectRes>(() => new CmdPetRemakeSelectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 2;
    private uint select_;
    /// <summary>
    ///0-放弃,1-确定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Select {
      get { return select_; }
      set {
        select_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Select != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Select);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Select != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Select);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Select = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改造领悟技能
  /// </summary>
  public sealed class CmdPetRemakeLearnSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeLearnSkillReq> _parser = new pb::MessageParser<CmdPetRemakeLearnSkillReq>(() => new CmdPetRemakeLearnSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeLearnSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///技能位置，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "learnType" field.</summary>
    public const int LearnTypeFieldNumber = 3;
    private uint learnType_;
    /// <summary>
    ///0-普通领悟,1-高级领悟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LearnType {
      get { return learnType_; }
      set {
        learnType_ = value;
      }
    }

    /// <summary>Field number for the "skillBookItemId" field.</summary>
    public const int SkillBookItemIdFieldNumber = 4;
    private uint skillBookItemId_;
    /// <summary>
    ///技能书id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillBookItemId {
      get { return skillBookItemId_; }
      set {
        skillBookItemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (LearnType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LearnType);
      }
      if (SkillBookItemId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillBookItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (LearnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LearnType);
      }
      if (SkillBookItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillBookItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            LearnType = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillBookItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeLearnSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeLearnSkillRes> _parser = new pb::MessageParser<CmdPetRemakeLearnSkillRes>(() => new CmdPetRemakeLearnSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeLearnSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///技能位置，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_skillList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> skillList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///领悟技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 4;
    private bool succ_;
    /// <summary>
    ///true-成功，false-失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Succ {
      get { return succ_; }
      set {
        succ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (Succ != false) {
        output.WriteRawTag(32);
        output.WriteBool(Succ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (Succ != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 32: {
            Succ = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改造选择领悟技能
  /// </summary>
  public sealed class CmdPetRemakeSelectSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectSkillReq> _parser = new pb::MessageParser<CmdPetRemakeSelectSkillReq>(() => new CmdPetRemakeSelectSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///技能位置，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "selectSkillId" field.</summary>
    public const int SelectSkillIdFieldNumber = 3;
    private uint selectSkillId_;
    /// <summary>
    ///选择技能id, 0-放弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectSkillId {
      get { return selectSkillId_; }
      set {
        selectSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (SelectSkillId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SelectSkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (SelectSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectSkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            SelectSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeSelectSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectSkillRes> _parser = new pb::MessageParser<CmdPetRemakeSelectSkillRes>(() => new CmdPetRemakeSelectSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private uint position_;
    /// <summary>
    ///技能位置，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "selectSkillId" field.</summary>
    public const int SelectSkillIdFieldNumber = 3;
    private uint selectSkillId_;
    /// <summary>
    ///选择技能id, 0-放弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectSkillId {
      get { return selectSkillId_; }
      set {
        selectSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Position != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Position);
      }
      if (SelectSkillId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SelectSkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (SelectSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectSkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Position = input.ReadUInt32();
            break;
          }
          case 24: {
            SelectSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改造重塑档位
  /// </summary>
  public sealed class CmdPetRemakeReGradeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeReGradeReq> _parser = new pb::MessageParser<CmdPetRemakeReGradeReq>(() => new CmdPetRemakeReGradeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeReGradeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeReGradeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeReGradeRes> _parser = new pb::MessageParser<CmdPetRemakeReGradeRes>(() => new CmdPetRemakeReGradeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeReGradeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 2;
    private uint vitGrade_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 3;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 4;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 5;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 6;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (VitGrade != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicGrade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///改造选择重塑档位
  /// </summary>
  public sealed class CmdPetRemakeSelectGradeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectGradeReq> _parser = new pb::MessageParser<CmdPetRemakeSelectGradeReq>(() => new CmdPetRemakeSelectGradeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectGradeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 2;
    private uint select_;
    /// <summary>
    ///0-放弃,1-确定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Select {
      get { return select_; }
      set {
        select_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Select != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Select);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Select != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Select);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Select = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetRemakeSelectGradeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRemakeSelectGradeRes> _parser = new pb::MessageParser<CmdPetRemakeSelectGradeRes>(() => new CmdPetRemakeSelectGradeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRemakeSelectGradeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 2;
    private uint vitGrade_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 3;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 4;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 5;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 6;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (VitGrade != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicGrade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///契约的建立
  /// </summary>
  public sealed class CmdPetContractSetUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractSetUpReq> _parser = new pb::MessageParser<CmdPetContractSetUpReq>(() => new CmdPetContractSetUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractSetUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///主位宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    ///契约位置(从0开始,不包括坐骑本身)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "contractUid" field.</summary>
    public const int ContractUidFieldNumber = 3;
    private uint contractUid_;
    /// <summary>
    ///契约位宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractUid {
      get { return contractUid_; }
      set {
        contractUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (ContractUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContractUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (ContractUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            ContractUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetContractInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetContractInfo> _parser = new pb::MessageParser<PetContractInfo>(() => new PetContractInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetContractInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "contractPetUid" field.</summary>
    public const int ContractPetUidFieldNumber = 2;
    private uint contractPetUid_;
    /// <summary>
    ///建立契约的宠物UId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractPetUid {
      get { return contractPetUid_; }
      set {
        contractPetUid_ = value;
      }
    }

    /// <summary>Field number for the "contractUids" field.</summary>
    public const int ContractUidsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_contractUids_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> contractUids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///契约位宠物Uid(契约位为空时值为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ContractUids {
      get { return contractUids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ContractPetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ContractPetUid);
      }
      contractUids_.WriteTo(output, _repeated_contractUids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ContractPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractPetUid);
      }
      size += contractUids_.CalculateSize(_repeated_contractUids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ContractPetUid = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            contractUids_.AddEntriesFrom(input, _repeated_contractUids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///契约的建立 返回
  /// </summary>
  public sealed class CmdPetContractSetUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractSetUpRes> _parser = new pb::MessageParser<CmdPetContractSetUpRes>(() => new CmdPetContractSetUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractSetUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///主位宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    ///契约位置(从0开始,不包括坐骑本身)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "contractUid" field.</summary>
    public const int ContractUidFieldNumber = 3;
    private uint contractUid_;
    /// <summary>
    ///契约位宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractUid {
      get { return contractUid_; }
      set {
        contractUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (ContractUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContractUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (ContractUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            ContractUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetContractCancleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractCancleReq> _parser = new pb::MessageParser<CmdPetContractCancleReq>(() => new CmdPetContractCancleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractCancleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "posList" field.</summary>
    public const int PosListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_posList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> posList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///要取消的契约位置(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PosList {
      get { return posList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      posList_.WriteTo(output, _repeated_posList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      size += posList_.CalculateSize(_repeated_posList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            posList_.AddEntriesFrom(input, _repeated_posList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetContractCancleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractCancleRes> _parser = new pb::MessageParser<CmdPetContractCancleRes>(() => new CmdPetContractCancleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractCancleRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///主位宠物Uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "posList" field.</summary>
    public const int PosListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_posList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> posList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///要取消的契约位置(0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PosList {
      get { return posList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      posList_.WriteTo(output, _repeated_posList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      size += posList_.CalculateSize(_repeated_posList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            posList_.AddEntriesFrom(input, _repeated_posList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术技能学习
  /// </summary>
  public sealed class CmdPetRidingSkillLearnReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillLearnReq> _parser = new pb::MessageParser<CmdPetRidingSkillLearnReq>(() => new CmdPetRidingSkillLearnReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillLearnReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    /// <summary>
    ///InfoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术技能学习返回
  /// </summary>
  public sealed class CmdPetRidingSkillLearnRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillLearnRes> _parser = new pb::MessageParser<CmdPetRidingSkillLearnRes>(() => new CmdPetRidingSkillLearnRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillLearnRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术技能遗忘
  /// </summary>
  public sealed class CmdPetRidingSkillForgetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillForgetReq> _parser = new pb::MessageParser<CmdPetRidingSkillForgetReq>(() => new CmdPetRidingSkillForgetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillForgetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///技能Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术技能遗忘返回
  /// </summary>
  public sealed class CmdPetRidingSkillForgetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillForgetRes> _parser = new pb::MessageParser<CmdPetRidingSkillForgetRes>(() => new CmdPetRidingSkillForgetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillForgetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    ///被遗忘的技能Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术充能
  /// </summary>
  public sealed class CmdPetRidingSkillAddEnergyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillAddEnergyReq> _parser = new pb::MessageParser<CmdPetRidingSkillAddEnergyReq>(() => new CmdPetRidingSkillAddEnergyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillAddEnergyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1:充能一次 2：充能10次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///骑术能量改变
  /// </summary>
  public sealed class CmdPetRidingSkillEnergyChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetRidingSkillEnergyChangeNtf> _parser = new pb::MessageParser<CmdPetRidingSkillEnergyChangeNtf>(() => new CmdPetRidingSkillEnergyChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetRidingSkillEnergyChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "energyNum" field.</summary>
    public const int EnergyNumFieldNumber = 1;
    private uint energyNum_;
    /// <summary>
    ///当前骑术能量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnergyNum {
      get { return energyNum_; }
      set {
        energyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnergyNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnergyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnergyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnergyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnergyNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetMountExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetMountExchangeReq> _parser = new pb::MessageParser<CmdPetMountExchangeReq>(() => new CmdPetMountExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetMountExchangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetGetRidingSkillCostReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetRidingSkillCostReq> _parser = new pb::MessageParser<CmdPetGetRidingSkillCostReq>(() => new CmdPetGetRidingSkillCostReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetRidingSkillCostReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUids" field.</summary>
    public const int PetUidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_petUids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> petUids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///只能请求背包宠物消耗数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PetUids {
      get { return petUids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petUids_.WriteTo(output, _repeated_petUids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petUids_.CalculateSize(_repeated_petUids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            petUids_.AddEntriesFrom(input, _repeated_petUids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetContractInfoUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractInfoUpdateNtf> _parser = new pb::MessageParser<CmdPetContractInfoUpdateNtf>(() => new CmdPetContractInfoUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractInfoUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetContractInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetContractInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetContractInfo> infos_ = new pbc::RepeatedField<global::Packet.PetContractInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetContractInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetContractLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractLevelUpReq> _parser = new pb::MessageParser<CmdPetContractLevelUpReq>(() => new CmdPetContractLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "costItem" field.</summary>
    public const int CostItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.SimpleItem> _repeated_costItem_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.SimpleItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimpleItem> costItem_ = new pbc::RepeatedField<global::Packet.SimpleItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimpleItem> CostItem {
      get { return costItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      costItem_.WriteTo(output, _repeated_costItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      size += costItem_.CalculateSize(_repeated_costItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            costItem_.AddEntriesFrom(input, _repeated_costItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetContractLevelUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetContractLevelUpRes> _parser = new pb::MessageParser<CmdPetContractLevelUpRes>(() => new CmdPetContractLevelUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetContractLevelUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///封印物设置
  /// </summary>
  public sealed class CmdPetCatchSetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetCatchSetReq> _parser = new pb::MessageParser<CmdPetCatchSetReq>(() => new CmdPetCatchSetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetCatchSetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private bool flag_;
    /// <summary>
    ///默认0封印，1不封印
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (Flag != false) {
        output.WriteRawTag(16);
        output.WriteBool(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetCatchSetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetCatchSetRes> _parser = new pb::MessageParser<CmdPetCatchSetRes>(() => new CmdPetCatchSetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetCatchSetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petId" field.</summary>
    public const int PetIdFieldNumber = 1;
    private uint petId_;
    /// <summary>
    ///宠物petId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetId);
      }
      if (Flag != false) {
        output.WriteRawTag(16);
        output.WriteBool(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetId = input.ReadUInt32();
            break;
          }
          case 16: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetCatchSettingsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetCatchSettingsReq> _parser = new pb::MessageParser<CmdPetCatchSettingsReq>(() => new CmdPetCatchSettingsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetCatchSettingsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetCatchSettingsRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetCatchSettingsRes> _parser = new pb::MessageParser<CmdPetCatchSettingsRes>(() => new CmdPetCatchSettingsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetCatchSettingsRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "catchSet" field.</summary>
    public const int CatchSetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetCatchSettingsRes.Types.PetSetData> _repeated_catchSet_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetCatchSettingsRes.Types.PetSetData.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetCatchSettingsRes.Types.PetSetData> catchSet_ = new pbc::RepeatedField<global::Packet.CmdPetCatchSettingsRes.Types.PetSetData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetCatchSettingsRes.Types.PetSetData> CatchSet {
      get { return catchSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      catchSet_.WriteTo(output, _repeated_catchSet_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += catchSet_.CalculateSize(_repeated_catchSet_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            catchSet_.AddEntriesFrom(input, _repeated_catchSet_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetCatchSettingsRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PetSetData : pb::IMessage {
        private static readonly pb::MessageParser<PetSetData> _parser = new pb::MessageParser<PetSetData>(() => new PetSetData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PetSetData> Parser { get { return _parser; } }

        /// <summary>Field number for the "petId" field.</summary>
        public const int PetIdFieldNumber = 1;
        private uint petId_;
        /// <summary>
        ///宠物PetId
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetId {
          get { return petId_; }
          set {
            petId_ = value;
          }
        }

        /// <summary>Field number for the "autoCatch" field.</summary>
        public const int AutoCatchFieldNumber = 2;
        private bool autoCatch_;
        /// <summary>
        ///自动封印
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AutoCatch {
          get { return autoCatch_; }
          set {
            autoCatch_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PetId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PetId);
          }
          if (AutoCatch != false) {
            output.WriteRawTag(16);
            output.WriteBool(AutoCatch);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
          }
          if (AutoCatch != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PetId = input.ReadUInt32();
                break;
              }
              case 16: {
                AutoCatch = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///请求宠物进阶
  /// </summary>
  public sealed class CmdPetUpStageReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetUpStageReq> _parser = new pb::MessageParser<CmdPetUpStageReq>(() => new CmdPetUpStageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetUpStageReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetUpStageRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetUpStageRes> _parser = new pb::MessageParser<CmdPetUpStageRes>(() => new CmdPetUpStageRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetUpStageRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "petStage" field.</summary>
    public const int PetStageFieldNumber = 2;
    private uint petStage_;
    /// <summary>
    ///宠物进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetStage {
      get { return petStage_; }
      set {
        petStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (PetStage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (PetStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetStage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            PetStage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求金宠印记兑换  //返回CmdPet_AbandonPetRes
  /// </summary>
  public sealed class CmdPetStampExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetStampExchangeReq> _parser = new pb::MessageParser<CmdPetStampExchangeReq>(() => new CmdPetStampExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetStampExchangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetExchangeSpecialGoldPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangeSpecialGoldPetReq> _parser = new pb::MessageParser<CmdPetExchangeSpecialGoldPetReq>(() => new CmdPetExchangeSpecialGoldPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangeSpecialGoldPetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetExchangeSpecialGoldPetCountRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangeSpecialGoldPetCountRes> _parser = new pb::MessageParser<CmdPetExchangeSpecialGoldPetCountRes>(() => new CmdPetExchangeSpecialGoldPetCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangeSpecialGoldPetCountRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetEatFruitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetEatFruitReq> _parser = new pb::MessageParser<CmdPetEatFruitReq>(() => new CmdPetEatFruitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetEatFruitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetEatFruitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetEatFruitRes> _parser = new pb::MessageParser<CmdPetEatFruitRes>(() => new CmdPetEatFruitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetEatFruitRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "vitGrade" field.</summary>
    public const int VitGradeFieldNumber = 2;
    private uint vitGrade_;
    /// <summary>
    ///发一下吧防止客户端服务器不一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VitGrade {
      get { return vitGrade_; }
      set {
        vitGrade_ = value;
      }
    }

    /// <summary>Field number for the "snhGrade" field.</summary>
    public const int SnhGradeFieldNumber = 3;
    private uint snhGrade_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnhGrade {
      get { return snhGrade_; }
      set {
        snhGrade_ = value;
      }
    }

    /// <summary>Field number for the "intenGrade" field.</summary>
    public const int IntenGradeFieldNumber = 4;
    private uint intenGrade_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntenGrade {
      get { return intenGrade_; }
      set {
        intenGrade_ = value;
      }
    }

    /// <summary>Field number for the "speedGrade" field.</summary>
    public const int SpeedGradeFieldNumber = 5;
    private uint speedGrade_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedGrade {
      get { return speedGrade_; }
      set {
        speedGrade_ = value;
      }
    }

    /// <summary>Field number for the "magicGrade" field.</summary>
    public const int MagicGradeFieldNumber = 6;
    private uint magicGrade_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MagicGrade {
      get { return magicGrade_; }
      set {
        magicGrade_ = value;
      }
    }

    /// <summary>Field number for the "minusGrade" field.</summary>
    public const int MinusGradeFieldNumber = 7;
    private uint minusGrade_;
    /// <summary>
    ///参考上边注释
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinusGrade {
      get { return minusGrade_; }
      set {
        minusGrade_ = value;
      }
    }

    /// <summary>Field number for the "addGrade" field.</summary>
    public const int AddGradeFieldNumber = 8;
    private uint addGrade_;
    /// <summary>
    ///参考上边注释
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddGrade {
      get { return addGrade_; }
      set {
        addGrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (VitGrade != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VitGrade);
      }
      if (SnhGrade != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SnhGrade);
      }
      if (IntenGrade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IntenGrade);
      }
      if (SpeedGrade != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SpeedGrade);
      }
      if (MagicGrade != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MagicGrade);
      }
      if (MinusGrade != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MinusGrade);
      }
      if (AddGrade != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(AddGrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (VitGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VitGrade);
      }
      if (SnhGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SnhGrade);
      }
      if (IntenGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntenGrade);
      }
      if (SpeedGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedGrade);
      }
      if (MagicGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MagicGrade);
      }
      if (MinusGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinusGrade);
      }
      if (AddGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddGrade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 16: {
            VitGrade = input.ReadUInt32();
            break;
          }
          case 24: {
            SnhGrade = input.ReadUInt32();
            break;
          }
          case 32: {
            IntenGrade = input.ReadUInt32();
            break;
          }
          case 40: {
            SpeedGrade = input.ReadUInt32();
            break;
          }
          case 48: {
            MagicGrade = input.ReadUInt32();
            break;
          }
          case 56: {
            MinusGrade = input.ReadUInt32();
            break;
          }
          case 64: {
            AddGrade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加加点方案
  /// </summary>
  public sealed class CmdPetAllocPointPlanAddReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanAddReq> _parser = new pb::MessageParser<CmdPetAllocPointPlanAddReq>(() => new CmdPetAllocPointPlanAddReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanAddReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocPointPlanAddRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanAddRes> _parser = new pb::MessageParser<CmdPetAllocPointPlanAddRes>(() => new CmdPetAllocPointPlanAddRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanAddRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.PetPointPlanInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetPointPlanInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 3;
    private global::Packet.PetPkAttr attr_;
    /// <summary>
    ///属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetPkAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (attr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Attr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.PetPointPlanInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (attr_ == null) {
              attr_ = new global::Packet.PetPkAttr();
            }
            input.ReadMessage(attr_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加点方案改名
  /// </summary>
  public sealed class CmdPetAllocPointPlanRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanRenameReq> _parser = new pb::MessageParser<CmdPetAllocPointPlanRenameReq>(() => new CmdPetAllocPointPlanRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 3;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocPointPlanRenameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanRenameRes> _parser = new pb::MessageParser<CmdPetAllocPointPlanRenameRes>(() => new CmdPetAllocPointPlanRenameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanRenameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 3;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用加点方案
  /// </summary>
  public sealed class CmdPetAllocPointPlanUseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanUseReq> _parser = new pb::MessageParser<CmdPetAllocPointPlanUseReq>(() => new CmdPetAllocPointPlanUseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanUseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocPointPlanUseRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocPointPlanUseRes> _parser = new pb::MessageParser<CmdPetAllocPointPlanUseRes>(() => new CmdPetAllocPointPlanUseRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocPointPlanUseRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性修正方案增加
  /// </summary>
  public sealed class CmdPetAllocEnhancePlanAddReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanAddReq> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanAddReq>(() => new CmdPetAllocEnhancePlanAddReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanAddReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocEnhancePlanAddRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanAddRes> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanAddRes>(() => new CmdPetAllocEnhancePlanAddRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanAddRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.EnhancePlanInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.EnhancePlanInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.EnhancePlanInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性修正方案改名
  /// </summary>
  public sealed class CmdPetAllocEnhancePlanRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanRenameReq> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanRenameReq>(() => new CmdPetAllocEnhancePlanRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 3;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocEnhancePlanRenameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanRenameRes> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanRenameRes>(() => new CmdPetAllocEnhancePlanRenameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanRenameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 3;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
      if (PlanName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PlanName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            PlanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用修正方案
  /// </summary>
  public sealed class CmdPetAllocEnhancePlanUseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanUseReq> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanUseReq>(() => new CmdPetAllocEnhancePlanUseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanUseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetAllocEnhancePlanUseRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetAllocEnhancePlanUseRes> _parser = new pb::MessageParser<CmdPetAllocEnhancePlanUseRes>(() => new CmdPetAllocEnhancePlanUseRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetAllocEnhancePlanUseRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetGetPointPlanAttrReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetPointPlanAttrReq> _parser = new pb::MessageParser<CmdPetGetPointPlanAttrReq>(() => new CmdPetGetPointPlanAttrReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetPointPlanAttrReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetGetPointPlanAttrRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetPointPlanAttrRes> _parser = new pb::MessageParser<CmdPetGetPointPlanAttrRes>(() => new CmdPetGetPointPlanAttrRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetPointPlanAttrRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planAttrs" field.</summary>
    public const int PlanAttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdPetGetPointPlanAttrRes.Types.PointPlanAttr> _repeated_planAttrs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdPetGetPointPlanAttrRes.Types.PointPlanAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetGetPointPlanAttrRes.Types.PointPlanAttr> planAttrs_ = new pbc::RepeatedField<global::Packet.CmdPetGetPointPlanAttrRes.Types.PointPlanAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetGetPointPlanAttrRes.Types.PointPlanAttr> PlanAttrs {
      get { return planAttrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      planAttrs_.WriteTo(output, _repeated_planAttrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      size += planAttrs_.CalculateSize(_repeated_planAttrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 18: {
            planAttrs_.AddEntriesFrom(input, _repeated_planAttrs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetGetPointPlanAttrRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PointPlanAttr : pb::IMessage {
        private static readonly pb::MessageParser<PointPlanAttr> _parser = new pb::MessageParser<PointPlanAttr>(() => new PointPlanAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PointPlanAttr> Parser { get { return _parser; } }

        /// <summary>Field number for the "planIndex" field.</summary>
        public const int PlanIndexFieldNumber = 1;
        private uint planIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlanIndex {
          get { return planIndex_; }
          set {
            planIndex_ = value;
          }
        }

        /// <summary>Field number for the "attr" field.</summary>
        public const int AttrFieldNumber = 2;
        private global::Packet.PetPkAttr attr_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.PetPkAttr Attr {
          get { return attr_; }
          set {
            attr_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PlanIndex != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlanIndex);
          }
          if (attr_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Attr);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlanIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
          }
          if (attr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlanIndex = input.ReadUInt32();
                break;
              }
              case 18: {
                if (attr_ == null) {
                  attr_ = new global::Packet.PetPkAttr();
                }
                input.ReadMessage(attr_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdPetSinglePointPlanAttrUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSinglePointPlanAttrUpdateNtf> _parser = new pb::MessageParser<CmdPetSinglePointPlanAttrUpdateNtf>(() => new CmdPetSinglePointPlanAttrUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSinglePointPlanAttrUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 3;
    private global::Packet.PetPkAttr attr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetPkAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
      if (attr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Attr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (attr_ == null) {
              attr_ = new global::Packet.PetPkAttr();
            }
            input.ReadMessage(attr_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLevelDownReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLevelDownReq> _parser = new pb::MessageParser<CmdPetLevelDownReq>(() => new CmdPetLevelDownReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLevelDownReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetExchangTargetGoldPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangTargetGoldPetReq> _parser = new pb::MessageParser<CmdPetExchangTargetGoldPetReq>(() => new CmdPetExchangTargetGoldPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangTargetGoldPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private uint keyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(KeyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KeyId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetExchangTargetGoldPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetExchangTargetGoldPetRes> _parser = new pb::MessageParser<CmdPetExchangTargetGoldPetRes>(() => new CmdPetExchangTargetGoldPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetExchangTargetGoldPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private uint keyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(KeyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KeyId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetSoulBeadInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetSoulBeadInfo> _parser = new pb::MessageParser<PetSoulBeadInfo>(() => new PetSoulBeadInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetSoulBeadInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///类型(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "skillIds" field.</summary>
    public const int SkillIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_skillIds_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> skillIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///固定长度 目前为2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillIds {
      get { return skillIds_; }
    }

    /// <summary>Field number for the "tempSkillIds" field.</summary>
    public const int TempSkillIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_tempSkillIds_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> tempSkillIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///和skillIds长度相等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TempSkillIds {
      get { return tempSkillIds_; }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 7;
    private uint petUid_;
    /// <summary>
    ///装配宠物Uid 未装配为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
      skillIds_.WriteTo(output, _repeated_skillIds_codec);
      tempSkillIds_.WriteTo(output, _repeated_tempSkillIds_codec);
      if (PetUid != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      size += skillIds_.CalculateSize(_repeated_skillIds_codec);
      size += tempSkillIds_.CalculateSize(_repeated_tempSkillIds_codec);
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            skillIds_.AddEntriesFrom(input, _repeated_skillIds_codec);
            break;
          }
          case 50:
          case 48: {
            tempSkillIds_.AddEntriesFrom(input, _repeated_tempSkillIds_codec);
            break;
          }
          case 56: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物魔魂激活
  /// </summary>
  public sealed class CmdPetSoulActiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulActiveReq> _parser = new pb::MessageParser<CmdPetSoulActiveReq>(() => new CmdPetSoulActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulActiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "costPetUid" field.</summary>
    public const int CostPetUidFieldNumber = 2;
    private uint costPetUid_;
    /// <summary>
    ///消耗宠物的Uid 如果没有填0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostPetUid {
      get { return costPetUid_; }
      set {
        costPetUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (CostPetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CostPetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (CostPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostPetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            CostPetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulActiveRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulActiveRes> _parser = new pb::MessageParser<CmdPetSoulActiveRes>(() => new CmdPetSoulActiveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulActiveRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加改造次数
  /// </summary>
  public sealed class CmdPetSoulAddRemakeCountReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulAddRemakeCountReq> _parser = new pb::MessageParser<CmdPetSoulAddRemakeCountReq>(() => new CmdPetSoulAddRemakeCountReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulAddRemakeCountReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///左边为0右边为1 或者相反也可以
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "costPetUid" field.</summary>
    public const int CostPetUidFieldNumber = 3;
    private uint costPetUid_;
    /// <summary>
    ///消耗宠物的Uid 如果没有填0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostPetUid {
      get { return costPetUid_; }
      set {
        costPetUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (CostPetUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CostPetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (CostPetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostPetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            CostPetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulAddRemakeCountRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulAddRemakeCountRes> _parser = new pb::MessageParser<CmdPetSoulAddRemakeCountRes>(() => new CmdPetSoulAddRemakeCountRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulAddRemakeCountRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 1;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PetUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装配/卸下魂珠
  /// </summary>
  public sealed class CmdPetSoulAssembleBeadReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulAssembleBeadReq> _parser = new pb::MessageParser<CmdPetSoulAssembleBeadReq>(() => new CmdPetSoulAssembleBeadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulAssembleBeadReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    /// <summary>
    ///1:穿戴 2:卸下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "beadType" field.</summary>
    public const int BeadTypeFieldNumber = 3;
    private uint beadType_;
    /// <summary>
    ///类型(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeadType {
      get { return beadType_; }
      set {
        beadType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (BeadType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeadType);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (BeadType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeadType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            BeadType = input.ReadUInt32();
            break;
          }
          case 32: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulAssembleBeadRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulAssembleBeadRes> _parser = new pb::MessageParser<CmdPetSoulAssembleBeadRes>(() => new CmdPetSoulAssembleBeadRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulAssembleBeadRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    /// <summary>
    ///1:穿戴 2:卸下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "beadType" field.</summary>
    public const int BeadTypeFieldNumber = 3;
    private uint beadType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeadType {
      get { return beadType_; }
      set {
        beadType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (BeadType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeadType);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (BeadType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeadType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            BeadType = input.ReadUInt32();
            break;
          }
          case 32: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulBeadOperateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulBeadOperateReq> _parser = new pb::MessageParser<CmdPetSoulBeadOperateReq>(() => new CmdPetSoulBeadOperateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulBeadOperateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    /// <summary>
    /// PetSoulBeadOpType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "beadType" field.</summary>
    public const int BeadTypeFieldNumber = 2;
    private uint beadType_;
    /// <summary>
    ///类型(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BeadType {
      get { return beadType_; }
      set {
        beadType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 4;
    private uint param_;
    /// <summary>
    ///opType=3 param=宠物Uid
    ///opType=4,5,6  param=0第一个技能,=1第二个技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (BeadType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BeadType);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      if (Param != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (BeadType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeadType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 16: {
            BeadType = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
          case 32: {
            Param = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulBeadOperateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulBeadOperateRes> _parser = new pb::MessageParser<CmdPetSoulBeadOperateRes>(() => new CmdPetSoulBeadOperateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulBeadOperateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    /// <summary>
    /// PetSoulBeadOpType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.PetSoulBeadInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetSoulBeadInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "addExp" field.</summary>
    public const int AddExpFieldNumber = 3;
    private uint addExp_;
    /// <summary>
    ///魂珠升级返回增加的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddExp {
      get { return addExp_; }
      set {
        addExp_ = value;
      }
    }

    /// <summary>Field number for the "expRate" field.</summary>
    public const int ExpRateFieldNumber = 4;
    private uint expRate_;
    /// <summary>
    ///经验倍率 万分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpRate {
      get { return expRate_; }
      set {
        expRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (AddExp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AddExp);
      }
      if (ExpRate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExpRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (AddExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddExp);
      }
      if (ExpRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.PetSoulBeadInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 24: {
            AddExp = input.ReadUInt32();
            break;
          }
          case 32: {
            ExpRate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PetUpgradeBeadInfo : pb::IMessage {
    private static readonly pb::MessageParser<PetUpgradeBeadInfo> _parser = new pb::MessageParser<PetUpgradeBeadInfo>(() => new PetUpgradeBeadInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetUpgradeBeadInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 1;
    private uint leftCount_;
    /// <summary>
    ///宠物升级剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    /// <summary>Field number for the "rate3LeftCount" field.</summary>
    public const int Rate3LeftCountFieldNumber = 2;
    private uint rate3LeftCount_;
    /// <summary>
    ///宠物升级3倍暴击剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rate3LeftCount {
      get { return rate3LeftCount_; }
      set {
        rate3LeftCount_ = value;
      }
    }

    /// <summary>Field number for the "rate2LeftCount" field.</summary>
    public const int Rate2LeftCountFieldNumber = 3;
    private uint rate2LeftCount_;
    /// <summary>
    ///宠物升级2倍暴击剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rate2LeftCount {
      get { return rate2LeftCount_; }
      set {
        rate2LeftCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LeftCount);
      }
      if (Rate3LeftCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rate3LeftCount);
      }
      if (Rate2LeftCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rate2LeftCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftCount);
      }
      if (Rate3LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rate3LeftCount);
      }
      if (Rate2LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rate2LeftCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeftCount = input.ReadUInt32();
            break;
          }
          case 16: {
            Rate3LeftCount = input.ReadUInt32();
            break;
          }
          case 24: {
            Rate2LeftCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulBeadInitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulBeadInitNtf> _parser = new pb::MessageParser<CmdPetSoulBeadInitNtf>(() => new CmdPetSoulBeadInitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulBeadInitNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "allBeads" field.</summary>
    public const int AllBeadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetSoulBeadInfo> _repeated_allBeads_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetSoulBeadInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetSoulBeadInfo> allBeads_ = new pbc::RepeatedField<global::Packet.PetSoulBeadInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetSoulBeadInfo> AllBeads {
      get { return allBeads_; }
    }

    /// <summary>Field number for the "upgradeInfo" field.</summary>
    public const int UpgradeInfoFieldNumber = 2;
    private global::Packet.PetUpgradeBeadInfo upgradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUpgradeBeadInfo UpgradeInfo {
      get { return upgradeInfo_; }
      set {
        upgradeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      allBeads_.WriteTo(output, _repeated_allBeads_codec);
      if (upgradeInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpgradeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += allBeads_.CalculateSize(_repeated_allBeads_codec);
      if (upgradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            allBeads_.AddEntriesFrom(input, _repeated_allBeads_codec);
            break;
          }
          case 18: {
            if (upgradeInfo_ == null) {
              upgradeInfo_ = new global::Packet.PetUpgradeBeadInfo();
            }
            input.ReadMessage(upgradeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetSoulBeadUpgradeInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetSoulBeadUpgradeInfoNtf> _parser = new pb::MessageParser<CmdPetSoulBeadUpgradeInfoNtf>(() => new CmdPetSoulBeadUpgradeInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetSoulBeadUpgradeInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "upgradeInfo" field.</summary>
    public const int UpgradeInfoFieldNumber = 1;
    private global::Packet.PetUpgradeBeadInfo upgradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUpgradeBeadInfo UpgradeInfo {
      get { return upgradeInfo_; }
      set {
        upgradeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (upgradeInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UpgradeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (upgradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (upgradeInfo_ == null) {
              upgradeInfo_ = new global::Packet.PetUpgradeBeadInfo();
            }
            input.ReadMessage(upgradeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetFightGetLuckyBagNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFightGetLuckyBagNtf> _parser = new pb::MessageParser<CmdPetFightGetLuckyBagNtf>(() => new CmdPetFightGetLuckyBagNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFightGetLuckyBagNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "curNum" field.</summary>
    public const int CurNumFieldNumber = 2;
    private uint curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 3;
    private uint maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 4;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (CurNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxNum);
      }
      if (SkillId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurNum);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNum);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurNum = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxNum = input.ReadUInt32();
            break;
          }
          case 32: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetFightPetSetListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFightPetSetListReq> _parser = new pb::MessageParser<CmdPetFightPetSetListReq>(() => new CmdPetFightPetSetListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFightPetSetListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetFightPetSetListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFightPetSetListRes> _parser = new pb::MessageParser<CmdPetFightPetSetListRes>(() => new CmdPetFightPetSetListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFightPetSetListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "petSet" field.</summary>
    public const int PetSetFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdPetFightPetSetListRes.Types.PetSet> _repeated_petSet_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdPetFightPetSetListRes.Types.PetSet.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPetFightPetSetListRes.Types.PetSet> petSet_ = new pbc::RepeatedField<global::Packet.CmdPetFightPetSetListRes.Types.PetSet>();
    /// <summary>
    ///宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPetFightPetSetListRes.Types.PetSet> PetSet {
      get { return petSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      petSet_.WriteTo(output, _repeated_petSet_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += petSet_.CalculateSize(_repeated_petSet_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            petSet_.AddEntriesFrom(input, _repeated_petSet_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPetFightPetSetListRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PetSet : pb::IMessage {
        private static readonly pb::MessageParser<PetSet> _parser = new pb::MessageParser<PetSet>(() => new PetSet());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PetSet> Parser { get { return _parser; } }

        /// <summary>Field number for the "fightType" field.</summary>
        public const int FightTypeFieldNumber = 1;
        private uint fightType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FightType {
          get { return fightType_; }
          set {
            fightType_ = value;
          }
        }

        /// <summary>Field number for the "petUid" field.</summary>
        public const int PetUidFieldNumber = 2;
        private uint petUid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetUid {
          get { return petUid_; }
          set {
            petUid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FightType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FightType);
          }
          if (PetUid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PetUid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FightType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightType);
          }
          if (PetUid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FightType = input.ReadUInt32();
                break;
              }
              case 16: {
                PetUid = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdPetFightPetSetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFightPetSetReq> _parser = new pb::MessageParser<CmdPetFightPetSetReq>(() => new CmdPetFightPetSetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFightPetSetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fightType" field.</summary>
    public const int FightTypeFieldNumber = 1;
    private uint fightType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightType {
      get { return fightType_; }
      set {
        fightType_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "setType" field.</summary>
    public const int SetTypeFieldNumber = 3;
    private uint setType_;
    /// <summary>
    ///1出战，2休息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetType {
      get { return setType_; }
      set {
        setType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FightType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FightType);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (SetType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SetType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FightType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightType);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (SetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FightType = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            SetType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetFightPetSetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetFightPetSetRes> _parser = new pb::MessageParser<CmdPetFightPetSetRes>(() => new CmdPetFightPetSetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetFightPetSetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fightType" field.</summary>
    public const int FightTypeFieldNumber = 1;
    private uint fightType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FightType {
      get { return fightType_; }
      set {
        fightType_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "setType" field.</summary>
    public const int SetTypeFieldNumber = 3;
    private uint setType_;
    /// <summary>
    ///1出战，2休息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetType {
      get { return setType_; }
      set {
        setType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FightType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FightType);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (SetType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SetType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FightType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FightType);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (SetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FightType = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            SetType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///驯养任务
  /// </summary>
  public sealed class DomesticationTask : pb::IMessage {
    private static readonly pb::MessageParser<DomesticationTask> _parser = new pb::MessageParser<DomesticationTask>(() => new DomesticationTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomesticationTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    /// <summary>
    ///宠物uid, 为0是未在训练中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///任务结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 4;
    private uint grade_;
    /// <summary>
    ///品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "luckySkill" field.</summary>
    public const int LuckySkillFieldNumber = 5;
    private uint luckySkill_;
    /// <summary>
    ///幸运技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LuckySkill {
      get { return luckySkill_; }
      set {
        luckySkill_ = value;
      }
    }

    /// <summary>Field number for the "awardRatio" field.</summary>
    public const int AwardRatioFieldNumber = 6;
    private uint awardRatio_;
    /// <summary>
    ///奖励加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardRatio {
      get { return awardRatio_; }
      set {
        awardRatio_ = value;
      }
    }

    /// <summary>Field number for the "petInfoId" field.</summary>
    public const int PetInfoIdFieldNumber = 7;
    private uint petInfoId_;
    /// <summary>
    ///宠物infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetInfoId {
      get { return petInfoId_; }
      set {
        petInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
      if (Grade != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grade);
      }
      if (LuckySkill != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LuckySkill);
      }
      if (AwardRatio != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AwardRatio);
      }
      if (PetInfoId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PetInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      if (LuckySkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckySkill);
      }
      if (AwardRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardRatio);
      }
      if (PetInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 32: {
            Grade = input.ReadUInt32();
            break;
          }
          case 40: {
            LuckySkill = input.ReadUInt32();
            break;
          }
          case 48: {
            AwardRatio = input.ReadUInt32();
            break;
          }
          case 56: {
            PetInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取驯养信息
  /// </summary>
  public sealed class CmdPetGetDomesticationReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetDomesticationReq> _parser = new pb::MessageParser<CmdPetGetDomesticationReq>(() => new CmdPetGetDomesticationReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetDomesticationReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetGetDomesticationRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetGetDomesticationRes> _parser = new pb::MessageParser<CmdPetGetDomesticationRes>(() => new CmdPetGetDomesticationRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetGetDomesticationRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private uint stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.DomesticationTask> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.DomesticationTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.DomesticationTask> taskList_ = new pbc::RepeatedField<global::Packet.DomesticationTask>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DomesticationTask> TaskList {
      get { return taskList_; }
    }

    /// <summary>Field number for the "exTaskCount" field.</summary>
    public const int ExTaskCountFieldNumber = 5;
    private uint exTaskCount_;
    /// <summary>
    ///今日加训次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExTaskCount {
      get { return exTaskCount_; }
      set {
        exTaskCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stage);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exp);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (ExTaskCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ExTaskCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (ExTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExTaskCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stage = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt32();
            break;
          }
          case 34: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 40: {
            ExTaskCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开始驯养请求
  /// </summary>
  public sealed class CmdPetDomesticationStartReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationStartReq> _parser = new pb::MessageParser<CmdPetDomesticationStartReq>(() => new CmdPetDomesticationStartReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationStartReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    /// <summary>
    ///宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetDomesticationStartRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationStartRes> _parser = new pb::MessageParser<CmdPetDomesticationStartRes>(() => new CmdPetDomesticationStartRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationStartRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Packet.DomesticationTask task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DomesticationTask Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::Packet.DomesticationTask();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取驯养奖励请求
  /// </summary>
  public sealed class CmdPetDomesticationEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationEndReq> _parser = new pb::MessageParser<CmdPetDomesticationEndReq>(() => new CmdPetDomesticationEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationEndReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetDomesticationEndRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationEndRes> _parser = new pb::MessageParser<CmdPetDomesticationEndRes>(() => new CmdPetDomesticationEndRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationEndRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_infoId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> infoId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///本次领取的任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InfoId {
      get { return infoId_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoId_.WriteTo(output, _repeated_infoId_codec);
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoId_.CalculateSize(_repeated_infoId_codec);
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            infoId_.AddEntriesFrom(input, _repeated_infoId_codec);
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新驯养任务请求
  /// </summary>
  public sealed class CmdPetDomesticationRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationRefreshReq> _parser = new pb::MessageParser<CmdPetDomesticationRefreshReq>(() => new CmdPetDomesticationRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationRefreshReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetDomesticationRefreshRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationRefreshRes> _parser = new pb::MessageParser<CmdPetDomesticationRefreshRes>(() => new CmdPetDomesticationRefreshRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationRefreshRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "oldTaskList" field.</summary>
    public const int OldTaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_oldTaskList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> oldTaskList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OldTaskList {
      get { return oldTaskList_; }
    }

    /// <summary>Field number for the "newTaskList" field.</summary>
    public const int NewTaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.DomesticationTask> _repeated_newTaskList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.DomesticationTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.DomesticationTask> newTaskList_ = new pbc::RepeatedField<global::Packet.DomesticationTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DomesticationTask> NewTaskList {
      get { return newTaskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      oldTaskList_.WriteTo(output, _repeated_oldTaskList_codec);
      newTaskList_.WriteTo(output, _repeated_newTaskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += oldTaskList_.CalculateSize(_repeated_oldTaskList_codec);
      size += newTaskList_.CalculateSize(_repeated_newTaskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            oldTaskList_.AddEntriesFrom(input, _repeated_oldTaskList_codec);
            break;
          }
          case 18: {
            newTaskList_.AddEntriesFrom(input, _repeated_newTaskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加驯请求
  /// </summary>
  public sealed class CmdPetDomesticationAddReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationAddReq> _parser = new pb::MessageParser<CmdPetDomesticationAddReq>(() => new CmdPetDomesticationAddReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationAddReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPetDomesticationAddRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationAddRes> _parser = new pb::MessageParser<CmdPetDomesticationAddRes>(() => new CmdPetDomesticationAddRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationAddRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Packet.DomesticationTask task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DomesticationTask Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::Packet.DomesticationTask();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得驯养通知
  /// </summary>
  public sealed class CmdPetDomesticationExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDomesticationExpNtf> _parser = new pb::MessageParser<CmdPetDomesticationExpNtf>(() => new CmdPetDomesticationExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDomesticationExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private uint num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLockPetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLockPetReq> _parser = new pb::MessageParser<CmdPetLockPetReq>(() => new CmdPetLockPetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLockPetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private uint uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 2;
    private bool islocked_;
    /// <summary>
    ///true 上锁 false解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uuid);
      }
      if (Islocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Islocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uuid);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt32();
            break;
          }
          case 16: {
            Islocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetLockPetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetLockPetRes> _parser = new pb::MessageParser<CmdPetLockPetRes>(() => new CmdPetLockPetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetLockPetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private uint uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 2;
    private bool islocked_;
    /// <summary>
    ///true 上锁 false解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uuid);
      }
      if (Islocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Islocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uuid);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt32();
            break;
          }
          case 16: {
            Islocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///激活宠物外观
  /// </summary>
  public sealed class CmdPetActiveFashionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActiveFashionReq> _parser = new pb::MessageParser<CmdPetActiveFashionReq>(() => new CmdPetActiveFashionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActiveFashionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetActiveFashionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActiveFashionRes> _parser = new pb::MessageParser<CmdPetActiveFashionRes>(() => new CmdPetActiveFashionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActiveFashionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///激活宠物外观颜色
  /// </summary>
  public sealed class CmdPetActiveFashionColorReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActiveFashionColorReq> _parser = new pb::MessageParser<CmdPetActiveFashionColorReq>(() => new CmdPetActiveFashionColorReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActiveFashionColorReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "colorIndex" field.</summary>
    public const int ColorIndexFieldNumber = 2;
    private uint colorIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorIndex {
      get { return colorIndex_; }
      set {
        colorIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ColorIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ColorIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ColorIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ColorIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetActiveFashionColorRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetActiveFashionColorRes> _parser = new pb::MessageParser<CmdPetActiveFashionColorRes>(() => new CmdPetActiveFashionColorRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetActiveFashionColorRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "colorIndex" field.</summary>
    public const int ColorIndexFieldNumber = 2;
    private uint colorIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorIndex {
      get { return colorIndex_; }
      set {
        colorIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ColorIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ColorIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ColorIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ColorIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿脱宠物外观
  /// </summary>
  public sealed class CmdPetDressOnOffFashionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDressOnOffFashionReq> _parser = new pb::MessageParser<CmdPetDressOnOffFashionReq>(() => new CmdPetDressOnOffFashionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDressOnOffFashionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1:穿 2:脱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 3;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "colorIndex" field.</summary>
    public const int ColorIndexFieldNumber = 4;
    private uint colorIndex_;
    /// <summary>
    ///0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorIndex {
      get { return colorIndex_; }
      set {
        colorIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (FashionId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FashionId);
      }
      if (ColorIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ColorIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ColorIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 32: {
            ColorIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPetDressOnOffFashionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPetDressOnOffFashionRes> _parser = new pb::MessageParser<CmdPetDressOnOffFashionRes>(() => new CmdPetDressOnOffFashionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPetDressOnOffFashionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1:穿 2:脱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 3;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "colorIndex" field.</summary>
    public const int ColorIndexFieldNumber = 4;
    private uint colorIndex_;
    /// <summary>
    ///0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorIndex {
      get { return colorIndex_; }
      set {
        colorIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (FashionId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FashionId);
      }
      if (ColorIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ColorIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ColorIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 32: {
            ColorIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
