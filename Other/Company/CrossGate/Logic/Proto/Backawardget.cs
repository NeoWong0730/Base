// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backawardget.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 9400+
  /// </summary>
  public enum CmdBackAwardGet {
    None = 0,
    /// <summary>
    ///获取回归奖励找回数据
    /// </summary>
    GetDataReq = 9401,
    GetDataRes = 9402,
    /// <summary>
    ///领取回归奖励找回的奖励
    /// </summary>
    GetAwardReq = 9403,
    GetAwardRes = 9404,
    /// <summary>
    ///红点提示
    /// </summary>
    RedTipsNtf = 9410,
  }

  public enum ErrorBackAwardGet {
    None = 0,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 9401,
    /// <summary>
    ///奖励index错误
    /// </summary>
    AwardIndex = 9402,
    /// <summary>
    ///已经领取过了
    /// </summary>
    AwardGeted = 9403,
    /// <summary>
    ///表配置错误
    /// </summary>
    DropId = 9404,
    /// <summary>
    ///领取奖励参数错误
    /// </summary>
    GetAwardParam = 9405,
    /// <summary>
    ///不是回归用户
    /// </summary>
    NotActivityReturn = 9406,
    /// <summary>
    ///不在奖励找回时间
    /// </summary>
    NotInTime = 9407,
  }

  /// <summary>
  ///回归奖励找回分组
  /// </summary>
  public enum BackAwardGetGroup {
    None = 0,
    /// <summary>
    ///旅人组
    /// </summary>
    Lvren = 1,
    /// <summary>
    ///勇者组
    /// </summary>
    Yongzhe = 2,
    /// <summary>
    ///宗师组
    /// </summary>
    Zongshi = 3,
  }

  /// <summary>
  ///回归奖励找回活动类型
  /// </summary>
  public enum BackAwardGetActivityType {
    None = 0,
    /// <summary>
    ///每日活动
    /// </summary>
    Day = 1,
    /// <summary>
    ///限时活动
    /// </summary>
    LimitTime = 2,
  }

  /// <summary>
  ///回归奖励找回奖励类型
  /// </summary>
  public enum BackAwardGetAwardType {
    None = 0,
    /// <summary>
    ///免费奖励
    /// </summary>
    Free = 1,
    /// <summary>
    ///付费奖励
    /// </summary>
    Pay = 2,
  }

  public enum BackAwardGetActiveReason {
    None = 0,
    /// <summary>
    ///领取回归奖励找回奖励
    /// </summary>
    BackAwardGet = 9401,
  }

  #endregion

  #region Messages
  /// <summary>
  ///奖励领取情况
  /// </summary>
  public sealed class AwardGetData : pb::IMessage {
    private static readonly pb::MessageParser<AwardGetData> _parser = new pb::MessageParser<AwardGetData>(() => new AwardGetData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardGetData> Parser { get { return _parser; } }

    /// <summary>Field number for the "freeGet" field.</summary>
    public const int FreeGetFieldNumber = 1;
    private uint freeGet_;
    /// <summary>
    ///免费领取情况 bit位   010101 (bit低位) 按照奖励排序index标识  1为已领取 0为未领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeGet {
      get { return freeGet_; }
      set {
        freeGet_ = value;
      }
    }

    /// <summary>Field number for the "payGet" field.</summary>
    public const int PayGetFieldNumber = 2;
    private uint payGet_;
    /// <summary>
    ///付费领取情况 bit位   010101 (bit低位) 按照奖励排序index标识  1为已领取 0为未领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PayGet {
      get { return payGet_; }
      set {
        payGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeGet != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FreeGet);
      }
      if (PayGet != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PayGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeGet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeGet);
      }
      if (PayGet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PayGet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeGet = input.ReadUInt32();
            break;
          }
          case 16: {
            PayGet = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdBackAwardGet_GetDataReq = 9401; //获取回归奖励找回数据
  /// </summary>
  public sealed class CmdBackAwardGetGetDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBackAwardGetGetDataReq> _parser = new pb::MessageParser<CmdBackAwardGetGetDataReq>(() => new CmdBackAwardGetGetDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBackAwardGetGetDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private uint activityType_;
    /// <summary>
    ///活动类型 BackAwardGetActivityType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBackAwardGetGetDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBackAwardGetGetDataRes> _parser = new pb::MessageParser<CmdBackAwardGetGetDataRes>(() => new CmdBackAwardGetGetDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBackAwardGetGetDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private uint activityType_;
    /// <summary>
    ///活动类型 BackAwardGetActivityType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "awardGet" field.</summary>
    public const int AwardGetFieldNumber = 4;
    private global::Packet.AwardGetData awardGet_;
    /// <summary>
    ///奖励领取情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.AwardGetData AwardGet {
      get { return awardGet_; }
      set {
        awardGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityType);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
      if (awardGet_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AwardGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityType);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (awardGet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardGet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 34: {
            if (awardGet_ == null) {
              awardGet_ = new global::Packet.AwardGetData();
            }
            input.ReadMessage(awardGet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdBackAwardGet_GetAwardReq = 9403; //领取回归奖励找回的奖励
  /// </summary>
  public sealed class CmdBackAwardGetGetAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBackAwardGetGetAwardReq> _parser = new pb::MessageParser<CmdBackAwardGetGetAwardReq>(() => new CmdBackAwardGetGetAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBackAwardGetGetAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private uint activityType_;
    /// <summary>
    ///活动类型 BackAwardGetActivityType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "awardType" field.</summary>
    public const int AwardTypeFieldNumber = 2;
    private uint awardType_;
    /// <summary>
    ///奖励类型 BackAwardGetAwardType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///奖励所处的index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityType);
      }
      if (AwardType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardType);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityType);
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardType = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdBackAwardGet_GetAwardRes = 9404;
  /// </summary>
  public sealed class CmdBackAwardGetGetAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBackAwardGetGetAwardRes> _parser = new pb::MessageParser<CmdBackAwardGetGetAwardRes>(() => new CmdBackAwardGetGetAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBackAwardGetGetAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private uint activityType_;
    /// <summary>
    ///活动类型 BackAwardGetActivityType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "awardType" field.</summary>
    public const int AwardTypeFieldNumber = 2;
    private uint awardType_;
    /// <summary>
    ///奖励类型 BackAwardGetAwardType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///奖励所处的index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityType);
      }
      if (AwardType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardType);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityType);
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardType = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdBackAwardGet_RedTipsNtf = 9410; //红点提示
  /// </summary>
  public sealed class CmdBackAwardGetRedTipsNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBackAwardGetRedTipsNtf> _parser = new pb::MessageParser<CmdBackAwardGetRedTipsNtf>(() => new CmdBackAwardGetRedTipsNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBackAwardGetRedTipsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
