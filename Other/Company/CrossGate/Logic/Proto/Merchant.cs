// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: merchant.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 9700+
  /// </summary>
  public enum CmdMerchant {
    None = 0,
    /// <summary>
    ///获取商队信息
    /// </summary>
    GetInfoReq = 9700,
    GetInfoRes = 9701,
    /// <summary>
    ///接受任务请求
    /// </summary>
    AccpetTaskReq = 9702,
    AccpetTaskRes = 9703,
    /// <summary>
    ///提交贸易任务请求
    /// </summary>
    SubmitTradeTaskReq = 9704,
    SubmitTradeTaskRes = 9705,
    /// <summary>
    ///进入贸易任务战斗请求
    /// </summary>
    FightTradeTaskReq = 9706,
    /// <summary>
    ///商队等级更新
    /// </summary>
    LevelUpNtf = 9707,
    /// <summary>
    ///请求领取等级奖励
    /// </summary>
    TakeAwardReq = 9708,
    TakeAwardRes = 9709,
    /// <summary>
    ///请求求助列表
    /// </summary>
    GetHelpListReq = 9710,
    GetHelpListRes = 9711,
    /// <summary>
    ///发布求助请求
    /// </summary>
    SeekHelpReq = 9712,
    SeekHelpRes = 9713,
    /// <summary>
    ///求助请求通知
    /// </summary>
    UpdateHelpNtf = 9714,
    /// <summary>
    ///取消求助请求
    /// </summary>
    CancelHelpReq = 9715,
    CancelHelpRes = 9716,
    /// <summary>
    ///完成他人求助请求
    /// </summary>
    SubmitHelpReq = 9717,
    SubmitHelpRes = 9718,
    /// <summary>
    ///求助状态通知
    /// </summary>
    HelpStateNtf = 9719,
    /// <summary>
    ///领取已完成的贸易任务
    /// </summary>
    ReceviceHelpReq = 9720,
    ReceviceHelpRes = 9721,
  }

  public enum ErrorMerchant {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///配置不存在
    /// </summary>
    CfgErr = 9700,
    /// <summary>
    ///无法接取跑商任务
    /// </summary>
    AccpetTask = 9701,
    /// <summary>
    ///无法提交贸易任务
    /// </summary>
    SubmitTradeTask = 9702,
    /// <summary>
    ///已到贸易任务最大次数
    /// </summary>
    TradeTaskMax = 9703,
    /// <summary>
    ///已到快速完成最大次数
    /// </summary>
    QuickMax = 9704,
    /// <summary>
    ///无法进入贸易任务战斗
    /// </summary>
    FightTradeTask = 9705,
    /// <summary>
    ///等级奖励已领取
    /// </summary>
    LvAward = 9706,
    /// <summary>
    ///玩家身上没有上交贸易任务
    /// </summary>
    NoSubmitTrade = 9707,
    /// <summary>
    ///该法兰商队求助正在被他人完成或取消中
    /// </summary>
    HelpLock = 9708,
    /// <summary>
    ///该法兰商队求助已被他人完成或取消
    /// </summary>
    HelpFinished = 9709,
    /// <summary>
    ///未找到对应的法兰商队求助id
    /// </summary>
    HelpIdErr = 9710,
    /// <summary>
    ///法兰商队帮助次数已达上限
    /// </summary>
    HelpCountMax = 9711,
    /// <summary>
    ///法兰商队协助未找到家族
    /// </summary>
    NoGuild = 9712,
    /// <summary>
    ///没有可领取的法兰商队求助
    /// </summary>
    HelpNoFinished = 9713,
    /// <summary>
    ///跨服上无法进行法兰商队相关操作
    /// </summary>
    KuaFu = 9714,
    /// <summary>
    ///法兰商队求助次数已达上限
    /// </summary>
    SeekHelpCountMax = 9715,
    /// <summary>
    ///法兰商队功能未开启
    /// </summary>
    FunctionNotOpen = 9716,
  }

  public enum MerchantActiveReason {
    None = 0,
    /// <summary>
    ///法兰商队贸易任务
    /// </summary>
    TradeTask = 9700,
    /// <summary>
    ///法兰商队等级奖励
    /// </summary>
    Level = 9701,
    /// <summary>
    ///法兰商队贸易求助
    /// </summary>
    HelpTradeTask = 9702,
  }

  #endregion

  #region Messages
  /// <summary>
  ///获取商队信息
  /// </summary>
  public sealed class CmdMerchantGetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantGetInfoReq> _parser = new pb::MessageParser<CmdMerchantGetInfoReq>(() => new CmdMerchantGetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantGetInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantGetInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantGetInfoRes> _parser = new pb::MessageParser<CmdMerchantGetInfoRes>(() => new CmdMerchantGetInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantGetInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///商队等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    ///商队经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "awardTake" field.</summary>
    public const int AwardTakeFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_awardTake_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> awardTake_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已领取等级奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardTake {
      get { return awardTake_; }
    }

    /// <summary>Field number for the "tradeTaskCount" field.</summary>
    public const int TradeTaskCountFieldNumber = 4;
    private uint tradeTaskCount_;
    /// <summary>
    ///本周贸易次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeTaskCount {
      get { return tradeTaskCount_; }
      set {
        tradeTaskCount_ = value;
      }
    }

    /// <summary>Field number for the "taskCount" field.</summary>
    public const int TaskCountFieldNumber = 5;
    private uint taskCount_;
    /// <summary>
    ///任务轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskCount {
      get { return taskCount_; }
      set {
        taskCount_ = value;
      }
    }

    /// <summary>Field number for the "tradeTaskIndex" field.</summary>
    public const int TradeTaskIndexFieldNumber = 6;
    private uint tradeTaskIndex_;
    /// <summary>
    ///贸易任务index,对应配置表中下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeTaskIndex {
      get { return tradeTaskIndex_; }
      set {
        tradeTaskIndex_ = value;
      }
    }

    /// <summary>Field number for the "quickCount" field.</summary>
    public const int QuickCountFieldNumber = 7;
    private uint quickCount_;
    /// <summary>
    ///快速完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuickCount {
      get { return quickCount_; }
      set {
        quickCount_ = value;
      }
    }

    /// <summary>Field number for the "helpCount" field.</summary>
    public const int HelpCountFieldNumber = 8;
    private uint helpCount_;
    /// <summary>
    ///帮助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HelpCount {
      get { return helpCount_; }
      set {
        helpCount_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 9;
    private uint taskId_;
    /// <summary>
    ///跑商任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "seekHelpCount" field.</summary>
    public const int SeekHelpCountFieldNumber = 10;
    private uint seekHelpCount_;
    /// <summary>
    ///求助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeekHelpCount {
      get { return seekHelpCount_; }
      set {
        seekHelpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
      awardTake_.WriteTo(output, _repeated_awardTake_codec);
      if (TradeTaskCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TradeTaskCount);
      }
      if (TaskCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TaskCount);
      }
      if (TradeTaskIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TradeTaskIndex);
      }
      if (QuickCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(QuickCount);
      }
      if (HelpCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HelpCount);
      }
      if (TaskId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TaskId);
      }
      if (SeekHelpCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SeekHelpCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      size += awardTake_.CalculateSize(_repeated_awardTake_codec);
      if (TradeTaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeTaskCount);
      }
      if (TaskCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskCount);
      }
      if (TradeTaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeTaskIndex);
      }
      if (QuickCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuickCount);
      }
      if (HelpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HelpCount);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (SeekHelpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeekHelpCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            awardTake_.AddEntriesFrom(input, _repeated_awardTake_codec);
            break;
          }
          case 32: {
            TradeTaskCount = input.ReadUInt32();
            break;
          }
          case 40: {
            TaskCount = input.ReadUInt32();
            break;
          }
          case 48: {
            TradeTaskIndex = input.ReadUInt32();
            break;
          }
          case 56: {
            QuickCount = input.ReadUInt32();
            break;
          }
          case 64: {
            HelpCount = input.ReadUInt32();
            break;
          }
          case 72: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 80: {
            SeekHelpCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///接受任务请求
  /// </summary>
  public sealed class CmdMerchantAccpetTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantAccpetTaskReq> _parser = new pb::MessageParser<CmdMerchantAccpetTaskReq>(() => new CmdMerchantAccpetTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantAccpetTaskReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantAccpetTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantAccpetTaskRes> _parser = new pb::MessageParser<CmdMerchantAccpetTaskRes>(() => new CmdMerchantAccpetTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantAccpetTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///跑商任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///提交贸易任务请求
  /// </summary>
  public sealed class CmdMerchantSubmitTradeTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSubmitTradeTaskReq> _parser = new pb::MessageParser<CmdMerchantSubmitTradeTaskReq>(() => new CmdMerchantSubmitTradeTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSubmitTradeTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "quick" field.</summary>
    public const int QuickFieldNumber = 1;
    private bool quick_;
    /// <summary>
    ///使用魔币快速完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Quick {
      get { return quick_; }
      set {
        quick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Quick != false) {
        output.WriteRawTag(8);
        output.WriteBool(Quick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Quick != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Quick = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMerchantSubmitTradeTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSubmitTradeTaskRes> _parser = new pb::MessageParser<CmdMerchantSubmitTradeTaskRes>(() => new CmdMerchantSubmitTradeTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSubmitTradeTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "quickCount" field.</summary>
    public const int QuickCountFieldNumber = 1;
    private uint quickCount_;
    /// <summary>
    ///快速完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuickCount {
      get { return quickCount_; }
      set {
        quickCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QuickCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(QuickCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QuickCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuickCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QuickCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入贸易任务战斗请求
  /// </summary>
  public sealed class CmdMerchantFightTradeTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantFightTradeTaskReq> _parser = new pb::MessageParser<CmdMerchantFightTradeTaskReq>(() => new CmdMerchantFightTradeTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantFightTradeTaskReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///商队等级更新
  /// </summary>
  public sealed class CmdMerchantLevelUpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantLevelUpNtf> _parser = new pb::MessageParser<CmdMerchantLevelUpNtf>(() => new CmdMerchantLevelUpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantLevelUpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///商队等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    ///商队经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取等级奖励
  /// </summary>
  public sealed class CmdMerchantTakeAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantTakeAwardReq> _parser = new pb::MessageParser<CmdMerchantTakeAwardReq>(() => new CmdMerchantTakeAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantTakeAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///infoID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMerchantTakeAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantTakeAwardRes> _parser = new pb::MessageParser<CmdMerchantTakeAwardRes>(() => new CmdMerchantTakeAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantTakeAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///infoID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///求助信息
  /// </summary>
  public sealed class MerchantHelpInfo : pb::IMessage {
    private static readonly pb::MessageParser<MerchantHelpInfo> _parser = new pb::MessageParser<MerchantHelpInfo>(() => new MerchantHelpInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerchantHelpInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///委托者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "tradeTaskIndex" field.</summary>
    public const int TradeTaskIndexFieldNumber = 4;
    private uint tradeTaskIndex_;
    /// <summary>
    ///贸易任务index,对应配置表中下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeTaskIndex {
      get { return tradeTaskIndex_; }
      set {
        tradeTaskIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (TradeTaskIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TradeTaskIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (TradeTaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradeTaskIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            TradeTaskIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求求助列表
  /// </summary>
  public sealed class CmdMerchantGetHelpListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantGetHelpListReq> _parser = new pb::MessageParser<CmdMerchantGetHelpListReq>(() => new CmdMerchantGetHelpListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantGetHelpListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantGetHelpListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantGetHelpListRes> _parser = new pb::MessageParser<CmdMerchantGetHelpListRes>(() => new CmdMerchantGetHelpListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantGetHelpListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MerchantHelpInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MerchantHelpInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MerchantHelpInfo> infoList_ = new pbc::RepeatedField<global::Packet.MerchantHelpInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MerchantHelpInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发布求助请求
  /// </summary>
  public sealed class CmdMerchantSeekHelpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSeekHelpReq> _parser = new pb::MessageParser<CmdMerchantSeekHelpReq>(() => new CmdMerchantSeekHelpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSeekHelpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantSeekHelpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSeekHelpRes> _parser = new pb::MessageParser<CmdMerchantSeekHelpRes>(() => new CmdMerchantSeekHelpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSeekHelpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///求助请求通知
  /// </summary>
  public sealed class CmdMerchantUpdateHelpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantUpdateHelpNtf> _parser = new pb::MessageParser<CmdMerchantUpdateHelpNtf>(() => new CmdMerchantUpdateHelpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantUpdateHelpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.MerchantHelpInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MerchantHelpInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 2;
    private bool add_;
    /// <summary>
    ///true:增加委托 false:删除委托
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Add {
      get { return add_; }
      set {
        add_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (Add != false) {
        output.WriteRawTag(16);
        output.WriteBool(Add);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (Add != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.MerchantHelpInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            Add = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消求助请求
  /// </summary>
  public sealed class CmdMerchantCancelHelpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantCancelHelpReq> _parser = new pb::MessageParser<CmdMerchantCancelHelpReq>(() => new CmdMerchantCancelHelpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantCancelHelpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantCancelHelpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantCancelHelpRes> _parser = new pb::MessageParser<CmdMerchantCancelHelpRes>(() => new CmdMerchantCancelHelpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantCancelHelpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///完成他人求助请求
  /// </summary>
  public sealed class CmdMerchantSubmitHelpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSubmitHelpReq> _parser = new pb::MessageParser<CmdMerchantSubmitHelpReq>(() => new CmdMerchantSubmitHelpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSubmitHelpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///被协助者roleid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMerchantSubmitHelpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantSubmitHelpRes> _parser = new pb::MessageParser<CmdMerchantSubmitHelpRes>(() => new CmdMerchantSubmitHelpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantSubmitHelpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///求助状态通知
  /// </summary>
  public sealed class CmdMerchantHelpStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantHelpStateNtf> _parser = new pb::MessageParser<CmdMerchantHelpStateNtf>(() => new CmdMerchantHelpStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantHelpStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "tradeTaskHelp" field.</summary>
    public const int TradeTaskHelpFieldNumber = 1;
    private bool tradeTaskHelp_;
    /// <summary>
    ///是否有已完成的贸易任务可领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TradeTaskHelp {
      get { return tradeTaskHelp_; }
      set {
        tradeTaskHelp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeTaskHelp != false) {
        output.WriteRawTag(8);
        output.WriteBool(TradeTaskHelp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeTaskHelp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TradeTaskHelp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取已完成的贸易任务
  /// </summary>
  public sealed class CmdMerchantReceviceHelpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantReceviceHelpReq> _parser = new pb::MessageParser<CmdMerchantReceviceHelpReq>(() => new CmdMerchantReceviceHelpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantReceviceHelpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMerchantReceviceHelpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMerchantReceviceHelpRes> _parser = new pb::MessageParser<CmdMerchantReceviceHelpRes>(() => new CmdMerchantReceviceHelpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMerchantReceviceHelpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "seekHelpCount" field.</summary>
    public const int SeekHelpCountFieldNumber = 1;
    private uint seekHelpCount_;
    /// <summary>
    ///求助次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeekHelpCount {
      get { return seekHelpCount_; }
      set {
        seekHelpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeekHelpCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeekHelpCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeekHelpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeekHelpCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeekHelpCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
