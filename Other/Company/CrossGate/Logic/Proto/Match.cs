// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///匹配模块 协议号5800开始
  /// </summary>
  public enum CmdMatch {
    None = 0,
    /// <summary>
    ///开始匹配
    /// </summary>
    StartMatchReq = 5801,
    /// <summary>
    ///取消匹配
    /// </summary>
    CancelMatchReq = 5803,
    /// <summary>
    ///前端告诉活动结束
    /// </summary>
    ActiveFinishReq = 5804,
    /// <summary>
    ///推送匹配面板关闭
    /// </summary>
    NotifyMatchPanelClose = 5805,
    /// <summary>
    ///推送匹配面板打开
    /// </summary>
    NotifyMatchPanelOpen = 5806,
    /// <summary>
    ///推送加载面板关闭
    /// </summary>
    NotifyLoadPanelClose = 5807,
    /// <summary>
    ///推送加载面板打开
    /// </summary>
    NotifyLoadPanelOpen = 5808,
    /// <summary>
    ///推送匹配者详情
    /// </summary>
    NotifyMatcherInfo = 5809,
    /// <summary>
    ///推送匹配者准备状态
    /// </summary>
    NotifyMatcherLoadOk = 5810,
  }

  public enum ErrorMatch {
    None = 0,
    /// <summary>
    ///未连接到任何场景服
    /// </summary>
    NoneSceneSvrConnected = 5801,
    /// <summary>
    ///未连接到任何跨服场景服
    /// </summary>
    NoneCrossSvrConnected = 5802,
    /// <summary>
    ///未知玩家
    /// </summary>
    PlayerNotExist = 5803,
    /// <summary>
    ///玩家正在匹配
    /// </summary>
    PlayerIsMatching = 5804,
    /// <summary>
    ///玩家未在匹配
    /// </summary>
    PlayerIsNotMatching = 5805,
    /// <summary>
    ///该战斗服未连接
    /// </summary>
    BattleNotConnected = 5806,
    /// <summary>
    ///未知匹配类型
    /// </summary>
    UnknownMatchType = 5807,
    /// <summary>
    ///当前状态不允许开始匹配
    /// </summary>
    CanNotStart = 5808,
    /// <summary>
    ///当前状态不允许取消匹配
    /// </summary>
    CanNotCancel = 5809,
    /// <summary>
    ///当前不在匹配状态中
    /// </summary>
    IsNotMatching = 5810,
    /// <summary>
    ///与服务器失去链接
    /// </summary>
    LostServerConnect = 5811,
    /// <summary>
    ///不能创建匹配单元
    /// </summary>
    CanNotCreateMatchUnit = 5812,
    /// <summary>
    ///匹配表字段配置错误
    /// </summary>
    MatchCsvfieldError = 5813,
    /// <summary>
    ///失败5次
    /// </summary>
    FailFive = 5814,
    /// <summary>
    ///不能组队匹配
    /// </summary>
    CanNotTeam = 5815,
    /// <summary>
    ///队员不在同一分组
    /// </summary>
    TeamMember5816 = 5816,
    /// <summary>
    ///有队员暂离
    /// </summary>
    TeamMember5817 = 5817,
    /// <summary>
    ///有队员离线
    /// </summary>
    TeamMember5818 = 5818,
    /// <summary>
    ///您处于暂离
    /// </summary>
    TeamMember5819 = 5819,
    /// <summary>
    ///您不是队长
    /// </summary>
    TeamMember5820 = 5820,
    /// <summary>
    ///匹配终止
    /// </summary>
    TerminateMatch = 5821,
    /// <summary>
    ///不在指定地图
    /// </summary>
    NotInSpecialMap = 5822,
    /// <summary>
    ///未知匹配类型
    /// </summary>
    UnknowMatchType = 5823,
    /// <summary>
    ///活动还未开启
    /// </summary>
    DayNotOpen = 5824,
  }

  /// <summary>
  ///战斗结果
  /// </summary>
  public enum EFightResult {
    /// <summary>
    ///赢
    /// </summary>
    FightResultWin = 0,
    /// <summary>
    ///输
    /// </summary>
    FightResultFail = 1,
    /// <summary>
    ///平局
    /// </summary>
    FightResultDraw = 2,
  }

  /// <summary>
  ///匹配类型
  /// </summary>
  public enum EMatchType {
    /// <summary>
    ///无效值
    /// </summary>
    MatchTypeNone = 0,
    /// <summary>
    ///荣耀竞技场
    /// </summary>
    MatchTypeArena = 1,
    /// <summary>
    ///生存竞技场(本服)
    /// </summary>
    MatchTypeSurvival = 2,
    /// <summary>
    ///生存竞技场(跨组)
    /// </summary>
    MatchTypeSurvivalGp = 3,
    /// <summary>
    ///休闲天梯竞技场
    /// </summary>
    MatchTypeTtleisure = 4,
    /// <summary>
    ///段位天梯竞技场
    /// </summary>
    MatchTypeTtdanLv = 5,
    /// <summary>
    ///最大无效值
    /// </summary>
    MatchTypeMax = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///角色基础信息
  /// </summary>
  public sealed class PlayerBase : pb::IMessage {
    private static readonly pb::MessageParser<PlayerBase> _parser = new pb::MessageParser<PlayerBase>(() => new PlayerBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 2;
    private uint power_;
    /// <summary>
    ///综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 4;
    private uint fashionId_;
    /// <summary>
    ///时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 6;
    private uint headFrame_;
    /// <summary>
    ///头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    /// <summary>Field number for the "headPhoto" field.</summary>
    public const int HeadPhotoFieldNumber = 7;
    private uint headPhoto_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadPhoto {
      get { return headPhoto_; }
      set {
        headPhoto_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 8;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Power);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (FashionId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FashionId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Name);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeadFrame);
      }
      if (HeadPhoto != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HeadPhoto);
      }
      if (Career != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrame);
      }
      if (HeadPhoto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadPhoto);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Power = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 42: {
            Name = input.ReadBytes();
            break;
          }
          case 48: {
            HeadFrame = input.ReadUInt32();
            break;
          }
          case 56: {
            HeadPhoto = input.ReadUInt32();
            break;
          }
          case 64: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色荣耀竞技场信息
  /// </summary>
  public sealed class PlayerArena : pb::IMessage {
    private static readonly pb::MessageParser<PlayerArena> _parser = new pb::MessageParser<PlayerArena>(() => new PlayerArena());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerArena> Parser { get { return _parser; } }

    /// <summary>Field number for the "dan" field.</summary>
    public const int DanFieldNumber = 1;
    private uint dan_;
    /// <summary>
    ///段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dan {
      get { return dan_; }
      set {
        dan_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 3;
    private uint star_;
    /// <summary>
    ///星星
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 4;
    private uint third_;
    /// <summary>
    ///赛区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dan != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Dan);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Star != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Star);
      }
      if (Third != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Third);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dan != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dan);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Star);
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dan = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Star = input.ReadUInt32();
            break;
          }
          case 32: {
            Third = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色休闲天梯竞技场信息
  /// </summary>
  public sealed class PlayerTTLeisure : pb::IMessage {
    private static readonly pb::MessageParser<PlayerTTLeisure> _parser = new pb::MessageParser<PlayerTTLeisure>(() => new PlayerTTLeisure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTTLeisure> Parser { get { return _parser; } }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 4;
    private uint third_;
    /// <summary>
    ///uint32 dan                          = 1;//段位
    ///uint32 level                        = 2;//等级
    ///uint32 star                         = 3;//星星
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private uint score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Third != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Third);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            Third = input.ReadUInt32();
            break;
          }
          case 40: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色段位天梯竞技场信息
  /// </summary>
  public sealed class PlayerTTDanLv : pb::IMessage {
    private static readonly pb::MessageParser<PlayerTTDanLv> _parser = new pb::MessageParser<PlayerTTDanLv>(() => new PlayerTTDanLv());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTTDanLv> Parser { get { return _parser; } }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 4;
    private uint third_;
    /// <summary>
    ///uint32 dan                          = 1;//段位
    ///uint32 level                        = 2;//等级
    ///uint32 star                         = 3;//星星
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private uint score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Third != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Third);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            Third = input.ReadUInt32();
            break;
          }
          case 40: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色生存竞技场信息
  /// </summary>
  public sealed class PlayerSurvival : pb::IMessage {
    private static readonly pb::MessageParser<PlayerSurvival> _parser = new pb::MessageParser<PlayerSurvival>(() => new PlayerSurvival());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSurvival> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    /// <summary>
    ///战绩分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 2;
    private uint join_;
    /// <summary>
    ///参加次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private uint win_;
    /// <summary>
    ///胜利次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 4;
    private uint third_;
    /// <summary>
    ///赛区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
      if (Join != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Join);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Win);
      }
      if (Third != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Third);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
          case 16: {
            Join = input.ReadUInt32();
            break;
          }
          case 24: {
            Win = input.ReadUInt32();
            break;
          }
          case 32: {
            Third = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色伙伴列表
  /// </summary>
  public sealed class PlayerPartner : pb::IMessage {
    private static readonly pb::MessageParser<PlayerPartner> _parser = new pb::MessageParser<PlayerPartner>(() => new PlayerPartner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPartner> Parser { get { return _parser; } }

    /// <summary>Field number for the "ptners" field.</summary>
    public const int PtnersFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_ptners_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> ptners_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///伙伴列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Ptners {
      get { return ptners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ptners_.WriteTo(output, _repeated_ptners_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ptners_.CalculateSize(_repeated_ptners_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            ptners_.AddEntriesFrom(input, _repeated_ptners_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///载入界面的一个战斗单元
  /// </summary>
  public sealed class FightPlayer : pb::IMessage {
    private static readonly pb::MessageParser<FightPlayer> _parser = new pb::MessageParser<FightPlayer>(() => new FightPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "gamesvrId" field.</summary>
    public const int GamesvrIdFieldNumber = 2;
    private uint gamesvrId_;
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesvrId {
      get { return gamesvrId_; }
      set {
        gamesvrId_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 3;
    private global::Packet.PlayerBase base_;
    /// <summary>
    ///基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 4;
    private global::Packet.PlayerArena arena_;
    /// <summary>
    ///荣耀竞技场信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerArena Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    /// <summary>Field number for the "survival" field.</summary>
    public const int SurvivalFieldNumber = 5;
    private global::Packet.PlayerSurvival survival_;
    /// <summary>
    ///生存竞技场信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerSurvival Survival {
      get { return survival_; }
      set {
        survival_ = value;
      }
    }

    /// <summary>Field number for the "partner" field.</summary>
    public const int PartnerFieldNumber = 6;
    private global::Packet.PlayerPartner partner_;
    /// <summary>
    ///伙伴列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerPartner Partner {
      get { return partner_; }
      set {
        partner_ = value;
      }
    }

    /// <summary>Field number for the "ttleisure" field.</summary>
    public const int TtleisureFieldNumber = 7;
    private global::Packet.PlayerTTLeisure ttleisure_;
    /// <summary>
    ///休闲天梯竞技场信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerTTLeisure Ttleisure {
      get { return ttleisure_; }
      set {
        ttleisure_ = value;
      }
    }

    /// <summary>Field number for the "ttdanlv" field.</summary>
    public const int TtdanlvFieldNumber = 8;
    private global::Packet.PlayerTTDanLv ttdanlv_;
    /// <summary>
    ///段位天梯竞技场信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PlayerTTDanLv Ttdanlv {
      get { return ttdanlv_; }
      set {
        ttdanlv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (GamesvrId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GamesvrId);
      }
      if (base_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Base);
      }
      if (arena_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Arena);
      }
      if (survival_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Survival);
      }
      if (partner_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Partner);
      }
      if (ttleisure_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Ttleisure);
      }
      if (ttdanlv_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Ttdanlv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (GamesvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesvrId);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (arena_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arena);
      }
      if (survival_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Survival);
      }
      if (partner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      if (ttleisure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ttleisure);
      }
      if (ttdanlv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ttdanlv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            GamesvrId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (base_ == null) {
              base_ = new global::Packet.PlayerBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 34: {
            if (arena_ == null) {
              arena_ = new global::Packet.PlayerArena();
            }
            input.ReadMessage(arena_);
            break;
          }
          case 42: {
            if (survival_ == null) {
              survival_ = new global::Packet.PlayerSurvival();
            }
            input.ReadMessage(survival_);
            break;
          }
          case 50: {
            if (partner_ == null) {
              partner_ = new global::Packet.PlayerPartner();
            }
            input.ReadMessage(partner_);
            break;
          }
          case 58: {
            if (ttleisure_ == null) {
              ttleisure_ = new global::Packet.PlayerTTLeisure();
            }
            input.ReadMessage(ttleisure_);
            break;
          }
          case 66: {
            if (ttdanlv_ == null) {
              ttdanlv_ = new global::Packet.PlayerTTDanLv();
            }
            input.ReadMessage(ttdanlv_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///载入界面的战斗单元列表
  /// </summary>
  public sealed class FightPlayerList : pb::IMessage {
    private static readonly pb::MessageParser<FightPlayerList> _parser = new pb::MessageParser<FightPlayerList>(() => new FightPlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightPlayerList> Parser { get { return _parser; } }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FightPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FightPlayer.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightPlayer> players_ = new pbc::RepeatedField<global::Packet.FightPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightPlayer> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗单元载入ok的列表
  /// </summary>
  public sealed class FightPlayerOkList : pb::IMessage {
    private static readonly pb::MessageParser<FightPlayerOkList> _parser = new pb::MessageParser<FightPlayerOkList>(() => new FightPlayerOkList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightPlayerOkList> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roles_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roles_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///角色id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMatchStartMatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchStartMatchReq> _parser = new pb::MessageParser<CmdMatchStartMatchReq>(() => new CmdMatchStartMatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchStartMatchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "matchtype" field.</summary>
    public const int MatchtypeFieldNumber = 1;
    private uint matchtype_;
    /// <summary>
    ///匹配类型 EMatchType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchtype {
      get { return matchtype_; }
      set {
        matchtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Matchtype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Matchtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Matchtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Matchtype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdMatchCancelMatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchCancelMatchReq> _parser = new pb::MessageParser<CmdMatchCancelMatchReq>(() => new CmdMatchCancelMatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchCancelMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdMatchActiveFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchActiveFinishReq> _parser = new pb::MessageParser<CmdMatchActiveFinishReq>(() => new CmdMatchActiveFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchActiveFinishReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdMatchNotifyMatchPanelClose : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyMatchPanelClose> _parser = new pb::MessageParser<CmdMatchNotifyMatchPanelClose>(() => new CmdMatchNotifyMatchPanelClose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyMatchPanelClose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMatchNotifyMatchPanelOpen : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyMatchPanelOpen> _parser = new pb::MessageParser<CmdMatchNotifyMatchPanelOpen>(() => new CmdMatchNotifyMatchPanelOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyMatchPanelOpen> Parser { get { return _parser; } }

    /// <summary>Field number for the "matchtype" field.</summary>
    public const int MatchtypeFieldNumber = 1;
    private uint matchtype_;
    /// <summary>
    ///匹配类型 EMatchType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchtype {
      get { return matchtype_; }
      set {
        matchtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Matchtype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Matchtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Matchtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Matchtype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdMatchNotifyLoadPanelClose : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyLoadPanelClose> _parser = new pb::MessageParser<CmdMatchNotifyLoadPanelClose>(() => new CmdMatchNotifyLoadPanelClose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyLoadPanelClose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMatchNotifyLoadPanelOpen : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyLoadPanelOpen> _parser = new pb::MessageParser<CmdMatchNotifyLoadPanelOpen>(() => new CmdMatchNotifyLoadPanelOpen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyLoadPanelOpen> Parser { get { return _parser; } }

    /// <summary>Field number for the "matchtype" field.</summary>
    public const int MatchtypeFieldNumber = 1;
    private uint matchtype_;
    /// <summary>
    ///匹配类型 EMatchType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Matchtype {
      get { return matchtype_; }
      set {
        matchtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Matchtype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Matchtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Matchtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Matchtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Matchtype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMatchNotifyMatcherInfo : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyMatcherInfo> _parser = new pb::MessageParser<CmdMatchNotifyMatcherInfo>(() => new CmdMatchNotifyMatcherInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyMatcherInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private global::Packet.FightPlayerList red_;
    /// <summary>
    ///红方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FightPlayerList Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 2;
    private global::Packet.FightPlayerList blue_;
    /// <summary>
    ///蓝方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FightPlayerList Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (red_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Red);
      }
      if (blue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Blue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (red_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Red);
      }
      if (blue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (red_ == null) {
              red_ = new global::Packet.FightPlayerList();
            }
            input.ReadMessage(red_);
            break;
          }
          case 18: {
            if (blue_ == null) {
              blue_ = new global::Packet.FightPlayerList();
            }
            input.ReadMessage(blue_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMatchNotifyMatcherLoadOk : pb::IMessage {
    private static readonly pb::MessageParser<CmdMatchNotifyMatcherLoadOk> _parser = new pb::MessageParser<CmdMatchNotifyMatcherLoadOk>(() => new CmdMatchNotifyMatcherLoadOk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMatchNotifyMatcherLoadOk> Parser { get { return _parser; } }

    /// <summary>Field number for the "oks" field.</summary>
    public const int OksFieldNumber = 1;
    private global::Packet.FightPlayerOkList oks_;
    /// <summary>
    ///载入ok的列表(包含自己)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FightPlayerOkList Oks {
      get { return oks_; }
      set {
        oks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oks_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Oks);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oks);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (oks_ == null) {
              oks_ = new global::Packet.FightPlayerOkList();
            }
            input.ReadMessage(oks_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
