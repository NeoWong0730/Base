// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosstower.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///10000+
  /// </summary>
  public enum CmdBossTower {
    None = 0,
    Begin = 10000,
    /// <summary>
    ///登录、玩法阶段更新时下发
    /// </summary>
    DataNtf = 10001,
    /// <summary>
    ///每隔一定间隔请求个人排名
    /// </summary>
    SelfRankReq = 10002,
    SelfRankNtf = 10003,
    ChallengeReq = 10004,
    ChallengeRes = 10005,
    RankListReq = 10006,
    RankListRes = 10007,
  }

  public enum ErrorBossTower {
    None = 0,
    Reserve = 10000,
    /// <summary>
    ///boss资格挑战赛相关表格未找到
    /// </summary>
    CsvnotFound = 10001,
    /// <summary>
    ///队友有机器人不能挑战
    /// </summary>
    MemHasRobot = 10002,
    /// <summary>
    ///有队员离线或者暂离
    /// </summary>
    MemNotReady = 10003,
    /// <summary>
    ///有队员等级段不满足
    /// </summary>
    LevelNotMatch = 10004,
    /// <summary>
    ///功能未解锁
    /// </summary>
    FunctionNotOpen = 10005,
    /// <summary>
    ///该层未解锁
    /// </summary>
    LayerLocked = 10006,
    /// <summary>
    ///进入战斗失败
    /// </summary>
    EnterBattleFailed = 10007,
    /// <summary>
    ///队伍人数不足
    /// </summary>
    MemNotEnough = 10008,
    /// <summary>
    ///资格赛挑战已结束
    /// </summary>
    NotChallengeTime = 10009,
    /// <summary>
    ///boss挑战已结束
    /// </summary>
    NotBossTime = 10010,
    /// <summary>
    ///有队员未解锁boss无法挑战
    /// </summary>
    MemNotUnlockBoss = 10011,
  }

  public enum BossTowerActiveReason {
    None = 0,
    Reserve = 10000,
    /// <summary>
    ///资格赛层级奖励
    /// </summary>
    QualifierReward = 10001,
    /// <summary>
    ///boss奖励
    /// </summary>
    BossReward = 10002,
  }

  public enum BossTowerState {
    /// <summary>
    ///本周活动已结束
    /// </summary>
    None = 0,
    /// <summary>
    ///资格赛
    /// </summary>
    Challenge = 1,
    /// <summary>
    ///资格赛停止挑战
    /// </summary>
    ChallengeOver = 2,
    /// <summary>
    ///boss战
    /// </summary>
    Boss = 3,
    /// <summary>
    ///boss战停止挑战
    /// </summary>
    BossOver = 4,
  }

  #endregion

  #region Messages
  public sealed class RoleBossTowerData : pb::IMessage {
    private static readonly pb::MessageParser<RoleBossTowerData> _parser = new pb::MessageParser<RoleBossTowerData>(() => new RoleBossTowerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBossTowerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 1;
    private bool join_;
    /// <summary>
    ///本周是否参与过资格赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "passedPreStageId" field.</summary>
    public const int PassedPreStageIdFieldNumber = 2;
    private uint passedPreStageId_;
    /// <summary>
    ///资格赛已通关关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassedPreStageId {
      get { return passedPreStageId_; }
      set {
        passedPreStageId_ = value;
      }
    }

    /// <summary>Field number for the "minPreRound" field.</summary>
    public const int MinPreRoundFieldNumber = 3;
    private uint minPreRound_;
    /// <summary>
    ///资格赛最高层回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPreRound {
      get { return minPreRound_; }
      set {
        minPreRound_ = value;
      }
    }

    /// <summary>Field number for the "lastPreTime" field.</summary>
    public const int LastPreTimeFieldNumber = 4;
    private uint lastPreTime_;
    /// <summary>
    ///资格赛最高回合挑战时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPreTime {
      get { return lastPreTime_; }
      set {
        lastPreTime_ = value;
      }
    }

    /// <summary>Field number for the "bossUnlock" field.</summary>
    public const int BossUnlockFieldNumber = 6;
    private bool bossUnlock_;
    /// <summary>
    ///是否解锁boss战资格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BossUnlock {
      get { return bossUnlock_; }
      set {
        bossUnlock_ = value;
      }
    }

    /// <summary>Field number for the "passedBossStageId" field.</summary>
    public const int PassedBossStageIdFieldNumber = 7;
    private uint passedBossStageId_;
    /// <summary>
    ///boss战已通关关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassedBossStageId {
      get { return passedBossStageId_; }
      set {
        passedBossStageId_ = value;
      }
    }

    /// <summary>Field number for the "minBossRound" field.</summary>
    public const int MinBossRoundFieldNumber = 8;
    private uint minBossRound_;
    /// <summary>
    ///boss赛最高层回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinBossRound {
      get { return minBossRound_; }
      set {
        minBossRound_ = value;
      }
    }

    /// <summary>Field number for the "lastBossTime" field.</summary>
    public const int LastBossTimeFieldNumber = 9;
    private uint lastBossTime_;
    /// <summary>
    ///boss赛最高回合挑战时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastBossTime {
      get { return lastBossTime_; }
      set {
        lastBossTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Join != false) {
        output.WriteRawTag(8);
        output.WriteBool(Join);
      }
      if (PassedPreStageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PassedPreStageId);
      }
      if (MinPreRound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinPreRound);
      }
      if (LastPreTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastPreTime);
      }
      if (BossUnlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(BossUnlock);
      }
      if (PassedBossStageId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PassedBossStageId);
      }
      if (MinBossRound != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MinBossRound);
      }
      if (LastBossTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LastBossTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Join != false) {
        size += 1 + 1;
      }
      if (PassedPreStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedPreStageId);
      }
      if (MinPreRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPreRound);
      }
      if (LastPreTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPreTime);
      }
      if (BossUnlock != false) {
        size += 1 + 1;
      }
      if (PassedBossStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedBossStageId);
      }
      if (MinBossRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinBossRound);
      }
      if (LastBossTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastBossTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Join = input.ReadBool();
            break;
          }
          case 16: {
            PassedPreStageId = input.ReadUInt32();
            break;
          }
          case 24: {
            MinPreRound = input.ReadUInt32();
            break;
          }
          case 32: {
            LastPreTime = input.ReadUInt32();
            break;
          }
          case 48: {
            BossUnlock = input.ReadBool();
            break;
          }
          case 56: {
            PassedBossStageId = input.ReadUInt32();
            break;
          }
          case 64: {
            MinBossRound = input.ReadUInt32();
            break;
          }
          case 72: {
            LastBossTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SysBossTowerData : pb::IMessage {
    private static readonly pb::MessageParser<SysBossTowerData> _parser = new pb::MessageParser<SysBossTowerData>(() => new SysBossTowerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysBossTowerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private uint state_;
    /// <summary>
    ///当前状态(BossTowerState)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private uint endTime_;
    /// <summary>
    ///状态结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "thirds" field.</summary>
    public const int ThirdsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.SysBossTowerData.Types.ThirdData> _repeated_thirds_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.SysBossTowerData.Types.ThirdData.Parser);
    private readonly pbc::RepeatedField<global::Packet.SysBossTowerData.Types.ThirdData> thirds_ = new pbc::RepeatedField<global::Packet.SysBossTowerData.Types.ThirdData>();
    /// <summary>
    ///各等级段数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SysBossTowerData.Types.ThirdData> Thirds {
      get { return thirds_; }
    }

    /// <summary>Field number for the "extRankNum" field.</summary>
    public const int ExtRankNumFieldNumber = 5;
    private uint extRankNum_;
    /// <summary>
    ///资格赛额外排名名额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtRankNum {
      get { return extRankNum_; }
      set {
        extRankNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTime);
      }
      if (ExtRankNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ExtRankNum);
      }
      thirds_.WriteTo(output, _repeated_thirds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      size += thirds_.CalculateSize(_repeated_thirds_codec);
      if (ExtRankNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtRankNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 40: {
            ExtRankNum = input.ReadUInt32();
            break;
          }
          case 50: {
            thirds_.AddEntriesFrom(input, _repeated_thirds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SysBossTowerData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ThirdData : pb::IMessage {
        private static readonly pb::MessageParser<ThirdData> _parser = new pb::MessageParser<ThirdData>(() => new ThirdData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ThirdData> Parser { get { return _parser; } }

        /// <summary>Field number for the "third" field.</summary>
        public const int ThirdFieldNumber = 1;
        private uint third_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Third {
          get { return third_; }
          set {
            third_ = value;
          }
        }

        /// <summary>Field number for the "featureId" field.</summary>
        public const int FeatureIdFieldNumber = 2;
        private uint featureId_;
        /// <summary>
        ///当前特性塔id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FeatureId {
          get { return featureId_; }
          set {
            featureId_ = value;
          }
        }

        /// <summary>Field number for the "baseRankNum" field.</summary>
        public const int BaseRankNumFieldNumber = 3;
        private uint baseRankNum_;
        /// <summary>
        ///资格赛基础排名数量(配置值+动态值)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseRankNum {
          get { return baseRankNum_; }
          set {
            baseRankNum_ = value;
          }
        }

        /// <summary>Field number for the "dynRoleNum" field.</summary>
        public const int DynRoleNumFieldNumber = 4;
        private uint dynRoleNum_;
        /// <summary>
        ///满足动态资格的玩家数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DynRoleNum {
          get { return dynRoleNum_; }
          set {
            dynRoleNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Third != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Third);
          }
          if (FeatureId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FeatureId);
          }
          if (BaseRankNum != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(BaseRankNum);
          }
          if (DynRoleNum != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(DynRoleNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Third != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
          }
          if (FeatureId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureId);
          }
          if (BaseRankNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseRankNum);
          }
          if (DynRoleNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DynRoleNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Third = input.ReadUInt32();
                break;
              }
              case 16: {
                FeatureId = input.ReadUInt32();
                break;
              }
              case 24: {
                BaseRankNum = input.ReadUInt32();
                break;
              }
              case 32: {
                DynRoleNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///登录、玩法阶段更新时下发
  /// </summary>
  public sealed class CmdBossTowerDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerDataNtf> _parser = new pb::MessageParser<CmdBossTowerDataNtf>(() => new CmdBossTowerDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleData" field.</summary>
    public const int RoleDataFieldNumber = 1;
    private global::Packet.RoleBossTowerData roleData_;
    /// <summary>
    ///玩家个人数据 (可能未填充, 表示只更新sysdata)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleBossTowerData RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    /// <summary>Field number for the "sysData" field.</summary>
    public const int SysDataFieldNumber = 3;
    private global::Packet.SysBossTowerData sysData_;
    /// <summary>
    ///系统公共数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SysBossTowerData SysData {
      get { return sysData_; }
      set {
        sysData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roleData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoleData);
      }
      if (sysData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SysData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      if (sysData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SysData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleData_ == null) {
              roleData_ = new global::Packet.RoleBossTowerData();
            }
            input.ReadMessage(roleData_);
            break;
          }
          case 26: {
            if (sysData_ == null) {
              sysData_ = new global::Packet.SysBossTowerData();
            }
            input.ReadMessage(sysData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取自己的资格赛排名
  ///参与过资格赛(join=true)的玩家，请求，cd 10s
  /// </summary>
  public sealed class CmdBossTowerSelfRankReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerSelfRankReq> _parser = new pb::MessageParser<CmdBossTowerSelfRankReq>(() => new CmdBossTowerSelfRankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerSelfRankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBossTowerSelfRankNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerSelfRankNtf> _parser = new pb::MessageParser<CmdBossTowerSelfRankNtf>(() => new CmdBossTowerSelfRankNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerSelfRankNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "challengeRank" field.</summary>
    public const int ChallengeRankFieldNumber = 1;
    private uint challengeRank_;
    /// <summary>
    ///玩家当前资格赛排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeRank {
      get { return challengeRank_; }
      set {
        challengeRank_ = value;
      }
    }

    /// <summary>Field number for the "extRankNum" field.</summary>
    public const int ExtRankNumFieldNumber = 3;
    private uint extRankNum_;
    /// <summary>
    ///资格赛额外排名名额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtRankNum {
      get { return extRankNum_; }
      set {
        extRankNum_ = value;
      }
    }

    /// <summary>Field number for the "cacheEndTime" field.</summary>
    public const int CacheEndTimeFieldNumber = 4;
    private uint cacheEndTime_;
    /// <summary>
    ///下次请求新数据的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CacheEndTime {
      get { return cacheEndTime_; }
      set {
        cacheEndTime_ = value;
      }
    }

    /// <summary>Field number for the "numData" field.</summary>
    public const int NumDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.CmdBossTowerSelfRankNtf.Types.NumData> _repeated_numData_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.CmdBossTowerSelfRankNtf.Types.NumData.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdBossTowerSelfRankNtf.Types.NumData> numData_ = new pbc::RepeatedField<global::Packet.CmdBossTowerSelfRankNtf.Types.NumData>();
    /// <summary>
    ///资格人数数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdBossTowerSelfRankNtf.Types.NumData> NumData {
      get { return numData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChallengeRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChallengeRank);
      }
      if (ExtRankNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExtRankNum);
      }
      if (CacheEndTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CacheEndTime);
      }
      numData_.WriteTo(output, _repeated_numData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChallengeRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRank);
      }
      if (ExtRankNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtRankNum);
      }
      if (CacheEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CacheEndTime);
      }
      size += numData_.CalculateSize(_repeated_numData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChallengeRank = input.ReadUInt32();
            break;
          }
          case 24: {
            ExtRankNum = input.ReadUInt32();
            break;
          }
          case 32: {
            CacheEndTime = input.ReadUInt32();
            break;
          }
          case 42: {
            numData_.AddEntriesFrom(input, _repeated_numData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdBossTowerSelfRankNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class NumData : pb::IMessage {
        private static readonly pb::MessageParser<NumData> _parser = new pb::MessageParser<NumData>(() => new NumData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NumData> Parser { get { return _parser; } }

        /// <summary>Field number for the "third" field.</summary>
        public const int ThirdFieldNumber = 1;
        private uint third_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Third {
          get { return third_; }
          set {
            third_ = value;
          }
        }

        /// <summary>Field number for the "curQualifierNum" field.</summary>
        public const int CurQualifierNumFieldNumber = 5;
        private uint curQualifierNum_;
        /// <summary>
        ///当前获取boss资格的人数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CurQualifierNum {
          get { return curQualifierNum_; }
          set {
            curQualifierNum_ = value;
          }
        }

        /// <summary>Field number for the "baseRankNum" field.</summary>
        public const int BaseRankNumFieldNumber = 2;
        private uint baseRankNum_;
        /// <summary>
        ///资格赛基础排名数量(配置值+动态值)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BaseRankNum {
          get { return baseRankNum_; }
          set {
            baseRankNum_ = value;
          }
        }

        /// <summary>Field number for the "dynRoleNum" field.</summary>
        public const int DynRoleNumFieldNumber = 3;
        private uint dynRoleNum_;
        /// <summary>
        ///满足动态资格的玩家数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DynRoleNum {
          get { return dynRoleNum_; }
          set {
            dynRoleNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Third != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Third);
          }
          if (BaseRankNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(BaseRankNum);
          }
          if (DynRoleNum != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(DynRoleNum);
          }
          if (CurQualifierNum != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(CurQualifierNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Third != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
          }
          if (CurQualifierNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurQualifierNum);
          }
          if (BaseRankNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseRankNum);
          }
          if (DynRoleNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DynRoleNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Third = input.ReadUInt32();
                break;
              }
              case 16: {
                BaseRankNum = input.ReadUInt32();
                break;
              }
              case 24: {
                DynRoleNum = input.ReadUInt32();
                break;
              }
              case 40: {
                CurQualifierNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///挑战资格赛
  /// </summary>
  public sealed class CmdBossTowerChallengeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerChallengeReq> _parser = new pb::MessageParser<CmdBossTowerChallengeReq>(() => new CmdBossTowerChallengeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerChallengeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    /// <summary>
    ///挑战资格赛 or boss赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///选择挑战第几层（资格赛有效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBossTowerChallengeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerChallengeRes> _parser = new pb::MessageParser<CmdBossTowerChallengeRes>(() => new CmdBossTowerChallengeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerChallengeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    /// <summary>
    ///挑战资格赛 or boss赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///投票信息
  /// </summary>
  public sealed class BossTowerVoteData : pb::IMessage {
    private static readonly pb::MessageParser<BossTowerVoteData> _parser = new pb::MessageParser<BossTowerVoteData>(() => new BossTowerVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossTowerVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    /// <summary>
    ///资格赛 or boss赛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "featureId" field.</summary>
    public const int FeatureIdFieldNumber = 2;
    private uint featureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeatureId {
      get { return featureId_; }
      set {
        featureId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private uint stageId_;
    /// <summary>
    ///当前挑战的关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BossTowerVoteData.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BossTowerVoteData.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Packet.BossTowerVoteData.Types.Player> players_ = new pbc::RepeatedField<global::Packet.BossTowerVoteData.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BossTowerVoteData.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (FeatureId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FeatureId);
      }
      if (StageId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StageId);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (FeatureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            FeatureId = input.ReadUInt32();
            break;
          }
          case 24: {
            StageId = input.ReadUInt32();
            break;
          }
          case 34: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BossTowerVoteData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Player : pb::IMessage {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "passedId" field.</summary>
        public const int PassedIdFieldNumber = 2;
        private uint passedId_;
        /// <summary>
        ///通关的资格赛/boss赛关卡id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PassedId {
          get { return passedId_; }
          set {
            passedId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (PassedId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PassedId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (PassedId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                PassedId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdBossTowerRankListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerRankListReq> _parser = new pb::MessageParser<CmdBossTowerRankListReq>(() => new CmdBossTowerRankListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerRankListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 2;
    private uint third_;
    /// <summary>
    ///等级段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    /// <summary>Field number for the "pageNum" field.</summary>
    public const int PageNumFieldNumber = 3;
    private uint pageNum_;
    /// <summary>
    ///0-n, 每页50个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { return pageNum_; }
      set {
        pageNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (Third != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Third);
      }
      if (PageNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      if (PageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            Third = input.ReadUInt32();
            break;
          }
          case 24: {
            PageNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBossTowerRankListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBossTowerRankListRes> _parser = new pb::MessageParser<CmdBossTowerRankListRes>(() => new CmdBossTowerRankListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBossTowerRankListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 2;
    private uint third_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    /// <summary>Field number for the "pageNum" field.</summary>
    public const int PageNumFieldNumber = 3;
    private uint pageNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNum {
      get { return pageNum_; }
      set {
        pageNum_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BossTowerRankUnit> _repeated_list_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BossTowerRankUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.BossTowerRankUnit> list_ = new pbc::RepeatedField<global::Packet.BossTowerRankUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BossTowerRankUnit> List {
      get { return list_; }
    }

    /// <summary>Field number for the "selfUnit" field.</summary>
    public const int SelfUnitFieldNumber = 5;
    private global::Packet.BossTowerRankUnit selfUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BossTowerRankUnit SelfUnit {
      get { return selfUnit_; }
      set {
        selfUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (Third != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Third);
      }
      if (PageNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageNum);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (selfUnit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SelfUnit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      if (PageNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNum);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (selfUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfUnit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            Third = input.ReadUInt32();
            break;
          }
          case 24: {
            PageNum = input.ReadUInt32();
            break;
          }
          case 34: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 42: {
            if (selfUnit_ == null) {
              selfUnit_ = new global::Packet.BossTowerRankUnit();
            }
            input.ReadMessage(selfUnit_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
