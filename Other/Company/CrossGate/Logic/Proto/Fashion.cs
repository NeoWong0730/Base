// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fashion.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 2700+
  /// </summary>
  public enum CmdFashion {
    None = 0,
    /// <summary>
    ///解锁时装请求
    /// </summary>
    UnlockFashionReq = 2701,
    /// <summary>
    ///解锁时装应答
    /// </summary>
    UnlockFashionRes = 2702,
    /// <summary>
    ///穿戴时装请求
    /// </summary>
    DressFashionReq = 2703,
    /// <summary>
    ///穿戴时候应答
    /// </summary>
    DressFashionRes = 2704,
    /// <summary>
    ///套装选择请求
    /// </summary>
    SuitSelReq = 2707,
    /// <summary>
    ///套装选择应答
    /// </summary>
    SuitSelRes = 2708,
    /// <summary>
    ///套装属性选择请求
    /// </summary>
    SuitAddrReq = 2709,
    /// <summary>
    ///套装属性选择应答
    /// </summary>
    SuitAddrRes = 2710,
    /// <summary>
    ///时装过期删除请求
    /// </summary>
    FashionExpireReq = 2711,
    /// <summary>
    ///时装过期删除应答
    /// </summary>
    FashionExpireRes = 2712,
    /// <summary>
    ///卸下时装请求
    /// </summary>
    UnfixReq = 2713,
    /// <summary>
    ///卸下时装请求应答
    /// </summary>
    UnfixRes = 2714,
    /// <summary>
    ///购买并解锁时装
    /// </summary>
    BuyPropAndUnlockReq = 2715,
    /// <summary>
    ///购买并解锁时装
    /// </summary>
    BuyPropAndUnlockRes = 2716,
    /// <summary>
    ///时装部件解锁状态状态通知(给角色本身发送或者给角色视野列表发送)
    /// </summary>
    LockStateNtf = 2720,
    /// <summary>
    ///时装部件颜色变换通知(当此部件穿戴时,给角色视野列表广播)
    /// </summary>
    DyeStateNtf = 2721,
    /// <summary>
    ///时装部件穿戴更换变换通知(给角色视野列表广播)
    /// </summary>
    DressStateNtf = 2722,
    /// <summary>
    ///套装穿戴更换通知(当此套装穿戴时,给角色视频列表广播)
    /// </summary>
    SuitStateNtf = 2723,
    /// <summary>
    ///时装列表通知
    /// </summary>
    FashionListNtf = 2724,
    /// <summary>
    ///抽奖相关
    /// </summary>
    DrawReq = 2730,
    /// <summary>
    /// </summary>
    DrawRes = 2731,
    /// <summary>
    ///设置自动用魔币购买抽奖道具请求
    /// </summary>
    AutoBuyDrawItemReq = 2732,
    /// <summary>
    /// </summary>
    AutoBuyDrawItemRes = 2733,
    /// <summary>
    ///用魔币兑换抽奖道具请求
    /// </summary>
    ExchangeDrawItemReq = 2734,
    /// <summary>
    /// </summary>
    ExchangeDrawItemRes = 2735,
    /// <summary>
    ///抽奖活动信息通知
    /// </summary>
    DrawActiveInfoNtf = 2736,
    /// <summary>
    ///时装优化
    /// </summary>
    GetTotalValueAwardReq = 2740,
    /// <summary>
    /// </summary>
    GetTotalValueAwardRes = 2741,
    /// <summary>
    ///新时装染色请求
    /// </summary>
    NewDyeFashionReq = 2742,
    /// <summary>
    /// </summary>
    NewDyeFashionRes = 2743,
    /// <summary>
    ///切换时装染色方案请求
    /// </summary>
    SwitchDyeReq = 2744,
    /// <summary>
    /// </summary>
    SwitchDyeRes = 2745,
    /// <summary>
    ///总时裳值更新
    /// </summary>
    FashionTotalValueNtf = 2746,
  }

  public enum ErrorFashion {
    None = 0,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 2701,
    /// <summary>
    ///道具数量不够
    /// </summary>
    PropNoEnough = 2702,
    /// <summary>
    ///已有相同类型的时装
    /// </summary>
    FashionHavedUnlock = 2703,
    /// <summary>
    ///道具方法参数错误
    /// </summary>
    FashionMethod = 2704,
    /// <summary>
    ///解锁时装失败
    /// </summary>
    UnlockFashion = 2705,
    /// <summary>
    ///解锁时装消耗道具失败
    /// </summary>
    CostItem = 2706,
    /// <summary>
    ///增加新时装失败
    /// </summary>
    AddFashion = 2707,
    /// <summary>
    ///没有该时装
    /// </summary>
    NoFashion = 2708,
    /// <summary>
    ///时装属性参数配置错误
    /// </summary>
    AttrIdParam = 2709,
    /// <summary>
    ///没有该时装类型
    /// </summary>
    NoFashionType = 2710,
    /// <summary>
    ///计算属性错误
    /// </summary>
    CalcAttr = 2711,
    /// <summary>
    ///角色已经穿戴上该时装
    /// </summary>
    Dressed = 2712,
    /// <summary>
    ///染色错误
    /// </summary>
    Dye = 2713,
    /// <summary>
    ///套装未集齐
    /// </summary>
    Suit = 2714,
    /// <summary>
    ///套装属性错误
    /// </summary>
    SuitAttr = 2715,
    /// <summary>
    ///角色不存在
    /// </summary>
    RoleNotExist = 2716,
    /// <summary>
    ///角色没有穿戴上该时装
    /// </summary>
    NoDressed = 2717,
    /// <summary>
    ///计算玩家时装评分
    /// </summary>
    CalcPower = 2718,
    /// <summary>
    ///时装道具错误
    /// </summary>
    FashionProp = 2719,
    /// <summary>
    ///货币不足
    /// </summary>
    CurrencyNotEnough = 2720,
    /// <summary>
    ///穿戴位置出错
    /// </summary>
    DressPos = 2721,
    /// <summary>
    ///穿戴失败
    /// </summary>
    Dress = 2722,
    /// <summary>
    ///时装值奖励已领取
    /// </summary>
    ValueGeted = 2723,
    /// <summary>
    ///时装值不足
    /// </summary>
    ValueNotEnough = 2724,
    /// <summary>
    ///时装值奖励领取失败
    /// </summary>
    ValueGet = 2725,
    /// <summary>
    ///染色方案不存在
    /// </summary>
    DyeScheme = 2726,
    /// <summary>
    ///染色方案不足 无法切换
    /// </summary>
    DyeSchemeSize = 2727,
    /// <summary>
    ///选择的染色方案错误
    /// </summary>
    DyeSchemeIndex = 2728,
    /// <summary>
    ///染色色板未开启
    /// </summary>
    DyeColor = 2729,
    /// <summary>
    ///表格错误
    /// </summary>
    Csv = 2730,
    /// <summary>
    ///染色方案重复
    /// </summary>
    DyeSchemeRepeat = 2731,
    /// <summary>
    ///活动已过期
    /// </summary>
    DrawActivityExpire = 2732,
    /// <summary>
    ///抽奖代币足够 无需兑换
    /// </summary>
    ExchangeDrawCoin = 2733,
    /// <summary>
    ///背包已满
    /// </summary>
    BagIsFull = 2734,
  }

  public enum FashionActiveReason {
    None = 0,
    /// <summary>
    /// 时装染色消耗道具
    /// </summary>
    DyeFashion = 2701,
    /// <summary>
    /// 时装解锁消耗道具
    /// </summary>
    UnlockFashion = 2702,
    /// <summary>
    /// 购买时装
    /// </summary>
    BuyFashion = 2703,
    /// <summary>
    /// 时裳值奖励
    /// </summary>
    FashionValue = 2704,
    /// <summary>
    /// 时装抽奖代币兑换
    /// </summary>
    FashionDrawExchange = 2705,
    /// <summary>
    /// 时装抽奖活动
    /// </summary>
    FashionDraw = 2706,
  }

  #endregion

  #region Messages
  /// <summary>
  ///多部位染色信息
  /// </summary>
  public sealed class DyeInfo : pb::IMessage {
    private static readonly pb::MessageParser<DyeInfo> _parser = new pb::MessageParser<DyeInfo>(() => new DyeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DyeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "dyeIndex" field.</summary>
    public const int DyeIndexFieldNumber = 1;
    private uint dyeIndex_;
    /// <summary>
    ///染色部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DyeIndex {
      get { return dyeIndex_; }
      set {
        dyeIndex_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///当前染色值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DyeIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DyeIndex);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DyeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DyeIndex);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DyeIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///染色方案
  /// </summary>
  public sealed class DyeScheme : pb::IMessage {
    private static readonly pb::MessageParser<DyeScheme> _parser = new pb::MessageParser<DyeScheme>(() => new DyeScheme());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DyeScheme> Parser { get { return _parser; } }

    /// <summary>Field number for the "dyeInfo" field.</summary>
    public const int DyeInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.DyeInfo> _repeated_dyeInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.DyeInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.DyeInfo> dyeInfo_ = new pbc::RepeatedField<global::Packet.DyeInfo>();
    /// <summary>
    ///多部位染色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DyeInfo> DyeInfo {
      get { return dyeInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dyeInfo_.WriteTo(output, _repeated_dyeInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dyeInfo_.CalculateSize(_repeated_dyeInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dyeInfo_.AddEntriesFrom(input, _repeated_dyeInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装部件信息
  /// </summary>
  public sealed class Fashion : pb::IMessage {
    private static readonly pb::MessageParser<Fashion> _parser = new pb::MessageParser<Fashion>(() => new Fashion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fashion> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///套装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    /// <summary>
    ///时装部件到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTimeLen" field.</summary>
    public const int ExpireTimeLenFieldNumber = 3;
    private uint expireTimeLen_;
    /// <summary>
    ///到期时间间隔,比如3天到期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimeLen {
      get { return expireTimeLen_; }
      set {
        expireTimeLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTimeLen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimeLen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpireTimeLen = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挂件部件信息
  /// </summary>
  public sealed class pendant : pb::IMessage {
    private static readonly pb::MessageParser<pendant> _parser = new pb::MessageParser<pendant>(() => new pendant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pendant> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///套装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    /// <summary>
    ///时装部件到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTimeLen" field.</summary>
    public const int ExpireTimeLenFieldNumber = 3;
    private uint expireTimeLen_;
    /// <summary>
    ///到期时间间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimeLen {
      get { return expireTimeLen_; }
      set {
        expireTimeLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTimeLen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimeLen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpireTimeLen = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///武器部件信息
  /// </summary>
  public sealed class weapon : pb::IMessage {
    private static readonly pb::MessageParser<weapon> _parser = new pb::MessageParser<weapon>(() => new weapon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<weapon> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///套装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    /// <summary>
    ///时装部件到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTimeLen" field.</summary>
    public const int ExpireTimeLenFieldNumber = 3;
    private uint expireTimeLen_;
    /// <summary>
    ///到期时间间隔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimeLen {
      get { return expireTimeLen_; }
      set {
        expireTimeLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTimeLen);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimeLen);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpireTimeLen = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单件时装染色方案
  /// </summary>
  public sealed class FashionDye : pb::IMessage {
    private static readonly pb::MessageParser<FashionDye> _parser = new pb::MessageParser<FashionDye>(() => new FashionDye());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FashionDye> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "useIndex" field.</summary>
    public const int UseIndexFieldNumber = 2;
    private uint useIndex_;
    /// <summary>
    ///当前使用的染色方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.DyeScheme> _repeated_dyeScheme_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.DyeScheme.Parser);
    private readonly pbc::RepeatedField<global::Packet.DyeScheme> dyeScheme_ = new pbc::RepeatedField<global::Packet.DyeScheme>();
    /// <summary>
    ///方案1 方案2 用index 固定为2个 不填充的里面的元素为空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DyeScheme> DyeScheme {
      get { return dyeScheme_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseIndex);
      }
      dyeScheme_.WriteTo(output, _repeated_dyeScheme_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseIndex);
      }
      size += dyeScheme_.CalculateSize(_repeated_dyeScheme_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            UseIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            dyeScheme_.AddEntriesFrom(input, _repeated_dyeScheme_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///解锁时装请求
  /// </summary>
  public sealed class CmdFashionUnlockFashionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionUnlockFashionReq> _parser = new pb::MessageParser<CmdFashionUnlockFashionReq>(() => new CmdFashionUnlockFashionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionUnlockFashionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    /// <summary>
    ///该时装对应的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 3;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///时装初始染色方案 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DyeScheme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///解锁时装应答
  /// </summary>
  public sealed class CmdFashionUnlockFashionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionUnlockFashionRes> _parser = new pb::MessageParser<CmdFashionUnlockFashionRes>(() => new CmdFashionUnlockFashionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionUnlockFashionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    /// <summary>
    ///时装部件到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTimeLen" field.</summary>
    public const int ExpireTimeLenFieldNumber = 3;
    private uint expireTimeLen_;
    /// <summary>
    ///到期时间间隔,比如3天到期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimeLen {
      get { return expireTimeLen_; }
      set {
        expireTimeLen_ = value;
      }
    }

    /// <summary>Field number for the "useIndex" field.</summary>
    public const int UseIndexFieldNumber = 4;
    private uint useIndex_;
    /// <summary>
    ///当前使用的染色方案   新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.DyeScheme> _repeated_dyeScheme_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.DyeScheme.Parser);
    private readonly pbc::RepeatedField<global::Packet.DyeScheme> dyeScheme_ = new pbc::RepeatedField<global::Packet.DyeScheme>();
    /// <summary>
    ///方案1 方案2 用index 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DyeScheme> DyeScheme {
      get { return dyeScheme_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTimeLen);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UseIndex);
      }
      dyeScheme_.WriteTo(output, _repeated_dyeScheme_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (ExpireTimeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimeLen);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseIndex);
      }
      size += dyeScheme_.CalculateSize(_repeated_dyeScheme_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpireTimeLen = input.ReadUInt32();
            break;
          }
          case 32: {
            UseIndex = input.ReadUInt32();
            break;
          }
          case 42: {
            dyeScheme_.AddEntriesFrom(input, _repeated_dyeScheme_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿戴时装请求
  /// </summary>
  public sealed class CmdFashionDressFashionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDressFashionReq> _parser = new pb::MessageParser<CmdFashionDressFashionReq>(() => new CmdFashionDressFashionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDressFashionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "oldFashionId" field.</summary>
    public const int OldFashionIdFieldNumber = 1;
    private uint oldFashionId_;
    /// <summary>
    ///旧的时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldFashionId {
      get { return oldFashionId_; }
      set {
        oldFashionId_ = value;
      }
    }

    /// <summary>Field number for the "newFashionId" field.</summary>
    public const int NewFashionIdFieldNumber = 2;
    private uint newFashionId_;
    /// <summary>
    ///新的时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewFashionId {
      get { return newFashionId_; }
      set {
        newFashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldFashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldFashionId);
      }
      if (NewFashionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewFashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldFashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldFashionId);
      }
      if (NewFashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewFashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldFashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            NewFashionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///穿戴时装应答
  /// </summary>
  public sealed class CmdFashionDressFashionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDressFashionRes> _parser = new pb::MessageParser<CmdFashionDressFashionRes>(() => new CmdFashionDressFashionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDressFashionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "newFashionId" field.</summary>
    public const int NewFashionIdFieldNumber = 1;
    private uint newFashionId_;
    /// <summary>
    ///新的时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewFashionId {
      get { return newFashionId_; }
      set {
        newFashionId_ = value;
      }
    }

    /// <summary>Field number for the "oldFashionId" field.</summary>
    public const int OldFashionIdFieldNumber = 2;
    private uint oldFashionId_;
    /// <summary>
    ///旧的时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldFashionId {
      get { return oldFashionId_; }
      set {
        oldFashionId_ = value;
      }
    }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 3;
    private uint suitId_;
    /// <summary>
    ///套装id,如果不等于0,代表套装已经穿齐了 (皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "useSuitId" field.</summary>
    public const int UseSuitIdFieldNumber = 4;
    private uint useSuitId_;
    /// <summary>
    ///正在使用的套装id(属性相关),可以读表获取对应的套装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSuitId {
      get { return useSuitId_; }
      set {
        useSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewFashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewFashionId);
      }
      if (OldFashionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OldFashionId);
      }
      if (SuitId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SuitId);
      }
      if (UseSuitId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UseSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewFashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewFashionId);
      }
      if (OldFashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldFashionId);
      }
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (UseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewFashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            OldFashionId = input.ReadUInt32();
            break;
          }
          case 24: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 32: {
            UseSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卸下时装请求
  /// </summary>
  public sealed class CmdFashionUnfixReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionUnfixReq> _parser = new pb::MessageParser<CmdFashionUnfixReq>(() => new CmdFashionUnfixReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionUnfixReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///卸下时装请求应答
  /// </summary>
  public sealed class CmdFashionUnfixRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionUnfixRes> _parser = new pb::MessageParser<CmdFashionUnfixRes>(() => new CmdFashionUnfixRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionUnfixRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 2;
    private uint suitId_;
    /// <summary>
    ///当前套装id,如果不为0 表示套装还是穿戴齐状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (SuitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            SuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买并且解锁时装
  /// </summary>
  public sealed class CmdFashionBuyPropAndUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionBuyPropAndUnlockReq> _parser = new pb::MessageParser<CmdFashionBuyPropAndUnlockReq>(() => new CmdFashionBuyPropAndUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionBuyPropAndUnlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 2;
    private uint propId_;
    /// <summary>
    ///该时装对应的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "isUnlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private bool isUnlock_;
    /// <summary>
    ///是否立即解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 4;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///时装初始染色方案 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropId);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DyeScheme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropId);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            PropId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 34: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///购买并且解锁时装
  /// </summary>
  public sealed class CmdFashionBuyPropAndUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionBuyPropAndUnlockRes> _parser = new pb::MessageParser<CmdFashionBuyPropAndUnlockRes>(() => new CmdFashionBuyPropAndUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionBuyPropAndUnlockRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///套装(皮肤)选择请求
  /// </summary>
  public sealed class CmdFashionSuitSelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSuitSelReq> _parser = new pb::MessageParser<CmdFashionSuitSelReq>(() => new CmdFashionSuitSelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSuitSelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    ///套装id(皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///套装(皮肤)选择应答
  /// </summary>
  public sealed class CmdFashionSuitSelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSuitSelRes> _parser = new pb::MessageParser<CmdFashionSuitSelRes>(() => new CmdFashionSuitSelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSuitSelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    ///套装id(皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "useSuitId" field.</summary>
    public const int UseSuitIdFieldNumber = 2;
    private uint useSuitId_;
    /// <summary>
    ///套装id(使用的真实套装id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSuitId {
      get { return useSuitId_; }
      set {
        useSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
      if (UseSuitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (UseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            UseSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///套装属性(真实使用)选择请求
  /// </summary>
  public sealed class CmdFashionSuitAddrReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSuitAddrReq> _parser = new pb::MessageParser<CmdFashionSuitAddrReq>(() => new CmdFashionSuitAddrReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSuitAddrReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    ///套装id(皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "useSuitId" field.</summary>
    public const int UseSuitIdFieldNumber = 2;
    private uint useSuitId_;
    /// <summary>
    ///套装id(使用的真实套装id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSuitId {
      get { return useSuitId_; }
      set {
        useSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
      if (UseSuitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (UseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            UseSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///套装属性选择应答
  /// </summary>
  public sealed class CmdFashionSuitAddrRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSuitAddrRes> _parser = new pb::MessageParser<CmdFashionSuitAddrRes>(() => new CmdFashionSuitAddrRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSuitAddrRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "useSuitId" field.</summary>
    public const int UseSuitIdFieldNumber = 1;
    private uint useSuitId_;
    /// <summary>
    ///套装id(使用的真实套装id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSuitId {
      get { return useSuitId_; }
      set {
        useSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseSuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装过期删除请求
  /// </summary>
  public sealed class CmdFashionFashionExpireReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionFashionExpireReq> _parser = new pb::MessageParser<CmdFashionFashionExpireReq>(() => new CmdFashionFashionExpireReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionFashionExpireReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装过期删除应答
  /// </summary>
  public sealed class CmdFashionFashionExpireRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionFashionExpireRes> _parser = new pb::MessageParser<CmdFashionFashionExpireRes>(() => new CmdFashionFashionExpireRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionFashionExpireRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private bool res_;
    /// <summary>
    ///true为成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 2;
    private uint fashionId_;
    /// <summary>
    ///时装部件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private ulong expireTime_;
    /// <summary>
    ///到期时间 0 表示已过期 否则为过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 4;
    private uint suitId_;
    /// <summary>
    ///当前套装id,如果不为0 表示套装还是穿戴齐状态(皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "useSuitId" field.</summary>
    public const int UseSuitIdFieldNumber = 5;
    private uint useSuitId_;
    /// <summary>
    ///当前套装id,如果不为0 表示套装还是穿戴齐状态(使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseSuitId {
      get { return useSuitId_; }
      set {
        useSuitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Res != false) {
        output.WriteRawTag(8);
        output.WriteBool(Res);
      }
      if (FashionId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FashionId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpireTime);
      }
      if (SuitId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SuitId);
      }
      if (UseSuitId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UseSuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Res != false) {
        size += 1 + 1;
      }
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (UseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseSuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Res = input.ReadBool();
            break;
          }
          case 16: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 24: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 32: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 40: {
            UseSuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装部件解锁状态通知
  /// </summary>
  public sealed class CmdFashionLockStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionLockStateNtf> _parser = new pb::MessageParser<CmdFashionLockStateNtf>(() => new CmdFashionLockStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionLockStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "lockState" field.</summary>
    public const int LockStateFieldNumber = 2;
    private uint lockState_;
    /// <summary>
    ///1为时装未解锁,2为时装已解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LockState {
      get { return lockState_; }
      set {
        lockState_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (LockState != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LockState);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (LockState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockState);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            LockState = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装部件染色变换通知
  /// </summary>
  public sealed class CmdFashionDyeStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDyeStateNtf> _parser = new pb::MessageParser<CmdFashionDyeStateNtf>(() => new CmdFashionDyeStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDyeStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///染色操作角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 3;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///染色方案 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DyeScheme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装部件穿戴更换变换通知(给角色视野列表广播)
  /// </summary>
  public sealed class CmdFashionDressStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDressStateNtf> _parser = new pb::MessageParser<CmdFashionDressStateNtf>(() => new CmdFashionDressStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDressStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///穿戴操作角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///1表示卸下  0表示替换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 4;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///染色方案 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DyeScheme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 34: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///套装穿戴更换通知(当此套装穿戴时,给角色视野列表广播)
  /// </summary>
  public sealed class CmdFashionSuitStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSuitStateNtf> _parser = new pb::MessageParser<CmdFashionSuitStateNtf>(() => new CmdFashionSuitStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSuitStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitInfo" field.</summary>
    public const int SuitInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdFashionSuitStateNtf.Types.SuitInfo> _repeated_suitInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdFashionSuitStateNtf.Types.SuitInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdFashionSuitStateNtf.Types.SuitInfo> suitInfo_ = new pbc::RepeatedField<global::Packet.CmdFashionSuitStateNtf.Types.SuitInfo>();
    /// <summary>
    ///套装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdFashionSuitStateNtf.Types.SuitInfo> SuitInfo {
      get { return suitInfo_; }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///穿戴操作角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      suitInfo_.WriteTo(output, _repeated_suitInfo_codec);
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += suitInfo_.CalculateSize(_repeated_suitInfo_codec);
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            suitInfo_.AddEntriesFrom(input, _repeated_suitInfo_codec);
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdFashionSuitStateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class SuitInfo : pb::IMessage {
        private static readonly pb::MessageParser<SuitInfo> _parser = new pb::MessageParser<SuitInfo>(() => new SuitInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SuitInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "fashionId" field.</summary>
        public const int FashionIdFieldNumber = 1;
        private uint fashionId_;
        /// <summary>
        ///时装id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FashionId {
          get { return fashionId_; }
          set {
            fashionId_ = value;
          }
        }

        /// <summary>Field number for the "dyeScheme" field.</summary>
        public const int DyeSchemeFieldNumber = 2;
        private global::Packet.DyeScheme dyeScheme_;
        /// <summary>
        ///染色方案 新增
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Packet.DyeScheme DyeScheme {
          get { return dyeScheme_; }
          set {
            dyeScheme_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FashionId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FashionId);
          }
          if (dyeScheme_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(DyeScheme);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FashionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
          }
          if (dyeScheme_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FashionId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (dyeScheme_ == null) {
                  dyeScheme_ = new global::Packet.DyeScheme();
                }
                input.ReadMessage(dyeScheme_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///时装列表通知
  /// </summary>
  public sealed class CmdFashionFashionListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionFashionListNtf> _parser = new pb::MessageParser<CmdFashionFashionListNtf>(() => new CmdFashionFashionListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionFashionListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "curSuitId" field.</summary>
    public const int CurSuitIdFieldNumber = 1;
    private uint curSuitId_;
    /// <summary>
    ///当前套装id(皮肤)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurSuitId {
      get { return curSuitId_; }
      set {
        curSuitId_ = value;
      }
    }

    /// <summary>Field number for the "curUseSuitId" field.</summary>
    public const int CurUseSuitIdFieldNumber = 2;
    private uint curUseSuitId_;
    /// <summary>
    ///当前使用的套装id(起真实效果的套装id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurUseSuitId {
      get { return curUseSuitId_; }
      set {
        curUseSuitId_ = value;
      }
    }

    /// <summary>Field number for the "fashionList" field.</summary>
    public const int FashionListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.Fashion> _repeated_fashionList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.Fashion.Parser);
    private readonly pbc::RepeatedField<global::Packet.Fashion> fashionList_ = new pbc::RepeatedField<global::Packet.Fashion>();
    /// <summary>
    ///时装列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Fashion> FashionList {
      get { return fashionList_; }
    }

    /// <summary>Field number for the "pendantList" field.</summary>
    public const int PendantListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.pendant> _repeated_pendantList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.pendant.Parser);
    private readonly pbc::RepeatedField<global::Packet.pendant> pendantList_ = new pbc::RepeatedField<global::Packet.pendant>();
    /// <summary>
    ///挂件列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.pendant> PendantList {
      get { return pendantList_; }
    }

    /// <summary>Field number for the "weaponList" field.</summary>
    public const int WeaponListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.weapon> _repeated_weaponList_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.weapon.Parser);
    private readonly pbc::RepeatedField<global::Packet.weapon> weaponList_ = new pbc::RepeatedField<global::Packet.weapon>();
    /// <summary>
    ///武器列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.weapon> WeaponList {
      get { return weaponList_; }
    }

    /// <summary>Field number for the "dressList" field.</summary>
    public const int DressListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_dressList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> dressList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已经穿戴的时装列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DressList {
      get { return dressList_; }
    }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 7;
    private uint activeId_;
    /// <summary>
    ///抽奖相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 13;
    private uint startTime_;
    /// <summary>
    ///开始时间 带时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 14;
    private uint endTime_;
    /// <summary>
    ///结束时间 带时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "freeDrawTime" field.</summary>
    public const int FreeDrawTimeFieldNumber = 8;
    private uint freeDrawTime_;
    /// <summary>
    ///免费抽奖当时的时间  如果不在一天 就可以免费抽奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeDrawTime {
      get { return freeDrawTime_; }
      set {
        freeDrawTime_ = value;
      }
    }

    /// <summary>Field number for the "autoBuyDrawItem" field.</summary>
    public const int AutoBuyDrawItemFieldNumber = 9;
    private uint autoBuyDrawItem_;
    /// <summary>
    ///魔币不够时 自动购买抽奖道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoBuyDrawItem {
      get { return autoBuyDrawItem_; }
      set {
        autoBuyDrawItem_ = value;
      }
    }

    /// <summary>Field number for the "fashionTotalValue" field.</summary>
    public const int FashionTotalValueFieldNumber = 10;
    private uint fashionTotalValue_;
    /// <summary>
    ///时装优化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionTotalValue {
      get { return fashionTotalValue_; }
      set {
        fashionTotalValue_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已领取奖励的时裳值奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "dyeList" field.</summary>
    public const int DyeListFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Packet.FashionDye> _repeated_dyeList_codec
        = pb::FieldCodec.ForMessage(98, global::Packet.FashionDye.Parser);
    private readonly pbc::RepeatedField<global::Packet.FashionDye> dyeList_ = new pbc::RepeatedField<global::Packet.FashionDye>();
    /// <summary>
    ///时装染色方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FashionDye> DyeList {
      get { return dyeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurSuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurSuitId);
      }
      if (CurUseSuitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurUseSuitId);
      }
      fashionList_.WriteTo(output, _repeated_fashionList_codec);
      pendantList_.WriteTo(output, _repeated_pendantList_codec);
      weaponList_.WriteTo(output, _repeated_weaponList_codec);
      dressList_.WriteTo(output, _repeated_dressList_codec);
      if (ActiveId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ActiveId);
      }
      if (FreeDrawTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FreeDrawTime);
      }
      if (AutoBuyDrawItem != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AutoBuyDrawItem);
      }
      if (FashionTotalValue != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(FashionTotalValue);
      }
      id_.WriteTo(output, _repeated_id_codec);
      dyeList_.WriteTo(output, _repeated_dyeList_codec);
      if (StartTime != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSuitId);
      }
      if (CurUseSuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurUseSuitId);
      }
      size += fashionList_.CalculateSize(_repeated_fashionList_codec);
      size += pendantList_.CalculateSize(_repeated_pendantList_codec);
      size += weaponList_.CalculateSize(_repeated_weaponList_codec);
      size += dressList_.CalculateSize(_repeated_dressList_codec);
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (FreeDrawTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeDrawTime);
      }
      if (AutoBuyDrawItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoBuyDrawItem);
      }
      if (FashionTotalValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionTotalValue);
      }
      size += id_.CalculateSize(_repeated_id_codec);
      size += dyeList_.CalculateSize(_repeated_dyeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurSuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurUseSuitId = input.ReadUInt32();
            break;
          }
          case 26: {
            fashionList_.AddEntriesFrom(input, _repeated_fashionList_codec);
            break;
          }
          case 34: {
            pendantList_.AddEntriesFrom(input, _repeated_pendantList_codec);
            break;
          }
          case 42: {
            weaponList_.AddEntriesFrom(input, _repeated_weaponList_codec);
            break;
          }
          case 50:
          case 48: {
            dressList_.AddEntriesFrom(input, _repeated_dressList_codec);
            break;
          }
          case 56: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 64: {
            FreeDrawTime = input.ReadUInt32();
            break;
          }
          case 72: {
            AutoBuyDrawItem = input.ReadUInt32();
            break;
          }
          case 80: {
            FashionTotalValue = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 98: {
            dyeList_.AddEntriesFrom(input, _repeated_dyeList_codec);
            break;
          }
          case 104: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 112: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------------------------------
  ///抽奖相关
  ///CmdFashion_DrawReq = 2731;//抽奖请求
  /// </summary>
  public sealed class CmdFashionDrawReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDrawReq> _parser = new pb::MessageParser<CmdFashionDrawReq>(() => new CmdFashionDrawReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDrawReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "drawTimes" field.</summary>
    public const int DrawTimesFieldNumber = 1;
    private uint drawTimes_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrawTimes {
      get { return drawTimes_; }
      set {
        drawTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DrawTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_DrawRes	= 2732;//
  /// </summary>
  public sealed class CmdFashionDrawRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDrawRes> _parser = new pb::MessageParser<CmdFashionDrawRes>(() => new CmdFashionDrawRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDrawRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> itemList_ = new pbc::RepeatedField<global::Packet.Item>();
    /// <summary>
    ///抽到的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "freeDrawTime" field.</summary>
    public const int FreeDrawTimeFieldNumber = 2;
    private uint freeDrawTime_;
    /// <summary>
    ///免费抽奖当时的时间  如果不在一天 就可以免费抽奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeDrawTime {
      get { return freeDrawTime_; }
      set {
        freeDrawTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (FreeDrawTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FreeDrawTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (FreeDrawTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeDrawTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 16: {
            FreeDrawTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_AutoBuyDrawItemReq	= 2733;//设置自动用魔币购买抽奖道具请求
  /// </summary>
  public sealed class CmdFashionAutoBuyDrawItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionAutoBuyDrawItemReq> _parser = new pb::MessageParser<CmdFashionAutoBuyDrawItemReq>(() => new CmdFashionAutoBuyDrawItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionAutoBuyDrawItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///0 取消  1 设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_AutoBuyDrawItemRes	= 2734;//
  /// </summary>
  public sealed class CmdFashionAutoBuyDrawItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionAutoBuyDrawItemRes> _parser = new pb::MessageParser<CmdFashionAutoBuyDrawItemRes>(() => new CmdFashionAutoBuyDrawItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionAutoBuyDrawItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///req传进来的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_ExchangeDrawItemReq = 2734;//用魔币兑换抽奖道具请求
  /// </summary>
  public sealed class CmdFashionExchangeDrawItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionExchangeDrawItemReq> _parser = new pb::MessageParser<CmdFashionExchangeDrawItemReq>(() => new CmdFashionExchangeDrawItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionExchangeDrawItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "drawTimes" field.</summary>
    public const int DrawTimesFieldNumber = 1;
    private uint drawTimes_;
    /// <summary>
    ///抽奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrawTimes {
      get { return drawTimes_; }
      set {
        drawTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DrawTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_ExchangeDrawItemRes = 2735;
  /// </summary>
  public sealed class CmdFashionExchangeDrawItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionExchangeDrawItemRes> _parser = new pb::MessageParser<CmdFashionExchangeDrawItemRes>(() => new CmdFashionExchangeDrawItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionExchangeDrawItemRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///抽奖活动信息变更通知
  /// </summary>
  public sealed class CmdFashionDrawActiveInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionDrawActiveInfoNtf> _parser = new pb::MessageParser<CmdFashionDrawActiveInfoNtf>(() => new CmdFashionDrawActiveInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionDrawActiveInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    /// <summary>
    ///活动编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///开始时间 带时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///结束时间 带时区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///时装染色优化相关
  ///CmdFashion_GetTotalValueAwardReq	= 2740;//领取时裳值奖励请求
  /// </summary>
  public sealed class CmdFashionGetTotalValueAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionGetTotalValueAwardReq> _parser = new pb::MessageParser<CmdFashionGetTotalValueAwardReq>(() => new CmdFashionGetTotalValueAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionGetTotalValueAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///时裳值奖励表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_GetTotalValueAwardRes	= 2741;//
  /// </summary>
  public sealed class CmdFashionGetTotalValueAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionGetTotalValueAwardRes> _parser = new pb::MessageParser<CmdFashionGetTotalValueAwardRes>(() => new CmdFashionGetTotalValueAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionGetTotalValueAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///req传进来的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_NewDyeFashionReq = 2742;//新时装染色请求
  /// </summary>
  public sealed class CmdFashionNewDyeFashionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionNewDyeFashionReq> _parser = new pb::MessageParser<CmdFashionNewDyeFashionReq>(() => new CmdFashionNewDyeFashionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionNewDyeFashionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "isAdvanceDye" field.</summary>
    public const int IsAdvanceDyeFieldNumber = 2;
    private bool isAdvanceDye_;
    /// <summary>
    ///false 表示普通染色  true表示高级染色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdvanceDye {
      get { return isAdvanceDye_; }
      set {
        isAdvanceDye_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 3;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///染色方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private uint index_;
    /// <summary>
    ///index 0 表示方案1 1 表示方案2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (IsAdvanceDye != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdvanceDye);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DyeScheme);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (IsAdvanceDye != false) {
        size += 1 + 1;
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsAdvanceDye = input.ReadBool();
            break;
          }
          case 26: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
          case 32: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_NewDyeFashionRes	= 2743;//
  /// </summary>
  public sealed class CmdFashionNewDyeFashionRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionNewDyeFashionRes> _parser = new pb::MessageParser<CmdFashionNewDyeFashionRes>(() => new CmdFashionNewDyeFashionRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionNewDyeFashionRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///req传进来的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 2;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///req传进来的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///index 0 表示方案1 1 表示方案2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DyeScheme);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_SwitchDyeReq = 2744;//切换时装染色方案请求
  /// </summary>
  public sealed class CmdFashionSwitchDyeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSwitchDyeReq> _parser = new pb::MessageParser<CmdFashionSwitchDyeReq>(() => new CmdFashionSwitchDyeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSwitchDyeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "useIndex" field.</summary>
    public const int UseIndexFieldNumber = 2;
    private uint useIndex_;
    /// <summary>
    ///使用的染色方案 0 表示方案1 1 表示方案2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            UseIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_SwitchDyeRes = 2745;//
  /// </summary>
  public sealed class CmdFashionSwitchDyeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionSwitchDyeRes> _parser = new pb::MessageParser<CmdFashionSwitchDyeRes>(() => new CmdFashionSwitchDyeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionSwitchDyeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "userIndex" field.</summary>
    public const int UserIndexFieldNumber = 2;
    private uint userIndex_;
    /// <summary>
    ///当前使用的染色方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserIndex {
      get { return userIndex_; }
      set {
        userIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (UserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (UserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFashion_FashionTotalValueNtf = 2746;//总时裳值更新
  /// </summary>
  public sealed class CmdFashionFashionTotalValueNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFashionFashionTotalValueNtf> _parser = new pb::MessageParser<CmdFashionFashionTotalValueNtf>(() => new CmdFashionFashionTotalValueNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFashionFashionTotalValueNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "totalValue" field.</summary>
    public const int TotalValueFieldNumber = 1;
    private uint totalValue_;
    /// <summary>
    ///总时裳值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalValue {
      get { return totalValue_; }
      set {
        totalValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
