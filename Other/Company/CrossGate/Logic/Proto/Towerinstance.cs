// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: towerinstance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///5700+
  /// </summary>
  public enum CmdTowerInstance {
    None = 0,
    /// <summary>
    ///请求职业通关排行
    /// </summary>
    RankInfoReq = 5701,
    RankInfoRes = 5702,
    /// <summary>
    ///领取每日奖励
    /// </summary>
    DailyRewardReq = 5703,
    DailyRewardRes = 5704,
    /// <summary>
    ///更新日常活动次数
    /// </summary>
    PlayTimesUpdateNtf = 5705,
  }

  public enum ErrorTowerInstance {
    None = 0,
    /// <summary>
    ///关卡未找到
    /// </summary>
    StageNotFound = 5701,
    /// <summary>
    ///重复挑战
    /// </summary>
    HasPassed = 5702,
    /// <summary>
    ///前置关卡未通关
    /// </summary>
    PreLocked = 5703,
    /// <summary>
    ///等级不够
    /// </summary>
    LevelLocked = 5704,
    /// <summary>
    ///今日奖励已领取
    /// </summary>
    TodayHasReceived = 5705,
    /// <summary>
    ///无奖励领取
    /// </summary>
    NoDailyReward = 5706,
    /// <summary>
    ///已全部通关
    /// </summary>
    AllHasPassed = 5707,
  }

  #endregion

  #region Messages
  /// <summary>
  ///百人道场玩法数据
  /// </summary>
  public sealed class TowerInsData : pb::IMessage {
    private static readonly pb::MessageParser<TowerInsData> _parser = new pb::MessageParser<TowerInsData>(() => new TowerInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerInsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "passedStageId" field.</summary>
    public const int PassedStageIdFieldNumber = 2;
    private uint passedStageId_;
    /// <summary>
    ///历史最高关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassedStageId {
      get { return passedStageId_; }
      set {
        passedStageId_ = value;
      }
    }

    /// <summary>Field number for the "rewardStageId" field.</summary>
    public const int RewardStageIdFieldNumber = 5;
    private uint rewardStageId_;
    /// <summary>
    ///可领每日奖励的关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardStageId {
      get { return rewardStageId_; }
      set {
        rewardStageId_ = value;
      }
    }

    /// <summary>Field number for the "lastDailyRewardTime" field.</summary>
    public const int LastDailyRewardTimeFieldNumber = 3;
    private uint lastDailyRewardTime_;
    /// <summary>
    ///上次领取每日奖励的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastDailyRewardTime {
      get { return lastDailyRewardTime_; }
      set {
        lastDailyRewardTime_ = value;
      }
    }

    /// <summary>Field number for the "playTimesLimit" field.</summary>
    public const int PlayTimesLimitFieldNumber = 4;
    private global::Packet.ResLimit playTimesLimit_;
    /// <summary>
    ///对应日常活动玩法次数，每日通关or领取奖励+1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit PlayTimesLimit {
      get { return playTimesLimit_; }
      set {
        playTimesLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (PassedStageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PassedStageId);
      }
      if (LastDailyRewardTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastDailyRewardTime);
      }
      if (playTimesLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayTimesLimit);
      }
      if (RewardStageId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RewardStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (PassedStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedStageId);
      }
      if (RewardStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardStageId);
      }
      if (LastDailyRewardTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastDailyRewardTime);
      }
      if (playTimesLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayTimesLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 16: {
            PassedStageId = input.ReadUInt32();
            break;
          }
          case 24: {
            LastDailyRewardTime = input.ReadUInt32();
            break;
          }
          case 34: {
            if (playTimesLimit_ == null) {
              playTimesLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(playTimesLimit_);
            break;
          }
          case 40: {
            RewardStageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通关排行信息
  /// </summary>
  public sealed class TowerInsPassRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<TowerInsPassRankInfo> _parser = new pb::MessageParser<TowerInsPassRankInfo>(() => new TowerInsPassRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TowerInsPassRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passedStage" field.</summary>
    public const int PassedStageFieldNumber = 3;
    private uint passedStage_;
    /// <summary>
    ///通关id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassedStage {
      get { return passedStage_; }
      set {
        passedStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (PassedStage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PassedStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (PassedStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedStage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            PassedStage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求通关排行榜信息
  /// </summary>
  public sealed class CmdTowerInstanceRankInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTowerInstanceRankInfoReq> _parser = new pb::MessageParser<CmdTowerInstanceRankInfoReq>(() => new CmdTowerInstanceRankInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTowerInstanceRankInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTowerInstanceRankInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTowerInstanceRankInfoRes> _parser = new pb::MessageParser<CmdTowerInstanceRankInfoRes>(() => new CmdTowerInstanceRankInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTowerInstanceRankInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "rankInfos" field.</summary>
    public const int RankInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.TowerInsPassRankInfo> _repeated_rankInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.TowerInsPassRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TowerInsPassRankInfo> rankInfos_ = new pbc::RepeatedField<global::Packet.TowerInsPassRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TowerInsPassRankInfo> RankInfos {
      get { return rankInfos_; }
    }

    /// <summary>Field number for the "selfRankInfo" field.</summary>
    public const int SelfRankInfoFieldNumber = 4;
    private global::Packet.TowerInsPassRankInfo selfRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TowerInsPassRankInfo SelfRankInfo {
      get { return selfRankInfo_; }
      set {
        selfRankInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Career);
      }
      rankInfos_.WriteTo(output, _repeated_rankInfos_codec);
      if (selfRankInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfRankInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      size += rankInfos_.CalculateSize(_repeated_rankInfos_codec);
      if (selfRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRankInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Career = input.ReadUInt32();
            break;
          }
          case 26: {
            rankInfos_.AddEntriesFrom(input, _repeated_rankInfos_codec);
            break;
          }
          case 34: {
            if (selfRankInfo_ == null) {
              selfRankInfo_ = new global::Packet.TowerInsPassRankInfo();
            }
            input.ReadMessage(selfRankInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取每日奖励
  /// </summary>
  public sealed class CmdTowerInstanceDailyRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTowerInstanceDailyRewardReq> _parser = new pb::MessageParser<CmdTowerInstanceDailyRewardReq>(() => new CmdTowerInstanceDailyRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTowerInstanceDailyRewardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTowerInstanceDailyRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTowerInstanceDailyRewardRes> _parser = new pb::MessageParser<CmdTowerInstanceDailyRewardRes>(() => new CmdTowerInstanceDailyRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTowerInstanceDailyRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastDailyRewardTime" field.</summary>
    public const int LastDailyRewardTimeFieldNumber = 1;
    private uint lastDailyRewardTime_;
    /// <summary>
    ///上次领取每日奖励的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastDailyRewardTime {
      get { return lastDailyRewardTime_; }
      set {
        lastDailyRewardTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastDailyRewardTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastDailyRewardTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastDailyRewardTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastDailyRewardTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastDailyRewardTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTowerInstancePlayTimesUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTowerInstancePlayTimesUpdateNtf> _parser = new pb::MessageParser<CmdTowerInstancePlayTimesUpdateNtf>(() => new CmdTowerInstancePlayTimesUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTowerInstancePlayTimesUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "playTimesLimit" field.</summary>
    public const int PlayTimesLimitFieldNumber = 1;
    private global::Packet.ResLimit playTimesLimit_;
    /// <summary>
    ///对应日常活动玩法次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit PlayTimesLimit {
      get { return playTimesLimit_; }
      set {
        playTimesLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playTimesLimit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayTimesLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playTimesLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayTimesLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playTimesLimit_ == null) {
              playTimesLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(playTimesLimit_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
