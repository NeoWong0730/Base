// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wildboss.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum WildNPC {
    CmdWildBossZero = 0,
    CmdWildBossCommandReq = 4501,
    CmdWildBossCommandRes = 4502,
    CmdWildBossInfoReq = 4503,
    CmdWildBossInfoRes = 4504,
    CmdWildBossUnlockReq = 4505,
    CmdWildBossUnlockRes = 4506,
    CmdWildBossRewardPickReq = 4507,
    CmdWildBossRewardPickRes = 4508,
    CmdWildBossApplyReq = 4509,
    CmdWildBossApplyRes = 4510,
    CmdWildBossMapInfoReq = 4511,
    CmdWildBossMapInfoRes = 4512,
    CmdWildBossInfoNtf = 4513,
    CmdWildBossApplyNtf = 4514,
    CmdWildBossRewardDataNtf = 4515,
    CmdWildBossBattleIdNtf = 4516,
    CmdWildBossWatchReq = 4517,
  }

  public enum ErrorWildBoss {
    None = 0,
    /// <summary>
    /// 已经报名 
    /// </summary>
    HasApplied = 4501,
    /// <summary>
    /// 没有报名 
    /// </summary>
    HasNotApplied = 4502,
    /// <summary>
    /// 找不到boss 
    /// </summary>
    BossNotFound = 4503,
    /// <summary>
    /// 不在报名时间内 
    /// </summary>
    NotInApplyTime = 4504,
    /// <summary>
    /// 正在被挑战 
    /// </summary>
    UnderChallenge = 4505,
    /// <summary>
    /// 等级不符 
    /// </summary>
    WrongLevel = 4506,
    /// <summary>
    /// 队伍成员数量不足 
    /// </summary>
    TooFewMems = 4507,
    /// <summary>
    /// 未满足boss解锁等级 
    /// </summary>
    NotMeetUnlockLevel = 4508,
    /// <summary>
    /// 已解锁过 
    /// </summary>
    AlreadyUnlocked = 4509,
    /// <summary>
    /// 因队伍成员变动而取消boss挑战申请 
    /// </summary>
    TeamChangeCancel = 4510,
    /// <summary>
    /// 观战切线失败
    /// </summary>
    FailToChangeScene = 4511,
    /// <summary>
    /// 观战切线后boss不存在
    /// </summary>
    BossNotFoundAfterChangingScene = 4512,
    /// <summary>
    /// 已在战斗中
    /// </summary>
    AlreadyInFight = 4513,
    /// <summary>
    /// boss不在战斗中
    /// </summary>
    BossNotInFight = 4514,
    /// <summary>
    /// 观战传送冷却中
    /// </summary>
    InBossWatchCd = 4515,
  }

  #endregion

  #region Messages
  public sealed class BossInfo : pb::IMessage {
    private static readonly pb::MessageParser<BossInfo> _parser = new pb::MessageParser<BossInfo>(() => new BossInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "manualId" field.</summary>
    public const int ManualIdFieldNumber = 1;
    private uint manualId_;
    /// <summary>
    /// 图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualId {
      get { return manualId_; }
      set {
        manualId_ = value;
      }
    }

    /// <summary>Field number for the "Unlock" field.</summary>
    public const int UnlockFieldNumber = 2;
    private uint unlock_;
    /// <summary>
    /// 解锁礼包 0. 未解锁  1.解锁了没领取  2.解锁了领取了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    /// <summary>Field number for the "FirstDrop" field.</summary>
    public const int FirstDropFieldNumber = 3;
    private uint firstDrop_;
    /// <summary>
    /// 0. 未解锁  1.解锁了没领取  2.解锁了领取了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FirstDrop {
      get { return firstDrop_; }
      set {
        firstDrop_ = value;
      }
    }

    /// <summary>Field number for the "story" field.</summary>
    public const int StoryFieldNumber = 4;
    private uint story_;
    /// <summary>
    /// 传记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Story {
      get { return story_; }
      set {
        story_ = value;
      }
    }

    /// <summary>Field number for the "storyReward" field.</summary>
    public const int StoryRewardFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_storyReward_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> storyReward_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 传记奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> StoryReward {
      get { return storyReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ManualId);
      }
      if (Unlock != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Unlock);
      }
      if (FirstDrop != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FirstDrop);
      }
      if (Story != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Story);
      }
      storyReward_.WriteTo(output, _repeated_storyReward_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualId);
      }
      if (Unlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unlock);
      }
      if (FirstDrop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirstDrop);
      }
      if (Story != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Story);
      }
      size += storyReward_.CalculateSize(_repeated_storyReward_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ManualId = input.ReadUInt32();
            break;
          }
          case 16: {
            Unlock = input.ReadUInt32();
            break;
          }
          case 24: {
            FirstDrop = input.ReadUInt32();
            break;
          }
          case 32: {
            Story = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            storyReward_.AddEntriesFrom(input, _repeated_storyReward_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RewardLimit : pb::IMessage {
    private static readonly pb::MessageParser<RewardLimit> _parser = new pb::MessageParser<RewardLimit>(() => new RewardLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardLimit> Parser { get { return _parser; } }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 1;
    private uint resetTime_;
    /// <summary>
    /// 重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "pickTimes" field.</summary>
    public const int PickTimesFieldNumber = 2;
    private uint pickTimes_;
    /// <summary>
    /// 已领取次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PickTimes {
      get { return pickTimes_; }
      set {
        pickTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResetTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResetTime);
      }
      if (PickTimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PickTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetTime);
      }
      if (PickTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResetTime = input.ReadUInt32();
            break;
          }
          case 16: {
            PickTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RewardData : pb::IMessage {
    private static readonly pb::MessageParser<RewardData> _parser = new pb::MessageParser<RewardData>(() => new RewardData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardData> Parser { get { return _parser; } }

    /// <summary>Field number for the "play_type" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    /// 玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "dayLimit" field.</summary>
    public const int DayLimitFieldNumber = 2;
    private global::Packet.RewardLimit dayLimit_;
    /// <summary>
    /// 日限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RewardLimit DayLimit {
      get { return dayLimit_; }
      set {
        dayLimit_ = value;
      }
    }

    /// <summary>Field number for the "weekLimit" field.</summary>
    public const int WeekLimitFieldNumber = 3;
    private global::Packet.RewardLimit weekLimit_;
    /// <summary>
    /// 周限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RewardLimit WeekLimit {
      get { return weekLimit_; }
      set {
        weekLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (dayLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DayLimit);
      }
      if (weekLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WeekLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (dayLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DayLimit);
      }
      if (weekLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeekLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dayLimit_ == null) {
              dayLimit_ = new global::Packet.RewardLimit();
            }
            input.ReadMessage(dayLimit_);
            break;
          }
          case 26: {
            if (weekLimit_ == null) {
              weekLimit_ = new global::Packet.RewardLimit();
            }
            input.ReadMessage(weekLimit_);
            break;
          }
        }
      }
    }

  }

  public sealed class WildBossData : pb::IMessage {
    private static readonly pb::MessageParser<WildBossData> _parser = new pb::MessageParser<WildBossData>(() => new WildBossData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WildBossData> Parser { get { return _parser; } }

    /// <summary>Field number for the "bosses" field.</summary>
    public const int BossesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BossInfo> _repeated_bosses_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BossInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BossInfo> bosses_ = new pbc::RepeatedField<global::Packet.BossInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BossInfo> Bosses {
      get { return bosses_; }
    }

    /// <summary>Field number for the "campReward" field.</summary>
    public const int CampRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_campReward_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> campReward_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 哪些阵营接受了奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CampReward {
      get { return campReward_; }
    }

    /// <summary>Field number for the "reward_data" field.</summary>
    public const int RewardDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.RewardData> _repeated_rewardData_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.RewardData.Parser);
    private readonly pbc::RepeatedField<global::Packet.RewardData> rewardData_ = new pbc::RepeatedField<global::Packet.RewardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RewardData> RewardData {
      get { return rewardData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bosses_.WriteTo(output, _repeated_bosses_codec);
      campReward_.WriteTo(output, _repeated_campReward_codec);
      rewardData_.WriteTo(output, _repeated_rewardData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bosses_.CalculateSize(_repeated_bosses_codec);
      size += campReward_.CalculateSize(_repeated_campReward_codec);
      size += rewardData_.CalculateSize(_repeated_rewardData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bosses_.AddEntriesFrom(input, _repeated_bosses_codec);
            break;
          }
          case 18:
          case 16: {
            campReward_.AddEntriesFrom(input, _repeated_campReward_codec);
            break;
          }
          case 26: {
            rewardData_.AddEntriesFrom(input, _repeated_rewardData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入玩法相关的UI的时候
  /// </summary>
  public sealed class CmdWildBossInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossInfoReq> _parser = new pb::MessageParser<CmdWildBossInfoReq>(() => new CmdWildBossInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdWildBossInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossInfoRes> _parser = new pb::MessageParser<CmdWildBossInfoRes>(() => new CmdWildBossInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.WildBossData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.WildBossData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.WildBossData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// FirstDrop被动通知 走这儿
  /// </summary>
  public sealed class CmdWildBossInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossInfoNtf> _parser = new pb::MessageParser<CmdWildBossInfoNtf>(() => new CmdWildBossInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.BossInfo data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BossInfo Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.BossInfo();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// boss解锁请求，连带可以解锁boss所属的阵营
  /// </summary>
  public sealed class CmdWildBossUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossUnlockReq> _parser = new pb::MessageParser<CmdWildBossUnlockReq>(() => new CmdWildBossUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossUnlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "manualId" field.</summary>
    public const int ManualIdFieldNumber = 1;
    private uint manualId_;
    /// <summary>
    /// 图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualId {
      get { return manualId_; }
      set {
        manualId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ManualId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ManualId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossUnlockRes> _parser = new pb::MessageParser<CmdWildBossUnlockRes>(() => new CmdWildBossUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossUnlockRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossInfo" field.</summary>
    public const int BossInfoFieldNumber = 1;
    private global::Packet.BossInfo bossInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BossInfo BossInfo {
      get { return bossInfo_; }
      set {
        bossInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bossInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BossInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bossInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BossInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bossInfo_ == null) {
              bossInfo_ = new global::Packet.BossInfo();
            }
            input.ReadMessage(bossInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领取传记奖励？ 解锁礼包？ 首杀礼包 ？ 阵营解锁奖励？
  /// </summary>
  public sealed class CmdWildBossRewardPickReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossRewardPickReq> _parser = new pb::MessageParser<CmdWildBossRewardPickReq>(() => new CmdWildBossRewardPickReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossRewardPickReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "manualId" field.</summary>
    public const int ManualIdFieldNumber = 1;
    private uint manualId_;
    /// <summary>
    /// 图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualId {
      get { return manualId_; }
      set {
        manualId_ = value;
      }
    }

    /// <summary>Field number for the "reward_type" field.</summary>
    public const int RewardTypeFieldNumber = 2;
    private uint rewardType_;
    /// <summary>
    /// 1boss解锁奖励 4 阵营解锁奖励  3传记奖励【+下边】  2首杀奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    /// 传记下标[1, 2, 3]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ManualId);
      }
      if (RewardType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardType);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualId);
      }
      if (RewardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ManualId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardType = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossRewardPickRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossRewardPickRes> _parser = new pb::MessageParser<CmdWildBossRewardPickRes>(() => new CmdWildBossRewardPickRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossRewardPickRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossInfo" field.</summary>
    public const int BossInfoFieldNumber = 1;
    private global::Packet.BossInfo bossInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BossInfo BossInfo {
      get { return bossInfo_; }
      set {
        bossInfo_ = value;
      }
    }

    /// <summary>Field number for the "manualId" field.</summary>
    public const int ManualIdFieldNumber = 2;
    private uint manualId_;
    /// <summary>
    /// 图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ManualId {
      get { return manualId_; }
      set {
        manualId_ = value;
      }
    }

    /// <summary>Field number for the "reward_type" field.</summary>
    public const int RewardTypeFieldNumber = 3;
    private uint rewardType_;
    /// <summary>
    /// 1boss解锁奖励 4 阵营解锁奖励  3传记奖励【+下边】  2首杀奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private uint index_;
    /// <summary>
    /// 传记下标[1, 2, 3]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bossInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BossInfo);
      }
      if (ManualId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ManualId);
      }
      if (RewardType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RewardType);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bossInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BossInfo);
      }
      if (ManualId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualId);
      }
      if (RewardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardType);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bossInfo_ == null) {
              bossInfo_ = new global::Packet.BossInfo();
            }
            input.ReadMessage(bossInfo_);
            break;
          }
          case 16: {
            ManualId = input.ReadUInt32();
            break;
          }
          case 24: {
            RewardType = input.ReadUInt32();
            break;
          }
          case 32: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 报名/取消报名？ server主动取消报名？
  /// 发给gameserver
  /// </summary>
  public sealed class CmdWildBossApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossApplyReq> _parser = new pb::MessageParser<CmdWildBossApplyReq>(() => new CmdWildBossApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private uint bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "cancel" field.</summary>
    public const int CancelFieldNumber = 4;
    private uint cancel_;
    /// <summary>
    /// 0报名 1取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cancel {
      get { return cancel_; }
      set {
        cancel_ = value;
      }
    }

    /// <summary>Field number for the "bossGuid" field.</summary>
    public const int BossGuidFieldNumber = 5;
    private ulong bossGuid_;
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BossGuid {
      get { return bossGuid_; }
      set {
        bossGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (Cancel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Cancel);
      }
      if (BossGuid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BossGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossId);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Cancel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cancel);
      }
      if (BossGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BossGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 32: {
            Cancel = input.ReadUInt32();
            break;
          }
          case 40: {
            BossGuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossApplyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossApplyRes> _parser = new pb::MessageParser<CmdWildBossApplyRes>(() => new CmdWildBossApplyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossApplyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private uint bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private uint teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 3;
    private uint timeStamp_;
    /// <summary>
    /// 倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "bossGuid" field.</summary>
    public const int BossGuidFieldNumber = 4;
    private ulong bossGuid_;
    /// <summary>
    /// guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BossGuid {
      get { return bossGuid_; }
      set {
        bossGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamId);
      }
      if (TimeStamp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeStamp);
      }
      if (BossGuid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BossGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossId);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamId);
      }
      if (TimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeStamp);
      }
      if (BossGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BossGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeStamp = input.ReadUInt32();
            break;
          }
          case 32: {
            BossGuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选中通知
  /// </summary>
  public sealed class CmdWildBossApplyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossApplyNtf> _parser = new pb::MessageParser<CmdWildBossApplyNtf>(() => new CmdWildBossApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossApplyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossId" field.</summary>
    public const int BossIdFieldNumber = 1;
    private uint bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossId);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossId);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 打开ui请求boss个数信息
  /// 发给gameserver
  /// </summary>
  public sealed class CmdWildBossMapInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossMapInfoReq> _parser = new pb::MessageParser<CmdWildBossMapInfoReq>(() => new CmdWildBossMapInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossMapInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "challengeId" field.</summary>
    public const int ChallengeIdFieldNumber = 1;
    private uint challengeId_;
    /// <summary>
    /// 客户端上传给server，server不处理，直接下发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeId {
      get { return challengeId_; }
      set {
        challengeId_ = value;
      }
    }

    /// <summary>Field number for the "bossIds" field.</summary>
    public const int BossIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_bossIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> bossIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 需要查看的ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BossIds {
      get { return bossIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChallengeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChallengeId);
      }
      bossIds_.WriteTo(output, _repeated_bossIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChallengeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId);
      }
      size += bossIds_.CalculateSize(_repeated_bossIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChallengeId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            bossIds_.AddEntriesFrom(input, _repeated_bossIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossMapInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossMapInfoRes> _parser = new pb::MessageParser<CmdWildBossMapInfoRes>(() => new CmdWildBossMapInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossMapInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossIds" field.</summary>
    public const int BossIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_bossIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> bossIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BossIds {
      get { return bossIds_; }
    }

    /// <summary>Field number for the "bossCounts" field.</summary>
    public const int BossCountsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_bossCounts_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> bossCounts_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BossCounts {
      get { return bossCounts_; }
    }

    /// <summary>Field number for the "challengeId" field.</summary>
    public const int ChallengeIdFieldNumber = 3;
    private uint challengeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeId {
      get { return challengeId_; }
      set {
        challengeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bossIds_.WriteTo(output, _repeated_bossIds_codec);
      bossCounts_.WriteTo(output, _repeated_bossCounts_codec);
      if (ChallengeId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChallengeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bossIds_.CalculateSize(_repeated_bossIds_codec);
      size += bossCounts_.CalculateSize(_repeated_bossCounts_codec);
      if (ChallengeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            bossIds_.AddEntriesFrom(input, _repeated_bossIds_codec);
            break;
          }
          case 18:
          case 16: {
            bossCounts_.AddEntriesFrom(input, _repeated_bossCounts_codec);
            break;
          }
          case 24: {
            ChallengeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossRewardDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossRewardDataNtf> _parser = new pb::MessageParser<CmdWildBossRewardDataNtf>(() => new CmdWildBossRewardDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossRewardDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private global::Packet.RewardData reward_;
    /// <summary>
    /// 奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RewardData Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = new global::Packet.RewardData();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossBattleIdNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossBattleIdNtf> _parser = new pb::MessageParser<CmdWildBossBattleIdNtf>(() => new CmdWildBossBattleIdNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossBattleIdNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "npc_uid" field.</summary>
    public const int NpcUidFieldNumber = 1;
    private ulong npcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NpcUid);
      }
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcUid = input.ReadUInt64();
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdWildBossWatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdWildBossWatchReq> _parser = new pb::MessageParser<CmdWildBossWatchReq>(() => new CmdWildBossWatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdWildBossWatchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bossGuid" field.</summary>
    public const int BossGuidFieldNumber = 1;
    private ulong bossGuid_;
    /// <summary>
    ///guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BossGuid {
      get { return bossGuid_; }
      set {
        bossGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossGuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BossGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BossGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossGuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
