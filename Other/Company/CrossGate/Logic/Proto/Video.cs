// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdVideo {
    None = 0,
    /// <summary>
    ///请求打开个人中心
    /// </summary>
    OpenPersonCenterReq = 7305,
    /// <summary>
    ///返回
    /// </summary>
    OpenPersonCenterRes = 7306,
    /// <summary>
    ///请求我的上传列表
    /// </summary>
    MineUploadListReq = 7307,
    /// <summary>
    ///返回
    /// </summary>
    MineUploadListRes = 7308,
    /// <summary>
    ///请求我的收藏列表
    /// </summary>
    MineCollectListReq = 7309,
    /// <summary>
    ///返回
    /// </summary>
    MineCollectListRes = 7310,
    /// <summary>
    ///请求我的本地列表
    /// </summary>
    MineLocalListReq = 7311,
    /// <summary>
    ///返回
    /// </summary>
    MineLocalListRes = 7312,
    /// <summary>
    ///请求本月最佳
    /// </summary>
    MonthBestListReq = 7313,
    /// <summary>
    ///返回
    /// </summary>
    MonthBestListRes = 7314,
    /// <summary>
    ///请求最近上传
    /// </summary>
    LastUploadListReq = 7315,
    /// <summary>
    ///返回				
    /// </summary>
    LastUploadListRes = 7316,
    /// <summary>
    ///请求频道分享
    /// </summary>
    ShareChannelReq = 7317,
    /// <summary>
    ///返回
    /// </summary>
    ShareChannelRes = 7318,
    /// <summary>
    ///请求播放
    /// </summary>
    PlayVideoReq = 7319,
    /// <summary>
    ///返回
    /// </summary>
    PlayVideoRes = 7320,
    /// <summary>
    ///请求收藏
    /// </summary>
    CollectVideoReq = 7323,
    /// <summary>
    ///返回
    /// </summary>
    CollectVideoRes = 7324,
    /// <summary>
    ///请求取消收藏
    /// </summary>
    CancelCollectReq = 7325,
    /// <summary>
    ///返回
    /// </summary>
    CancelCollectRes = 7326,
    /// <summary>
    ///请求点赞
    /// </summary>
    LikeVideoReq = 7327,
    /// <summary>
    ///返回
    /// </summary>
    LikeVideoRes = 7328,
    /// <summary>
    ///请求点赞
    /// </summary>
    CancelLikeReq = 7329,
    /// <summary>
    ///返回
    /// </summary>
    CancelLikeRes = 7330,
    /// <summary>
    ///请求开启弹幕
    /// </summary>
    OpenBulletReq = 7331,
    /// <summary>
    ///返回
    /// </summary>
    OpenBulletRes = 7332,
    /// <summary>
    ///请求关闭弹幕
    /// </summary>
    CloseBulletReq = 7333,
    /// <summary>
    ///返回
    /// </summary>
    CloseBulletRes = 7334,
    /// <summary>
    ///请求发送弹幕
    /// </summary>
    SendBulletReq = 7335,
    /// <summary>
    ///返回
    /// </summary>
    SendBulletRes = 7336,
    /// <summary>
    ///请求上传录像
    /// </summary>
    UploadVideoReq = 7337,
    /// <summary>
    ///返回
    /// </summary>
    UploadVideoRes = 7338,
    /// <summary>
    ///请求删除本地录像
    /// </summary>
    DeleteLocalReq = 7339,
    /// <summary>
    ///返回
    /// </summary>
    DeleteLocalRes = 7340,
    /// <summary>
    ///请求删除上传录像
    /// </summary>
    DeleteUploadReq = 7341,
    /// <summary>
    ///返回
    /// </summary>
    DeleteUploadRes = 7342,
    /// <summary>
    ///请求我的交互信息
    /// </summary>
    MineMutualInfoReq = 7343,
    /// <summary>
    ///返回
    /// </summary>
    MineMutualInfoRes = 7344,
    /// <summary>
    ///请求录像基础详情
    /// </summary>
    VideoBaseDetailReq = 7345,
    /// <summary>
    ///返回
    /// </summary>
    VideoBaseDetailRes = 7346,
    /// <summary>
    ///请求录像交互详情
    /// </summary>
    VideoMutualDetailReq = 7347,
    /// <summary>
    ///返回
    /// </summary>
    VideoMutualDetailRes = 7348,
    /// <summary>
    ///请求录像展示详情
    /// </summary>
    VideoShowDetailReq = 7349,
    /// <summary>
    ///返回
    /// </summary>
    VideoShowDetailRes = 7350,
    /// <summary>
    ///请求录像播放详情
    /// </summary>
    VideoPlayDetailReq = 7351,
    /// <summary>
    ///返回
    /// </summary>
    VideoPlayDetailRes = 7352,
  }

  public enum ErrorVideo {
    None = 0,
    /// <summary>
    ///频繁请求个人中心
    /// </summary>
    TooFastOpenCenter = 7301,
    /// <summary>
    ///频繁请求上传列表
    /// </summary>
    TooFastUploadList = 7302,
    /// <summary>
    ///频繁请求收藏列表
    /// </summary>
    TooFastCollectList = 7303,
    /// <summary>
    ///频繁请求本地列表
    /// </summary>
    TooFastLocalList = 7304,
    /// <summary>
    ///频繁请求本月最佳列表
    /// </summary>
    TooFastMbestList = 7305,
    /// <summary>
    ///频繁请求最近上传列表
    /// </summary>
    TooFastLastupList = 7306,
    /// <summary>
    ///频繁播放
    /// </summary>
    TooFastPlay = 7307,
    /// <summary>
    ///录像不存在
    /// </summary>
    NotExistVideo = 7320,
    /// <summary>
    ///上传录像不存在
    /// </summary>
    NotExistVideoUpload = 7321,
    /// <summary>
    ///本地录像不存在
    /// </summary>
    NotExistVideoLocal = 7322,
    /// <summary>
    ///收藏录像不存在
    /// </summary>
    NotExistVideoCollect = 7323,
    /// <summary>
    ///不可上传状态
    /// </summary>
    StateCanNotUpload = 7340,
    /// <summary>
    ///不可删除上传状态
    /// </summary>
    StateCanNotDelUpload = 7341,
    /// <summary>
    ///不可删除本地状态
    /// </summary>
    StateCanNotDelLocal = 7342,
    /// <summary>
    ///不是上传状态
    /// </summary>
    IsNotStateUpload = 7343,
    /// <summary>
    ///不是战斗参与方
    /// </summary>
    NotFightPlayer = 7360,
    /// <summary>
    ///录像标题过长
    /// </summary>
    TitleTooLength = 7361,
    /// <summary>
    ///录像的类型错误
    /// </summary>
    FirstSecondInValid = 7362,
    /// <summary>
    ///同频道分享数量过多
    /// </summary>
    TooMuchChannelShare = 7363,
    /// <summary>
    ///错误的分享频道
    /// </summary>
    ErrorChannelShare = 7364,
    /// <summary>
    ///收藏的录像作者不存在
    /// </summary>
    CollectAuthorNotExist = 7365,
    /// <summary>
    ///重复的收藏同一录像同一作者
    /// </summary>
    CollectRepeated = 7366,
    /// <summary>
    ///点赞的录像作者不存在
    /// </summary>
    LikeAuthorNotExist = 7367,
    /// <summary>
    ///重复的点赞同一录像同一作者
    /// </summary>
    LikeRepeated = 7368,
    /// <summary>
    ///不在播放状态
    /// </summary>
    NotPlaying = 7369,
    /// <summary>
    ///回合Id错误
    /// </summary>
    RoundIdGreater = 7370,
    /// <summary>
    ///系统卸载录像错误
    /// </summary>
    SysVideoUnload = 7371,
    /// <summary>
    ///重复的开启弹幕开关
    /// </summary>
    OpenBulletSwitchRepeated = 7372,
    /// <summary>
    ///重复的关闭弹幕开关
    /// </summary>
    ColseBulletSwitchRepeated = 7373,
    /// <summary>
    ///不能播放录像
    /// </summary>
    CanNotPlaying = 7374,
    /// <summary>
    ///录像标题不是utf8字符
    /// </summary>
    TitleNotUtf8 = 7375,
    /// <summary>
    ///录像类型不存在
    /// </summary>
    VideoTypeNotFind = 7376,
    /// <summary>
    ///录像Gm指令参数错误
    /// </summary>
    VideoGmParam = 7377,
    /// <summary>
    ///录像弹幕过长
    /// </summary>
    BulletTooLength = 7378,
    /// <summary>
    ///录像弹幕不是utf8字符
    /// </summary>
    BulletNotUtf8 = 7379,
    /// <summary>
    ///录像分享太频繁
    /// </summary>
    NotExpireShareTime = 7380,
    /// <summary>
    ///错误的频道参数(scene)
    /// </summary>
    ErrorChannelParam = 7381,
    /// <summary>
    ///错误的家族频道参数(scene)
    /// </summary>
    ErrorChannelParamFamily = 7382,
    /// <summary>
    ///错误的队伍频道参数(scene)
    /// </summary>
    ErrorChannelParamTeam = 7383,
    /// <summary>
    ///未找到分享主角
    /// </summary>
    NotFindShareRole = 7384,
    /// <summary>
    ///错误的频道参数(game)
    /// </summary>
    ErrorChannelParamGame = 7385,
    /// <summary>
    ///错误的家族频道参数(game)
    /// </summary>
    ErrorChannelParamFamilyGame = 7386,
    /// <summary>
    ///错误的队伍频道参数(game)
    /// </summary>
    ErrorChannelParamTeamGame = 7387,
    /// <summary>
    ///错误的回合Id
    /// </summary>
    ErrorRoundId = 7388,
    /// <summary>
    ///超过可上传上限
    /// </summary>
    TooMuchUpload = 7389,
  }

  /// <summary>
  ///录像功能字段枚举
  /// </summary>
  public enum VideoFuncType {
    /// <summary>
    ///默认
    /// </summary>
    None = 0,
    /// <summary>
    ///已点赞
    /// </summary>
    Liked = 1,
    /// <summary>
    ///已收藏
    /// </summary>
    Collected = 2,
    Max = 3,
  }

  /// <summary>
  ///个人中心Button枚举
  /// </summary>
  public enum VideoButton {
    None = 0,
    /// <summary>
    ///我的上传
    /// </summary>
    Upload = 1,
    /// <summary>
    ///我的本地
    /// </summary>
    Local = 2,
    /// <summary>
    ///我的收藏
    /// </summary>
    Collect = 3,
    /// <summary>
    ///本月最佳
    /// </summary>
    MonthBest = 4,
    /// <summary>
    ///最近上传
    /// </summary>
    LastUp = 5,
    Max = 6,
  }

  /// <summary>
  ///分享频道枚举
  /// </summary>
  public enum ShareChannelType {
    ShareChannelNone = 0,
    /// <summary>
    ///好友
    /// </summary>
    ShareChannelFriend = 1,
    /// <summary>
    ///家族
    /// </summary>
    ShareChannelFamily = 2,
    /// <summary>
    ///世界
    /// </summary>
    ShareChannelWorld = 3,
    /// <summary>
    ///队伍
    /// </summary>
    ShareChannelTeam = 4,
    ShareChannelMax = 5,
  }

  /// <summary>
  ///操作录像途径
  /// </summary>
  public enum VideoWhere {
    None = 0,
    /// <summary>
    ///我的上传
    /// </summary>
    Upload = 1,
    /// <summary>
    ///我的本地
    /// </summary>
    Local = 2,
    /// <summary>
    ///我的收藏
    /// </summary>
    Collect = 3,
    /// <summary>
    ///本月最佳
    /// </summary>
    Mbest = 4,
    /// <summary>
    ///最近上传
    /// </summary>
    Lastup = 5,
    /// <summary>
    ///好友分享
    /// </summary>
    ChannelFriend = 6,
    /// <summary>
    ///家族分享
    /// </summary>
    ChannelFamily = 7,
    Max = 8,
  }

  /// <summary>
  ///录像一级分类
  /// </summary>
  public enum VideoFirstType {
    None = 0,
    /// <summary>
    ///类型1
    /// </summary>
    _1 = 1,
    /// <summary>
    ///类型2
    /// </summary>
    _2 = 2,
    Max = 3,
  }

  /// <summary>
  ///录像二级分类
  /// </summary>
  public enum VideoSecondType {
    None = 0,
    /// <summary>
    ///类型1
    /// </summary>
    _1 = 1,
    /// <summary>
    ///类型2
    /// </summary>
    _2 = 2,
    Max = 3,
  }

  /// <summary>
  ///播放详情类型
  /// </summary>
  public enum enPlayDetailType {
    /// <summary>
    ///默认
    /// </summary>
    PlayDetailTypeNone = 0,
    /// <summary>
    ///弹幕
    /// </summary>
    PlayDetailTypeBullet = 1,
    /// <summary>
    ///播放
    /// </summary>
    PlayDetailTypePlay = 2,
    /// <summary>
    ///弹幕+播放
    /// </summary>
    PlayDetailTypeBoth = 3,
    /// <summary>
    ///最大
    /// </summary>
    PlayDetailTypeMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///个人中心
  /// </summary>
  public sealed class VideoPersonCenter : pb::IMessage {
    private static readonly pb::MessageParser<VideoPersonCenter> _parser = new pb::MessageParser<VideoPersonCenter>(() => new VideoPersonCenter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPersonCenter> Parser { get { return _parser; } }

    /// <summary>Field number for the "recv" field.</summary>
    public const int RecvFieldNumber = 2;
    private global::Packet.VideoPersonCenterMutualInfo recv_;
    /// <summary>
    ///交互信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPersonCenterMutualInfo Recv {
      get { return recv_; }
      set {
        recv_ = value;
      }
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 3;
    private global::Packet.VideoPersonCenterMutualInfo send_;
    /// <summary>
    ///交互信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPersonCenterMutualInfo Send {
      get { return send_; }
      set {
        send_ = value;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 4;
    private global::Packet.VideoButton button_ = 0;
    /// <summary>
    ///选中的button
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoButton Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    /// <summary>Field number for the "upload" field.</summary>
    public const int UploadFieldNumber = 5;
    private global::Packet.MineUploadList upload_;
    /// <summary>
    ///上传列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineUploadList Upload {
      get { return upload_; }
      set {
        upload_ = value;
      }
    }

    /// <summary>Field number for the "collect" field.</summary>
    public const int CollectFieldNumber = 6;
    private global::Packet.MineCollectList collect_;
    /// <summary>
    ///收藏列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineCollectList Collect {
      get { return collect_; }
      set {
        collect_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 7;
    private global::Packet.MineLocalList local_;
    /// <summary>
    ///本地列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineLocalList Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "bulletSwitch" field.</summary>
    public const int BulletSwitchFieldNumber = 8;
    private bool bulletSwitch_;
    /// <summary>
    ///弹幕开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BulletSwitch {
      get { return bulletSwitch_; }
      set {
        bulletSwitch_ = value;
      }
    }

    /// <summary>Field number for the "worldTime" field.</summary>
    public const int WorldTimeFieldNumber = 9;
    private uint worldTime_;
    /// <summary>
    ///世界频道冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WorldTime {
      get { return worldTime_; }
      set {
        worldTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recv_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Recv);
      }
      if (send_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Send);
      }
      if (Button != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Button);
      }
      if (upload_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Upload);
      }
      if (collect_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Collect);
      }
      if (local_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Local);
      }
      if (BulletSwitch != false) {
        output.WriteRawTag(64);
        output.WriteBool(BulletSwitch);
      }
      if (WorldTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(WorldTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recv);
      }
      if (send_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
      }
      if (Button != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Button);
      }
      if (upload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Upload);
      }
      if (collect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collect);
      }
      if (local_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      if (BulletSwitch != false) {
        size += 1 + 1;
      }
      if (WorldTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WorldTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (recv_ == null) {
              recv_ = new global::Packet.VideoPersonCenterMutualInfo();
            }
            input.ReadMessage(recv_);
            break;
          }
          case 26: {
            if (send_ == null) {
              send_ = new global::Packet.VideoPersonCenterMutualInfo();
            }
            input.ReadMessage(send_);
            break;
          }
          case 32: {
            button_ = (global::Packet.VideoButton) input.ReadEnum();
            break;
          }
          case 42: {
            if (upload_ == null) {
              upload_ = new global::Packet.MineUploadList();
            }
            input.ReadMessage(upload_);
            break;
          }
          case 50: {
            if (collect_ == null) {
              collect_ = new global::Packet.MineCollectList();
            }
            input.ReadMessage(collect_);
            break;
          }
          case 58: {
            if (local_ == null) {
              local_ = new global::Packet.MineLocalList();
            }
            input.ReadMessage(local_);
            break;
          }
          case 64: {
            BulletSwitch = input.ReadBool();
            break;
          }
          case 72: {
            WorldTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///个人交互信息
  /// </summary>
  public sealed class VideoPersonCenterMutualInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoPersonCenterMutualInfo> _parser = new pb::MessageParser<VideoPersonCenterMutualInfo>(() => new VideoPersonCenterMutualInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPersonCenterMutualInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "like" field.</summary>
    public const int LikeFieldNumber = 1;
    private uint like_;
    /// <summary>
    ///点赞数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Like {
      get { return like_; }
      set {
        like_ = value;
      }
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 2;
    private uint video_;
    /// <summary>
    ///录像数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 3;
    private uint play_;
    /// <summary>
    ///播放数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Play {
      get { return play_; }
      set {
        play_ = value;
      }
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 4;
    private uint bullet_;
    /// <summary>
    ///弹幕数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bullet {
      get { return bullet_; }
      set {
        bullet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Like != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Like);
      }
      if (Video != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Video);
      }
      if (Play != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Play);
      }
      if (Bullet != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bullet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Like != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Like);
      }
      if (Video != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Video);
      }
      if (Play != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Play);
      }
      if (Bullet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bullet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Like = input.ReadUInt32();
            break;
          }
          case 16: {
            Video = input.ReadUInt32();
            break;
          }
          case 24: {
            Play = input.ReadUInt32();
            break;
          }
          case 32: {
            Bullet = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传列表录像对象
  /// </summary>
  public sealed class ListObjectUpload : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectUpload> _parser = new pb::MessageParser<ListObjectUpload>(() => new ListObjectUpload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectUpload> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 2;
    private uint function_;
    /// <summary>
    ///功能字段位操作VideoFuncType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 3;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "abrief" field.</summary>
    public const int AbriefFieldNumber = 4;
    private global::Packet.VideoAuthorBrief abrief_;
    /// <summary>
    ///录像作者简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoAuthorBrief Abrief {
      get { return abrief_; }
      set {
        abrief_ = value;
      }
    }

    /// <summary>Field number for the "mbrief" field.</summary>
    public const int MbriefFieldNumber = 5;
    private global::Packet.VideoMutualBrief mbrief_;
    /// <summary>
    ///录像交互简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualBrief Mbrief {
      get { return mbrief_; }
      set {
        mbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (Function != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Function);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bbrief);
      }
      if (abrief_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Abrief);
      }
      if (mbrief_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Function);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (abrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abrief);
      }
      if (mbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            Function = input.ReadUInt32();
            break;
          }
          case 26: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 34: {
            if (abrief_ == null) {
              abrief_ = new global::Packet.VideoAuthorBrief();
            }
            input.ReadMessage(abrief_);
            break;
          }
          case 42: {
            if (mbrief_ == null) {
              mbrief_ = new global::Packet.VideoMutualBrief();
            }
            input.ReadMessage(mbrief_);
            break;
          }
          case 50: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上传列表录像展示详情
  /// </summary>
  public sealed class ListObjectUploadShowDetail : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectUploadShowDetail> _parser = new pb::MessageParser<ListObjectUploadShowDetail>(() => new ListObjectUploadShowDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectUploadShowDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rbrief" field.</summary>
    public const int RbriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief rbrief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Rbrief {
      get { return rbrief_; }
      set {
        rbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rbrief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (rbrief_ == null) {
              rbrief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(rbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的上传列表
  /// </summary>
  public sealed class MineUploadList : pb::IMessage {
    private static readonly pb::MessageParser<MineUploadList> _parser = new pb::MessageParser<MineUploadList>(() => new MineUploadList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MineUploadList> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    /// <summary>
    ///请求列表内容的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 2;
    private uint tokenExpire_;
    /// <summary>
    ///token有效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///选中的列表中的录像位置(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "videos" field.</summary>
    public const int VideosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ListObjectUpload> _repeated_videos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ListObjectUpload.Parser);
    private readonly pbc::RepeatedField<global::Packet.ListObjectUpload> videos_ = new pbc::RepeatedField<global::Packet.ListObjectUpload>();
    /// <summary>
    ///录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ListObjectUpload> Videos {
      get { return videos_; }
    }

    /// <summary>Field number for the "choose" field.</summary>
    public const int ChooseFieldNumber = 5;
    private global::Packet.ListObjectUploadShowDetail choose_;
    /// <summary>
    ///pos录像的展示详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ListObjectUploadShowDetail Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenExpire);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      videos_.WriteTo(output, _repeated_videos_codec);
      if (choose_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Choose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += videos_.CalculateSize(_repeated_videos_codec);
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 34: {
            videos_.AddEntriesFrom(input, _repeated_videos_codec);
            break;
          }
          case 42: {
            if (choose_ == null) {
              choose_ = new global::Packet.ListObjectUploadShowDetail();
            }
            input.ReadMessage(choose_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收藏列表录像对象
  /// </summary>
  public sealed class ListObjectCollect : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectCollect> _parser = new pb::MessageParser<ListObjectCollect>(() => new ListObjectCollect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectCollect> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private ulong author_;
    /// <summary>
    ///录像作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private uint function_;
    /// <summary>
    ///功能字段位操作VideoFuncType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 4;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "abrief" field.</summary>
    public const int AbriefFieldNumber = 5;
    private global::Packet.VideoAuthorBrief abrief_;
    /// <summary>
    ///录像作者简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoAuthorBrief Abrief {
      get { return abrief_; }
      set {
        abrief_ = value;
      }
    }

    /// <summary>Field number for the "mbrief" field.</summary>
    public const int MbriefFieldNumber = 6;
    private global::Packet.VideoMutualBrief mbrief_;
    /// <summary>
    ///录像交互简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualBrief Mbrief {
      get { return mbrief_; }
      set {
        mbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 7;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (Author != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Author);
      }
      if (Function != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Function);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bbrief);
      }
      if (abrief_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Abrief);
      }
      if (mbrief_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Mbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (Author != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Author);
      }
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Function);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (abrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abrief);
      }
      if (mbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            Author = input.ReadUInt64();
            break;
          }
          case 24: {
            Function = input.ReadUInt32();
            break;
          }
          case 34: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 42: {
            if (abrief_ == null) {
              abrief_ = new global::Packet.VideoAuthorBrief();
            }
            input.ReadMessage(abrief_);
            break;
          }
          case 50: {
            if (mbrief_ == null) {
              mbrief_ = new global::Packet.VideoMutualBrief();
            }
            input.ReadMessage(mbrief_);
            break;
          }
          case 58: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收藏列表录像展示详情
  /// </summary>
  public sealed class ListObjectCollectShowDetail : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectCollectShowDetail> _parser = new pb::MessageParser<ListObjectCollectShowDetail>(() => new ListObjectCollectShowDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectCollectShowDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rbrief" field.</summary>
    public const int RbriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief rbrief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Rbrief {
      get { return rbrief_; }
      set {
        rbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rbrief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (rbrief_ == null) {
              rbrief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(rbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的收藏列表
  /// </summary>
  public sealed class MineCollectList : pb::IMessage {
    private static readonly pb::MessageParser<MineCollectList> _parser = new pb::MessageParser<MineCollectList>(() => new MineCollectList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MineCollectList> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    /// <summary>
    ///请求列表内容的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 2;
    private uint tokenExpire_;
    /// <summary>
    ///token有效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///选中的列表中的录像位置(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "videos" field.</summary>
    public const int VideosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ListObjectCollect> _repeated_videos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ListObjectCollect.Parser);
    private readonly pbc::RepeatedField<global::Packet.ListObjectCollect> videos_ = new pbc::RepeatedField<global::Packet.ListObjectCollect>();
    /// <summary>
    ///录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ListObjectCollect> Videos {
      get { return videos_; }
    }

    /// <summary>Field number for the "choose" field.</summary>
    public const int ChooseFieldNumber = 5;
    private global::Packet.ListObjectCollectShowDetail choose_;
    /// <summary>
    ///pos录像的展示详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ListObjectCollectShowDetail Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenExpire);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      videos_.WriteTo(output, _repeated_videos_codec);
      if (choose_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Choose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += videos_.CalculateSize(_repeated_videos_codec);
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 34: {
            videos_.AddEntriesFrom(input, _repeated_videos_codec);
            break;
          }
          case 42: {
            if (choose_ == null) {
              choose_ = new global::Packet.ListObjectCollectShowDetail();
            }
            input.ReadMessage(choose_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本地列表录像对象
  /// </summary>
  public sealed class ListObjectLocal : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectLocal> _parser = new pb::MessageParser<ListObjectLocal>(() => new ListObjectLocal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectLocal> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 3;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 34: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收藏列表录像展示详情
  /// </summary>
  public sealed class ListObjectLocalShowDetail : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectLocalShowDetail> _parser = new pb::MessageParser<ListObjectLocalShowDetail>(() => new ListObjectLocalShowDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectLocalShowDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rbrief" field.</summary>
    public const int RbriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief rbrief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Rbrief {
      get { return rbrief_; }
      set {
        rbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rbrief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (rbrief_ == null) {
              rbrief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(rbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///我的本地列表
  /// </summary>
  public sealed class MineLocalList : pb::IMessage {
    private static readonly pb::MessageParser<MineLocalList> _parser = new pb::MessageParser<MineLocalList>(() => new MineLocalList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MineLocalList> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    /// <summary>
    ///请求列表内容的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 2;
    private uint tokenExpire_;
    /// <summary>
    ///token有效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///选中的列表中的录像位置(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "videos" field.</summary>
    public const int VideosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ListObjectLocal> _repeated_videos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ListObjectLocal.Parser);
    private readonly pbc::RepeatedField<global::Packet.ListObjectLocal> videos_ = new pbc::RepeatedField<global::Packet.ListObjectLocal>();
    /// <summary>
    ///录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ListObjectLocal> Videos {
      get { return videos_; }
    }

    /// <summary>Field number for the "choose" field.</summary>
    public const int ChooseFieldNumber = 5;
    private global::Packet.ListObjectLocalShowDetail choose_;
    /// <summary>
    ///pos录像的展示详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ListObjectLocalShowDetail Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenExpire);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      videos_.WriteTo(output, _repeated_videos_codec);
      if (choose_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Choose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += videos_.CalculateSize(_repeated_videos_codec);
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 34: {
            videos_.AddEntriesFrom(input, _repeated_videos_codec);
            break;
          }
          case 42: {
            if (choose_ == null) {
              choose_ = new global::Packet.ListObjectLocalShowDetail();
            }
            input.ReadMessage(choose_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本月最佳列表录像对象
  /// </summary>
  public sealed class ListObjectMonthBest : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectMonthBest> _parser = new pb::MessageParser<ListObjectMonthBest>(() => new ListObjectMonthBest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectMonthBest> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private uint function_;
    /// <summary>
    ///功能字段位操作VideoFuncType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 4;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "abrief" field.</summary>
    public const int AbriefFieldNumber = 5;
    private global::Packet.VideoAuthorBrief abrief_;
    /// <summary>
    ///录像作者简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoAuthorBrief Abrief {
      get { return abrief_; }
      set {
        abrief_ = value;
      }
    }

    /// <summary>Field number for the "mbrief" field.</summary>
    public const int MbriefFieldNumber = 6;
    private global::Packet.VideoMutualBrief mbrief_;
    /// <summary>
    ///录像交互简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualBrief Mbrief {
      get { return mbrief_; }
      set {
        mbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 7;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (Function != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Function);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bbrief);
      }
      if (abrief_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Abrief);
      }
      if (mbrief_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Mbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Function);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (abrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abrief);
      }
      if (mbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            Function = input.ReadUInt32();
            break;
          }
          case 34: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 42: {
            if (abrief_ == null) {
              abrief_ = new global::Packet.VideoAuthorBrief();
            }
            input.ReadMessage(abrief_);
            break;
          }
          case 50: {
            if (mbrief_ == null) {
              mbrief_ = new global::Packet.VideoMutualBrief();
            }
            input.ReadMessage(mbrief_);
            break;
          }
          case 58: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本月最佳列表录像展示详情
  /// </summary>
  public sealed class ListObjectMonthBestShowDetail : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectMonthBestShowDetail> _parser = new pb::MessageParser<ListObjectMonthBestShowDetail>(() => new ListObjectMonthBestShowDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectMonthBestShowDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rbrief" field.</summary>
    public const int RbriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief rbrief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Rbrief {
      get { return rbrief_; }
      set {
        rbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rbrief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (rbrief_ == null) {
              rbrief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(rbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本月最佳列表
  /// </summary>
  public sealed class MonthBestList : pb::IMessage {
    private static readonly pb::MessageParser<MonthBestList> _parser = new pb::MessageParser<MonthBestList>(() => new MonthBestList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthBestList> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    /// <summary>
    ///请求列表内容的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 2;
    private uint tokenExpire_;
    /// <summary>
    ///token有效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///选中的列表中的录像位置(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "videos" field.</summary>
    public const int VideosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ListObjectMonthBest> _repeated_videos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ListObjectMonthBest.Parser);
    private readonly pbc::RepeatedField<global::Packet.ListObjectMonthBest> videos_ = new pbc::RepeatedField<global::Packet.ListObjectMonthBest>();
    /// <summary>
    ///录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ListObjectMonthBest> Videos {
      get { return videos_; }
    }

    /// <summary>Field number for the "choose" field.</summary>
    public const int ChooseFieldNumber = 5;
    private global::Packet.ListObjectMonthBestShowDetail choose_;
    /// <summary>
    ///列表中选中的录像详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ListObjectMonthBestShowDetail Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenExpire);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      videos_.WriteTo(output, _repeated_videos_codec);
      if (choose_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Choose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += videos_.CalculateSize(_repeated_videos_codec);
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 34: {
            videos_.AddEntriesFrom(input, _repeated_videos_codec);
            break;
          }
          case 42: {
            if (choose_ == null) {
              choose_ = new global::Packet.ListObjectMonthBestShowDetail();
            }
            input.ReadMessage(choose_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///最近上传列表录像对象
  /// </summary>
  public sealed class ListObjectLastUpload : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectLastUpload> _parser = new pb::MessageParser<ListObjectLastUpload>(() => new ListObjectLastUpload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectLastUpload> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private uint function_;
    /// <summary>
    ///功能字段位操作VideoFuncType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 4;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "abrief" field.</summary>
    public const int AbriefFieldNumber = 5;
    private global::Packet.VideoAuthorBrief abrief_;
    /// <summary>
    ///录像作者简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoAuthorBrief Abrief {
      get { return abrief_; }
      set {
        abrief_ = value;
      }
    }

    /// <summary>Field number for the "mbrief" field.</summary>
    public const int MbriefFieldNumber = 6;
    private global::Packet.VideoMutualBrief mbrief_;
    /// <summary>
    ///录像交互简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualBrief Mbrief {
      get { return mbrief_; }
      set {
        mbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 7;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (Function != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Function);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bbrief);
      }
      if (abrief_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Abrief);
      }
      if (mbrief_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Mbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (Function != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Function);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (abrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abrief);
      }
      if (mbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            Function = input.ReadUInt32();
            break;
          }
          case 34: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 42: {
            if (abrief_ == null) {
              abrief_ = new global::Packet.VideoAuthorBrief();
            }
            input.ReadMessage(abrief_);
            break;
          }
          case 50: {
            if (mbrief_ == null) {
              mbrief_ = new global::Packet.VideoMutualBrief();
            }
            input.ReadMessage(mbrief_);
            break;
          }
          case 58: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///最近上传列表录像展示详情
  /// </summary>
  public sealed class ListObjectLastUploadShowDetail : pb::IMessage {
    private static readonly pb::MessageParser<ListObjectLastUploadShowDetail> _parser = new pb::MessageParser<ListObjectLastUploadShowDetail>(() => new ListObjectLastUploadShowDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListObjectLastUploadShowDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rbrief" field.</summary>
    public const int RbriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief rbrief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Rbrief {
      get { return rbrief_; }
      set {
        rbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rbrief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (rbrief_ == null) {
              rbrief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(rbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///最近上传列表
  /// </summary>
  public sealed class LastUploadList : pb::IMessage {
    private static readonly pb::MessageParser<LastUploadList> _parser = new pb::MessageParser<LastUploadList>(() => new LastUploadList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastUploadList> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    /// <summary>
    ///请求列表内容的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "tokenExpire" field.</summary>
    public const int TokenExpireFieldNumber = 2;
    private uint tokenExpire_;
    /// <summary>
    ///token有效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TokenExpire {
      get { return tokenExpire_; }
      set {
        tokenExpire_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///选中的列表中的录像位置(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "videos" field.</summary>
    public const int VideosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ListObjectLastUpload> _repeated_videos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ListObjectLastUpload.Parser);
    private readonly pbc::RepeatedField<global::Packet.ListObjectLastUpload> videos_ = new pbc::RepeatedField<global::Packet.ListObjectLastUpload>();
    /// <summary>
    ///录像列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ListObjectLastUpload> Videos {
      get { return videos_; }
    }

    /// <summary>Field number for the "choose" field.</summary>
    public const int ChooseFieldNumber = 5;
    private global::Packet.ListObjectLastUploadShowDetail choose_;
    /// <summary>
    ///列表中选中的录像详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ListObjectLastUploadShowDetail Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (TokenExpire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TokenExpire);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      videos_.WriteTo(output, _repeated_videos_codec);
      if (choose_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Choose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (TokenExpire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TokenExpire);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      size += videos_.CalculateSize(_repeated_videos_codec);
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            TokenExpire = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 34: {
            videos_.AddEntriesFrom(input, _repeated_videos_codec);
            break;
          }
          case 42: {
            if (choose_ == null) {
              choose_ = new global::Packet.ListObjectLastUploadShowDetail();
            }
            input.ReadMessage(choose_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像播放详情
  /// </summary>
  public sealed class VideoPlayDetail : pb::IMessage {
    private static readonly pb::MessageParser<VideoPlayDetail> _parser = new pb::MessageParser<VideoPlayDetail>(() => new VideoPlayDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 1;
    private global::Packet.VideoBulletDetail bullet_;
    /// <summary>
    ///弹幕详情(弹幕按钮关闭时不填充)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBulletDetail Bullet {
      get { return bullet_; }
      set {
        bullet_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private global::Packet.VideoRoundDetail round_;
    /// <summary>
    ///回合详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundDetail Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bullet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bullet);
      }
      if (round_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bullet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bullet);
      }
      if (round_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bullet_ == null) {
              bullet_ = new global::Packet.VideoBulletDetail();
            }
            input.ReadMessage(bullet_);
            break;
          }
          case 18: {
            if (round_ == null) {
              round_ = new global::Packet.VideoRoundDetail();
            }
            input.ReadMessage(round_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像基础简介
  /// </summary>
  public sealed class VideoBaseBrief : pb::IMessage {
    private static readonly pb::MessageParser<VideoBaseBrief> _parser = new pb::MessageParser<VideoBaseBrief>(() => new VideoBaseBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoBaseBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 1;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    /// <summary>Field number for the "videoTime" field.</summary>
    public const int VideoTimeFieldNumber = 2;
    private uint videoTime_;
    /// <summary>
    ///录制时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoTime {
      get { return videoTime_; }
      set {
        videoTime_ = value;
      }
    }

    /// <summary>Field number for the "maxRound" field.</summary>
    public const int MaxRoundFieldNumber = 3;
    private uint maxRound_;
    /// <summary>
    ///最大回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxRound {
      get { return maxRound_; }
      set {
        maxRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VideoType);
      }
      if (VideoTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VideoTime);
      }
      if (MaxRound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      if (VideoTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoTime);
      }
      if (MaxRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoType = input.ReadUInt32();
            break;
          }
          case 16: {
            VideoTime = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像扩展信息
  /// </summary>
  public sealed class VideoExtendInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoExtendInfo> _parser = new pb::MessageParser<VideoExtendInfo>(() => new VideoExtendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoExtendInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankId" field.</summary>
    public const int RankIdFieldNumber = 1;
    private uint rankId_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankId {
      get { return rankId_; }
      set {
        rankId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RankId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像回合简介
  /// </summary>
  public sealed class VideoRoundBrief : pb::IMessage {
    private static readonly pb::MessageParser<VideoRoundBrief> _parser = new pb::MessageParser<VideoRoundBrief>(() => new VideoRoundBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoRoundBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "contexts" field.</summary>
    public const int ContextsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoFightProto> _repeated_contexts_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoFightProto.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoFightProto> contexts_ = new pbc::RepeatedField<global::Packet.VideoFightProto>();
    /// <summary>
    ///第一回合画面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoFightProto> Contexts {
      get { return contexts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      contexts_.WriteTo(output, _repeated_contexts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += contexts_.CalculateSize(_repeated_contexts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            contexts_.AddEntriesFrom(input, _repeated_contexts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像作者简介
  /// </summary>
  public sealed class VideoAuthorBrief : pb::IMessage {
    private static readonly pb::MessageParser<VideoAuthorBrief> _parser = new pb::MessageParser<VideoAuthorBrief>(() => new VideoAuthorBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoAuthorBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private ulong author_;
    /// <summary>
    ///作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }

    /// <summary>Field number for the "uploadTime" field.</summary>
    public const int UploadTimeFieldNumber = 3;
    private uint uploadTime_;
    /// <summary>
    ///上传时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UploadTime {
      get { return uploadTime_; }
      set {
        uploadTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Title);
      }
      if (Author != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Author);
      }
      if (UploadTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UploadTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (Author != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Author);
      }
      if (UploadTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UploadTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadBytes();
            break;
          }
          case 16: {
            Author = input.ReadUInt64();
            break;
          }
          case 24: {
            UploadTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像交互简介
  /// </summary>
  public sealed class VideoMutualBrief : pb::IMessage {
    private static readonly pb::MessageParser<VideoMutualBrief> _parser = new pb::MessageParser<VideoMutualBrief>(() => new VideoMutualBrief());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoMutualBrief> Parser { get { return _parser; } }

    /// <summary>Field number for the "like" field.</summary>
    public const int LikeFieldNumber = 1;
    private uint like_;
    /// <summary>
    ///点赞数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Like {
      get { return like_; }
      set {
        like_ = value;
      }
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 2;
    private uint bullet_;
    /// <summary>
    ///弹幕数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bullet {
      get { return bullet_; }
      set {
        bullet_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 3;
    private uint play_;
    /// <summary>
    ///播放数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Play {
      get { return play_; }
      set {
        play_ = value;
      }
    }

    /// <summary>Field number for the "collect" field.</summary>
    public const int CollectFieldNumber = 4;
    private uint collect_;
    /// <summary>
    ///收藏数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Collect {
      get { return collect_; }
      set {
        collect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Like != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Like);
      }
      if (Bullet != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Bullet);
      }
      if (Play != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Play);
      }
      if (Collect != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Collect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Like != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Like);
      }
      if (Bullet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bullet);
      }
      if (Play != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Play);
      }
      if (Collect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Collect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Like = input.ReadUInt32();
            break;
          }
          case 16: {
            Bullet = input.ReadUInt32();
            break;
          }
          case 24: {
            Play = input.ReadUInt32();
            break;
          }
          case 32: {
            Collect = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像回合详情
  /// </summary>
  public sealed class VideoRoundDetail : pb::IMessage {
    private static readonly pb::MessageParser<VideoRoundDetail> _parser = new pb::MessageParser<VideoRoundDetail>(() => new VideoRoundDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoRoundDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rounds" field.</summary>
    public const int RoundsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoRoundContext> _repeated_rounds_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoRoundContext.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoRoundContext> rounds_ = new pbc::RepeatedField<global::Packet.VideoRoundContext>();
    /// <summary>
    ///回合内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoRoundContext> Rounds {
      get { return rounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rounds_.WriteTo(output, _repeated_rounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rounds_.CalculateSize(_repeated_rounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rounds_.AddEntriesFrom(input, _repeated_rounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像弹幕详情
  /// </summary>
  public sealed class VideoBulletDetail : pb::IMessage {
    private static readonly pb::MessageParser<VideoBulletDetail> _parser = new pb::MessageParser<VideoBulletDetail>(() => new VideoBulletDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoBulletDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "rounds" field.</summary>
    public const int RoundsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ServerBulletList> _repeated_rounds_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ServerBulletList.Parser);
    private readonly pbc::RepeatedField<global::Packet.ServerBulletList> rounds_ = new pbc::RepeatedField<global::Packet.ServerBulletList>();
    /// <summary>
    ///弹幕列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ServerBulletList> Rounds {
      get { return rounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rounds_.WriteTo(output, _repeated_rounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rounds_.CalculateSize(_repeated_rounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rounds_.AddEntriesFrom(input, _repeated_rounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像参与方详情
  /// </summary>
  public sealed class VideoPlayerList : pb::IMessage {
    private static readonly pb::MessageParser<VideoPlayerList> _parser = new pb::MessageParser<VideoPlayerList>(() => new VideoPlayerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayerList> Parser { get { return _parser; } }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoPlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoPlayerInfo> players_ = new pbc::RepeatedField<global::Packet.VideoPlayerInfo>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoPlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像成员信息
  /// </summary>
  public sealed class VideoPlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoPlayerInfo> _parser = new pb::MessageParser<VideoPlayerInfo>(() => new VideoPlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private pb::ByteString nickName_ = pb::ByteString.Empty;
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    ///玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 5;
    private uint headFrame_;
    /// <summary>
    ///玩家头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    /// <summary>
    ///玩家职业id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 7;
    private uint career_;
    /// <summary>
    ///玩家职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 8;
    private uint careerRank_;
    /// <summary>
    ///玩家等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 9;
    private uint photo_;
    /// <summary>
    ///玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Photo {
      get { return photo_; }
      set {
        photo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeadFrame);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
      if (Career != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Career);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CareerRank);
      }
      if (Photo != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Photo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrame);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (Photo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Photo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            NickName = input.ReadBytes();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            HeadFrame = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 56: {
            Career = input.ReadUInt32();
            break;
          }
          case 64: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 72: {
            Photo = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像回合内容
  /// </summary>
  public sealed class VideoRoundContext : pb::IMessage {
    private static readonly pb::MessageParser<VideoRoundContext> _parser = new pb::MessageParser<VideoRoundContext>(() => new VideoRoundContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoRoundContext> Parser { get { return _parser; } }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private uint roundId_;
    /// <summary>
    ///回合Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "contexts" field.</summary>
    public const int ContextsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.VideoFightProto> _repeated_contexts_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.VideoFightProto.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoFightProto> contexts_ = new pbc::RepeatedField<global::Packet.VideoFightProto>();
    /// <summary>
    ///回合内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoFightProto> Contexts {
      get { return contexts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundId);
      }
      contexts_.WriteTo(output, _repeated_contexts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      size += contexts_.CalculateSize(_repeated_contexts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 18: {
            contexts_.AddEntriesFrom(input, _repeated_contexts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像战斗协议
  /// </summary>
  public sealed class VideoFightProto : pb::IMessage {
    private static readonly pb::MessageParser<VideoFightProto> _parser = new pb::MessageParser<VideoFightProto>(() => new VideoFightProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoFightProto> Parser { get { return _parser; } }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private uint msgId_;
    /// <summary>
    ///协议号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ///协议内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MsgId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt32();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个客户端弹幕
  /// </summary>
  public sealed class ClientBullet : pb::IMessage {
    private static readonly pb::MessageParser<ClientBullet> _parser = new pb::MessageParser<ClientBullet>(() => new ClientBullet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientBullet> Parser { get { return _parser; } }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private uint roundId_;
    /// <summary>
    ///回合Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private pb::ByteString context_ = pb::ByteString.Empty;
    /// <summary>
    ///弹幕内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundId);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 18: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个服务器弹幕
  /// </summary>
  public sealed class ServerBullet : pb::IMessage {
    private static readonly pb::MessageParser<ServerBullet> _parser = new pb::MessageParser<ServerBullet>(() => new ServerBullet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerBullet> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    ///弹幕时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private pb::ByteString context_ = pb::ByteString.Empty;
    /// <summary>
    ///弹幕内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 18: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器弹幕列表
  /// </summary>
  public sealed class ServerBulletList : pb::IMessage {
    private static readonly pb::MessageParser<ServerBulletList> _parser = new pb::MessageParser<ServerBulletList>(() => new ServerBulletList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerBulletList> Parser { get { return _parser; } }

    /// <summary>Field number for the "roundId" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private uint roundId_;
    /// <summary>
    ///回合Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "bullets" field.</summary>
    public const int BulletsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ServerBullet> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ServerBullet.Parser);
    private readonly pbc::RepeatedField<global::Packet.ServerBullet> bullets_ = new pbc::RepeatedField<global::Packet.ServerBullet>();
    /// <summary>
    ///弹幕列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ServerBullet> Bullets {
      get { return bullets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundId);
      }
      bullets_.WriteTo(output, _repeated_bullets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 18: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个客户端分享录像
  /// </summary>
  public sealed class ClientShareVideo : pb::IMessage {
    private static readonly pb::MessageParser<ClientShareVideo> _parser = new pb::MessageParser<ClientShareVideo>(() => new ClientShareVideo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientShareVideo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private ulong author_;
    /// <summary>
    ///录像作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Author {
      get { return author_; }
      set {
        author_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 3;
    private global::Packet.ShareChannelType channel_ = 0;
    /// <summary>
    ///分享频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShareChannelType Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 4;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///录像标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (Author != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Author);
      }
      if (Channel != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Channel);
      }
      if (VideoType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VideoType);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Title);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (Author != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Author);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Channel);
      }
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            Author = input.ReadUInt64();
            break;
          }
          case 24: {
            channel_ = (global::Packet.ShareChannelType) input.ReadEnum();
            break;
          }
          case 32: {
            VideoType = input.ReadUInt32();
            break;
          }
          case 42: {
            Title = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个服务器分享录像
  /// </summary>
  public sealed class ServerShareVideo : pb::IMessage {
    private static readonly pb::MessageParser<ServerShareVideo> _parser = new pb::MessageParser<ServerShareVideo>(() => new ServerShareVideo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerShareVideo> Parser { get { return _parser; } }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 1;
    private global::Packet.ClientShareVideo video_;
    /// <summary>
    ///录像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ClientShareVideo Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "shareId" field.</summary>
    public const int ShareIdFieldNumber = 2;
    private ulong shareId_;
    /// <summary>
    ///分享者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShareId {
      get { return shareId_; }
      set {
        shareId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private uint expireTime_;
    /// <summary>
    ///分享失效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "nextShareTime" field.</summary>
    public const int NextShareTimeFieldNumber = 4;
    private uint nextShareTime_;
    /// <summary>
    ///下次分享非世界频道到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextShareTime {
      get { return nextShareTime_; }
      set {
        nextShareTime_ = value;
      }
    }

    /// <summary>Field number for the "nextWorldTime" field.</summary>
    public const int NextWorldTimeFieldNumber = 5;
    private uint nextWorldTime_;
    /// <summary>
    ///下次分享世界频道到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextWorldTime {
      get { return nextWorldTime_; }
      set {
        nextWorldTime_ = value;
      }
    }

    /// <summary>Field number for the "chatFrame" field.</summary>
    public const int ChatFrameFieldNumber = 6;
    private uint chatFrame_;
    /// <summary>
    ///分享者chatFrame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatFrame {
      get { return chatFrame_; }
      set {
        chatFrame_ = value;
      }
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 7;
    private uint chatText_;
    /// <summary>
    ///分享者chatText
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatText {
      get { return chatText_; }
      set {
        chatText_ = value;
      }
    }

    /// <summary>Field number for the "shareName" field.</summary>
    public const int ShareNameFieldNumber = 8;
    private pb::ByteString shareName_ = pb::ByteString.Empty;
    /// <summary>
    ///分享者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ShareName {
      get { return shareName_; }
      set {
        shareName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (video_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Video);
      }
      if (ShareId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ShareId);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTime);
      }
      if (NextShareTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NextShareTime);
      }
      if (NextWorldTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NextWorldTime);
      }
      if (ChatFrame != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChatFrame);
      }
      if (ChatText != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChatText);
      }
      if (ShareName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ShareName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (ShareId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShareId);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      if (NextShareTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextShareTime);
      }
      if (NextWorldTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextWorldTime);
      }
      if (ChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatFrame);
      }
      if (ChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatText);
      }
      if (ShareName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ShareName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (video_ == null) {
              video_ = new global::Packet.ClientShareVideo();
            }
            input.ReadMessage(video_);
            break;
          }
          case 16: {
            ShareId = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpireTime = input.ReadUInt32();
            break;
          }
          case 32: {
            NextShareTime = input.ReadUInt32();
            break;
          }
          case 40: {
            NextWorldTime = input.ReadUInt32();
            break;
          }
          case 48: {
            ChatFrame = input.ReadUInt32();
            break;
          }
          case 56: {
            ChatText = input.ReadUInt32();
            break;
          }
          case 66: {
            ShareName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分享所需的信息
  /// </summary>
  public sealed class ShareNeedInfo : pb::IMessage {
    private static readonly pb::MessageParser<ShareNeedInfo> _parser = new pb::MessageParser<ShareNeedInfo>(() => new ShareNeedInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareNeedInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendIds" field.</summary>
    public const int FriendIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_friendIds_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> friendIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FriendIds {
      get { return friendIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendIds_.WriteTo(output, _repeated_friendIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendIds_.CalculateSize(_repeated_friendIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendIds_.AddEntriesFrom(input, _repeated_friendIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像唯一信息
  /// </summary>
  public sealed class VideoUniqueInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoUniqueInfo> _parser = new pb::MessageParser<VideoUniqueInfo>(() => new VideoUniqueInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoUniqueInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 2;
    private ulong authorId_;
    /// <summary>
    ///作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像基础详情
  /// </summary>
  public sealed class VideoBaseDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoBaseDetailInfo> _parser = new pb::MessageParser<VideoBaseDetailInfo>(() => new VideoBaseDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoBaseDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 2;
    private ulong authorId_;
    /// <summary>
    ///作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "bbrief" field.</summary>
    public const int BbriefFieldNumber = 3;
    private global::Packet.VideoBaseBrief bbrief_;
    /// <summary>
    ///录像基础简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseBrief Bbrief {
      get { return bbrief_; }
      set {
        bbrief_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private global::Packet.VideoPlayerList players_;
    /// <summary>
    ///录像作者参与方列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayerList Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AuthorId);
      }
      if (bbrief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bbrief);
      }
      if (players_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Players);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (bbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbrief);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (bbrief_ == null) {
              bbrief_ = new global::Packet.VideoBaseBrief();
            }
            input.ReadMessage(bbrief_);
            break;
          }
          case 34: {
            if (players_ == null) {
              players_ = new global::Packet.VideoPlayerList();
            }
            input.ReadMessage(players_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像交互详情
  /// </summary>
  public sealed class VideoMutualDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoMutualDetailInfo> _parser = new pb::MessageParser<VideoMutualDetailInfo>(() => new VideoMutualDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoMutualDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 2;
    private ulong authorId_;
    /// <summary>
    ///作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "abrief" field.</summary>
    public const int AbriefFieldNumber = 3;
    private global::Packet.VideoAuthorBrief abrief_;
    /// <summary>
    ///录像作者简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoAuthorBrief Abrief {
      get { return abrief_; }
      set {
        abrief_ = value;
      }
    }

    /// <summary>Field number for the "mbrief" field.</summary>
    public const int MbriefFieldNumber = 4;
    private global::Packet.VideoMutualBrief mbrief_;
    /// <summary>
    ///录像交互简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualBrief Mbrief {
      get { return mbrief_; }
      set {
        mbrief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(AuthorId);
      }
      if (abrief_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Abrief);
      }
      if (mbrief_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mbrief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (abrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abrief);
      }
      if (mbrief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbrief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 16: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (abrief_ == null) {
              abrief_ = new global::Packet.VideoAuthorBrief();
            }
            input.ReadMessage(abrief_);
            break;
          }
          case 34: {
            if (mbrief_ == null) {
              mbrief_ = new global::Packet.VideoMutualBrief();
            }
            input.ReadMessage(mbrief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像展示详情
  /// </summary>
  public sealed class VideoShowDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoShowDetailInfo> _parser = new pb::MessageParser<VideoShowDetailInfo>(() => new VideoShowDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoShowDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "brief" field.</summary>
    public const int BriefFieldNumber = 2;
    private global::Packet.VideoRoundBrief brief_;
    /// <summary>
    ///录像回合简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoRoundBrief Brief {
      get { return brief_; }
      set {
        brief_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (brief_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Brief);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (brief_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brief);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (brief_ == null) {
              brief_ = new global::Packet.VideoRoundBrief();
            }
            input.ReadMessage(brief_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像播放详情
  /// </summary>
  public sealed class VideoPlayDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<VideoPlayDetailInfo> _parser = new pb::MessageParser<VideoPlayDetailInfo>(() => new VideoPlayDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 2;
    private global::Packet.VideoPlayDetail play_;
    /// <summary>
    ///录像播放详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayDetail Play {
      get { return play_; }
      set {
        play_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
      if (play_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Play);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (play_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Play);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (play_ == null) {
              play_ = new global::Packet.VideoPlayDetail();
            }
            input.ReadMessage(play_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像唯一信息列表
  /// </summary>
  public sealed class VideoUniqueInfoList : pb::IMessage {
    private static readonly pb::MessageParser<VideoUniqueInfoList> _parser = new pb::MessageParser<VideoUniqueInfoList>(() => new VideoUniqueInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoUniqueInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoUniqueInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoUniqueInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoUniqueInfo> list_ = new pbc::RepeatedField<global::Packet.VideoUniqueInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoUniqueInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像基础详情列表
  /// </summary>
  public sealed class VideoBaseDetailInfoList : pb::IMessage {
    private static readonly pb::MessageParser<VideoBaseDetailInfoList> _parser = new pb::MessageParser<VideoBaseDetailInfoList>(() => new VideoBaseDetailInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoBaseDetailInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoBaseDetailInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoBaseDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoBaseDetailInfo> list_ = new pbc::RepeatedField<global::Packet.VideoBaseDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoBaseDetailInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像交互详情列表
  /// </summary>
  public sealed class VideoMutualDetailInfoList : pb::IMessage {
    private static readonly pb::MessageParser<VideoMutualDetailInfoList> _parser = new pb::MessageParser<VideoMutualDetailInfoList>(() => new VideoMutualDetailInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoMutualDetailInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoMutualDetailInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoMutualDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoMutualDetailInfo> list_ = new pbc::RepeatedField<global::Packet.VideoMutualDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoMutualDetailInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像展示详情列表
  /// </summary>
  public sealed class VideoShowDetailInfoList : pb::IMessage {
    private static readonly pb::MessageParser<VideoShowDetailInfoList> _parser = new pb::MessageParser<VideoShowDetailInfoList>(() => new VideoShowDetailInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoShowDetailInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoShowDetailInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoShowDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoShowDetailInfo> list_ = new pbc::RepeatedField<global::Packet.VideoShowDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoShowDetailInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///录像播放详情列表
  /// </summary>
  public sealed class VideoPlayDetailInfoList : pb::IMessage {
    private static readonly pb::MessageParser<VideoPlayDetailInfoList> _parser = new pb::MessageParser<VideoPlayDetailInfoList>(() => new VideoPlayDetailInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayDetailInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.VideoPlayDetailInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.VideoPlayDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.VideoPlayDetailInfo> list_ = new pbc::RepeatedField<global::Packet.VideoPlayDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.VideoPlayDetailInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoOpenPersonCenterReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoOpenPersonCenterReq> _parser = new pb::MessageParser<CmdVideoOpenPersonCenterReq>(() => new CmdVideoOpenPersonCenterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoOpenPersonCenterReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoOpenPersonCenterRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoOpenPersonCenterRes> _parser = new pb::MessageParser<CmdVideoOpenPersonCenterRes>(() => new CmdVideoOpenPersonCenterRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoOpenPersonCenterRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 1;
    private uint expireTime_;
    /// <summary>
    ///下次请求需要等待最小时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 2;
    private global::Packet.VideoPersonCenter person_;
    /// <summary>
    ///个人中心
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPersonCenter Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExpireTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ExpireTime);
      }
      if (person_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Person);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExpireTime = input.ReadUInt32();
            break;
          }
          case 18: {
            if (person_ == null) {
              person_ = new global::Packet.VideoPersonCenter();
            }
            input.ReadMessage(person_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineUploadListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineUploadListReq> _parser = new pb::MessageParser<CmdVideoMineUploadListReq>(() => new CmdVideoMineUploadListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineUploadListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineUploadListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineUploadListRes> _parser = new pb::MessageParser<CmdVideoMineUploadListRes>(() => new CmdVideoMineUploadListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineUploadListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "upload" field.</summary>
    public const int UploadFieldNumber = 2;
    private global::Packet.MineUploadList upload_;
    /// <summary>
    ///上传列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineUploadList Upload {
      get { return upload_; }
      set {
        upload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (upload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Upload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (upload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Upload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (upload_ == null) {
              upload_ = new global::Packet.MineUploadList();
            }
            input.ReadMessage(upload_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineCollectListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineCollectListReq> _parser = new pb::MessageParser<CmdVideoMineCollectListReq>(() => new CmdVideoMineCollectListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineCollectListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineCollectListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineCollectListRes> _parser = new pb::MessageParser<CmdVideoMineCollectListRes>(() => new CmdVideoMineCollectListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineCollectListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "collect" field.</summary>
    public const int CollectFieldNumber = 2;
    private global::Packet.MineCollectList collect_;
    /// <summary>
    ///收藏列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineCollectList Collect {
      get { return collect_; }
      set {
        collect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (collect_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Collect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (collect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (collect_ == null) {
              collect_ = new global::Packet.MineCollectList();
            }
            input.ReadMessage(collect_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineLocalListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineLocalListReq> _parser = new pb::MessageParser<CmdVideoMineLocalListReq>(() => new CmdVideoMineLocalListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineLocalListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineLocalListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineLocalListRes> _parser = new pb::MessageParser<CmdVideoMineLocalListRes>(() => new CmdVideoMineLocalListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineLocalListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 1;
    private global::Packet.MineLocalList local_;
    /// <summary>
    ///本地列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MineLocalList Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (local_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Local);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (local_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (local_ == null) {
              local_ = new global::Packet.MineLocalList();
            }
            input.ReadMessage(local_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMonthBestListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMonthBestListReq> _parser = new pb::MessageParser<CmdVideoMonthBestListReq>(() => new CmdVideoMonthBestListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMonthBestListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 2;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VideoType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMonthBestListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMonthBestListRes> _parser = new pb::MessageParser<CmdVideoMonthBestListRes>(() => new CmdVideoMonthBestListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMonthBestListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 1;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    /// <summary>Field number for the "mbest" field.</summary>
    public const int MbestFieldNumber = 2;
    private global::Packet.MonthBestList mbest_;
    /// <summary>
    ///本月最好列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MonthBestList Mbest {
      get { return mbest_; }
      set {
        mbest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VideoType);
      }
      if (mbest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mbest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      if (mbest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mbest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (mbest_ == null) {
              mbest_ = new global::Packet.MonthBestList();
            }
            input.ReadMessage(mbest_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoLastUploadListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoLastUploadListReq> _parser = new pb::MessageParser<CmdVideoLastUploadListReq>(() => new CmdVideoLastUploadListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoLastUploadListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 2;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VideoType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoLastUploadListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoLastUploadListRes> _parser = new pb::MessageParser<CmdVideoLastUploadListRes>(() => new CmdVideoLastUploadListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoLastUploadListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 1;
    private uint videoType_;
    /// <summary>
    ///录像类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    /// <summary>Field number for the "lupload" field.</summary>
    public const int LuploadFieldNumber = 2;
    private global::Packet.LastUploadList lupload_;
    /// <summary>
    ///最近上传列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.LastUploadList Lupload {
      get { return lupload_; }
      set {
        lupload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VideoType);
      }
      if (lupload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lupload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoType);
      }
      if (lupload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lupload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (lupload_ == null) {
              lupload_ = new global::Packet.LastUploadList();
            }
            input.ReadMessage(lupload_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoShareChannelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoShareChannelReq> _parser = new pb::MessageParser<CmdVideoShareChannelReq>(() => new CmdVideoShareChannelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoShareChannelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 2;
    private global::Packet.ClientShareVideo video_;
    /// <summary>
    ///要分享的录像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ClientShareVideo Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "need" field.</summary>
    public const int NeedFieldNumber = 3;
    private global::Packet.ShareNeedInfo need_;
    /// <summary>
    ///分享所需信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShareNeedInfo Need {
      get { return need_; }
      set {
        need_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (video_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Video);
      }
      if (need_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Need);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (need_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Need);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (video_ == null) {
              video_ = new global::Packet.ClientShareVideo();
            }
            input.ReadMessage(video_);
            break;
          }
          case 26: {
            if (need_ == null) {
              need_ = new global::Packet.ShareNeedInfo();
            }
            input.ReadMessage(need_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoShareChannelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoShareChannelRes> _parser = new pb::MessageParser<CmdVideoShareChannelRes>(() => new CmdVideoShareChannelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoShareChannelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "video" field.</summary>
    public const int VideoFieldNumber = 1;
    private global::Packet.ServerShareVideo video_;
    /// <summary>
    ///分享的录像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ServerShareVideo Video {
      get { return video_; }
      set {
        video_ = value;
      }
    }

    /// <summary>Field number for the "need" field.</summary>
    public const int NeedFieldNumber = 2;
    private global::Packet.ShareNeedInfo need_;
    /// <summary>
    ///分享所需信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShareNeedInfo Need {
      get { return need_; }
      set {
        need_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (video_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Video);
      }
      if (need_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Need);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (video_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Video);
      }
      if (need_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Need);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (video_ == null) {
              video_ = new global::Packet.ServerShareVideo();
            }
            input.ReadMessage(video_);
            break;
          }
          case 18: {
            if (need_ == null) {
              need_ = new global::Packet.ShareNeedInfo();
            }
            input.ReadMessage(need_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoPlayVideoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoPlayVideoReq> _parser = new pb::MessageParser<CmdVideoPlayVideoReq>(() => new CmdVideoPlayVideoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoPlayVideoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "where" field.</summary>
    public const int WhereFieldNumber = 4;
    private global::Packet.VideoWhere where_ = 0;
    /// <summary>
    ///录像来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoWhere Where {
      get { return where_; }
      set {
        where_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
      if (Where != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Where);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (Where != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Where);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 32: {
            where_ = (global::Packet.VideoWhere) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoPlayVideoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoPlayVideoRes> _parser = new pb::MessageParser<CmdVideoPlayVideoRes>(() => new CmdVideoPlayVideoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoPlayVideoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id(videoId==0失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCollectVideoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCollectVideoReq> _parser = new pb::MessageParser<CmdVideoCollectVideoReq>(() => new CmdVideoCollectVideoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCollectVideoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "where" field.</summary>
    public const int WhereFieldNumber = 4;
    private global::Packet.VideoWhere where_ = 0;
    /// <summary>
    ///录像来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoWhere Where {
      get { return where_; }
      set {
        where_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
      if (Where != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Where);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (Where != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Where);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 32: {
            where_ = (global::Packet.VideoWhere) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCollectVideoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCollectVideoRes> _parser = new pb::MessageParser<CmdVideoCollectVideoRes>(() => new CmdVideoCollectVideoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCollectVideoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id(videoId==0失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCancelCollectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCancelCollectReq> _parser = new pb::MessageParser<CmdVideoCancelCollectReq>(() => new CmdVideoCancelCollectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCancelCollectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCancelCollectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCancelCollectRes> _parser = new pb::MessageParser<CmdVideoCancelCollectRes>(() => new CmdVideoCancelCollectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCancelCollectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id(videoId==0失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoLikeVideoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoLikeVideoReq> _parser = new pb::MessageParser<CmdVideoLikeVideoReq>(() => new CmdVideoLikeVideoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoLikeVideoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "where" field.</summary>
    public const int WhereFieldNumber = 4;
    private global::Packet.VideoWhere where_ = 0;
    /// <summary>
    ///录像来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoWhere Where {
      get { return where_; }
      set {
        where_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
      if (Where != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Where);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (Where != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Where);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 32: {
            where_ = (global::Packet.VideoWhere) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoLikeVideoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoLikeVideoRes> _parser = new pb::MessageParser<CmdVideoLikeVideoRes>(() => new CmdVideoLikeVideoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoLikeVideoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id(videoId==0失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCancelLikeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCancelLikeReq> _parser = new pb::MessageParser<CmdVideoCancelLikeReq>(() => new CmdVideoCancelLikeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCancelLikeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCancelLikeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCancelLikeRes> _parser = new pb::MessageParser<CmdVideoCancelLikeRes>(() => new CmdVideoCancelLikeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCancelLikeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id(videoId==0失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 3;
    private ulong authorId_;
    /// <summary>
    ///录像作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (AuthorId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AuthorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 24: {
            AuthorId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoOpenBulletReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoOpenBulletReq> _parser = new pb::MessageParser<CmdVideoOpenBulletReq>(() => new CmdVideoOpenBulletReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoOpenBulletReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoOpenBulletRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoOpenBulletRes> _parser = new pb::MessageParser<CmdVideoOpenBulletRes>(() => new CmdVideoOpenBulletRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoOpenBulletRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    /// <summary>
    ///当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCloseBulletReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCloseBulletReq> _parser = new pb::MessageParser<CmdVideoCloseBulletReq>(() => new CmdVideoCloseBulletReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCloseBulletReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoCloseBulletRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoCloseBulletRes> _parser = new pb::MessageParser<CmdVideoCloseBulletRes>(() => new CmdVideoCloseBulletRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoCloseBulletRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    /// <summary>
    ///当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoSendBulletReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoSendBulletReq> _parser = new pb::MessageParser<CmdVideoSendBulletReq>(() => new CmdVideoSendBulletReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoSendBulletReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "authorId" field.</summary>
    public const int AuthorIdFieldNumber = 1;
    private ulong authorId_;
    /// <summary>
    ///作者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AuthorId {
      get { return authorId_; }
      set {
        authorId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 3;
    private global::Packet.ClientBullet bullet_;
    /// <summary>
    ///弹幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ClientBullet Bullet {
      get { return bullet_; }
      set {
        bullet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthorId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AuthorId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
      if (bullet_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Bullet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthorId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AuthorId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      if (bullet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bullet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AuthorId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (bullet_ == null) {
              bullet_ = new global::Packet.ClientBullet();
            }
            input.ReadMessage(bullet_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoSendBulletRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoSendBulletRes> _parser = new pb::MessageParser<CmdVideoSendBulletRes>(() => new CmdVideoSendBulletRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoSendBulletRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private bool flag_;
    /// <summary>
    ///true成功false失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != false) {
        size += 1 + 1;
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoUploadVideoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoUploadVideoReq> _parser = new pb::MessageParser<CmdVideoUploadVideoReq>(() => new CmdVideoUploadVideoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoUploadVideoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private pb::ByteString title_ = pb::ByteString.Empty;
    /// <summary>
    ///录像title
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 3;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Title);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Title = input.ReadBytes();
            break;
          }
          case 24: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoUploadVideoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoUploadVideoRes> _parser = new pb::MessageParser<CmdVideoUploadVideoRes>(() => new CmdVideoUploadVideoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoUploadVideoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id(0上传失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoDeleteLocalReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoDeleteLocalReq> _parser = new pb::MessageParser<CmdVideoDeleteLocalReq>(() => new CmdVideoDeleteLocalReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoDeleteLocalReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoDeleteLocalRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoDeleteLocalRes> _parser = new pb::MessageParser<CmdVideoDeleteLocalRes>(() => new CmdVideoDeleteLocalRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoDeleteLocalRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id(0删除失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoDeleteUploadReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoDeleteUploadReq> _parser = new pb::MessageParser<CmdVideoDeleteUploadReq>(() => new CmdVideoDeleteUploadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoDeleteUploadReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 2;
    private ulong videoId_;
    /// <summary>
    ///录像Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (VideoId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoDeleteUploadRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoDeleteUploadRes> _parser = new pb::MessageParser<CmdVideoDeleteUploadRes>(() => new CmdVideoDeleteUploadRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoDeleteUploadRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private ulong videoId_;
    /// <summary>
    ///录像Id(0删除失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VideoId {
      get { return videoId_; }
      set {
        videoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VideoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VideoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VideoId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineMutualInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineMutualInfoReq> _parser = new pb::MessageParser<CmdVideoMineMutualInfoReq>(() => new CmdVideoMineMutualInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineMutualInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///主角Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoMineMutualInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoMineMutualInfoRes> _parser = new pb::MessageParser<CmdVideoMineMutualInfoRes>(() => new CmdVideoMineMutualInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoMineMutualInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "recv" field.</summary>
    public const int RecvFieldNumber = 1;
    private global::Packet.VideoPersonCenterMutualInfo recv_;
    /// <summary>
    ///交互信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPersonCenterMutualInfo Recv {
      get { return recv_; }
      set {
        recv_ = value;
      }
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 2;
    private global::Packet.VideoPersonCenterMutualInfo send_;
    /// <summary>
    ///交互信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPersonCenterMutualInfo Send {
      get { return send_; }
      set {
        send_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recv_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Recv);
      }
      if (send_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Send);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recv);
      }
      if (send_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (recv_ == null) {
              recv_ = new global::Packet.VideoPersonCenterMutualInfo();
            }
            input.ReadMessage(recv_);
            break;
          }
          case 18: {
            if (send_ == null) {
              send_ = new global::Packet.VideoPersonCenterMutualInfo();
            }
            input.ReadMessage(send_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoBaseDetailReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoBaseDetailReq> _parser = new pb::MessageParser<CmdVideoVideoBaseDetailReq>(() => new CmdVideoVideoBaseDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoBaseDetailReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private global::Packet.VideoUniqueInfoList infoList_;
    /// <summary>
    ///录像唯一信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoUniqueInfoList InfoList {
      get { return infoList_; }
      set {
        infoList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoList_ == null) {
              infoList_ = new global::Packet.VideoUniqueInfoList();
            }
            input.ReadMessage(infoList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoBaseDetailRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoBaseDetailRes> _parser = new pb::MessageParser<CmdVideoVideoBaseDetailRes>(() => new CmdVideoVideoBaseDetailRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoBaseDetailRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "detailList" field.</summary>
    public const int DetailListFieldNumber = 1;
    private global::Packet.VideoBaseDetailInfoList detailList_;
    /// <summary>
    ///录像基础详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoBaseDetailInfoList DetailList {
      get { return detailList_; }
      set {
        detailList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (detailList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DetailList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (detailList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetailList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (detailList_ == null) {
              detailList_ = new global::Packet.VideoBaseDetailInfoList();
            }
            input.ReadMessage(detailList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoMutualDetailReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoMutualDetailReq> _parser = new pb::MessageParser<CmdVideoVideoMutualDetailReq>(() => new CmdVideoVideoMutualDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoMutualDetailReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private global::Packet.VideoUniqueInfoList infoList_;
    /// <summary>
    ///录像唯一信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoUniqueInfoList InfoList {
      get { return infoList_; }
      set {
        infoList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoList_ == null) {
              infoList_ = new global::Packet.VideoUniqueInfoList();
            }
            input.ReadMessage(infoList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoMutualDetailRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoMutualDetailRes> _parser = new pb::MessageParser<CmdVideoVideoMutualDetailRes>(() => new CmdVideoVideoMutualDetailRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoMutualDetailRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "detailList" field.</summary>
    public const int DetailListFieldNumber = 1;
    private global::Packet.VideoMutualDetailInfoList detailList_;
    /// <summary>
    ///录像交互详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoMutualDetailInfoList DetailList {
      get { return detailList_; }
      set {
        detailList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (detailList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DetailList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (detailList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetailList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (detailList_ == null) {
              detailList_ = new global::Packet.VideoMutualDetailInfoList();
            }
            input.ReadMessage(detailList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoShowDetailReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoShowDetailReq> _parser = new pb::MessageParser<CmdVideoVideoShowDetailReq>(() => new CmdVideoVideoShowDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoShowDetailReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private global::Packet.VideoUniqueInfoList infoList_;
    /// <summary>
    ///录像唯一信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoUniqueInfoList InfoList {
      get { return infoList_; }
      set {
        infoList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoList_ == null) {
              infoList_ = new global::Packet.VideoUniqueInfoList();
            }
            input.ReadMessage(infoList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoShowDetailRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoShowDetailRes> _parser = new pb::MessageParser<CmdVideoVideoShowDetailRes>(() => new CmdVideoVideoShowDetailRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoShowDetailRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "detailList" field.</summary>
    public const int DetailListFieldNumber = 1;
    private global::Packet.VideoShowDetailInfoList detailList_;
    /// <summary>
    ///录像展示详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoShowDetailInfoList DetailList {
      get { return detailList_; }
      set {
        detailList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (detailList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DetailList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (detailList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetailList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (detailList_ == null) {
              detailList_ = new global::Packet.VideoShowDetailInfoList();
            }
            input.ReadMessage(detailList_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoPlayDetailReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoPlayDetailReq> _parser = new pb::MessageParser<CmdVideoVideoPlayDetailReq>(() => new CmdVideoVideoPlayDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoPlayDetailReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private global::Packet.VideoUniqueInfoList infoList_;
    /// <summary>
    ///录像唯一信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoUniqueInfoList InfoList {
      get { return infoList_; }
      set {
        infoList_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Packet.enPlayDetailType type_ = 0;
    /// <summary>
    ///详情类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.enPlayDetailType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infoList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InfoList);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infoList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InfoList);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (infoList_ == null) {
              infoList_ = new global::Packet.VideoUniqueInfoList();
            }
            input.ReadMessage(infoList_);
            break;
          }
          case 16: {
            type_ = (global::Packet.enPlayDetailType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdVideoVideoPlayDetailRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdVideoVideoPlayDetailRes> _parser = new pb::MessageParser<CmdVideoVideoPlayDetailRes>(() => new CmdVideoVideoPlayDetailRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdVideoVideoPlayDetailRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "detailList" field.</summary>
    public const int DetailListFieldNumber = 1;
    private global::Packet.VideoPlayDetailInfoList detailList_;
    /// <summary>
    ///录像播放详情列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.VideoPlayDetailInfoList DetailList {
      get { return detailList_; }
      set {
        detailList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (detailList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DetailList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (detailList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetailList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (detailList_ == null) {
              detailList_ = new global::Packet.VideoPlayDetailInfoList();
            }
            input.ReadMessage(detailList_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
