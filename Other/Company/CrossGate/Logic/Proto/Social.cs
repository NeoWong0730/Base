// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///以后有新聊天 统一走 CmdSocial_PubChatReq（scene） 和 CmdSocial_GameChatReq（game）
  /// </summary>
  public enum CmdSocial {
    None = 0,
    /// <summary>
    ///公共聊天请求 到scene
    /// </summary>
    PubChatReq = 2000,
    /// <summary>
    ///发送聊天返给客户端协议 失败客户端不要加cd
    /// </summary>
    PubChatRes = 2001,
    /// <summary>
    ///聊天内容通知
    /// </summary>
    PubChatNtf = 2002,
    /// <summary>
    ///当前频道聊天 (地图聊天，理论应该并入pubchat)
    /// </summary>
    LocalChatReq = 2003,
    LocalChatNtf = 2004,
    /// <summary>
    ///喇叭
    /// </summary>
    HornChatReq = 2005,
    HornChatNtf = 2006,
    /// <summary>
    ///获取简明信息（如点头像操作）
    /// </summary>
    GetBriefInfoReq = 2007,
    GetBriefInfoAck = 2008,
    /// <summary>
    /// 好友。。。 friendgroup 好友组 group是群
    /// </summary>
    AddFriendReq = 2009,
    /// <summary>
    /// 加好友
    /// </summary>
    AddFriendAck = 2010,
    /// <summary>
    ///对方加你好友
    /// </summary>
    AddFriendNtf = 2011,
    /// <summary>
    ///私聊
    /// </summary>
    ChatSingleReq = 2012,
    ChatSingleNtf = 2013,
    /// <summary>
    ///群聊
    /// </summary>
    GroupChatReq = 2014,
    /// <summary>
    ///群聊通知
    /// </summary>
    GroupChatNtf = 2015,
    /// <summary>
    ///创建群聊
    /// </summary>
    CreateGroupReq = 2016,
    GroupInfoNtf = 2017,
    /// <summary>
    ///群聊加人
    /// </summary>
    GroupAddMemberReq = 2018,
    GroupAddMemberAck = 2019,
    /// <summary>
    ///解散
    /// </summary>
    DestroyGroupReq = 2020,
    DestroyGroupNtf = 2021,
    /// <summary>
    ///退出
    /// </summary>
    QuitGroupReq = 2022,
    QuitGroupAck = 2023,
    /// <summary>
    ///删好友
    /// </summary>
    DelFriendReq = 2024,
    DelFriendAck = 2025,
    /// <summary>
    ///好友上线
    /// </summary>
    FriendOnlineNtf = 2026,
    FriendOfflineNtf = 2027,
    /// <summary>
    /// </summary>
    GetFriendInfoReq = 2028,
    GetFriendInfoAck = 2029,
    /// <summary>
    ///每次打开群组界面请求 （优化，客户端缓存，有变化服务器才下发，先不做）
    /// </summary>
    GetGroupBriefInfoReq = 2030,
    GetGroupBriefInfoAck = 2031,
    /// <summary>
    ///某个群详细信息请求
    /// </summary>
    GetGroupDetailInfoReq = 2032,
    GetGroupDetailInfoAck = 2033,
    /// <summary>
    ///退出群组通知
    /// </summary>
    GroupChangeNtf = 2034,
    SetGroupNoticeReq = 2035,
    /// <summary>
    ///公告。。。目前只发给改的人。。。其他人重新打开界面更新，需要的话再广播
    /// </summary>
    SetGroupNoticeNtf = 2036,
    GroupKickMemberReq = 2037,
    /// <summary>
    ///某人被移出群组通知，如果是自己client把群删掉
    /// </summary>
    GroupKickMemberNtf = 2038,
    GroupChangeNameReq = 2039,
    /// <summary>
    ///改名
    /// </summary>
    GroupChangeNameAck = 2040,
    /// <summary>
    ///加黑名单
    /// </summary>
    AddBlackListReq = 2041,
    AddBlackListAck = 2042,
    GetBlackListReq = 2043,
    GetBlackListAck = 2044,
    /// <summary>
    ///好友分组创建、添加  增量
    /// </summary>
    FriendsGroupReq = 2045,
    FriendsGroupAck = 2046,
    /// <summary>
    ///删除好友分组
    /// </summary>
    DelFriendsGroupReq = 2047,
    DelFriendsGroupAck = 2048,
    /// <summary>
    ///发弹幕请求
    /// </summary>
    BulletCommentRpt = 2049,
    /// <summary>
    ///获得弹幕请求
    /// </summary>
    GetBulletCommentReq = 2050,
    GetBulletCommentAck = 2051,
    /// <summary>
    ///好友分组改名
    /// </summary>
    ChangeFriendsGroupNameReq = 2052,
    ChangeFriendsGroupNameAck = 2053,
    /// <summary>
    ///到gamesvr聊天请求
    /// </summary>
    GameChatReq = 2054,
    /// <summary>
    ///聊天内容通知
    /// </summary>
    GameChatNtf = 2055,
    /// <summary>
    ///当前频道如果开头三个字符是%%$ 用这条协议
    /// </summary>
    CurrentChannelExtralReq = 2060,
    /// <summary>
    ///处理好友申请
    /// </summary>
    HandleFriendRequestReq = 2061,
    HandleFriendRequestAck = 2062,
    HandleFriendRequestNtf = 2063,
    /// <summary>
    /// 类别搜索
    /// </summary>
    SearchFriendReq = 2064,
    SearchFriendAck = 2065,
    /// <summary>
    ///关系搜索
    /// </summary>
    RelationFriendReq = 2066,
    RelationFriendAck = 2067,
    /// <summary>
    /// 获取玩家详细信息 (关系达到才可以)
    /// </summary>
    DetailInfoReq = 2068,
    DetailInfoAck = 2069,
    /// <summary>
    ///社交信息
    /// </summary>
    SetMySocialInfoReq = 2070,
    SetMySocialInfoAck = 2071,
    /// <summary>
    ///删除好友通知
    /// </summary>
    DelFriendNtf = 2072,
    /// <summary>
    /// 
    /// </summary>
    ReceiveGiftsNtf = 2073,
    /// <summary>
    ///领取
    /// </summary>
    GetGiftsReq = 2074,
    GetGiftsAck = 2075,
    /// <summary>
    ///无返回，有好友的话战斗后请求一次
    /// </summary>
    BattleAddIntimacyReq = 2076,
    /// <summary>
    ///请求列表 不领取
    /// </summary>
    GetGiftListReq = 2077,
    GetGiftListAck = 2078,
    /// <summary>
    ///intimacy change ntf
    /// </summary>
    IntimacyNtf = 2079,
    /// <summary>
    ///friend get your gift
    /// </summary>
    GetGiftNtf = 2080,
    /// <summary>
    ///移除黑名单
    /// </summary>
    RemoveBlackListReq = 2081,
    /// <summary>
    /// </summary>
    RemoveBlackListAck = 2082,
    /// <summary>
    ///好友改名通知
    /// </summary>
    RenameNtf = 2083,
    /// <summary>
    /// 来自系统的私聊消息
    /// </summary>
    ChatSingleFromSystemNty = 2084,
    /// <summary>
    /// 消息通知
    /// </summary>
    SysTipNtf = 2099,
    /// <summary>
    /// to scene
    /// </summary>
    SendGiftsReq = 6300,
    SendGiftsAck = 6301,
    /// <summary>
    ///前端需判断达到上限拦截并防止连点
    /// </summary>
    ExtendFriendNumReq = 6302,
    ExtendFriendNumAck = 6303,
  }

  public enum ChatType {
    /// <summary>
    ///serverchattype 服务器用,客户端不会发
    /// </summary>
    World = 0,
    Guild = 1,
    /// <summary>
    ///CmdSocialGameChatReq
    /// </summary>
    Team = 2,
    LookForTeam = 3,
    /// <summary>
    ///系统
    /// </summary>
    System = 4,
    Local = 5,
    /// <summary>
    ///公会通知
    /// </summary>
    GuildNotify = 6,
    ServerChatTypeSingle = 7,
    ServerChatTypeGroup = 8,
    ServerChatTypeHorn = 9,
    /// <summary>
    ///个人
    /// </summary>
    Person = 10,
    /// <summary>
    ///喇叭,客户端用
    /// </summary>
    Horn = 11,
    /// <summary>
    ///公告,会在跑马灯显示
    /// </summary>
    Notice = 12,
    /// <summary>
    ///家族红包
    /// </summary>
    FamilyRedPacket = 13,
    /// <summary>
    ///职业聊天
    /// </summary>
    Career = 14,
    /// <summary>
    ///勇者团频道
    /// </summary>
    BraveGroup = 15,
  }

  public enum MarqueeType {
    /// <summary>
    ///普通跑马灯
    /// </summary>
    Common = 0,
    /// <summary>
    ///GMT跑马灯
    /// </summary>
    Gmt = 1,
  }

  public enum ErrorSocial {
    None = 0,
    /// <summary>
    ///未发现玩家
    /// </summary>
    NotFoundRole = 2000,
    /// <summary>
    ///不满足说话条件
    /// </summary>
    CannotSpeak = 2001,
    /// <summary>
    ///id 错误
    /// </summary>
    WrongRoleId = 2002,
    /// <summary>
    ///创建满了
    /// </summary>
    CreateFull = 2003,
    /// <summary>
    ///创建失败
    /// </summary>
    CreateGroupFail = 2004,
    /// <summary>
    ///未发现群
    /// </summary>
    NotFoundGroup = 2005,
    /// <summary>
    ///群满了
    /// </summary>
    JoinFull = 2006,
    /// <summary>
    ///权限不足
    /// </summary>
    Privilege = 2007,
    /// <summary>
    ///有玩家不在线
    /// </summary>
    RoleNotOnline = 2008,
    /// <summary>
    ///有玩家群满了
    /// </summary>
    RoleJoinFull = 2009,
    /// <summary>
    ///需要删除好友
    /// </summary>
    NeedDelFriend = 2010,
    /// <summary>
    ///好友分组已满
    /// </summary>
    FriendsGroupFull = 2011,
    /// <summary>
    ///好友已满
    /// </summary>
    FriendsFull = 2012,
    /// <summary>
    ///道具不足
    /// </summary>
    ItemEnough = 2013,
    /// <summary>
    ///配置
    /// </summary>
    Cfg = 2014,
    /// <summary>
    ///禁言
    /// </summary>
    BanChat = 2015,
    /// <summary>
    ///含非法字符
    /// </summary>
    MaskWord = 2016,
    /// <summary>
    ///体力不足
    /// </summary>
    Energy = 2017,
    /// <summary>
    /// </summary>
    ServerBusy = 2018,
    /// <summary>
    ///目标玩家不在线
    /// </summary>
    DstRoleNotOnline = 2019,
    /// <summary>
    ///对方好友满了
    /// </summary>
    DstFriendsFull = 2020,
    /// <summary>
    ///需要设置自己的信息
    /// </summary>
    NeedSetSelfInfo = 2021,
    /// <summary>
    ///个人社交信息不完整
    /// </summary>
    SelfInfoIsEmpty = 2022,
    /// <summary>
    ///不是礼物
    /// </summary>
    ItemIsNotGift = 2023,
    /// <summary>
    ///没有礼物
    /// </summary>
    NoGifts = 2024,
    /// <summary>
    ///背包已满
    /// </summary>
    BagIsFull = 2025,
    /// <summary>
    ///未发现好友
    /// </summary>
    NotFoundFriend = 2026,
    /// <summary>
    ///好感不足
    /// </summary>
    IntimacyTooLow = 2027,
    /// <summary>
    ///黑名单已满
    /// </summary>
    BlackListFull = 2028,
    /// <summary>
    ///当前您被禁止添加好友
    /// </summary>
    OwnNotAddFriend = 2029,
    /// <summary>
    ///对方玩家被禁止添加好友
    /// </summary>
    OtherNotAddFriend = 2030,
    /// <summary>
    ///您已添加对方到黑名单，或您处于对方的黑名单中，导致添加好友失败
    /// </summary>
    InBlackList = 2031,
    /// <summary>
    ///未找到该道具的价格
    /// </summary>
    NotFindThePrice = 2032,
  }

  public enum SysTipPos {
    /// <summary>
    /// 无
    /// </summary>
    None = 0,
    /// <summary>
    /// 2^0, 错误码
    /// </summary>
    ErrorCode = 1,
    /// <summary>
    /// 2^1, 中间飘字
    /// </summary>
    Center = 2,
    /// <summary>
    /// 2^2, 公告
    /// </summary>
    Notice = 4,
    /// <summary>
    /// 2^3, 系统频道
    /// </summary>
    Sys = 8,
    /// <summary>
    /// 2^4, 世界频道
    /// </summary>
    World = 16,
    /// <summary>
    /// 2^5, 当前频道
    /// </summary>
    Local = 32,
    /// <summary>
    /// 2^6, 队伍频道
    /// </summary>
    Team = 64,
    /// <summary>
    /// 2^7, 帮派频道
    /// </summary>
    Guild = 128,
    /// <summary>
    /// 2^8, 跑马灯
    /// </summary>
    Marquee = 256,
    /// <summary>
    /// 2^9, 底部公共信息
    /// </summary>
    Bottom = 512,
  }

  public enum SysTipFieldType {
    SysTipFieldNone = 0,
    SysTipFieldNumber = 1,
    SysTipFieldString = 2,
    /// <summary>
    /// 语言表id解析
    /// </summary>
    SysTipFieldMsgId = 3,
    /// <summary>
    /// 秒
    /// </summary>
    SysTipFieldTime = 4,
    /// <summary>
    /// uint32
    /// </summary>
    SysTipFieldTimeStamp = 5,
    SysTipFieldRoleName = 6,
    SysTipFieldItem = 7,
    SysTipFieldAchievement = 8,
    /// <summary>
    /// 职业id
    /// </summary>
    SysTipFieldCareer = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  ///当前频道如果开头三个字符是%%$ 用这条协议
  /// </summary>
  public sealed class CmdSocialCurrentChannelExtralReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialCurrentChannelExtralReq> _parser = new pb::MessageParser<CmdSocialCurrentChannelExtralReq>(() => new CmdSocialCurrentChannelExtralReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialCurrentChannelExtralReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatmsg" field.</summary>
    public const int ChatmsgFieldNumber = 1;
    private pb::ByteString chatmsg_ = pb::ByteString.Empty;
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Chatmsg {
      get { return chatmsg_; }
      set {
        chatmsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chatmsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Chatmsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chatmsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Chatmsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Chatmsg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialPubChatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialPubChatReq> _parser = new pb::MessageParser<CmdSocialPubChatReq>(() => new CmdSocialPubChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialPubChatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Packet.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 4;
    private uint extraType_;
    /// <summary>
    ///uint32_t flag = 3; //此消息标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Packet.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 32: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialPubChatRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialPubChatRes> _parser = new pb::MessageParser<CmdSocialPubChatRes>(() => new CmdSocialPubChatRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialPubChatRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Packet.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 2;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private uint ret_;
    /// <summary>
    ///0表示成功 其他参考错误码 不要给玩家加cd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExtraType);
      }
      if (Ret != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Packet.ChatType) input.ReadEnum();
            break;
          }
          case 16: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 24: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialPubChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialPubChatNtf> _parser = new pb::MessageParser<CmdSocialPubChatNtf>(() => new CmdSocialPubChatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialPubChatNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Packet.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "senderHead" field.</summary>
    public const int SenderHeadFieldNumber = 7;
    private uint senderHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    /// <summary>Field number for the "senderHeadFrame" field.</summary>
    public const int SenderHeadFrameFieldNumber = 8;
    private uint senderHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHeadFrame {
      get { return senderHeadFrame_; }
      set {
        senderHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatFrame" field.</summary>
    public const int SenderChatFrameFieldNumber = 9;
    private uint senderChatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatFrame {
      get { return senderChatFrame_; }
      set {
        senderChatFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatText" field.</summary>
    public const int SenderChatTextFieldNumber = 10;
    private uint senderChatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatText {
      get { return senderChatText_; }
      set {
        senderChatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 11;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 12;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "isBack" field.</summary>
    public const int IsBackFieldNumber = 13;
    private bool isBack_;
    /// <summary>
    ///是否为回归用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBack {
      get { return isBack_; }
      set {
        isBack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SenderName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SenderChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasMaskWord);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(RoleId);
      }
      if (IsBack != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsBack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (IsBack != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Packet.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            SenderName = input.ReadBytes();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 56: {
            SenderHead = input.ReadUInt32();
            break;
          }
          case 64: {
            SenderHeadFrame = input.ReadUInt32();
            break;
          }
          case 72: {
            SenderChatFrame = input.ReadUInt32();
            break;
          }
          case 80: {
            SenderChatText = input.ReadUInt32();
            break;
          }
          case 88: {
            HasMaskWord = input.ReadBool();
            break;
          }
          case 96: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 104: {
            IsBack = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialLocalChatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialLocalChatReq> _parser = new pb::MessageParser<CmdSocialLocalChatReq>(() => new CmdSocialLocalChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialLocalChatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 1;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialLocalChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialLocalChatNtf> _parser = new pb::MessageParser<CmdSocialLocalChatNtf>(() => new CmdSocialLocalChatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialLocalChatNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 1;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 2;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    /// <summary>
    ///发送者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "senderHead" field.</summary>
    public const int SenderHeadFieldNumber = 7;
    private uint senderHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    /// <summary>Field number for the "senderHeadFrame" field.</summary>
    public const int SenderHeadFrameFieldNumber = 8;
    private uint senderHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHeadFrame {
      get { return senderHeadFrame_; }
      set {
        senderHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatFrame" field.</summary>
    public const int SenderChatFrameFieldNumber = 9;
    private uint senderChatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatFrame {
      get { return senderChatFrame_; }
      set {
        senderChatFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatText" field.</summary>
    public const int SenderChatTextFieldNumber = 10;
    private uint senderChatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatText {
      get { return senderChatText_; }
      set {
        senderChatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 11;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    /// <summary>Field number for the "isBack" field.</summary>
    public const int IsBackFieldNumber = 12;
    private bool isBack_;
    /// <summary>
    ///是否为回归用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBack {
      get { return isBack_; }
      set {
        isBack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ChatMsg);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SenderName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SenderChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasMaskWord);
      }
      if (IsBack != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsBack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      if (IsBack != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 18: {
            SenderName = input.ReadBytes();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 56: {
            SenderHead = input.ReadUInt32();
            break;
          }
          case 64: {
            SenderHeadFrame = input.ReadUInt32();
            break;
          }
          case 72: {
            SenderChatFrame = input.ReadUInt32();
            break;
          }
          case 80: {
            SenderChatText = input.ReadUInt32();
            break;
          }
          case 88: {
            HasMaskWord = input.ReadBool();
            break;
          }
          case 96: {
            IsBack = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialHornChatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialHornChatReq> _parser = new pb::MessageParser<CmdSocialHornChatReq>(() => new CmdSocialHornChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialHornChatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///消耗的喇叭id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialHornChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialHornChatNtf> _parser = new pb::MessageParser<CmdSocialHornChatNtf>(() => new CmdSocialHornChatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialHornChatNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///消耗的喇叭id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "senderHead" field.</summary>
    public const int SenderHeadFieldNumber = 7;
    private uint senderHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    /// <summary>Field number for the "senderHeadFrame" field.</summary>
    public const int SenderHeadFrameFieldNumber = 8;
    private uint senderHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHeadFrame {
      get { return senderHeadFrame_; }
      set {
        senderHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatFrame" field.</summary>
    public const int SenderChatFrameFieldNumber = 9;
    private uint senderChatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatFrame {
      get { return senderChatFrame_; }
      set {
        senderChatFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatText" field.</summary>
    public const int SenderChatTextFieldNumber = 10;
    private uint senderChatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatText {
      get { return senderChatText_; }
      set {
        senderChatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 11;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SenderName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SenderChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasMaskWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            SenderName = input.ReadBytes();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 56: {
            SenderHead = input.ReadUInt32();
            break;
          }
          case 64: {
            SenderHeadFrame = input.ReadUInt32();
            break;
          }
          case 72: {
            SenderChatFrame = input.ReadUInt32();
            break;
          }
          case 80: {
            SenderChatText = input.ReadUInt32();
            break;
          }
          case 88: {
            HasMaskWord = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetBriefInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBriefInfoReq> _parser = new pb::MessageParser<CmdSocialGetBriefInfoReq>(() => new CmdSocialGetBriefInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBriefInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "classify" field.</summary>
    public const int ClassifyFieldNumber = 3;
    private uint classify_;
    /// <summary>
    ///类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Classify {
      get { return classify_; }
      set {
        classify_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Classify != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Classify);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Classify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Classify);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            Classify = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetBriefInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBriefInfoAck> _parser = new pb::MessageParser<CmdSocialGetBriefInfoAck>(() => new CmdSocialGetBriefInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBriefInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "occ" field.</summary>
    public const int OccFieldNumber = 5;
    private uint occ_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occ {
      get { return occ_; }
      set {
        occ_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 6;
    private ulong teamId_;
    /// <summary>
    ///队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "headIcon" field.</summary>
    public const int HeadIconFieldNumber = 8;
    private uint headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    /// <summary>Field number for the "classify" field.</summary>
    public const int ClassifyFieldNumber = 9;
    private uint classify_;
    /// <summary>
    ///类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Classify {
      get { return classify_; }
      set {
        classify_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 10;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "bOnline" field.</summary>
    public const int BOnlineFieldNumber = 12;
    private bool bOnline_;
    /// <summary>
    ///uint32 guildPosition = 11;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BOnline {
      get { return bOnline_; }
      set {
        bOnline_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 13;
    private uint careerRank_;
    /// <summary>
    ///职业等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "roleHead" field.</summary>
    public const int RoleHeadFieldNumber = 14;
    private uint roleHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHead {
      get { return roleHead_; }
      set {
        roleHead_ = value;
      }
    }

    /// <summary>Field number for the "roleHeadFrame" field.</summary>
    public const int RoleHeadFrameFieldNumber = 15;
    private uint roleHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHeadFrame {
      get { return roleHeadFrame_; }
      set {
        roleHeadFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (Occ != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Occ);
      }
      if (TeamId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TeamId);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Level);
      }
      if (HeadIcon != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HeadIcon);
      }
      if (Classify != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Classify);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(GuildId);
      }
      if (BOnline != false) {
        output.WriteRawTag(96);
        output.WriteBool(BOnline);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CareerRank);
      }
      if (RoleHead != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(RoleHeadFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Occ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIcon);
      }
      if (Classify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Classify);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (BOnline != false) {
        size += 1 + 1;
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (RoleHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHeadFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 40: {
            Occ = input.ReadUInt32();
            break;
          }
          case 48: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 56: {
            Level = input.ReadUInt32();
            break;
          }
          case 64: {
            HeadIcon = input.ReadUInt32();
            break;
          }
          case 72: {
            Classify = input.ReadUInt32();
            break;
          }
          case 80: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 96: {
            BOnline = input.ReadBool();
            break;
          }
          case 104: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 112: {
            RoleHead = input.ReadUInt32();
            break;
          }
          case 120: {
            RoleHeadFrame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialAddFriendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialAddFriendReq> _parser = new pb::MessageParser<CmdSocialAddFriendReq>(() => new CmdSocialAddFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialAddFriendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class FriendInfo : pb::IMessage {
    private static readonly pb::MessageParser<FriendInfo> _parser = new pb::MessageParser<FriendInfo>(() => new FriendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 3;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "occ" field.</summary>
    public const int OccFieldNumber = 7;
    private uint occ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occ {
      get { return occ_; }
      set {
        occ_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 8;
    private uint careerRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "roleHead" field.</summary>
    public const int RoleHeadFieldNumber = 9;
    private uint roleHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHead {
      get { return roleHead_; }
      set {
        roleHead_ = value;
      }
    }

    /// <summary>Field number for the "roleHeadFrame" field.</summary>
    public const int RoleHeadFrameFieldNumber = 10;
    private uint roleHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHeadFrame {
      get { return roleHeadFrame_; }
      set {
        roleHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 14;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 11;
    private bool online_;
    /// <summary>
    ///以下信息只在GetFriendInfoReq 有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "hasGift" field.</summary>
    public const int HasGiftFieldNumber = 12;
    private bool hasGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGift {
      get { return hasGift_; }
      set {
        hasGift_ = value;
      }
    }

    /// <summary>Field number for the "friendPro" field.</summary>
    public const int FriendProFieldNumber = 13;
    private uint friendPro_;
    /// <summary>
    ///友好度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendPro {
      get { return friendPro_; }
      set {
        friendPro_ = value;
      }
    }

    /// <summary>Field number for the "weekGiftCount" field.</summary>
    public const int WeekGiftCountFieldNumber = 15;
    private uint weekGiftCount_;
    /// <summary>
    /// 每周送礼数量 对应周限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeekGiftCount {
      get { return weekGiftCount_; }
      set {
        weekGiftCount_ = value;
      }
    }

    /// <summary>Field number for the "todayGiftCount" field.</summary>
    public const int TodayGiftCountFieldNumber = 16;
    private uint todayGiftCount_;
    /// <summary>
    ///今日送礼数量 对应每日限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayGiftCount {
      get { return todayGiftCount_; }
      set {
        todayGiftCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (Lvl != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lvl);
      }
      if (HeroId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroId);
      }
      if (Occ != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Occ);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CareerRank);
      }
      if (RoleHead != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RoleHeadFrame);
      }
      if (Online != false) {
        output.WriteRawTag(88);
        output.WriteBool(Online);
      }
      if (HasGift != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasGift);
      }
      if (FriendPro != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(FriendPro);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(GuildName);
      }
      if (WeekGiftCount != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(WeekGiftCount);
      }
      if (TodayGiftCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TodayGiftCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Occ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (RoleHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHeadFrame);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (HasGift != false) {
        size += 1 + 1;
      }
      if (FriendPro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendPro);
      }
      if (WeekGiftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekGiftCount);
      }
      if (TodayGiftCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TodayGiftCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            Lvl = input.ReadUInt32();
            break;
          }
          case 40: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 56: {
            Occ = input.ReadUInt32();
            break;
          }
          case 64: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 72: {
            RoleHead = input.ReadUInt32();
            break;
          }
          case 80: {
            RoleHeadFrame = input.ReadUInt32();
            break;
          }
          case 88: {
            Online = input.ReadBool();
            break;
          }
          case 96: {
            HasGift = input.ReadBool();
            break;
          }
          case 104: {
            FriendPro = input.ReadUInt32();
            break;
          }
          case 114: {
            GuildName = input.ReadBytes();
            break;
          }
          case 120: {
            WeekGiftCount = input.ReadUInt32();
            break;
          }
          case 128: {
            TodayGiftCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialAddFriendAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialAddFriendAck> _parser = new pb::MessageParser<CmdSocialAddFriendAck>(() => new CmdSocialAddFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialAddFriendAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.FriendInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FriendInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.FriendInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialAddFriendNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialAddFriendNtf> _parser = new pb::MessageParser<CmdSocialAddFriendNtf>(() => new CmdSocialAddFriendNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialAddFriendNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occupation" field.</summary>
    public const int OccupationFieldNumber = 3;
    private uint occupation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occupation {
      get { return occupation_; }
      set {
        occupation_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 4;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Occupation != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Occupation);
      }
      if (Lvl != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lvl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Occupation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occupation);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Occupation = input.ReadUInt32();
            break;
          }
          case 32: {
            Lvl = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialChatSingleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialChatSingleReq> _parser = new pb::MessageParser<CmdSocialChatSingleReq>(() => new CmdSocialChatSingleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialChatSingleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialChatSingleNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialChatSingleNtf> _parser = new pb::MessageParser<CmdSocialChatSingleNtf>(() => new CmdSocialChatSingleNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialChatSingleNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 1;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderTime" field.</summary>
    public const int SenderTimeFieldNumber = 3;
    private uint senderTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderTime {
      get { return senderTime_; }
      set {
        senderTime_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private global::Packet.FriendInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FriendInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "dstRoleId" field.</summary>
    public const int DstRoleIdFieldNumber = 7;
    private ulong dstRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstRoleId {
      get { return dstRoleId_; }
      set {
        dstRoleId_ = value;
      }
    }

    /// <summary>Field number for the "chatFrame" field.</summary>
    public const int ChatFrameFieldNumber = 8;
    private uint chatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatFrame {
      get { return chatFrame_; }
      set {
        chatFrame_ = value;
      }
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 9;
    private uint chatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatText {
      get { return chatText_; }
      set {
        chatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 10;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ChatMsg);
      }
      if (SenderTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SenderTime);
      }
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
      if (DstRoleId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(DstRoleId);
      }
      if (ChatFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ChatFrame);
      }
      if (ChatText != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasMaskWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (SenderTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderTime);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (DstRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstRoleId);
      }
      if (ChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatFrame);
      }
      if (ChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 24: {
            SenderTime = input.ReadUInt32();
            break;
          }
          case 34: {
            if (info_ == null) {
              info_ = new global::Packet.FriendInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 56: {
            DstRoleId = input.ReadUInt64();
            break;
          }
          case 64: {
            ChatFrame = input.ReadUInt32();
            break;
          }
          case 72: {
            ChatText = input.ReadUInt32();
            break;
          }
          case 80: {
            HasMaskWord = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupChatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupChatReq> _parser = new pb::MessageParser<CmdSocialGroupChatReq>(() => new CmdSocialGroupChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupChatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupChatNtf> _parser = new pb::MessageParser<CmdSocialGroupChatNtf>(() => new CmdSocialGroupChatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupChatNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 6;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 7;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "senderHead" field.</summary>
    public const int SenderHeadFieldNumber = 8;
    private uint senderHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    /// <summary>Field number for the "senderHeadFrame" field.</summary>
    public const int SenderHeadFrameFieldNumber = 9;
    private uint senderHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHeadFrame {
      get { return senderHeadFrame_; }
      set {
        senderHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatFrame" field.</summary>
    public const int SenderChatFrameFieldNumber = 10;
    private uint senderChatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatFrame {
      get { return senderChatFrame_; }
      set {
        senderChatFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatText" field.</summary>
    public const int SenderChatTextFieldNumber = 11;
    private uint senderChatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatText {
      get { return senderChatText_; }
      set {
        senderChatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 12;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Name);
      }
      if (HeroId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ExtraType);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(SenderChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasMaskWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 34: {
            Name = input.ReadBytes();
            break;
          }
          case 40: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 50: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 56: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 64: {
            SenderHead = input.ReadUInt32();
            break;
          }
          case 72: {
            SenderHeadFrame = input.ReadUInt32();
            break;
          }
          case 80: {
            SenderChatFrame = input.ReadUInt32();
            break;
          }
          case 88: {
            SenderChatText = input.ReadUInt32();
            break;
          }
          case 96: {
            HasMaskWord = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialCreateGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialCreateGroupReq> _parser = new pb::MessageParser<CmdSocialCreateGroupReq>(() => new CmdSocialCreateGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialCreateGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleIds" field.</summary>
    public const int RoleIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleIds_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 不包含自己
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleIds {
      get { return roleIds_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleIds_.WriteTo(output, _repeated_roleIds_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleIds_.CalculateSize(_repeated_roleIds_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleIds_.AddEntriesFrom(input, _repeated_roleIds_codec);
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupInfoNtf> _parser = new pb::MessageParser<CmdSocialGroupInfoNtf>(() => new CmdSocialGroupInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private uint online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "heroIds" field.</summary>
    public const int HeroIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_heroIds_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> heroIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///群图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HeroIds {
      get { return heroIds_; }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 6;
    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (Online != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Online);
      }
      heroIds_.WriteTo(output, _repeated_heroIds_codec);
      if (LeaderId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(LeaderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Online);
      }
      size += heroIds_.CalculateSize(_repeated_heroIds_codec);
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            Online = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            heroIds_.AddEntriesFrom(input, _repeated_heroIds_codec);
            break;
          }
          case 48: {
            LeaderId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupAddMemberReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupAddMemberReq> _parser = new pb::MessageParser<CmdSocialGroupAddMemberReq>(() => new CmdSocialGroupAddMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupAddMemberReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupAddMemberAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupAddMemberAck> _parser = new pb::MessageParser<CmdSocialGroupAddMemberAck>(() => new CmdSocialGroupAddMemberAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupAddMemberAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///uint32 count = 2;
    ///uint32 online = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDestroyGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDestroyGroupReq> _parser = new pb::MessageParser<CmdSocialDestroyGroupReq>(() => new CmdSocialDestroyGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDestroyGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDestroyGroupNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDestroyGroupNtf> _parser = new pb::MessageParser<CmdSocialDestroyGroupNtf>(() => new CmdSocialDestroyGroupNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDestroyGroupNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialQuitGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialQuitGroupReq> _parser = new pb::MessageParser<CmdSocialQuitGroupReq>(() => new CmdSocialQuitGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialQuitGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialQuitGroupAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialQuitGroupAck> _parser = new pb::MessageParser<CmdSocialQuitGroupAck>(() => new CmdSocialQuitGroupAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialQuitGroupAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDelFriendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDelFriendReq> _parser = new pb::MessageParser<CmdSocialDelFriendReq>(() => new CmdSocialDelFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDelFriendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDelFriendAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDelFriendAck> _parser = new pb::MessageParser<CmdSocialDelFriendAck>(() => new CmdSocialDelFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDelFriendAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialFriendOnlineNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialFriendOnlineNtf> _parser = new pb::MessageParser<CmdSocialFriendOnlineNtf>(() => new CmdSocialFriendOnlineNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialFriendOnlineNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialFriendOfflineNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialFriendOfflineNtf> _parser = new pb::MessageParser<CmdSocialFriendOfflineNtf>(() => new CmdSocialFriendOfflineNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialFriendOfflineNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleId_.WriteTo(output, _repeated_roleId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetFriendInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetFriendInfoReq> _parser = new pb::MessageParser<CmdSocialGetFriendInfoReq>(() => new CmdSocialGetFriendInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetFriendInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_roleid_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> roleid_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///陌生人，最多20个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Roleid {
      get { return roleid_; }
    }

    /// <summary>Field number for the "initiative" field.</summary>
    public const int InitiativeFieldNumber = 2;
    private bool initiative_;
    /// <summary>
    ///主动发送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initiative {
      get { return initiative_; }
      set {
        initiative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleid_.WriteTo(output, _repeated_roleid_codec);
      if (Initiative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Initiative);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleid_.CalculateSize(_repeated_roleid_codec);
      if (Initiative != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            roleid_.AddEntriesFrom(input, _repeated_roleid_codec);
            break;
          }
          case 16: {
            Initiative = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetFriendInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetFriendInfoAck> _parser = new pb::MessageParser<CmdSocialGetFriendInfoAck>(() => new CmdSocialGetFriendInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetFriendInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FriendInfo> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendInfo> friends_ = new pbc::RepeatedField<global::Packet.FriendInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendInfo> Friends {
      get { return friends_; }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdSocialGetFriendInfoAck.Types.Team> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdSocialGetFriendInfoAck.Types.Team.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdSocialGetFriendInfoAck.Types.Team> teams_ = new pbc::RepeatedField<global::Packet.CmdSocialGetFriendInfoAck.Types.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdSocialGetFriendInfoAck.Types.Team> Teams {
      get { return teams_; }
    }

    /// <summary>Field number for the "strangers" field.</summary>
    public const int StrangersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.FriendInfo> _repeated_strangers_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendInfo> strangers_ = new pbc::RepeatedField<global::Packet.FriendInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendInfo> Strangers {
      get { return strangers_; }
    }

    /// <summary>Field number for the "outdated" field.</summary>
    public const int OutdatedFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_outdated_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> outdated_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///过时数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Outdated {
      get { return outdated_; }
    }

    /// <summary>Field number for the "friendLimit" field.</summary>
    public const int FriendLimitFieldNumber = 5;
    private uint friendLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendLimit {
      get { return friendLimit_; }
      set {
        friendLimit_ = value;
      }
    }

    /// <summary>Field number for the "initiative" field.</summary>
    public const int InitiativeFieldNumber = 10;
    private bool initiative_;
    /// <summary>
    ///主动发送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initiative {
      get { return initiative_; }
      set {
        initiative_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 6;
    private uint sex_;
    /// <summary>
    ///社交数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 7;
    private uint age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "hobby" field.</summary>
    public const int HobbyFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_hobby_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> hobby_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Hobby {
      get { return hobby_; }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 9;
    private uint area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friends_.WriteTo(output, _repeated_friends_codec);
      teams_.WriteTo(output, _repeated_teams_codec);
      strangers_.WriteTo(output, _repeated_strangers_codec);
      outdated_.WriteTo(output, _repeated_outdated_codec);
      if (FriendLimit != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FriendLimit);
      }
      if (Sex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Sex);
      }
      if (Age != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Age);
      }
      hobby_.WriteTo(output, _repeated_hobby_codec);
      if (Area != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Area);
      }
      if (Initiative != false) {
        output.WriteRawTag(80);
        output.WriteBool(Initiative);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      size += teams_.CalculateSize(_repeated_teams_codec);
      size += strangers_.CalculateSize(_repeated_strangers_codec);
      size += outdated_.CalculateSize(_repeated_outdated_codec);
      if (FriendLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendLimit);
      }
      if (Initiative != false) {
        size += 1 + 1;
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      size += hobby_.CalculateSize(_repeated_hobby_codec);
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
          case 26: {
            strangers_.AddEntriesFrom(input, _repeated_strangers_codec);
            break;
          }
          case 34:
          case 32: {
            outdated_.AddEntriesFrom(input, _repeated_outdated_codec);
            break;
          }
          case 40: {
            FriendLimit = input.ReadUInt32();
            break;
          }
          case 48: {
            Sex = input.ReadUInt32();
            break;
          }
          case 56: {
            Age = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            hobby_.AddEntriesFrom(input, _repeated_hobby_codec);
            break;
          }
          case 72: {
            Area = input.ReadUInt32();
            break;
          }
          case 80: {
            Initiative = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdSocialGetFriendInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Team : pb::IMessage {
        private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Team> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 2;
        private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
            = pb::FieldCodec.ForUInt64(18);
        private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> RoleId {
          get { return roleId_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          roleId_.WriteTo(output, _repeated_roleId_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          size += roleId_.CalculateSize(_repeated_roleId_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 18:
              case 16: {
                roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdSocialGetGroupBriefInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGroupBriefInfoReq> _parser = new pb::MessageParser<CmdSocialGetGroupBriefInfoReq>(() => new CmdSocialGetGroupBriefInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGroupBriefInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialGetGroupBriefInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGroupBriefInfoAck> _parser = new pb::MessageParser<CmdSocialGetGroupBriefInfoAck>(() => new CmdSocialGetGroupBriefInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGroupBriefInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdSocialGetGroupBriefInfoAck.Types.GroupInfo> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdSocialGetGroupBriefInfoAck.Types.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdSocialGetGroupBriefInfoAck.Types.GroupInfo> groups_ = new pbc::RepeatedField<global::Packet.CmdSocialGetGroupBriefInfoAck.Types.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdSocialGetGroupBriefInfoAck.Types.GroupInfo> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdSocialGetGroupBriefInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class GroupInfo : pb::IMessage {
        private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 2;
        private uint groupId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GroupId {
          get { return groupId_; }
          set {
            groupId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 3;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "online" field.</summary>
        public const int OnlineFieldNumber = 4;
        private uint online_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Online {
          get { return online_; }
          set {
            online_ = value;
          }
        }

        /// <summary>Field number for the "notice" field.</summary>
        public const int NoticeFieldNumber = 5;
        private pb::ByteString notice_ = pb::ByteString.Empty;
        /// <summary>
        ///公告
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Notice {
          get { return notice_; }
          set {
            notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "leader" field.</summary>
        public const int LeaderFieldNumber = 6;
        private ulong leader_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Leader {
          get { return leader_; }
          set {
            leader_ = value;
          }
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 7;
        private static readonly pb::FieldCodec<uint> _repeated_heroId_codec
            = pb::FieldCodec.ForUInt32(58);
        private readonly pbc::RepeatedField<uint> heroId_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///头像
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> HeroId {
          get { return heroId_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          if (GroupId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(GroupId);
          }
          if (Count != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Count);
          }
          if (Online != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Online);
          }
          if (Notice.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Notice);
          }
          if (Leader != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Leader);
          }
          heroId_.WriteTo(output, _repeated_heroId_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (GroupId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (Online != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Online);
          }
          if (Notice.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
          }
          if (Leader != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Leader);
          }
          size += heroId_.CalculateSize(_repeated_heroId_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 16: {
                GroupId = input.ReadUInt32();
                break;
              }
              case 24: {
                Count = input.ReadUInt32();
                break;
              }
              case 32: {
                Online = input.ReadUInt32();
                break;
              }
              case 42: {
                Notice = input.ReadBytes();
                break;
              }
              case 48: {
                Leader = input.ReadUInt64();
                break;
              }
              case 58:
              case 56: {
                heroId_.AddEntriesFrom(input, _repeated_heroId_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdSocialGetGroupDetailInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGroupDetailInfoReq> _parser = new pb::MessageParser<CmdSocialGetGroupDetailInfoReq>(() => new CmdSocialGetGroupDetailInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGroupDetailInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGroupDetailInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGroupDetailInfoAck> _parser = new pb::MessageParser<CmdSocialGetGroupDetailInfoAck>(() => new CmdSocialGetGroupDetailInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGroupDetailInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FriendInfo> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendInfo> roles_ = new pbc::RepeatedField<global::Packet.FriendInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendInfo> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupChangeNtf> _parser = new pb::MessageParser<CmdSocialGroupChangeNtf>(() => new CmdSocialGroupChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "inviter" field.</summary>
    public const int InviterFieldNumber = 2;
    private pb::ByteString inviter_ = pb::ByteString.Empty;
    /// <summary>
    ///如果为空则是玩家主动退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Inviter {
      get { return inviter_; }
      set {
        inviter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "invitee" field.</summary>
    public const int InviteeFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_invitee_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> invitee_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///被邀请人。。。  如果是退出工会则是退出的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Invitee {
      get { return invitee_; }
    }

    /// <summary>Field number for the "bLeave" field.</summary>
    public const int BLeaveFieldNumber = 4;
    private bool bLeave_;
    /// <summary>
    ///离开还是加入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BLeave {
      get { return bLeave_; }
      set {
        bLeave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Inviter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Inviter);
      }
      invitee_.WriteTo(output, _repeated_invitee_codec);
      if (BLeave != false) {
        output.WriteRawTag(32);
        output.WriteBool(BLeave);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Inviter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Inviter);
      }
      size += invitee_.CalculateSize(_repeated_invitee_codec);
      if (BLeave != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Inviter = input.ReadBytes();
            break;
          }
          case 26: {
            invitee_.AddEntriesFrom(input, _repeated_invitee_codec);
            break;
          }
          case 32: {
            BLeave = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialAddBlackListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialAddBlackListReq> _parser = new pb::MessageParser<CmdSocialAddBlackListReq>(() => new CmdSocialAddBlackListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialAddBlackListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialAddBlackListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialAddBlackListAck> _parser = new pb::MessageParser<CmdSocialAddBlackListAck>(() => new CmdSocialAddBlackListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialAddBlackListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.FriendInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FriendInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.FriendInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialRemoveBlackListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialRemoveBlackListReq> _parser = new pb::MessageParser<CmdSocialRemoveBlackListReq>(() => new CmdSocialRemoveBlackListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialRemoveBlackListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialRemoveBlackListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialRemoveBlackListAck> _parser = new pb::MessageParser<CmdSocialRemoveBlackListAck>(() => new CmdSocialRemoveBlackListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialRemoveBlackListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetBlackListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBlackListReq> _parser = new pb::MessageParser<CmdSocialGetBlackListReq>(() => new CmdSocialGetBlackListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBlackListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialGetBlackListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBlackListAck> _parser = new pb::MessageParser<CmdSocialGetBlackListAck>(() => new CmdSocialGetBlackListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBlackListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FriendInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FriendInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendInfo> infos_ = new pbc::RepeatedField<global::Packet.FriendInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialRenameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialRenameNtf> _parser = new pb::MessageParser<CmdSocialRenameNtf>(() => new CmdSocialRenameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialRenameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oldName" field.</summary>
    public const int OldNameFieldNumber = 3;
    private pb::ByteString oldName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (OldName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OldName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 26: {
            OldName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupKickMemberReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupKickMemberReq> _parser = new pb::MessageParser<CmdSocialGroupKickMemberReq>(() => new CmdSocialGroupKickMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupKickMemberReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupKickMemberNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupKickMemberNtf> _parser = new pb::MessageParser<CmdSocialGroupKickMemberNtf>(() => new CmdSocialGroupKickMemberNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupKickMemberNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSetGroupNoticeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSetGroupNoticeReq> _parser = new pb::MessageParser<CmdSocialSetGroupNoticeReq>(() => new CmdSocialSetGroupNoticeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSetGroupNoticeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSetGroupNoticeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSetGroupNoticeNtf> _parser = new pb::MessageParser<CmdSocialSetGroupNoticeNtf>(() => new CmdSocialSetGroupNoticeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSetGroupNoticeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Notice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Notice = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupChangeNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupChangeNameReq> _parser = new pb::MessageParser<CmdSocialGroupChangeNameReq>(() => new CmdSocialGroupChangeNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupChangeNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGroupChangeNameAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGroupChangeNameAck> _parser = new pb::MessageParser<CmdSocialGroupChangeNameAck>(() => new CmdSocialGroupChangeNameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGroupChangeNameAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialFriendsGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialFriendsGroupReq> _parser = new pb::MessageParser<CmdSocialFriendsGroupReq>(() => new CmdSocialFriendsGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialFriendsGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    /// <summary>Field number for the "oldName" field.</summary>
    public const int OldNameFieldNumber = 4;
    private pb::ByteString oldName_ = pb::ByteString.Empty;
    /// <summary>
    ///bool bDelete = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      roleId_.WriteTo(output, _repeated_roleId_codec);
      if (OldName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OldName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
          case 34: {
            OldName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialFriendsGroupAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialFriendsGroupAck> _parser = new pb::MessageParser<CmdSocialFriendsGroupAck>(() => new CmdSocialFriendsGroupAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialFriendsGroupAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_roleId_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> roleId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RoleId {
      get { return roleId_; }
    }

    /// <summary>Field number for the "oldName" field.</summary>
    public const int OldNameFieldNumber = 4;
    private pb::ByteString oldName_ = pb::ByteString.Empty;
    /// <summary>
    ///bool bDelete = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      roleId_.WriteTo(output, _repeated_roleId_codec);
      if (OldName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OldName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      size += roleId_.CalculateSize(_repeated_roleId_codec);
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18:
          case 16: {
            roleId_.AddEntriesFrom(input, _repeated_roleId_codec);
            break;
          }
          case 34: {
            OldName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDelFriendsGroupReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDelFriendsGroupReq> _parser = new pb::MessageParser<CmdSocialDelFriendsGroupReq>(() => new CmdSocialDelFriendsGroupReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDelFriendsGroupReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDelFriendsGroupAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDelFriendsGroupAck> _parser = new pb::MessageParser<CmdSocialDelFriendsGroupAck>(() => new CmdSocialDelFriendsGroupAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDelFriendsGroupAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class SysTipFieldRoleName : pb::IMessage {
    private static readonly pb::MessageParser<SysTipFieldRoleName> _parser = new pb::MessageParser<SysTipFieldRoleName>(() => new SysTipFieldRoleName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysTipFieldRoleName> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class SysTipFieldItem : pb::IMessage {
    private static readonly pb::MessageParser<SysTipFieldItem> _parser = new pb::MessageParser<SysTipFieldItem>(() => new SysTipFieldItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysTipFieldItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemInfoId" field.</summary>
    public const int ItemInfoIdFieldNumber = 1;
    private uint itemInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemInfoId {
      get { return itemInfoId_; }
      set {
        itemInfoId_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemInfoId);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemInfoId);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Color = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SysTipFieldAchievement : pb::IMessage {
    private static readonly pb::MessageParser<SysTipFieldAchievement> _parser = new pb::MessageParser<SysTipFieldAchievement>(() => new SysTipFieldAchievement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysTipFieldAchievement> Parser { get { return _parser; } }

    /// <summary>Field number for the "achievementId" field.</summary>
    public const int AchievementIdFieldNumber = 1;
    private uint achievementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AchievementId {
      get { return achievementId_; }
      set {
        achievementId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AchievementId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AchievementId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AchievementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AchievementId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AchievementId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SysTipField : pb::IMessage {
    private static readonly pb::MessageParser<SysTipField> _parser = new pb::MessageParser<SysTipField>(() => new SysTipField());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysTipField> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// enum SysTipFieldType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 2;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private pb::ByteString context_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fillMsgId" field.</summary>
    public const int FillMsgIdFieldNumber = 4;
    private uint fillMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FillMsgId {
      get { return fillMsgId_; }
      set {
        fillMsgId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 7;
    private global::Packet.SysTipFieldRoleName role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SysTipFieldRoleName Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 9;
    private global::Packet.SysTipFieldItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SysTipFieldItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "achievement" field.</summary>
    public const int AchievementFieldNumber = 10;
    private global::Packet.SysTipFieldAchievement achievement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SysTipFieldAchievement Achievement {
      get { return achievement_; }
      set {
        achievement_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 11;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Number != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Number);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Context);
      }
      if (FillMsgId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FillMsgId);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Time);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Timestamp);
      }
      if (role_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Role);
      }
      if (item_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Item);
      }
      if (achievement_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Achievement);
      }
      if (Career != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      if (FillMsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FillMsgId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (achievement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Achievement);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Number = input.ReadInt32();
            break;
          }
          case 26: {
            Context = input.ReadBytes();
            break;
          }
          case 32: {
            FillMsgId = input.ReadUInt32();
            break;
          }
          case 40: {
            Time = input.ReadUInt32();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            if (role_ == null) {
              role_ = new global::Packet.SysTipFieldRoleName();
            }
            input.ReadMessage(role_);
            break;
          }
          case 74: {
            if (item_ == null) {
              item_ = new global::Packet.SysTipFieldItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 82: {
            if (achievement_ == null) {
              achievement_ = new global::Packet.SysTipFieldAchievement();
            }
            input.ReadMessage(achievement_);
            break;
          }
          case 88: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSysTipNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSysTipNtf> _parser = new pb::MessageParser<CmdSocialSysTipNtf>(() => new CmdSocialSysTipNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSysTipNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private uint msgId_;
    /// <summary>
    /// 语言表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.SysTipField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.SysTipField.Parser);
    private readonly pbc::RepeatedField<global::Packet.SysTipField> fields_ = new pbc::RepeatedField<global::Packet.SysTipField>();
    /// <summary>
    /// 消息填充字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SysTipField> Fields {
      get { return fields_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///uint32 pos = 2;                   // enum SysTipPos(位置读表)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MsgId);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgId);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt32();
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialBulletCommentRpt : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialBulletCommentRpt> _parser = new pb::MessageParser<CmdSocialBulletCommentRpt>(() => new CmdSocialBulletCommentRpt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialBulletCommentRpt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialGetBulletCommentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBulletCommentReq> _parser = new pb::MessageParser<CmdSocialGetBulletCommentReq>(() => new CmdSocialGetBulletCommentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBulletCommentReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialGetBulletCommentAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetBulletCommentAck> _parser = new pb::MessageParser<CmdSocialGetBulletCommentAck>(() => new CmdSocialGetBulletCommentAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetBulletCommentAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialChangeFriendsGroupNameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialChangeFriendsGroupNameReq> _parser = new pb::MessageParser<CmdSocialChangeFriendsGroupNameReq>(() => new CmdSocialChangeFriendsGroupNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialChangeFriendsGroupNameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "oldName" field.</summary>
    public const int OldNameFieldNumber = 1;
    private pb::ByteString oldName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OldName);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldName);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OldName = input.ReadBytes();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialChangeFriendsGroupNameAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialChangeFriendsGroupNameAck> _parser = new pb::MessageParser<CmdSocialChangeFriendsGroupNameAck>(() => new CmdSocialChangeFriendsGroupNameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialChangeFriendsGroupNameAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "oldName" field.</summary>
    public const int OldNameFieldNumber = 1;
    private pb::ByteString oldName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OldName);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OldName);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OldName = input.ReadBytes();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGameChatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGameChatReq> _parser = new pb::MessageParser<CmdSocialGameChatReq>(() => new CmdSocialGameChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGameChatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Packet.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 3;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Packet.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGameChatNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGameChatNtf> _parser = new pb::MessageParser<CmdSocialGameChatNtf>(() => new CmdSocialGameChatNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGameChatNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Packet.ChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chatMsg" field.</summary>
    public const int ChatMsgFieldNumber = 2;
    private pb::ByteString chatMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatMsg {
      get { return chatMsg_; }
      set {
        chatMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 3;
    private pb::ByteString senderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 4;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "extraMsg" field.</summary>
    public const int ExtraMsgFieldNumber = 5;
    private pb::ByteString extraMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraMsg {
      get { return extraMsg_; }
      set {
        extraMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraType" field.</summary>
    public const int ExtraTypeFieldNumber = 6;
    private uint extraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraType {
      get { return extraType_; }
      set {
        extraType_ = value;
      }
    }

    /// <summary>Field number for the "senderHead" field.</summary>
    public const int SenderHeadFieldNumber = 7;
    private uint senderHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHead {
      get { return senderHead_; }
      set {
        senderHead_ = value;
      }
    }

    /// <summary>Field number for the "senderHeadFrame" field.</summary>
    public const int SenderHeadFrameFieldNumber = 8;
    private uint senderHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderHeadFrame {
      get { return senderHeadFrame_; }
      set {
        senderHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatFrame" field.</summary>
    public const int SenderChatFrameFieldNumber = 9;
    private uint senderChatFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatFrame {
      get { return senderChatFrame_; }
      set {
        senderChatFrame_ = value;
      }
    }

    /// <summary>Field number for the "senderChatText" field.</summary>
    public const int SenderChatTextFieldNumber = 10;
    private uint senderChatText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SenderChatText {
      get { return senderChatText_; }
      set {
        senderChatText_ = value;
      }
    }

    /// <summary>Field number for the "hasMaskWord" field.</summary>
    public const int HasMaskWordFieldNumber = 11;
    private bool hasMaskWord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaskWord {
      get { return hasMaskWord_; }
      set {
        hasMaskWord_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 12;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChatMsg);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SenderName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ExtraMsg);
      }
      if (ExtraType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraType);
      }
      if (SenderHead != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SenderChatText);
      }
      if (HasMaskWord != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasMaskWord);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatMsg);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (ExtraMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraMsg);
      }
      if (ExtraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraType);
      }
      if (SenderHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHead);
      }
      if (SenderHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderHeadFrame);
      }
      if (SenderChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatFrame);
      }
      if (SenderChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderChatText);
      }
      if (HasMaskWord != false) {
        size += 1 + 1;
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Packet.ChatType) input.ReadEnum();
            break;
          }
          case 18: {
            ChatMsg = input.ReadBytes();
            break;
          }
          case 26: {
            SenderName = input.ReadBytes();
            break;
          }
          case 32: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 42: {
            ExtraMsg = input.ReadBytes();
            break;
          }
          case 48: {
            ExtraType = input.ReadUInt32();
            break;
          }
          case 56: {
            SenderHead = input.ReadUInt32();
            break;
          }
          case 64: {
            SenderHeadFrame = input.ReadUInt32();
            break;
          }
          case 72: {
            SenderChatFrame = input.ReadUInt32();
            break;
          }
          case 80: {
            SenderChatText = input.ReadUInt32();
            break;
          }
          case 88: {
            HasMaskWord = input.ReadBool();
            break;
          }
          case 96: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialHandleFriendRequestReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialHandleFriendRequestReq> _parser = new pb::MessageParser<CmdSocialHandleFriendRequestReq>(() => new CmdSocialHandleFriendRequestReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialHandleFriendRequestReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 对方id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 3;
    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Agree != false) {
        output.WriteRawTag(24);
        output.WriteBool(Agree);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Agree != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialHandleFriendRequestAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialHandleFriendRequestAck> _parser = new pb::MessageParser<CmdSocialHandleFriendRequestAck>(() => new CmdSocialHandleFriendRequestAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialHandleFriendRequestAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 1;
    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.FriendInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FriendInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Agree != false) {
        output.WriteRawTag(8);
        output.WriteBool(Agree);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Agree != false) {
        size += 1 + 1;
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Agree = input.ReadBool();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.FriendInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialHandleFriendRequestNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialHandleFriendRequestNtf> _parser = new pb::MessageParser<CmdSocialHandleFriendRequestNtf>(() => new CmdSocialHandleFriendRequestNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialHandleFriendRequestNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 1;
    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.FriendInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FriendInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Agree != false) {
        output.WriteRawTag(8);
        output.WriteBool(Agree);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Agree != false) {
        size += 1 + 1;
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Agree = input.ReadBool();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.FriendInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSearchFriendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSearchFriendReq> _parser = new pb::MessageParser<CmdSocialSearchFriendReq>(() => new CmdSocialSearchFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSearchFriendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///  0代表从头开始， 否则发上次服务器下发的最后一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "conditionID" field.</summary>
    public const int ConditionIDFieldNumber = 2;
    private uint conditionID_;
    /// <summary>
    /// 表id  //填0为关系搜索
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConditionID {
      get { return conditionID_; }
      set {
        conditionID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (ConditionID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConditionID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ConditionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConditionID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ConditionID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class FriendSearchInfo : pb::IMessage {
    private static readonly pb::MessageParser<FriendSearchInfo> _parser = new pb::MessageParser<FriendSearchInfo>(() => new FriendSearchInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendSearchInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "headIcon" field.</summary>
    public const int HeadIconFieldNumber = 1;
    private uint headIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 2;
    private uint lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 5;
    private uint heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "iconFrameId" field.</summary>
    public const int IconFrameIdFieldNumber = 6;
    private uint iconFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IconFrameId {
      get { return iconFrameId_; }
      set {
        iconFrameId_ = value;
      }
    }

    /// <summary>Field number for the "occ" field.</summary>
    public const int OccFieldNumber = 7;
    private uint occ_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occ {
      get { return occ_; }
      set {
        occ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadIcon != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeadIcon);
      }
      if (Lvl != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lvl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
      if (Heroid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Heroid);
      }
      if (IconFrameId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IconFrameId);
      }
      if (Occ != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Occ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIcon);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
      }
      if (IconFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IconFrameId);
      }
      if (Occ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadIcon = input.ReadUInt32();
            break;
          }
          case 16: {
            Lvl = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 40: {
            Heroid = input.ReadUInt32();
            break;
          }
          case 48: {
            IconFrameId = input.ReadUInt32();
            break;
          }
          case 56: {
            Occ = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSearchFriendAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSearchFriendAck> _parser = new pb::MessageParser<CmdSocialSearchFriendAck>(() => new CmdSocialSearchFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSearchFriendAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "conditionID" field.</summary>
    public const int ConditionIDFieldNumber = 1;
    private uint conditionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConditionID {
      get { return conditionID_; }
      set {
        conditionID_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "friendsLists" field.</summary>
    public const int FriendsListsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.FriendSearchInfo> _repeated_friendsLists_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.FriendSearchInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendSearchInfo> friendsLists_ = new pbc::RepeatedField<global::Packet.FriendSearchInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendSearchInfo> FriendsLists {
      get { return friendsLists_; }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 4;
    private uint totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConditionID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConditionID);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      friendsLists_.WriteTo(output, _repeated_friendsLists_codec);
      if (TotalCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConditionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConditionID);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      size += friendsLists_.CalculateSize(_repeated_friendsLists_codec);
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConditionID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            friendsLists_.AddEntriesFrom(input, _repeated_friendsLists_codec);
            break;
          }
          case 32: {
            TotalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialRelationFriendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialRelationFriendReq> _parser = new pb::MessageParser<CmdSocialRelationFriendReq>(() => new CmdSocialRelationFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialRelationFriendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialRelationFriendAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialRelationFriendAck> _parser = new pb::MessageParser<CmdSocialRelationFriendAck>(() => new CmdSocialRelationFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialRelationFriendAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendsLists" field.</summary>
    public const int FriendsListsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FriendSearchInfo> _repeated_friendsLists_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FriendSearchInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FriendSearchInfo> friendsLists_ = new pbc::RepeatedField<global::Packet.FriendSearchInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FriendSearchInfo> FriendsLists {
      get { return friendsLists_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendsLists_.WriteTo(output, _repeated_friendsLists_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendsLists_.CalculateSize(_repeated_friendsLists_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendsLists_.AddEntriesFrom(input, _repeated_friendsLists_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDetailInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDetailInfoReq> _parser = new pb::MessageParser<CmdSocialDetailInfoReq>(() => new CmdSocialDetailInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDetailInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDetailInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDetailInfoAck> _parser = new pb::MessageParser<CmdSocialDetailInfoAck>(() => new CmdSocialDetailInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDetailInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "baseInfo" field.</summary>
    public const int BaseInfoFieldNumber = 2;
    private global::Packet.RoleBase baseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleBase BaseInfo {
      get { return baseInfo_; }
      set {
        baseInfo_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 3;
    private global::Packet.CmdAttrAttrNtf attrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdAttrAttrNtf Attrs {
      get { return attrs_; }
      set {
        attrs_ = value;
      }
    }

    /// <summary>Field number for the "weaponItemID" field.</summary>
    public const int WeaponItemIDFieldNumber = 4;
    private uint weaponItemID_;
    /// <summary>
    /// 主手武器的ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponItemID {
      get { return weaponItemID_; }
      set {
        weaponItemID_ = value;
      }
    }

    /// <summary>Field number for the "fashionInfo" field.</summary>
    public const int FashionInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionInfo_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    /// <summary>
    ///穿戴的时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionInfo {
      get { return fashionInfo_; }
    }

    /// <summary>Field number for the "petInfo" field.</summary>
    public const int PetInfoFieldNumber = 6;
    private global::Packet.PetUnit petInfo_;
    /// <summary>
    ///出战宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit PetInfo {
      get { return petInfo_; }
      set {
        petInfo_ = value;
      }
    }

    /// <summary>Field number for the "headPhoto" field.</summary>
    public const int HeadPhotoFieldNumber = 7;
    private uint headPhoto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadPhoto {
      get { return headPhoto_; }
      set {
        headPhoto_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 8;
    private uint headFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (baseInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseInfo);
      }
      if (attrs_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Attrs);
      }
      if (WeaponItemID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WeaponItemID);
      }
      fashionInfo_.WriteTo(output, _repeated_fashionInfo_codec);
      if (petInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PetInfo);
      }
      if (HeadPhoto != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HeadPhoto);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HeadFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (baseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseInfo);
      }
      if (attrs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attrs);
      }
      if (WeaponItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponItemID);
      }
      size += fashionInfo_.CalculateSize(_repeated_fashionInfo_codec);
      if (petInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetInfo);
      }
      if (HeadPhoto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadPhoto);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (baseInfo_ == null) {
              baseInfo_ = new global::Packet.RoleBase();
            }
            input.ReadMessage(baseInfo_);
            break;
          }
          case 26: {
            if (attrs_ == null) {
              attrs_ = new global::Packet.CmdAttrAttrNtf();
            }
            input.ReadMessage(attrs_);
            break;
          }
          case 32: {
            WeaponItemID = input.ReadUInt32();
            break;
          }
          case 42: {
            fashionInfo_.AddEntriesFrom(input, _repeated_fashionInfo_codec);
            break;
          }
          case 50: {
            if (petInfo_ == null) {
              petInfo_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(petInfo_);
            break;
          }
          case 56: {
            HeadPhoto = input.ReadUInt32();
            break;
          }
          case 64: {
            HeadFrame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSetMySocialInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSetMySocialInfoReq> _parser = new pb::MessageParser<CmdSocialSetMySocialInfoReq>(() => new CmdSocialSetMySocialInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSetMySocialInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 1;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private uint age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "hobby" field.</summary>
    public const int HobbyFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_hobby_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> hobby_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Hobby {
      get { return hobby_; }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private uint area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sex);
      }
      if (Age != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Age);
      }
      hobby_.WriteTo(output, _repeated_hobby_codec);
      if (Area != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Area);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      size += hobby_.CalculateSize(_repeated_hobby_codec);
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sex = input.ReadUInt32();
            break;
          }
          case 16: {
            Age = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            hobby_.AddEntriesFrom(input, _repeated_hobby_codec);
            break;
          }
          case 32: {
            Area = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSetMySocialInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSetMySocialInfoAck> _parser = new pb::MessageParser<CmdSocialSetMySocialInfoAck>(() => new CmdSocialSetMySocialInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSetMySocialInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 1;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private uint age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "hobby" field.</summary>
    public const int HobbyFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_hobby_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> hobby_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Hobby {
      get { return hobby_; }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private uint area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sex);
      }
      if (Age != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Age);
      }
      hobby_.WriteTo(output, _repeated_hobby_codec);
      if (Area != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Area);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Age);
      }
      size += hobby_.CalculateSize(_repeated_hobby_codec);
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sex = input.ReadUInt32();
            break;
          }
          case 16: {
            Age = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            hobby_.AddEntriesFrom(input, _repeated_hobby_codec);
            break;
          }
          case 32: {
            Area = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialDelFriendNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialDelFriendNtf> _parser = new pb::MessageParser<CmdSocialDelFriendNtf>(() => new CmdSocialDelFriendNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialDelFriendNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上限要前端自己判断，ack返回之前需要禁用或cd，防止连点
  /// </summary>
  public sealed class CmdSocialSendGiftsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSendGiftsReq> _parser = new pb::MessageParser<CmdSocialSendGiftsReq>(() => new CmdSocialSendGiftsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSendGiftsReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dstRoleId" field.</summary>
    public const int DstRoleIdFieldNumber = 1;
    private ulong dstRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstRoleId {
      get { return dstRoleId_; }
      set {
        dstRoleId_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DstRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DstRoleId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DstRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstRoleId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DstRoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialSendGiftsAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialSendGiftsAck> _parser = new pb::MessageParser<CmdSocialSendGiftsAck>(() => new CmdSocialSendGiftsAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialSendGiftsAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "dstRoleId" field.</summary>
    public const int DstRoleIdFieldNumber = 1;
    private ulong dstRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstRoleId {
      get { return dstRoleId_; }
      set {
        dstRoleId_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DstRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(DstRoleId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DstRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstRoleId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DstRoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGiftsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGiftsReq> _parser = new pb::MessageParser<CmdSocialGetGiftsReq>(() => new CmdSocialGetGiftsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGiftsReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class GiftInfo : pb::IMessage {
    private static readonly pb::MessageParser<GiftInfo> _parser = new pb::MessageParser<GiftInfo>(() => new GiftInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGiftsAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGiftsAck> _parser = new pb::MessageParser<CmdSocialGetGiftsAck>(() => new CmdSocialGetGiftsAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGiftsAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "gifts" field.</summary>
    public const int GiftsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GiftInfo> _repeated_gifts_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GiftInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GiftInfo> gifts_ = new pbc::RepeatedField<global::Packet.GiftInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GiftInfo> Gifts {
      get { return gifts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      gifts_.WriteTo(output, _repeated_gifts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      size += gifts_.CalculateSize(_repeated_gifts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            gifts_.AddEntriesFrom(input, _repeated_gifts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialReceiveGiftsNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialReceiveGiftsNtf> _parser = new pb::MessageParser<CmdSocialReceiveGiftsNtf>(() => new CmdSocialReceiveGiftsNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialReceiveGiftsNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendRoleId" field.</summary>
    public const int FriendRoleIdFieldNumber = 1;
    private ulong friendRoleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendRoleId {
      get { return friendRoleId_; }
      set {
        friendRoleId_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///bytes roleName = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendRoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FriendRoleId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendRoleId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendRoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialBattleAddIntimacyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialBattleAddIntimacyReq> _parser = new pb::MessageParser<CmdSocialBattleAddIntimacyReq>(() => new CmdSocialBattleAddIntimacyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialBattleAddIntimacyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_friendId_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> friendId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FriendId {
      get { return friendId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendId_.WriteTo(output, _repeated_friendId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendId_.CalculateSize(_repeated_friendId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            friendId_.AddEntriesFrom(input, _repeated_friendId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGiftListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGiftListReq> _parser = new pb::MessageParser<CmdSocialGetGiftListReq>(() => new CmdSocialGetGiftListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGiftListReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGiftListAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGiftListAck> _parser = new pb::MessageParser<CmdSocialGetGiftListAck>(() => new CmdSocialGetGiftListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGiftListAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "allGifts" field.</summary>
    public const int AllGiftsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdSocialGetGiftListAck.Types.GiftInfo> _repeated_allGifts_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdSocialGetGiftListAck.Types.GiftInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdSocialGetGiftListAck.Types.GiftInfo> allGifts_ = new pbc::RepeatedField<global::Packet.CmdSocialGetGiftListAck.Types.GiftInfo>();
    /// <summary>
    ///不用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdSocialGetGiftListAck.Types.GiftInfo> AllGifts {
      get { return allGifts_; }
    }

    /// <summary>Field number for the "haveGift" field.</summary>
    public const int HaveGiftFieldNumber = 3;
    private bool haveGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaveGift {
      get { return haveGift_; }
      set {
        haveGift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      allGifts_.WriteTo(output, _repeated_allGifts_codec);
      if (HaveGift != false) {
        output.WriteRawTag(24);
        output.WriteBool(HaveGift);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      size += allGifts_.CalculateSize(_repeated_allGifts_codec);
      if (HaveGift != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            allGifts_.AddEntriesFrom(input, _repeated_allGifts_codec);
            break;
          }
          case 24: {
            HaveGift = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdSocialGetGiftListAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class GiftInfo : pb::IMessage {
        private static readonly pb::MessageParser<GiftInfo> _parser = new pb::MessageParser<GiftInfo>(() => new GiftInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GiftInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "itemCount" field.</summary>
        public const int ItemCountFieldNumber = 2;
        private uint itemCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemCount {
          get { return itemCount_; }
          set {
            itemCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (ItemCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ItemCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                ItemCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdSocialExtendFriendNumReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialExtendFriendNumReq> _parser = new pb::MessageParser<CmdSocialExtendFriendNumReq>(() => new CmdSocialExtendFriendNumReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialExtendFriendNumReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSocialExtendFriendNumAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialExtendFriendNumAck> _parser = new pb::MessageParser<CmdSocialExtendFriendNumAck>(() => new CmdSocialExtendFriendNumAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialExtendFriendNumAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "newLimit" field.</summary>
    public const int NewLimitFieldNumber = 1;
    private uint newLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewLimit {
      get { return newLimit_; }
      set {
        newLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewLimit != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewLimit = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialIntimacyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialIntimacyNtf> _parser = new pb::MessageParser<CmdSocialIntimacyNtf>(() => new CmdSocialIntimacyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialIntimacyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "intimacyVal" field.</summary>
    public const int IntimacyValFieldNumber = 1;
    private uint intimacyVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntimacyVal {
      get { return intimacyVal_; }
      set {
        intimacyVal_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 2;
    private ulong friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntimacyVal != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IntimacyVal);
      }
      if (FriendId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntimacyVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntimacyVal);
      }
      if (FriendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntimacyVal = input.ReadUInt32();
            break;
          }
          case 16: {
            FriendId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialGetGiftNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialGetGiftNtf> _parser = new pb::MessageParser<CmdSocialGetGiftNtf>(() => new CmdSocialGetGiftNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialGetGiftNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private ulong friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// friend name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.GiftInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.GiftInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GiftInfo> items_ = new pbc::RepeatedField<global::Packet.GiftInfo>();
    /// <summary>
    /// 领取的礼物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GiftInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FriendId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ChatSingleFromSystem : pb::IMessage {
    private static readonly pb::MessageParser<ChatSingleFromSystem> _parser = new pb::MessageParser<ChatSingleFromSystem>(() => new ChatSingleFromSystem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatSingleFromSystem> Parser { get { return _parser; } }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 1;
    private uint msgId_;
    /// <summary>
    /// 错误码表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 2;
    private ulong senderId_;
    /// <summary>
    /// 来源玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    /// <summary>
    /// 发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.SysTipField> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.SysTipField.Parser);
    private readonly pbc::RepeatedField<global::Packet.SysTipField> fields_ = new pbc::RepeatedField<global::Packet.SysTipField>();
    /// <summary>
    /// 消息填充字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SysTipField> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MsgId);
      }
      if (SenderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SenderId);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgId);
      }
      if (SenderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SenderId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MsgId = input.ReadUInt32();
            break;
          }
          case 16: {
            SenderId = input.ReadUInt64();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 34: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSocialChatSingleFromSystemNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdSocialChatSingleFromSystemNty> _parser = new pb::MessageParser<CmdSocialChatSingleFromSystemNty>(() => new CmdSocialChatSingleFromSystemNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSocialChatSingleFromSystemNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ChatSingleFromSystem> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ChatSingleFromSystem.Parser);
    private readonly pbc::RepeatedField<global::Packet.ChatSingleFromSystem> units_ = new pbc::RepeatedField<global::Packet.ChatSingleFromSystem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ChatSingleFromSystem> Units {
      get { return units_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
