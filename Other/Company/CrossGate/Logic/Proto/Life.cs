// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: life.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdLifeSkill {
    None = 0,
    /// <summary>
    /// 拉取生活技能数据
    /// </summary>
    PullLifeSkillReq = 3200,
    PullLifeSkillRes = 3201,
    /// <summary>
    /// 使用生产技能打造打造
    /// </summary>
    FormulaBuildReq = 3202,
    FormulaBuildRes = 3203,
    /// <summary>
    /// 学习配方
    /// </summary>
    LearnFormulaBookNtf = 3204,
    /// <summary>
    /// 生活技能熟练度提升
    /// </summary>
    AddSkillExpNtf = 3205,
    /// <summary>
    /// 段位升级
    /// </summary>
    SegmentLevelUpReq = 3206,
    SegmentLevelUpRes = 3207,
    /// <summary>
    /// 技能等级提升
    /// </summary>
    SkillLevelUpReq = 3208,
    SkillLevelUpRes = 3209,
    /// <summary>
    ///单个生活技能学习了通知
    /// </summary>
    SkillGetNtf = 3210,
    /// <summary>
    /// 功能开启
    /// </summary>
    FunctionOpenReq = 3211,
    FunctionOpenRes = 3212,
    /// <summary>
    ///学习生活技能
    /// </summary>
    LearnSkillReq = 3213,
    /// <summary>
    ///增加可学习的技能个数
    /// </summary>
    CanLearnNumAddReq = 3214,
    /// <summary>
    ///增加可学习的技能个数 返回
    /// </summary>
    CanLearnNumAddRes = 3215,
    /// <summary>
    ///遗忘技能请求
    /// </summary>
    SkillForgetReq = 3216,
    /// <summary>
    ///遗忘技能返回
    /// </summary>
    SkillForgetRes = 3217,
    /// <summary>
    ///技能幸运值增加
    /// </summary>
    AddLuckyValueNtf = 3218,
  }

  public enum LifeSkillActiveReason {
    None = 0,
    /// <summary>
    /// 生活技能-打造装备
    /// </summary>
    BuildEquipment = 3201,
    /// <summary>
    /// 生活技能-制造药物
    /// </summary>
    BuildMedicine = 3202,
    /// <summary>
    /// 生活技能-升段
    /// </summary>
    LevelUpSegment = 3203,
    /// <summary>
    /// 生活技能-升级
    /// </summary>
    LevelUpSkill = 3204,
    /// <summary>
    /// 增加可学习技能数量
    /// </summary>
    AddCanLearnSkill = 3205,
    /// <summary>
    /// 家族委托返还扣除道具
    /// </summary>
    GuildConsignRevertCost = 3206,
    /// <summary>
    /// 家族委托协助奖励
    /// </summary>
    GuildConsignAdd = 3207,
  }

  public enum ErrorLifeSkill {
    None = 0,
    /// <summary>
    /// 配方尚未开放
    /// </summary>
    FormulaNotOpened = 3201,
    /// <summary>
    /// 配方info未找到
    /// </summary>
    FormulaInfoNotExists = 3202,
    /// <summary>
    /// role等级不足
    /// </summary>
    RoleLevelNotEnough = 3203,
    /// <summary>
    /// 生活技能未开放
    /// </summary>
    SkillUnopened = 3204,
    /// <summary>
    /// 生活技能等级不足
    /// </summary>
    SkillLevelTooLow = 3205,
    /// <summary>
    /// 淬炼精化不存在
    /// </summary>
    EssenceNotExists = 3206,
    /// <summary>
    /// 完全没有输入材料
    /// </summary>
    NoMaterialInput = 3207,
    /// <summary>
    /// 输入材料过多
    /// </summary>
    TooManyMaterialInput = 3208,
    /// <summary>
    /// inputID不是一个合法道具(表里找不到)
    /// </summary>
    CannotFoundInputIdfromCsvitem = 3209,
    /// <summary>
    /// 输入的道具不是一个合法的配方材料
    /// </summary>
    InputItemIsNotAvalidMaterial = 3210,
    /// <summary>
    /// 不能强化打造
    /// </summary>
    CannotIntensifyBuild = 3211,
    /// <summary>
    /// 不能使用淬炼精华
    /// </summary>
    CannotUseEssence = 3212,
    /// <summary>
    /// item.type_id不在数组formula.item_type_id内
    /// </summary>
    WrongItemTypeId = 3213,
    /// <summary>
    /// 找不到segment的info
    /// </summary>
    CannotFoundSegmentInfo = 3214,
    /// <summary>
    /// 等级已经最高了, 不可再升级
    /// </summary>
    LevelHasBeenMax = 3215,
    /// <summary>
    /// 升级segment的任务没完成
    /// </summary>
    LevelUpSegmentTaskNotFinish = 3216,
    /// <summary>
    /// 无法找到levelinfo
    /// </summary>
    CannotFoundLevelInfo = 3217,
    /// <summary>
    /// 技能熟练度不够
    /// </summary>
    SkillExpNotEnough = 3218,
    /// <summary>
    /// 经验值已满
    /// </summary>
    ExpHasFull = 3219,
    /// <summary>
    /// 技能等级超过段位限制
    /// </summary>
    LevelOverSegmentLimit = 3220,
    /// <summary>
    ///输入材料数量不足
    /// </summary>
    MaterialInputNotEnough = 3221,
    /// <summary>
    ///输入材料数量等级不符
    /// </summary>
    MaterialInputLevelLimit = 3222,
    /// <summary>
    ///未找到生活技能配置
    /// </summary>
    SkillInfoNotFind = 3223,
    /// <summary>
    ///知道技能数量以达到上限 不能继续学习
    /// </summary>
    CanLearnNumNotEnough = 3224,
    /// <summary>
    ///新增学习技能数量消耗不足
    /// </summary>
    AddLearnNumCostNotEnough = 3225,
    /// <summary>
    ///可学习的技能数量已达到上限
    /// </summary>
    AddLearnNumMax = 3226,
    /// <summary>
    ///已经学会该技能
    /// </summary>
    SkillLearnRepeat = 3227,
    /// <summary>
    ///新增学习技能数量消耗配置错误
    /// </summary>
    SkillLearnCostCsvError = 3228,
  }

  public enum LifeSkillType {
    Null = 0,
    /// <summary>
    /// 打造武器
    /// </summary>
    Weapon = 1,
    /// <summary>
    /// 打造头盔
    /// </summary>
    Helmet = 2,
    /// <summary>
    /// 打造衣服
    /// </summary>
    Clothes = 3,
    /// <summary>
    /// 打造鞋
    /// </summary>
    Shoes = 4,
    /// <summary>
    /// 附魔
    /// </summary>
    Enchant = 5,
    /// <summary>
    /// 制药
    /// </summary>
    Medicine = 6,
    /// <summary>
    /// 采矿
    /// </summary>
    Miming = 7,
    /// <summary>
    /// 伐木
    /// </summary>
    Felling = 8,
    /// <summary>
    /// 采集
    /// </summary>
    Collect = 9,
    Max = 10,
  }

  public enum LifeSkillBuildResult {
    /// <summary>
    /// 完全失败
    /// </summary>
    Failed = 0,
    /// <summary>
    /// 只有成功
    /// </summary>
    Success = 1,
    /// <summary>
    /// 失败但有额外奖励
    /// </summary>
    FailedButExtraReward = 2,
    /// <summary>
    /// 成功且有额外奖励
    /// </summary>
    SuccessAndExtraReward = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// CmdLifeSkill_PullLifeSkillReq = 3200;  // 拉取生活技能数据
  /// </summary>
  public sealed class CmdLifeSkillPullLifeSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillPullLifeSkillReq> _parser = new pb::MessageParser<CmdLifeSkillPullLifeSkillReq>(() => new CmdLifeSkillPullLifeSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillPullLifeSkillReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class LifeSkillData : pb::IMessage {
    private static readonly pb::MessageParser<LifeSkillData> _parser = new pb::MessageParser<LifeSkillData>(() => new LifeSkillData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LifeSkillData> Parser { get { return _parser; } }

    /// <summary>Field number for the "openedFormula" field.</summary>
    public const int OpenedFormulaFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_openedFormula_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> openedFormula_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已开放的配方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OpenedFormula {
      get { return openedFormula_; }
    }

    /// <summary>Field number for the "perSkillLevel" field.</summary>
    public const int PerSkillLevelFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_perSkillLevel_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> perSkillLevel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每个技能的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PerSkillLevel {
      get { return perSkillLevel_; }
    }

    /// <summary>Field number for the "perSkillExp" field.</summary>
    public const int PerSkillExpFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_perSkillExp_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> perSkillExp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每个技能的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PerSkillExp {
      get { return perSkillExp_; }
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 4;
    private uint segment_;
    /// <summary>
    /// 段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Segment {
      get { return segment_; }
      set {
        segment_ = value;
      }
    }

    /// <summary>Field number for the "canLearnNum" field.</summary>
    public const int CanLearnNumFieldNumber = 5;
    private uint canLearnNum_;
    /// <summary>
    ///手动解锁可学习的个数(不包括除初始的可学习的数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CanLearnNum {
      get { return canLearnNum_; }
      set {
        canLearnNum_ = value;
      }
    }

    /// <summary>Field number for the "perSkillLucky" field.</summary>
    public const int PerSkillLuckyFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_perSkillLucky_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> perSkillLucky_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每个技能的幸运值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PerSkillLucky {
      get { return perSkillLucky_; }
    }

    /// <summary>Field number for the "orangeCount" field.</summary>
    public const int OrangeCountFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_orangeCount_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> orangeCount_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每个技能的未出橙装的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OrangeCount {
      get { return orangeCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      openedFormula_.WriteTo(output, _repeated_openedFormula_codec);
      perSkillLevel_.WriteTo(output, _repeated_perSkillLevel_codec);
      perSkillExp_.WriteTo(output, _repeated_perSkillExp_codec);
      if (Segment != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Segment);
      }
      if (CanLearnNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CanLearnNum);
      }
      perSkillLucky_.WriteTo(output, _repeated_perSkillLucky_codec);
      orangeCount_.WriteTo(output, _repeated_orangeCount_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += openedFormula_.CalculateSize(_repeated_openedFormula_codec);
      size += perSkillLevel_.CalculateSize(_repeated_perSkillLevel_codec);
      size += perSkillExp_.CalculateSize(_repeated_perSkillExp_codec);
      if (Segment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Segment);
      }
      if (CanLearnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CanLearnNum);
      }
      size += perSkillLucky_.CalculateSize(_repeated_perSkillLucky_codec);
      size += orangeCount_.CalculateSize(_repeated_orangeCount_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            openedFormula_.AddEntriesFrom(input, _repeated_openedFormula_codec);
            break;
          }
          case 18:
          case 16: {
            perSkillLevel_.AddEntriesFrom(input, _repeated_perSkillLevel_codec);
            break;
          }
          case 26:
          case 24: {
            perSkillExp_.AddEntriesFrom(input, _repeated_perSkillExp_codec);
            break;
          }
          case 32: {
            Segment = input.ReadUInt32();
            break;
          }
          case 40: {
            CanLearnNum = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            perSkillLucky_.AddEntriesFrom(input, _repeated_perSkillLucky_codec);
            break;
          }
          case 58:
          case 56: {
            orangeCount_.AddEntriesFrom(input, _repeated_orangeCount_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_PullLifeSkillRes = 3201;
  /// </summary>
  public sealed class CmdLifeSkillPullLifeSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillPullLifeSkillRes> _parser = new pb::MessageParser<CmdLifeSkillPullLifeSkillRes>(() => new CmdLifeSkillPullLifeSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillPullLifeSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "lifeSkillData" field.</summary>
    public const int LifeSkillDataFieldNumber = 1;
    private global::Packet.LifeSkillData lifeSkillData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.LifeSkillData LifeSkillData {
      get { return lifeSkillData_; }
      set {
        lifeSkillData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lifeSkillData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LifeSkillData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lifeSkillData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifeSkillData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (lifeSkillData_ == null) {
              lifeSkillData_ = new global::Packet.LifeSkillData();
            }
            input.ReadMessage(lifeSkillData_);
            break;
          }
        }
      }
    }

  }

  public sealed class ItemCountData : pb::IMessage {
    private static readonly pb::MessageParser<ItemCountData> _parser = new pb::MessageParser<ItemCountData>(() => new ItemCountData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCountData> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private uint itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_FormulaBuildReq = 3202;  // 使用生产技能打造打造
  /// </summary>
  public sealed class CmdLifeSkillFormulaBuildReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillFormulaBuildReq> _parser = new pb::MessageParser<CmdLifeSkillFormulaBuildReq>(() => new CmdLifeSkillFormulaBuildReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillFormulaBuildReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "formulaID" field.</summary>
    public const int FormulaIDFieldNumber = 1;
    private uint formulaID_;
    /// <summary>
    /// 要打造的配送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaID {
      get { return formulaID_; }
      set {
        formulaID_ = value;
      }
    }

    /// <summary>Field number for the "useIntensifyBuild" field.</summary>
    public const int UseIntensifyBuildFieldNumber = 2;
    private bool useIntensifyBuild_;
    /// <summary>
    /// 是否强化打造
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseIntensifyBuild {
      get { return useIntensifyBuild_; }
      set {
        useIntensifyBuild_ = value;
      }
    }

    /// <summary>Field number for the "essenceUUID" field.</summary>
    public const int EssenceUUIDFieldNumber = 3;
    private ulong essenceUUID_;
    /// <summary>
    /// 淬炼精化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EssenceUUID {
      get { return essenceUUID_; }
      set {
        essenceUUID_ = value;
      }
    }

    /// <summary>Field number for the "inputItemID" field.</summary>
    public const int InputItemIDFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_inputItemID_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> inputItemID_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 特殊材料列表(给不固定配方用的), ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InputItemID {
      get { return inputItemID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FormulaID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FormulaID);
      }
      if (UseIntensifyBuild != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseIntensifyBuild);
      }
      if (EssenceUUID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EssenceUUID);
      }
      inputItemID_.WriteTo(output, _repeated_inputItemID_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FormulaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaID);
      }
      if (UseIntensifyBuild != false) {
        size += 1 + 1;
      }
      if (EssenceUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EssenceUUID);
      }
      size += inputItemID_.CalculateSize(_repeated_inputItemID_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FormulaID = input.ReadUInt32();
            break;
          }
          case 16: {
            UseIntensifyBuild = input.ReadBool();
            break;
          }
          case 24: {
            EssenceUUID = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            inputItemID_.AddEntriesFrom(input, _repeated_inputItemID_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_FormulaBuildRes = 3203;  //
  /// </summary>
  public sealed class CmdLifeSkillFormulaBuildRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillFormulaBuildRes> _parser = new pb::MessageParser<CmdLifeSkillFormulaBuildRes>(() => new CmdLifeSkillFormulaBuildRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillFormulaBuildRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    /// <summary>
    /// nothing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "itemInfoId" field.</summary>
    public const int ItemInfoIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemInfoId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemInfoId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///打造获得道具 成功或失败获得道具是这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemInfoId {
      get { return itemInfoId_; }
    }

    /// <summary>Field number for the "extraItemInfoId" field.</summary>
    public const int ExtraItemInfoIdFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_extraItemInfoId_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> extraItemInfoId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///成功获得的额外奖励是这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ExtraItemInfoId {
      get { return extraItemInfoId_; }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 4;
    private uint skillId_;
    /// <summary>
    ///使用的哪个技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "equipuuid" field.</summary>
    public const int EquipuuidFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_equipuuid_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> equipuuid_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///用多个吧 装备的时候是一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Equipuuid {
      get { return equipuuid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      itemInfoId_.WriteTo(output, _repeated_itemInfoId_codec);
      extraItemInfoId_.WriteTo(output, _repeated_extraItemInfoId_codec);
      if (SkillId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillId);
      }
      equipuuid_.WriteTo(output, _repeated_equipuuid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      size += itemInfoId_.CalculateSize(_repeated_itemInfoId_codec);
      size += extraItemInfoId_.CalculateSize(_repeated_extraItemInfoId_codec);
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      size += equipuuid_.CalculateSize(_repeated_equipuuid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemInfoId_.AddEntriesFrom(input, _repeated_itemInfoId_codec);
            break;
          }
          case 26:
          case 24: {
            extraItemInfoId_.AddEntriesFrom(input, _repeated_extraItemInfoId_codec);
            break;
          }
          case 32: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            equipuuid_.AddEntriesFrom(input, _repeated_equipuuid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_AddSkillExpNtf = 3205;  // 增加技能熟练度
  /// </summary>
  public sealed class CmdLifeSkillAddSkillExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillAddSkillExpNtf> _parser = new pb::MessageParser<CmdLifeSkillAddSkillExpNtf>(() => new CmdLifeSkillAddSkillExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillAddSkillExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillIndex" field.</summary>
    public const int SkillIndexFieldNumber = 1;
    private uint skillIndex_;
    /// <summary>
    /// 要增加经验的skill index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillIndex {
      get { return skillIndex_; }
      set {
        skillIndex_ = value;
      }
    }

    /// <summary>Field number for the "currentExp" field.</summary>
    public const int CurrentExpFieldNumber = 3;
    private uint currentExp_;
    /// <summary>
    /// 增加后的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private uint reason_;
    /// <summary>
    ///1, 使用道具 2，打造增加的·
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillIndex);
      }
      if (CurrentExp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurrentExp);
      }
      if (Reason != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillIndex);
      }
      if (CurrentExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentExp);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            CurrentExp = input.ReadUInt32();
            break;
          }
          case 32: {
            Reason = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_SegmentLevelUpReq = 3206; // 段位升级
  /// </summary>
  public sealed class CmdLifeSkillSegmentLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSegmentLevelUpReq> _parser = new pb::MessageParser<CmdLifeSkillSegmentLevelUpReq>(() => new CmdLifeSkillSegmentLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSegmentLevelUpReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_SegmentLevelUpRes = 3207;
  /// </summary>
  public sealed class CmdLifeSkillSegmentLevelUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSegmentLevelUpRes> _parser = new pb::MessageParser<CmdLifeSkillSegmentLevelUpRes>(() => new CmdLifeSkillSegmentLevelUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSegmentLevelUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentSegment" field.</summary>
    public const int CurrentSegmentFieldNumber = 1;
    private uint currentSegment_;
    /// <summary>
    /// 当前段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentSegment {
      get { return currentSegment_; }
      set {
        currentSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentSegment != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrentSegment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentSegment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentSegment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentSegment = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_SkillLevelUpReq = 3208;    // 技能等级提升
  /// </summary>
  public sealed class CmdLifeSkillSkillLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSkillLevelUpReq> _parser = new pb::MessageParser<CmdLifeSkillSkillLevelUpReq>(() => new CmdLifeSkillSkillLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSkillLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillIndex" field.</summary>
    public const int SkillIndexFieldNumber = 1;
    private uint skillIndex_;
    /// <summary>
    /// 要升级的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillIndex {
      get { return skillIndex_; }
      set {
        skillIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_SkillLevelUpRes = 3209;
  /// </summary>
  public sealed class CmdLifeSkillSkillLevelUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSkillLevelUpRes> _parser = new pb::MessageParser<CmdLifeSkillSkillLevelUpRes>(() => new CmdLifeSkillSkillLevelUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSkillLevelUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillIndex" field.</summary>
    public const int SkillIndexFieldNumber = 1;
    private uint skillIndex_;
    /// <summary>
    /// 要升级的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillIndex {
      get { return skillIndex_; }
      set {
        skillIndex_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    /// 升级后的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "nowExp" field.</summary>
    public const int NowExpFieldNumber = 3;
    private uint nowExp_;
    /// <summary>
    ///升级后剩余经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NowExp {
      get { return nowExp_; }
      set {
        nowExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillIndex);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (NowExp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NowExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillIndex);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (NowExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            NowExp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdLifeSkill_LearnFormulaBookNtf = 3204; // 学习配方(仅限使用道具获得配方)
  /// </summary>
  public sealed class CmdLifeSkillLearnFormulaBookNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillLearnFormulaBookNtf> _parser = new pb::MessageParser<CmdLifeSkillLearnFormulaBookNtf>(() => new CmdLifeSkillLearnFormulaBookNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillLearnFormulaBookNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "formulaID" field.</summary>
    public const int FormulaIDFieldNumber = 1;
    private uint formulaID_;
    /// <summary>
    /// 学到的配方ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FormulaID {
      get { return formulaID_; }
      set {
        formulaID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FormulaID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FormulaID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FormulaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FormulaID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FormulaID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillSkillGetNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSkillGetNtf> _parser = new pb::MessageParser<CmdLifeSkillSkillGetNtf>(() => new CmdLifeSkillSkillGetNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSkillGetNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 1;
    private uint skillid_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skillid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillFunctionOpenReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillFunctionOpenReq> _parser = new pb::MessageParser<CmdLifeSkillFunctionOpenReq>(() => new CmdLifeSkillFunctionOpenReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillFunctionOpenReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdLifeSkillFunctionOpenRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillFunctionOpenRes> _parser = new pb::MessageParser<CmdLifeSkillFunctionOpenRes>(() => new CmdLifeSkillFunctionOpenRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillFunctionOpenRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdLifeSkillLearnSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillLearnSkillReq> _parser = new pb::MessageParser<CmdLifeSkillLearnSkillReq>(() => new CmdLifeSkillLearnSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillLearnSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillCanLearnNumAddReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillCanLearnNumAddReq> _parser = new pb::MessageParser<CmdLifeSkillCanLearnNumAddReq>(() => new CmdLifeSkillCanLearnNumAddReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillCanLearnNumAddReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdLifeSkillCanLearnNumAddRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillCanLearnNumAddRes> _parser = new pb::MessageParser<CmdLifeSkillCanLearnNumAddRes>(() => new CmdLifeSkillCanLearnNumAddRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillCanLearnNumAddRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "learnNum" field.</summary>
    public const int LearnNumFieldNumber = 1;
    private uint learnNum_;
    /// <summary>
    ///当前手动增加的个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LearnNum {
      get { return learnNum_; }
      set {
        learnNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LearnNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LearnNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LearnNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LearnNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LearnNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillSkillForgetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSkillForgetReq> _parser = new pb::MessageParser<CmdLifeSkillSkillForgetReq>(() => new CmdLifeSkillSkillForgetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSkillForgetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillSkillForgetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillSkillForgetRes> _parser = new pb::MessageParser<CmdLifeSkillSkillForgetRes>(() => new CmdLifeSkillSkillForgetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillSkillForgetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLifeSkillAddLuckyValueNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdLifeSkillAddLuckyValueNtf> _parser = new pb::MessageParser<CmdLifeSkillAddLuckyValueNtf>(() => new CmdLifeSkillAddLuckyValueNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLifeSkillAddLuckyValueNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "luckyValue" field.</summary>
    public const int LuckyValueFieldNumber = 2;
    private uint luckyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LuckyValue {
      get { return luckyValue_; }
      set {
        luckyValue_ = value;
      }
    }

    /// <summary>Field number for the "orangeCount" field.</summary>
    public const int OrangeCountFieldNumber = 3;
    private uint orangeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrangeCount {
      get { return orangeCount_; }
      set {
        orangeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (LuckyValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LuckyValue);
      }
      if (OrangeCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OrangeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (LuckyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckyValue);
      }
      if (OrangeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrangeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            LuckyValue = input.ReadUInt32();
            break;
          }
          case 24: {
            OrangeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
