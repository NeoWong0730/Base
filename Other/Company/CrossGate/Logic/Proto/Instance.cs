// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///2700+
  /// </summary>
  public enum CmdInstance {
    None = 0,
    /// <summary>
    ///请求副本玩法数据
    /// </summary>
    DataReq = 2801,
    /// <summary>
    /// </summary>
    DataRes = 2802,
    /// <summary>
    ///登录下发所有副本数据
    /// </summary>
    DataNtf = 2821,
    /// <summary>
    ///新解锁副本相关数据
    /// </summary>
    DataUpdateNtf = 2822,
    /// <summary>
    ///副本次数限制更新
    /// </summary>
    ResLimitNtf = 2803,
    /// <summary>
    ///请求进入副本
    /// </summary>
    EnterReq = 2804,
    /// <summary>
    ///通知进入副本
    /// </summary>
    EnterNtf = 2805,
    /// <summary>
    /// </summary>
    EndNtf = 2806,
    /// <summary>
    ///请求退出副本
    /// </summary>
    ExitReq = 2807,
    /// <summary>
    /// </summary>
    ExitNtf = 2808,
    /// <summary>
    ///通关关卡
    /// </summary>
    PassStageNtf = 2813,
    /// <summary>
    ///本关已通关，请求切换下一关
    /// </summary>
    SwitchNextStageReq = 2824,
    /// <summary>
    ///切换到下一关通知
    /// </summary>
    SwitchStageNtf = 2814,
    /// <summary>
    ///副本通用数据更新((废弃)
    /// </summary>
    InsEntryUpdateNtf = 2815,
    /// <summary>
    ///选择要领取奖励的副本, 每个PlayType都有可以选择一个
    /// </summary>
    SelectInstanceIdreq = 2816,
    SelectInstanceIdres = 2817,
    /// <summary>
    ///通知选择的奖励被锁定(暂时只有多人副本有此通知)
    /// </summary>
    PlayTypeLockRewordNtf = 2818,
    /// <summary>
    ///查询队伍的关卡进度
    /// </summary>
    QueryTeamInstanceProgressReq = 2819,
    /// <summary>
    /// </summary>
    QueryTeamInstanceProgressRes = 2820,
    /// <summary>
    ///登录，重连通知是否在副本中
    /// </summary>
    StateNtf = 2823,
  }

  public enum InstanceActiveReason {
    None = 0,
    /// <summary>
    ///关卡通关奖励
    /// </summary>
    StagePassReward = 2800,
    /// <summary>
    ///百人道场每日奖励
    /// </summary>
    TowerDailyReward = 2801,
    /// <summary>
    ///人物传记跳关奖励
    /// </summary>
    MpjumpReward = 2803,
    /// <summary>
    ///人物传记(新)副本首通奖励
    /// </summary>
    BioInsFirstPassReward = 2804,
  }

  public enum ErrorInstance {
    None = 0,
    /// <summary>
    ///不支持的副本类型
    /// </summary>
    UnSupportInsType = 2801,
    /// <summary>
    ///副本表格未找到
    /// </summary>
    InstanceCsvNotFound = 2802,
    /// <summary>
    ///副本id已经存在
    /// </summary>
    AddIdHasExist = 2803,
    /// <summary>
    ///副本关卡表格未找到
    /// </summary>
    StageCsvNotFound = 2804,
    /// <summary>
    ///等级不够
    /// </summary>
    RoleLvNotEnough = 2805,
    /// <summary>
    ///进入门票检查失败
    /// </summary>
    TicketCheckFailed = 2806,
    /// <summary>
    ///副本对象为空
    /// </summary>
    InstanceIsNull = 2807,
    /// <summary>
    ///玩家不在副本中
    /// </summary>
    RoleNotInInstance = 2808,
    /// <summary>
    ///玩家正在副本中
    /// </summary>
    RoleIsInInstance = 2809,
    /// <summary>
    ///日常活动表未找到
    /// </summary>
    DailyActivityCsvNotFound = 2810,
    /// <summary>
    ///不支持该副本内传送
    /// </summary>
    UnsupportTeleport = 2811,
    /// <summary>
    ///当前关卡未通关
    /// </summary>
    CurStageNotPassed = 2812,
    /// <summary>
    ///通常太慢导致服务器中的voteData已经失效
    /// </summary>
    InvalidVoteId = 2813,
    /// <summary>
    ///必须在一个队伍中
    /// </summary>
    MustInAteam = 2814,
    /// <summary>
    ///副本未解锁
    /// </summary>
    InstanceLocked = 2815,
    /// <summary>
    ///关卡未解锁
    /// </summary>
    StageLocked = 2816,
    /// <summary>
    ///次数不足，不能进入副本
    /// </summary>
    TimesNotEnough = 2817,
    /// <summary>
    ///错误的PlayType
    /// </summary>
    WrongPlayType = 2818,
    /// <summary>
    ///非队长不能进副本
    /// </summary>
    NotLeaderCannotEnter = 2819,
    /// <summary>
    ///队伍人数不足不能进副本
    /// </summary>
    CannotEnterMemNotEnough = 2820,
    /// <summary>
    ///有队友暂离不能进入
    /// </summary>
    CannotEnterMemTmpLeave = 2821,
    /// <summary>
    ///选择的奖励已经被锁定, 不能重新选择
    /// </summary>
    RewordHasBeenLocked = 2822,
    /// <summary>
    ///组队副本不能单人进入
    /// </summary>
    CannotEnterSingle = 2823,
    /// <summary>
    ///单人副本不能组队进入
    /// </summary>
    CannotEnterTeam = 2824,
    /// <summary>
    ///开始投票的人必须是队长
    /// </summary>
    StartVoteMustBeCapture = 2825,
    /// <summary>
    ///有玩家暂离, 不能进入投票阶段
    /// </summary>
    RoleTmpLeave = 2826,
    /// <summary>
    ///暂时不能离队
    /// </summary>
    CannotLeaveTeam = 2827,
    /// <summary>
    ///正在战斗，无法退出副本
    /// </summary>
    CannotQuitInBattle = 2828,
    /// <summary>
    ///非队长，不能操作
    /// </summary>
    NotLeaderCannotOper = 2829,
    /// <summary>
    ///没有下一关
    /// </summary>
    NoMoreNextStage = 2830,
    /// <summary>
    ///副本刷新前一分钟不允许进入
    /// </summary>
    RefreshingCannotEnter = 2831,
  }

  /// <summary>
  ///副本类型
  /// </summary>
  public enum InsType {
    None = 0,
    /// <summary>
    /// 单人日常本
    /// </summary>
    Daily = 1,
    /// <summary>
    /// 多人副本
    /// </summary>
    Multi = 2,
    /// <summary>
    ///恐怖旅团
    /// </summary>
    Terror = 3,
    /// <summary>
    ///女神试炼
    /// </summary>
    GoddessTrial = 4,
    /// <summary>
    ///百人道场
    /// </summary>
    Tower = 5,
    /// <summary>
    ///人物传记
    /// </summary>
    Biography = 6,
    /// <summary>
    ///地下竞技场
    /// </summary>
    UnderGround = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  ///副本玩法通用数据
  /// </summary>
  public sealed class InstanceCommonData : pb::IMessage {
    private static readonly pb::MessageParser<InstanceCommonData> _parser = new pb::MessageParser<InstanceCommonData>(() => new InstanceCommonData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceCommonData> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 6;
    private uint insType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "resLimit" field.</summary>
    public const int ResLimitFieldNumber = 2;
    private global::Packet.ResLimit resLimit_;
    /// <summary>
    ///进入次数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit ResLimit {
      get { return resLimit_; }
      set {
        resLimit_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.InsEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.InsEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.InsEntry> entries_ = new pbc::RepeatedField<global::Packet.InsEntry>();
    /// <summary>
    ///副本通用数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.InsEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "selectedInstanceId" field.</summary>
    public const int SelectedInstanceIdFieldNumber = 4;
    private uint selectedInstanceId_;
    /// <summary>
    /// 选择的奖励(instanceID), 主要给多人副本使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectedInstanceId {
      get { return selectedInstanceId_; }
      set {
        selectedInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "lockedSelectedInstanceID" field.</summary>
    public const int LockedSelectedInstanceIDFieldNumber = 5;
    private bool lockedSelectedInstanceID_;
    /// <summary>
    /// 是否锁定了今天的奖励 单人副本该参数无效 多人副本在每天第一次进入selectedInstanceID的副本后锁定, 每天重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockedSelectedInstanceID {
      get { return lockedSelectedInstanceID_; }
      set {
        lockedSelectedInstanceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (resLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResLimit);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (SelectedInstanceId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SelectedInstanceId);
      }
      if (LockedSelectedInstanceID != false) {
        output.WriteRawTag(40);
        output.WriteBool(LockedSelectedInstanceID);
      }
      if (InsType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(InsType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (resLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResLimit);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (SelectedInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectedInstanceId);
      }
      if (LockedSelectedInstanceID != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (resLimit_ == null) {
              resLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(resLimit_);
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 32: {
            SelectedInstanceId = input.ReadUInt32();
            break;
          }
          case 40: {
            LockedSelectedInstanceID = input.ReadBool();
            break;
          }
          case 48: {
            InsType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单副本通用数据
  /// </summary>
  public sealed class InsEntry : pb::IMessage {
    private static readonly pb::MessageParser<InsEntry> _parser = new pb::MessageParser<InsEntry>(() => new InsEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InsEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    /// <summary>
    ///confId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    /// <summary>
    ///玩法类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "unlock" field.</summary>
    public const int UnlockFieldNumber = 3;
    private bool unlock_;
    /// <summary>
    ///是否解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    /// <summary>Field number for the "passRecord" field.</summary>
    public const int PassRecordFieldNumber = 4;
    private bool passRecord_;
    /// <summary>
    ///历史通关过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PassRecord {
      get { return passRecord_; }
      set {
        passRecord_ = value;
      }
    }

    /// <summary>Field number for the "curPassedStageId" field.</summary>
    public const int CurPassedStageIdFieldNumber = 5;
    private uint curPassedStageId_;
    /// <summary>
    ///本次已通关的最高关卡id(通关后重置)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurPassedStageId {
      get { return curPassedStageId_; }
      set {
        curPassedStageId_ = value;
      }
    }

    /// <summary>Field number for the "perMaxStageId" field.</summary>
    public const int PerMaxStageIdFieldNumber = 6;
    private uint perMaxStageId_;
    /// <summary>
    /// 重置周期内最高关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PerMaxStageId {
      get { return perMaxStageId_; }
      set {
        perMaxStageId_ = value;
      }
    }

    /// <summary>Field number for the "historyStageId" field.</summary>
    public const int HistoryStageIdFieldNumber = 7;
    private uint historyStageId_;
    /// <summary>
    ///历史最高通关关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HistoryStageId {
      get { return historyStageId_; }
      set {
        historyStageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
      if (Unlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Unlock);
      }
      if (PassRecord != false) {
        output.WriteRawTag(32);
        output.WriteBool(PassRecord);
      }
      if (CurPassedStageId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CurPassedStageId);
      }
      if (PerMaxStageId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PerMaxStageId);
      }
      if (HistoryStageId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HistoryStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (Unlock != false) {
        size += 1 + 1;
      }
      if (PassRecord != false) {
        size += 1 + 1;
      }
      if (CurPassedStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurPassedStageId);
      }
      if (PerMaxStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PerMaxStageId);
      }
      if (HistoryStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HistoryStageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 24: {
            Unlock = input.ReadBool();
            break;
          }
          case 32: {
            PassRecord = input.ReadBool();
            break;
          }
          case 40: {
            CurPassedStageId = input.ReadUInt32();
            break;
          }
          case 48: {
            PerMaxStageId = input.ReadUInt32();
            break;
          }
          case 56: {
            HistoryStageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstancePlayTypeLockRewordNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstancePlayTypeLockRewordNtf> _parser = new pb::MessageParser<CmdInstancePlayTypeLockRewordNtf>(() => new CmdInstancePlayTypeLockRewordNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstancePlayTypeLockRewordNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 2;
    private bool locked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (Locked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Locked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 16: {
            Locked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class MultiInsData : pb::IMessage {
    private static readonly pb::MessageParser<MultiInsData> _parser = new pb::MessageParser<MultiInsData>(() => new MultiInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiInsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///副本某玩法数据
  /// </summary>
  public sealed class InstancePlayTypeData : pb::IMessage {
    private static readonly pb::MessageParser<InstancePlayTypeData> _parser = new pb::MessageParser<InstancePlayTypeData>(() => new InstancePlayTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstancePlayTypeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 1;
    private uint insType_;
    /// <summary>
    ///副本类型 enum InsType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 4;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "dailyIns" field.</summary>
    public const int DailyInsFieldNumber = 2;
    private global::Packet.DailyInsData dailyIns_;
    /// <summary>
    ///↓ instanceType ↓
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailyInsData DailyIns {
      get { return dailyIns_; }
      set {
        dailyIns_ = value;
      }
    }

    /// <summary>Field number for the "multiInsData" field.</summary>
    public const int MultiInsDataFieldNumber = 3;
    private global::Packet.MultiInsData multiInsData_;
    /// <summary>
    ///多人副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MultiInsData MultiInsData {
      get { return multiInsData_; }
      set {
        multiInsData_ = value;
      }
    }

    /// <summary>Field number for the "terrorInsData" field.</summary>
    public const int TerrorInsDataFieldNumber = 5;
    private global::Packet.TerrorInsData terrorInsData_;
    /// <summary>
    ///恐怖旅团
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TerrorInsData TerrorInsData {
      get { return terrorInsData_; }
      set {
        terrorInsData_ = value;
      }
    }

    /// <summary>Field number for the "goddessTrialData" field.</summary>
    public const int GoddessTrialDataFieldNumber = 6;
    private global::Packet.GoddessTrialData goddessTrialData_;
    /// <summary>
    ///女神试炼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GoddessTrialData GoddessTrialData {
      get { return goddessTrialData_; }
      set {
        goddessTrialData_ = value;
      }
    }

    /// <summary>Field number for the "towerData" field.</summary>
    public const int TowerDataFieldNumber = 7;
    private global::Packet.TowerInsData towerData_;
    /// <summary>
    ///百人道场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TowerInsData TowerData {
      get { return towerData_; }
      set {
        towerData_ = value;
      }
    }

    /// <summary>Field number for the "bioData" field.</summary>
    public const int BioDataFieldNumber = 8;
    private global::Packet.BioInsData bioData_;
    /// <summary>
    ///人物传记(新)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BioInsData BioData {
      get { return bioData_; }
      set {
        bioData_ = value;
      }
    }

    /// <summary>Field number for the "underGroundData" field.</summary>
    public const int UnderGroundDataFieldNumber = 9;
    private global::Packet.UnderGroundInsData underGroundData_;
    /// <summary>
    ///地下竞技场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.UnderGroundInsData UnderGroundData {
      get { return underGroundData_; }
      set {
        underGroundData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsType);
      }
      if (dailyIns_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DailyIns);
      }
      if (multiInsData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MultiInsData);
      }
      if (PlayType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayType);
      }
      if (terrorInsData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TerrorInsData);
      }
      if (goddessTrialData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GoddessTrialData);
      }
      if (towerData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TowerData);
      }
      if (bioData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BioData);
      }
      if (underGroundData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UnderGroundData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (dailyIns_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyIns);
      }
      if (multiInsData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiInsData);
      }
      if (terrorInsData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TerrorInsData);
      }
      if (goddessTrialData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoddessTrialData);
      }
      if (towerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TowerData);
      }
      if (bioData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BioData);
      }
      if (underGroundData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnderGroundData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dailyIns_ == null) {
              dailyIns_ = new global::Packet.DailyInsData();
            }
            input.ReadMessage(dailyIns_);
            break;
          }
          case 26: {
            if (multiInsData_ == null) {
              multiInsData_ = new global::Packet.MultiInsData();
            }
            input.ReadMessage(multiInsData_);
            break;
          }
          case 32: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 42: {
            if (terrorInsData_ == null) {
              terrorInsData_ = new global::Packet.TerrorInsData();
            }
            input.ReadMessage(terrorInsData_);
            break;
          }
          case 50: {
            if (goddessTrialData_ == null) {
              goddessTrialData_ = new global::Packet.GoddessTrialData();
            }
            input.ReadMessage(goddessTrialData_);
            break;
          }
          case 58: {
            if (towerData_ == null) {
              towerData_ = new global::Packet.TowerInsData();
            }
            input.ReadMessage(towerData_);
            break;
          }
          case 66: {
            if (bioData_ == null) {
              bioData_ = new global::Packet.BioInsData();
            }
            input.ReadMessage(bioData_);
            break;
          }
          case 74: {
            if (underGroundData_ == null) {
              underGroundData_ = new global::Packet.UnderGroundInsData();
            }
            input.ReadMessage(underGroundData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求副本玩法数据
  /// </summary>
  public sealed class CmdInstanceDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceDataReq> _parser = new pb::MessageParser<CmdInstanceDataReq>(() => new CmdInstanceDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 1;
    private uint insType_;
    /// <summary>
    ///副本类型 enum InsType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsType);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsType = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstanceDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceDataRes> _parser = new pb::MessageParser<CmdInstanceDataRes>(() => new CmdInstanceDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 1;
    private uint insType_;
    /// <summary>
    ///副本类型 enum InsType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "commonData" field.</summary>
    public const int CommonDataFieldNumber = 3;
    private global::Packet.InstanceCommonData commonData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.InstanceCommonData CommonData {
      get { return commonData_; }
      set {
        commonData_ = value;
      }
    }

    /// <summary>Field number for the "playTypeData" field.</summary>
    public const int PlayTypeDataFieldNumber = 4;
    private global::Packet.InstancePlayTypeData playTypeData_;
    /// <summary>
    ///具体副本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.InstancePlayTypeData PlayTypeData {
      get { return playTypeData_; }
      set {
        playTypeData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsType);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
      if (commonData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CommonData);
      }
      if (playTypeData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayTypeData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (commonData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonData);
      }
      if (playTypeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayTypeData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsType = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (commonData_ == null) {
              commonData_ = new global::Packet.InstanceCommonData();
            }
            input.ReadMessage(commonData_);
            break;
          }
          case 34: {
            if (playTypeData_ == null) {
              playTypeData_ = new global::Packet.InstancePlayTypeData();
            }
            input.ReadMessage(playTypeData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstanceDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceDataNtf> _parser = new pb::MessageParser<CmdInstanceDataNtf>(() => new CmdInstanceDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "commonDatas" field.</summary>
    public const int CommonDatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.InstanceCommonData> _repeated_commonDatas_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.InstanceCommonData.Parser);
    private readonly pbc::RepeatedField<global::Packet.InstanceCommonData> commonDatas_ = new pbc::RepeatedField<global::Packet.InstanceCommonData>();
    /// <summary>
    ///所有副本玩法通用数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.InstanceCommonData> CommonDatas {
      get { return commonDatas_; }
    }

    /// <summary>Field number for the "playTypeData" field.</summary>
    public const int PlayTypeDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.InstancePlayTypeData> _repeated_playTypeData_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.InstancePlayTypeData.Parser);
    private readonly pbc::RepeatedField<global::Packet.InstancePlayTypeData> playTypeData_ = new pbc::RepeatedField<global::Packet.InstancePlayTypeData>();
    /// <summary>
    ///所有副本玩法的具体数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.InstancePlayTypeData> PlayTypeData {
      get { return playTypeData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commonDatas_.WriteTo(output, _repeated_commonDatas_codec);
      playTypeData_.WriteTo(output, _repeated_playTypeData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commonDatas_.CalculateSize(_repeated_commonDatas_codec);
      size += playTypeData_.CalculateSize(_repeated_playTypeData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            commonDatas_.AddEntriesFrom(input, _repeated_commonDatas_codec);
            break;
          }
          case 18: {
            playTypeData_.AddEntriesFrom(input, _repeated_playTypeData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstanceDataUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceDataUpdateNtf> _parser = new pb::MessageParser<CmdInstanceDataUpdateNtf>(() => new CmdInstanceDataUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceDataUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "commonData" field.</summary>
    public const int CommonDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.InstanceCommonData> _repeated_commonData_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.InstanceCommonData.Parser);
    private readonly pbc::RepeatedField<global::Packet.InstanceCommonData> commonData_ = new pbc::RepeatedField<global::Packet.InstanceCommonData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.InstanceCommonData> CommonData {
      get { return commonData_; }
    }

    /// <summary>Field number for the "playTypeData" field.</summary>
    public const int PlayTypeDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.InstancePlayTypeData> _repeated_playTypeData_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.InstancePlayTypeData.Parser);
    private readonly pbc::RepeatedField<global::Packet.InstancePlayTypeData> playTypeData_ = new pbc::RepeatedField<global::Packet.InstancePlayTypeData>();
    /// <summary>
    ///具体副本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.InstancePlayTypeData> PlayTypeData {
      get { return playTypeData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commonData_.WriteTo(output, _repeated_commonData_codec);
      playTypeData_.WriteTo(output, _repeated_playTypeData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commonData_.CalculateSize(_repeated_commonData_codec);
      size += playTypeData_.CalculateSize(_repeated_playTypeData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            commonData_.AddEntriesFrom(input, _repeated_commonData_codec);
            break;
          }
          case 34: {
            playTypeData_.AddEntriesFrom(input, _repeated_playTypeData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本次数限制更新
  /// </summary>
  public sealed class CmdInstanceResLimitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceResLimitNtf> _parser = new pb::MessageParser<CmdInstanceResLimitNtf>(() => new CmdInstanceResLimitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceResLimitNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 1;
    private uint insType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "resLimit" field.</summary>
    public const int ResLimitFieldNumber = 3;
    private global::Packet.ResLimit resLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit ResLimit {
      get { return resLimit_; }
      set {
        resLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsType);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
      if (resLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ResLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (resLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsType = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (resLimit_ == null) {
              resLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(resLimit_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入副本请求
  /// </summary>
  public sealed class CmdInstanceEnterReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceEnterReq> _parser = new pb::MessageParser<CmdInstanceEnterReq>(() => new CmdInstanceEnterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceEnterReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入副本通知
  /// </summary>
  public sealed class CmdInstanceEnterNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceEnterNtf> _parser = new pb::MessageParser<CmdInstanceEnterNtf>(() => new CmdInstanceEnterNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceEnterNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本结束通知
  /// </summary>
  public sealed class CmdInstanceEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceEndNtf> _parser = new pb::MessageParser<CmdInstanceEndNtf>(() => new CmdInstanceEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "passed" field.</summary>
    public const int PassedFieldNumber = 1;
    private bool passed_;
    /// <summary>
    ///是否通关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Passed {
      get { return passed_; }
      set {
        passed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Passed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passed != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Passed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出副本请求
  /// </summary>
  public sealed class CmdInstanceExitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceExitReq> _parser = new pb::MessageParser<CmdInstanceExitReq>(() => new CmdInstanceExitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceExitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdInstanceExitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceExitNtf> _parser = new pb::MessageParser<CmdInstanceExitNtf>(() => new CmdInstanceExitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceExitNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class MultiInstanceVoteData : pb::IMessage {
    private static readonly pb::MessageParser<MultiInstanceVoteData> _parser = new pb::MessageParser<MultiInstanceVoteData>(() => new MultiInstanceVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiInstanceVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private uint instanceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    /// <summary>Field number for the "stageID" field.</summary>
    public const int StageIDFieldNumber = 2;
    private uint stageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageID {
      get { return stageID_; }
      set {
        stageID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceID);
      }
      if (StageID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceID);
      }
      if (StageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceID = input.ReadUInt32();
            break;
          }
          case 16: {
            StageID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdInstance_SelectInstanceID
  /// </summary>
  public sealed class CmdInstanceSelectInstanceIDReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceSelectInstanceIDReq> _parser = new pb::MessageParser<CmdInstanceSelectInstanceIDReq>(() => new CmdInstanceSelectInstanceIDReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceSelectInstanceIDReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private uint instanceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdInstance_SelectInstanceIDRes
  /// </summary>
  public sealed class CmdInstanceSelectInstanceIDRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceSelectInstanceIDRes> _parser = new pb::MessageParser<CmdInstanceSelectInstanceIDRes>(() => new CmdInstanceSelectInstanceIDRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceSelectInstanceIDRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private uint instanceID_;
    /// <summary>
    /// 如果设置成功, instanceID==CmdInstanceSelectInstanceIDReq.instanceID, 否则instanceID = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    /// <summary>
    /// 原样返回CmdInstanceSelectInstanceIDReq.playType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceID);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceID);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceID = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstancePassStageNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstancePassStageNtf> _parser = new pb::MessageParser<CmdInstancePassStageNtf>(() => new CmdInstancePassStageNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstancePassStageNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 3;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CmdInstancePassStageNtf.Types.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CmdInstancePassStageNtf.Types.Reward.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdInstancePassStageNtf.Types.Reward> rewards_ = new pbc::RepeatedField<global::Packet.CmdInstancePassStageNtf.Types.Reward>();
    /// <summary>
    ///小关奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdInstancePassStageNtf.Types.Reward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
      if (PlayType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayType);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
          case 24: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 34: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdInstancePassStageNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Reward : pb::IMessage {
        private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Reward> Parser { get { return _parser; } }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 1;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private long count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ItemId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ItemId);
          }
          if (Count != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (Count != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdInstanceSwitchNextStageReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceSwitchNextStageReq> _parser = new pb::MessageParser<CmdInstanceSwitchNextStageReq>(() => new CmdInstanceSwitchNextStageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceSwitchNextStageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdInstanceSwitchStageNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceSwitchStageNtf> _parser = new pb::MessageParser<CmdInstanceSwitchStageNtf>(() => new CmdInstanceSwitchStageNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceSwitchStageNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "nowStageId" field.</summary>
    public const int NowStageIdFieldNumber = 2;
    private uint nowStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NowStageId {
      get { return nowStageId_; }
      set {
        nowStageId_ = value;
      }
    }

    /// <summary>Field number for the "nextStageId" field.</summary>
    public const int NextStageIdFieldNumber = 3;
    private uint nextStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextStageId {
      get { return nextStageId_; }
      set {
        nextStageId_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 4;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (NowStageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NowStageId);
      }
      if (NextStageId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextStageId);
      }
      if (PlayType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PlayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (NowStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowStageId);
      }
      if (NextStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextStageId);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            NowStageId = input.ReadUInt32();
            break;
          }
          case 24: {
            NextStageId = input.ReadUInt32();
            break;
          }
          case 32: {
            PlayType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本通用数据解锁或更新
  /// </summary>
  public sealed class CmdInstanceInsEntryUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceInsEntryUpdateNtf> _parser = new pb::MessageParser<CmdInstanceInsEntryUpdateNtf>(() => new CmdInstanceInsEntryUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceInsEntryUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private global::Packet.InsEntry entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.InsEntry Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entry_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entry_ == null) {
              entry_ = new global::Packet.InsEntry();
            }
            input.ReadMessage(entry_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleInstanceProgress : pb::IMessage {
    private static readonly pb::MessageParser<RoleInstanceProgress> _parser = new pb::MessageParser<RoleInstanceProgress>(() => new RoleInstanceProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleInstanceProgress> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleID" field.</summary>
    public const int RoleIDFieldNumber = 1;
    private ulong roleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "unlocked" field.</summary>
    public const int UnlockedFieldNumber = 2;
    private bool unlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlocked {
      get { return unlocked_; }
      set {
        unlocked_ = value;
      }
    }

    /// <summary>Field number for the "stageID" field.</summary>
    public const int StageIDFieldNumber = 3;
    private uint stageID_;
    /// <summary>
    /// 该玩家在该instance下的最高进度, 如果是0, 则可认为是从未打过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageID {
      get { return stageID_; }
      set {
        stageID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleID);
      }
      if (Unlocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Unlocked);
      }
      if (StageID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StageID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (Unlocked != false) {
        size += 1 + 1;
      }
      if (StageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 16: {
            Unlocked = input.ReadBool();
            break;
          }
          case 24: {
            StageID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class InstanceStartVoteNtf : pb::IMessage {
    private static readonly pb::MessageParser<InstanceStartVoteNtf> _parser = new pb::MessageParser<InstanceStartVoteNtf>(() => new InstanceStartVoteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceStartVoteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private global::Packet.TeamInstanceProgress progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInstanceProgress Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Packet.MultiInstanceVoteData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MultiInstanceVoteData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (progress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Progress);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (progress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Progress);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (progress_ == null) {
              progress_ = new global::Packet.TeamInstanceProgress();
            }
            input.ReadMessage(progress_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Packet.MultiInstanceVoteData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamInstanceProgress : pb::IMessage {
    private static readonly pb::MessageParser<TeamInstanceProgress> _parser = new pb::MessageParser<TeamInstanceProgress>(() => new TeamInstanceProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInstanceProgress> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleProgress" field.</summary>
    public const int RoleProgressFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RoleInstanceProgress> _repeated_roleProgress_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RoleInstanceProgress.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleInstanceProgress> roleProgress_ = new pbc::RepeatedField<global::Packet.RoleInstanceProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleInstanceProgress> RoleProgress {
      get { return roleProgress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleProgress_.WriteTo(output, _repeated_roleProgress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleProgress_.CalculateSize(_repeated_roleProgress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleProgress_.AddEntriesFrom(input, _repeated_roleProgress_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdInstance_QueryTeamInstanceProgressReq
  /// </summary>
  public sealed class CmdInstanceQueryTeamInstanceProgressReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceQueryTeamInstanceProgressReq> _parser = new pb::MessageParser<CmdInstanceQueryTeamInstanceProgressReq>(() => new CmdInstanceQueryTeamInstanceProgressReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceQueryTeamInstanceProgressReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private uint instanceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdInstance_QueryTeamInstanceProgressRes
  /// </summary>
  public sealed class CmdInstanceQueryTeamInstanceProgressRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceQueryTeamInstanceProgressRes> _parser = new pb::MessageParser<CmdInstanceQueryTeamInstanceProgressRes>(() => new CmdInstanceQueryTeamInstanceProgressRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceQueryTeamInstanceProgressRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamProgress" field.</summary>
    public const int TeamProgressFieldNumber = 1;
    private global::Packet.TeamInstanceProgress teamProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TeamInstanceProgress TeamProgress {
      get { return teamProgress_; }
      set {
        teamProgress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamProgress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamProgress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamProgress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamProgress_ == null) {
              teamProgress_ = new global::Packet.TeamInstanceProgress();
            }
            input.ReadMessage(teamProgress_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdInstanceStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdInstanceStateNtf> _parser = new pb::MessageParser<CmdInstanceStateNtf>(() => new CmdInstanceStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdInstanceStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "inInsatnce" field.</summary>
    public const int InInsatnceFieldNumber = 1;
    private bool inInsatnce_;
    /// <summary>
    ///=true下面字段有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InInsatnce {
      get { return inInsatnce_; }
      set {
        inInsatnce_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InInsatnce != false) {
        output.WriteRawTag(8);
        output.WriteBool(InInsatnce);
      }
      if (InstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InInsatnce != false) {
        size += 1 + 1;
      }
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InInsatnce = input.ReadBool();
            break;
          }
          case 16: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 24: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
