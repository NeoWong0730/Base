// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favorability.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 3700+
  /// </summary>
  public enum CmdFavorability {
    None = 0,
    /// <summary>
    ///好感度信息请求（过天请求）
    /// </summary>
    InfoReq = 3700,
    InfoAck = 3701,
    /// <summary>
    ///增加好感度
    /// </summary>
    AddValueReq = 3702,
    AddValueAck = 3703,
    /// <summary>
    ///好感度升阶
    /// </summary>
    StageUpReq = 3704,
    StageUpAck = 3705,
    /// <summary>
    ///领取好感度区域奖励
    /// </summary>
    GetZoneRewardReq = 3706,
    GetZoneRewardAck = 3707,
    /// <summary>
    ///解锁gift 类型
    /// </summary>
    UnlockGiftTypeNtf = 3708,
    /// <summary>
    ///解锁好感npc
    /// </summary>
    UnlockNpcNtf = 3709,
    /// <summary>
    ///上线通知
    /// </summary>
    InfoNtf = 3710,
    /// <summary>
    ///接受心愿任务
    /// </summary>
    AcceptTaskReq = 3712,
    /// <summary>
    ///切换区域(无返回)
    /// </summary>
    ChangeZoneReq = 3714,
    /// <summary>
    ///请求第一解锁Npc信息
    /// </summary>
    FirstUnlockNpcReq = 3715,
    /// <summary>
    ///返回第一解锁人信息
    /// </summary>
    FirstUnlockNpcRes = 3716,
  }

  public enum ErrorFavorability {
    None = 0,
    /// <summary>
    ///npc id 错误
    /// </summary>
    NpcIdErr = 3701,
    /// <summary>
    ///系统错误	
    /// </summary>
    SysErr = 3702,
    /// <summary>
    ///好感最大
    /// </summary>
    ValueMax = 3703,
    /// <summary>
    ///病症不存在
    /// </summary>
    SickErr = 3704,
    /// <summary>
    ///玩家交互体力不足
    /// </summary>
    Vitality = 3705,
    /// <summary>
    ///未发现act类型
    /// </summary>
    ActType = 3706,
    /// <summary>
    ///次数不足
    /// </summary>
    NoTimes = 3707,
    /// <summary>
    ///病了
    /// </summary>
    Sick = 3708,
    /// <summary>
    ///礼物id不对
    /// </summary>
    ItemIdErr = 3709,
    /// <summary>
    ///道具不足
    /// </summary>
    ItemNotEnough = 3710,
    /// <summary>
    ///好感不足
    /// </summary>
    ValueNotEnough = 3711,
    /// <summary>
    ///升阶任务
    /// </summary>
    StageTaskErr = 3712,
    /// <summary>
    ///zoneid error
    /// </summary>
    ZoneErr = 3713,
    /// <summary>
    ///条件不满足
    /// </summary>
    ConditionErr = 3714,
    /// <summary>
    ///领过了
    /// </summary>
    RewardGot = 3715,
    /// <summary>
    ///配置不存在
    /// </summary>
    CfgErr = 3716,
  }

  #endregion

  #region Messages
  public sealed class CmdFavorabilityInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityInfoReq> _parser = new pb::MessageParser<CmdFavorabilityInfoReq>(() => new CmdFavorabilityInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdFavorabilityInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityInfoAck> _parser = new pb::MessageParser<CmdFavorabilityInfoAck>(() => new CmdFavorabilityInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.NpcFavorability info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.NpcFavorability Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.NpcFavorability();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityAddValueReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityAddValueReq> _parser = new pb::MessageParser<CmdFavorabilityAddValueReq>(() => new CmdFavorabilityAddValueReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityAddValueReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actType" field.</summary>
    public const int ActTypeFieldNumber = 1;
    private uint actType_;
    /// <summary>
    /// 行动type  1.治病 2.交谈 3.舞蹈 5.赠礼（见npc好感行为表，id不可变动）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "equipUid" field.</summary>
    public const int EquipUidFieldNumber = 2;
    private ulong equipUid_;
    /// <summary>
    ///装备 uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUid {
      get { return equipUid_; }
      set {
        equipUid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    /// <summary>
    ///非装备传infoid ，装备不传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 4;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    /// <summary>Field number for the "feastId" field.</summary>
    public const int FeastIdFieldNumber = 5;
    private uint feastId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeastId {
      get { return feastId_; }
      set {
        feastId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActType);
      }
      if (EquipUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EquipUid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (NpcInfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NpcInfoId);
      }
      if (FeastId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FeastId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActType);
      }
      if (EquipUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      if (FeastId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeastId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActType = input.ReadUInt32();
            break;
          }
          case 16: {
            EquipUid = input.ReadUInt64();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
          case 40: {
            FeastId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityAddValueAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityAddValueAck> _parser = new pb::MessageParser<CmdFavorabilityAddValueAck>(() => new CmdFavorabilityAddValueAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityAddValueAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "actType" field.</summary>
    public const int ActTypeFieldNumber = 1;
    private uint actType_;
    /// <summary>
    /// 行动type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "equipUid" field.</summary>
    public const int EquipUidFieldNumber = 2;
    private ulong equipUid_;
    /// <summary>
    ///装备 uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUid {
      get { return equipUid_; }
      set {
        equipUid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    /// <summary>
    ///非装备传infoid ，装备不传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 4;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    /// <summary>Field number for the "favorabilityValue" field.</summary>
    public const int FavorabilityValueFieldNumber = 5;
    private uint favorabilityValue_;
    /// <summary>
    ///对应npc的好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FavorabilityValue {
      get { return favorabilityValue_; }
      set {
        favorabilityValue_ = value;
      }
    }

    /// <summary>Field number for the "actTimes" field.</summary>
    public const int ActTimesFieldNumber = 6;
    private uint actTimes_;
    /// <summary>
    ///对应行动type的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActTimes {
      get { return actTimes_; }
      set {
        actTimes_ = value;
      }
    }

    /// <summary>Field number for the "roleValue" field.</summary>
    public const int RoleValueFieldNumber = 7;
    private uint roleValue_;
    /// <summary>
    ///玩家好感点数（体力）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleValue {
      get { return roleValue_; }
      set {
        roleValue_ = value;
      }
    }

    /// <summary>Field number for the "lastRecoverTime" field.</summary>
    public const int LastRecoverTimeFieldNumber = 8;
    private uint lastRecoverTime_;
    /// <summary>
    ///上次体力恢复时间(服务器时间会有1s 冗余)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRecoverTime {
      get { return lastRecoverTime_; }
      set {
        lastRecoverTime_ = value;
      }
    }

    /// <summary>Field number for the "healthValue" field.</summary>
    public const int HealthValueFieldNumber = 9;
    private uint healthValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HealthValue {
      get { return healthValue_; }
      set {
        healthValue_ = value;
      }
    }

    /// <summary>Field number for the "sickId" field.</summary>
    public const int SickIdFieldNumber = 10;
    private uint sickId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SickId {
      get { return sickId_; }
      set {
        sickId_ = value;
      }
    }

    /// <summary>Field number for the "moodValue" field.</summary>
    public const int MoodValueFieldNumber = 11;
    private uint moodValue_;
    /// <summary>
    ///心情值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoodValue {
      get { return moodValue_; }
      set {
        moodValue_ = value;
      }
    }

    /// <summary>Field number for the "moodId" field.</summary>
    public const int MoodIdFieldNumber = 12;
    private uint moodId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoodId {
      get { return moodId_; }
      set {
        moodId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActType);
      }
      if (EquipUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EquipUid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (NpcInfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NpcInfoId);
      }
      if (FavorabilityValue != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FavorabilityValue);
      }
      if (ActTimes != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ActTimes);
      }
      if (RoleValue != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoleValue);
      }
      if (LastRecoverTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LastRecoverTime);
      }
      if (HealthValue != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(HealthValue);
      }
      if (SickId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SickId);
      }
      if (MoodValue != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MoodValue);
      }
      if (MoodId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MoodId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActType);
      }
      if (EquipUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      if (FavorabilityValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FavorabilityValue);
      }
      if (ActTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActTimes);
      }
      if (RoleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleValue);
      }
      if (LastRecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRecoverTime);
      }
      if (HealthValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HealthValue);
      }
      if (SickId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SickId);
      }
      if (MoodValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoodValue);
      }
      if (MoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoodId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActType = input.ReadUInt32();
            break;
          }
          case 16: {
            EquipUid = input.ReadUInt64();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
          case 40: {
            FavorabilityValue = input.ReadUInt32();
            break;
          }
          case 48: {
            ActTimes = input.ReadUInt32();
            break;
          }
          case 56: {
            RoleValue = input.ReadUInt32();
            break;
          }
          case 64: {
            LastRecoverTime = input.ReadUInt32();
            break;
          }
          case 72: {
            HealthValue = input.ReadUInt32();
            break;
          }
          case 80: {
            SickId = input.ReadUInt32();
            break;
          }
          case 88: {
            MoodValue = input.ReadUInt32();
            break;
          }
          case 96: {
            MoodId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityStageUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityStageUpReq> _parser = new pb::MessageParser<CmdFavorabilityStageUpReq>(() => new CmdFavorabilityStageUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityStageUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 1;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcInfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityStageUpAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityStageUpAck> _parser = new pb::MessageParser<CmdFavorabilityStageUpAck>(() => new CmdFavorabilityStageUpAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityStageUpAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 1;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    /// <summary>Field number for the "newStatgId" field.</summary>
    public const int NewStatgIdFieldNumber = 2;
    private uint newStatgId_;
    /// <summary>
    ///进阶后的好感度阶段（奖励要读上一个阶段）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewStatgId {
      get { return newStatgId_; }
      set {
        newStatgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcInfoId);
      }
      if (NewStatgId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NewStatgId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      if (NewStatgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewStatgId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            NewStatgId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityGetZoneRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityGetZoneRewardReq> _parser = new pb::MessageParser<CmdFavorabilityGetZoneRewardReq>(() => new CmdFavorabilityGetZoneRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityGetZoneRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///区域id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityGetZoneRewardAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityGetZoneRewardAck> _parser = new pb::MessageParser<CmdFavorabilityGetZoneRewardAck>(() => new CmdFavorabilityGetZoneRewardAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityGetZoneRewardAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityUnlockGiftTypeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityUnlockGiftTypeNtf> _parser = new pb::MessageParser<CmdFavorabilityUnlockGiftTypeNtf>(() => new CmdFavorabilityUnlockGiftTypeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityUnlockGiftTypeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "giftType" field.</summary>
    public const int GiftTypeFieldNumber = 2;
    private uint giftType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GiftType {
      get { return giftType_; }
      set {
        giftType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if (GiftType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GiftType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if (GiftType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 16: {
            GiftType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityUnlockNpcNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityUnlockNpcNtf> _parser = new pb::MessageParser<CmdFavorabilityUnlockNpcNtf>(() => new CmdFavorabilityUnlockNpcNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityUnlockNpcNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "npcInfo" field.</summary>
    public const int NpcInfoFieldNumber = 2;
    private global::Packet.NpcFavorabilityItem npcInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.NpcFavorabilityItem NpcInfo {
      get { return npcInfo_; }
      set {
        npcInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if (npcInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NpcInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if (npcInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (npcInfo_ == null) {
              npcInfo_ = new global::Packet.NpcFavorabilityItem();
            }
            input.ReadMessage(npcInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityVitalityNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityVitalityNtf> _parser = new pb::MessageParser<CmdFavorabilityVitalityNtf>(() => new CmdFavorabilityVitalityNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityVitalityNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleValue" field.</summary>
    public const int RoleValueFieldNumber = 1;
    private uint roleValue_;
    /// <summary>
    ///玩家好感点数（体力）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleValue {
      get { return roleValue_; }
      set {
        roleValue_ = value;
      }
    }

    /// <summary>Field number for the "lastRecoverTime" field.</summary>
    public const int LastRecoverTimeFieldNumber = 2;
    private uint lastRecoverTime_;
    /// <summary>
    ///上次体力恢复时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRecoverTime {
      get { return lastRecoverTime_; }
      set {
        lastRecoverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoleValue);
      }
      if (LastRecoverTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRecoverTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleValue);
      }
      if (LastRecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRecoverTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleValue = input.ReadUInt32();
            break;
          }
          case 16: {
            LastRecoverTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityInfoNtf> _parser = new pb::MessageParser<CmdFavorabilityInfoNtf>(() => new CmdFavorabilityInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.NpcFavorability info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.NpcFavorability Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.NpcFavorability();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityAcceptTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityAcceptTaskReq> _parser = new pb::MessageParser<CmdFavorabilityAcceptTaskReq>(() => new CmdFavorabilityAcceptTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityAcceptTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 2;
    private uint npcId_;
    /// <summary>
    ///好感度npcid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (NpcId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityChangeZoneReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityChangeZoneReq> _parser = new pb::MessageParser<CmdFavorabilityChangeZoneReq>(() => new CmdFavorabilityChangeZoneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityChangeZoneReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///区域Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityFirstUnlockNpcReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityFirstUnlockNpcReq> _parser = new pb::MessageParser<CmdFavorabilityFirstUnlockNpcReq>(() => new CmdFavorabilityFirstUnlockNpcReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityFirstUnlockNpcReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    /// <summary>
    ///npcId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdFavorabilityFirstUnlockNpcRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFavorabilityFirstUnlockNpcRes> _parser = new pb::MessageParser<CmdFavorabilityFirstUnlockNpcRes>(() => new CmdFavorabilityFirstUnlockNpcRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFavorabilityFirstUnlockNpcRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    /// <summary>
    ///npcId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "firstRoleId" field.</summary>
    public const int FirstRoleIdFieldNumber = 2;
    private ulong firstRoleId_;
    /// <summary>
    ///第一解锁人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstRoleId {
      get { return firstRoleId_; }
      set {
        firstRoleId_ = value;
      }
    }

    /// <summary>Field number for the "firstRoleName" field.</summary>
    public const int FirstRoleNameFieldNumber = 3;
    private pb::ByteString firstRoleName_ = pb::ByteString.Empty;
    /// <summary>
    ///第一解锁人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FirstRoleName {
      get { return firstRoleName_; }
      set {
        firstRoleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if (FirstRoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FirstRoleId);
      }
      if (FirstRoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FirstRoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if (FirstRoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstRoleId);
      }
      if (FirstRoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FirstRoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 16: {
            FirstRoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            FirstRoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
