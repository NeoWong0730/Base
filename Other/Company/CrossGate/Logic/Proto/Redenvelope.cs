// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redenvelope.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7400+
  /// </summary>
  public enum CmdRedEnvelope {
    None = 0,
    /// <summary>
    ///请求获取红包相关信息
    /// </summary>
    GetInfoReq = 7401,
    GetInfoRes = 7402,
    /// <summary>
    ///请求获取红包记录
    /// </summary>
    GetRecordReq = 7403,
    GetRecordRes = 7404,
    /// <summary>
    ///请求设置屏蔽红包雨
    /// </summary>
    SetHideReq = 7405,
    SetHideRes = 7406,
    /// <summary>
    ///请求获取红包
    /// </summary>
    TakeAwardReq = 7407,
    TakeAwardRes = 7408,
  }

  public enum ErrorRedEnvelope {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///配置错误
    /// </summary>
    CsvErr = 7401,
    /// <summary>
    ///不在活动日
    /// </summary>
    NonOpenDay = 7402,
    /// <summary>
    ///本轮天降红包活动已结束，请关注下一轮开启时间
    /// </summary>
    NonOpenTime = 7403,
    /// <summary>
    ///本轮红包领取已达到上限，请关注下一轮开启时间
    /// </summary>
    AwardMax = 7404,
    /// <summary>
    ///客户端发送infoid错误
    /// </summary>
    InfoIdErr = 7405,
    /// <summary>
    ///客户端发送dropid错误
    /// </summary>
    DropIdErr = 7406,
    /// <summary>
    ///抢红包操作太快，请稍后再试
    /// </summary>
    TakeAwardCd = 7407,
    /// <summary>
    ///天降红包功能未开启
    /// </summary>
    FuncNotOpen = 7408,
  }

  public enum RedEnvelopeActiveReason {
    None = 0,
    /// <summary>
    ///天降红包获取
    /// </summary>
    Draw = 7401,
  }

  #endregion

  #region Messages
  /// <summary>
  ///请求获取红包相关信息
  /// </summary>
  public sealed class CmdRedEnvelopeGetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeGetInfoReq> _parser = new pb::MessageParser<CmdRedEnvelopeGetInfoReq>(() => new CmdRedEnvelopeGetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeGetInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///红包表中的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRedEnvelopeGetInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeGetInfoRes> _parser = new pb::MessageParser<CmdRedEnvelopeGetInfoRes>(() => new CmdRedEnvelopeGetInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeGetInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///红包表中的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_awardCount_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> awardCount_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已领取红包次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardCount {
      get { return awardCount_; }
    }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 3;
    private bool hide_;
    /// <summary>
    ///是否屏蔽红包雨 ture-屏蔽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      awardCount_.WriteTo(output, _repeated_awardCount_codec);
      if (Hide != false) {
        output.WriteRawTag(24);
        output.WriteBool(Hide);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      size += awardCount_.CalculateSize(_repeated_awardCount_codec);
      if (Hide != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            awardCount_.AddEntriesFrom(input, _repeated_awardCount_codec);
            break;
          }
          case 24: {
            Hide = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获取红包记录
  /// </summary>
  public sealed class CmdRedEnvelopeGetRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeGetRecordReq> _parser = new pb::MessageParser<CmdRedEnvelopeGetRecordReq>(() => new CmdRedEnvelopeGetRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeGetRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRedEnvelopeGetRecordRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeGetRecordRes> _parser = new pb::MessageParser<CmdRedEnvelopeGetRecordRes>(() => new CmdRedEnvelopeGetRecordRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeGetRecordRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdRedEnvelopeGetRecordRes.Types.RecordUnit> _repeated_record_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdRedEnvelopeGetRecordRes.Types.RecordUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdRedEnvelopeGetRecordRes.Types.RecordUnit> record_ = new pbc::RepeatedField<global::Packet.CmdRedEnvelopeGetRecordRes.Types.RecordUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdRedEnvelopeGetRecordRes.Types.RecordUnit> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      record_.WriteTo(output, _repeated_record_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += record_.CalculateSize(_repeated_record_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdRedEnvelopeGetRecordRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RecordUnit : pb::IMessage {
        private static readonly pb::MessageParser<RecordUnit> _parser = new pb::MessageParser<RecordUnit>(() => new RecordUnit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordUnit> Parser { get { return _parser; } }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        private uint time_;
        /// <summary>
        ///获取时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Time {
          get { return time_; }
          set {
            time_ = value;
          }
        }

        /// <summary>Field number for the "itemList" field.</summary>
        public const int ItemListFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_itemList_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> itemList_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///获取道具(id,count,id,count...)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ItemList {
          get { return itemList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Time != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Time);
          }
          itemList_.WriteTo(output, _repeated_itemList_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Time != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
          }
          size += itemList_.CalculateSize(_repeated_itemList_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Time = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///请求设置屏蔽红包雨
  /// </summary>
  public sealed class CmdRedEnvelopeSetHideReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeSetHideReq> _parser = new pb::MessageParser<CmdRedEnvelopeSetHideReq>(() => new CmdRedEnvelopeSetHideReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeSetHideReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 1;
    private bool hide_;
    /// <summary>
    ///是否屏蔽红包雨 ture-屏蔽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hide != false) {
        output.WriteRawTag(8);
        output.WriteBool(Hide);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hide != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hide = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRedEnvelopeSetHideRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeSetHideRes> _parser = new pb::MessageParser<CmdRedEnvelopeSetHideRes>(() => new CmdRedEnvelopeSetHideRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeSetHideRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 1;
    private bool hide_;
    /// <summary>
    ///是否屏蔽红包雨 ture-屏蔽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hide != false) {
        output.WriteRawTag(8);
        output.WriteBool(Hide);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hide != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hide = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获取红包
  /// </summary>
  public sealed class CmdRedEnvelopeTakeAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeTakeAwardReq> _parser = new pb::MessageParser<CmdRedEnvelopeTakeAwardReq>(() => new CmdRedEnvelopeTakeAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeTakeAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///红包表中的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "dropId" field.</summary>
    public const int DropIdFieldNumber = 2;
    private uint dropId_;
    /// <summary>
    ///掉落id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DropId {
      get { return dropId_; }
      set {
        dropId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (DropId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DropId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (DropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DropId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            DropId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRedEnvelopeTakeAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRedEnvelopeTakeAwardRes> _parser = new pb::MessageParser<CmdRedEnvelopeTakeAwardRes>(() => new CmdRedEnvelopeTakeAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRedEnvelopeTakeAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///红包表中的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///获取道具(id,count,id,count...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    /// <summary>
    ///获取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 4;
    private uint awardCount_;
    /// <summary>
    ///已领取红包次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    /// <summary>Field number for the "awardCountLoop" field.</summary>
    public const int AwardCountLoopFieldNumber = 5;
    private uint awardCountLoop_;
    /// <summary>
    ///第几轮，从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCountLoop {
      get { return awardCountLoop_; }
      set {
        awardCountLoop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (AwardCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AwardCount);
      }
      if (AwardCountLoop != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AwardCountLoop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      if (AwardCountLoop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCountLoop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 32: {
            AwardCount = input.ReadUInt32();
            break;
          }
          case 40: {
            AwardCountLoop = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
