// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum AccountType {
    None = 0,
    Android = 16,
    IOs = 32,
  }

  #endregion

  #region Messages
  public sealed class DoubleValue : pb::IMessage {
    private static readonly pb::MessageParser<DoubleValue> _parser = new pb::MessageParser<DoubleValue>(() => new DoubleValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class FloatValue : pb::IMessage {
    private static readonly pb::MessageParser<FloatValue> _parser = new pb::MessageParser<FloatValue>(() => new FloatValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class Int64Value : pb::IMessage {
    private static readonly pb::MessageParser<Int64Value> _parser = new pb::MessageParser<Int64Value>(() => new Int64Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int64Value> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class UInt64Value : pb::IMessage {
    private static readonly pb::MessageParser<UInt64Value> _parser = new pb::MessageParser<UInt64Value>(() => new UInt64Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UInt64Value> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private ulong value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class Int32Value : pb::IMessage {
    private static readonly pb::MessageParser<Int32Value> _parser = new pb::MessageParser<Int32Value>(() => new Int32Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Int32Value> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UInt32Value : pb::IMessage {
    private static readonly pb::MessageParser<UInt32Value> _parser = new pb::MessageParser<UInt32Value>(() => new UInt32Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UInt32Value> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BoolValue : pb::IMessage {
    private static readonly pb::MessageParser<BoolValue> _parser = new pb::MessageParser<BoolValue>(() => new BoolValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class StringValue : pb::IMessage {
    private static readonly pb::MessageParser<StringValue> _parser = new pb::MessageParser<StringValue>(() => new StringValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class BytesValue : pb::IMessage {
    private static readonly pb::MessageParser<BytesValue> _parser = new pb::MessageParser<BytesValue>(() => new BytesValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BytesValue> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class UInt32BoolPair : pb::IMessage {
    private static readonly pb::MessageParser<UInt32BoolPair> _parser = new pb::MessageParser<UInt32BoolPair>(() => new UInt32BoolPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UInt32BoolPair> Parser { get { return _parser; } }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private uint key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Key);
      }
      if (Value != false) {
        output.WriteRawTag(16);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CollectionList : pb::IMessage {
    private static readonly pb::MessageParser<CollectionList> _parser = new pb::MessageParser<CollectionList>(() => new CollectionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectionList> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CollectionList.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CollectionList.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.CollectionList.Types.Item> items_ = new pbc::RepeatedField<global::Packet.CollectionList.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CollectionList.Types.Item> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "lastUpdate" field.</summary>
    public const int LastUpdateFieldNumber = 2;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (LastUpdate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            LastUpdate = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CollectionList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Type);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 24: {
                Type = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///资源限制(用来记录各玩法当前已使用的次数)
  /// </summary>
  public sealed class ResLimit : pb::IMessage {
    private static readonly pb::MessageParser<ResLimit> _parser = new pb::MessageParser<ResLimit>(() => new ResLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResLimit> Parser { get { return _parser; } }

    /// <summary>Field number for the "limitType" field.</summary>
    public const int LimitTypeFieldNumber = 1;
    private uint limitType_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private uint expireTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "usedTimes" field.</summary>
    public const int UsedTimesFieldNumber = 3;
    private uint usedTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedTimes {
      get { return usedTimes_; }
      set {
        usedTimes_ = value;
      }
    }

    /// <summary>Field number for the "maxTimes" field.</summary>
    public const int MaxTimesFieldNumber = 4;
    private uint maxTimes_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTimes {
      get { return maxTimes_; }
      set {
        maxTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LimitType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LimitType);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExpireTime);
      }
      if (UsedTimes != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UsedTimes);
      }
      if (MaxTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitType);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      if (UsedTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedTimes);
      }
      if (MaxTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LimitType = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt32();
            break;
          }
          case 24: {
            UsedTimes = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ActiveReason : pb::IMessage {
    private static readonly pb::MessageParser<ActiveReason> _parser = new pb::MessageParser<ActiveReason>(() => new ActiveReason());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveReason> Parser { get { return _parser; } }

    /// <summary>Field number for the "reasonCode" field.</summary>
    public const int ReasonCodeFieldNumber = 1;
    private uint reasonCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReasonCode {
      get { return reasonCode_; }
      set {
        reasonCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReasonCode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReasonCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReasonCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReasonCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReasonCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class NpcFavorabilityItem : pb::IMessage {
    private static readonly pb::MessageParser<NpcFavorabilityItem> _parser = new pb::MessageParser<NpcFavorabilityItem>(() => new NpcFavorabilityItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcFavorabilityItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcInfoId" field.</summary>
    public const int NpcInfoIdFieldNumber = 1;
    private uint npcInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcInfoId {
      get { return npcInfoId_; }
      set {
        npcInfoId_ = value;
      }
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 2;
    private uint zoneId_;
    /// <summary>
    ///npc 区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "unlockedItem" field.</summary>
    public const int UnlockedItemFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_unlockedItem_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> unlockedItem_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///解锁的喜爱道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnlockedItem {
      get { return unlockedItem_; }
    }

    /// <summary>Field number for the "favorabilityStage" field.</summary>
    public const int FavorabilityStageFieldNumber = 4;
    private uint favorabilityStage_;
    /// <summary>
    ///好感度阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FavorabilityStage {
      get { return favorabilityStage_; }
      set {
        favorabilityStage_ = value;
      }
    }

    /// <summary>Field number for the "favorability" field.</summary>
    public const int FavorabilityFieldNumber = 5;
    private uint favorability_;
    /// <summary>
    ///好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Favorability {
      get { return favorability_; }
      set {
        favorability_ = value;
      }
    }

    /// <summary>Field number for the "sickId" field.</summary>
    public const int SickIdFieldNumber = 6;
    private uint sickId_;
    /// <summary>
    ///0 means not sick 生病id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SickId {
      get { return sickId_; }
      set {
        sickId_ = value;
      }
    }

    /// <summary>Field number for the "healthValue" field.</summary>
    public const int HealthValueFieldNumber = 7;
    private uint healthValue_;
    /// <summary>
    ///健康值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HealthValue {
      get { return healthValue_; }
      set {
        healthValue_ = value;
      }
    }

    /// <summary>Field number for the "moodValue" field.</summary>
    public const int MoodValueFieldNumber = 8;
    private uint moodValue_;
    /// <summary>
    ///心情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoodValue {
      get { return moodValue_; }
      set {
        moodValue_ = value;
      }
    }

    /// <summary>Field number for the "moodId" field.</summary>
    public const int MoodIdFieldNumber = 9;
    private uint moodId_;
    /// <summary>
    ///心情表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoodId {
      get { return moodId_; }
      set {
        moodId_ = value;
      }
    }

    /// <summary>Field number for the "actTimes" field.</summary>
    public const int ActTimesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Packet.NpcFavorabilityItem.Types.ActTime> _repeated_actTimes_codec
        = pb::FieldCodec.ForMessage(82, global::Packet.NpcFavorabilityItem.Types.ActTime.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcFavorabilityItem.Types.ActTime> actTimes_ = new pbc::RepeatedField<global::Packet.NpcFavorabilityItem.Types.ActTime>();
    /// <summary>
    ///行动过的次数 行动id，次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcFavorabilityItem.Types.ActTime> ActTimes {
      get { return actTimes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcInfoId);
      }
      if (ZoneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ZoneId);
      }
      unlockedItem_.WriteTo(output, _repeated_unlockedItem_codec);
      if (FavorabilityStage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FavorabilityStage);
      }
      if (Favorability != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Favorability);
      }
      if (SickId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SickId);
      }
      if (HealthValue != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HealthValue);
      }
      if (MoodValue != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MoodValue);
      }
      if (MoodId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MoodId);
      }
      actTimes_.WriteTo(output, _repeated_actTimes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcInfoId);
      }
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      size += unlockedItem_.CalculateSize(_repeated_unlockedItem_codec);
      if (FavorabilityStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FavorabilityStage);
      }
      if (Favorability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Favorability);
      }
      if (SickId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SickId);
      }
      if (HealthValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HealthValue);
      }
      if (MoodValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoodValue);
      }
      if (MoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoodId);
      }
      size += actTimes_.CalculateSize(_repeated_actTimes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            unlockedItem_.AddEntriesFrom(input, _repeated_unlockedItem_codec);
            break;
          }
          case 32: {
            FavorabilityStage = input.ReadUInt32();
            break;
          }
          case 40: {
            Favorability = input.ReadUInt32();
            break;
          }
          case 48: {
            SickId = input.ReadUInt32();
            break;
          }
          case 56: {
            HealthValue = input.ReadUInt32();
            break;
          }
          case 64: {
            MoodValue = input.ReadUInt32();
            break;
          }
          case 72: {
            MoodId = input.ReadUInt32();
            break;
          }
          case 82: {
            actTimes_.AddEntriesFrom(input, _repeated_actTimes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NpcFavorabilityItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ActTime : pb::IMessage {
        private static readonly pb::MessageParser<ActTime> _parser = new pb::MessageParser<ActTime>(() => new ActTime());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActTime> Parser { get { return _parser; } }

        /// <summary>Field number for the "actid" field.</summary>
        public const int ActidFieldNumber = 1;
        private uint actid_;
        /// <summary>
        ///类型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Actid {
          get { return actid_; }
          set {
            actid_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Actid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Actid);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Actid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actid);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Actid = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class NpcFavorabilityZone : pb::IMessage {
    private static readonly pb::MessageParser<NpcFavorabilityZone> _parser = new pb::MessageParser<NpcFavorabilityZone>(() => new NpcFavorabilityZone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcFavorabilityZone> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///区域Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "unlockTime" field.</summary>
    public const int UnlockTimeFieldNumber = 2;
    private uint unlockTime_;
    /// <summary>
    ///解锁时间戳(秒级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockTime {
      get { return unlockTime_; }
      set {
        unlockTime_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private bool reward_;
    /// <summary>
    ///true已领取奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
      if (UnlockTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockTime);
      }
      if (Reward != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      if (UnlockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockTime);
      }
      if (Reward != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 16: {
            UnlockTime = input.ReadUInt32();
            break;
          }
          case 24: {
            Reward = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class NpcFavorabilityZoneList : pb::IMessage {
    private static readonly pb::MessageParser<NpcFavorabilityZoneList> _parser = new pb::MessageParser<NpcFavorabilityZoneList>(() => new NpcFavorabilityZoneList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcFavorabilityZoneList> Parser { get { return _parser; } }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private uint zoneId_;
    /// <summary>
    ///选中的zoneId, 0所有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = value;
      }
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.NpcFavorabilityZone> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.NpcFavorabilityZone.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcFavorabilityZone> zones_ = new pbc::RepeatedField<global::Packet.NpcFavorabilityZone>();
    /// <summary>
    ///区域列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcFavorabilityZone> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ZoneId);
      }
      zones_.WriteTo(output, _repeated_zones_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneId);
      }
      size += zones_.CalculateSize(_repeated_zones_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ZoneId = input.ReadUInt32();
            break;
          }
          case 18: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class NpcFavorability : pb::IMessage {
    private static readonly pb::MessageParser<NpcFavorability> _parser = new pb::MessageParser<NpcFavorability>(() => new NpcFavorability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcFavorability> Parser { get { return _parser; } }

    /// <summary>Field number for the "fItems" field.</summary>
    public const int FItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.NpcFavorabilityItem> _repeated_fItems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.NpcFavorabilityItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcFavorabilityItem> fItems_ = new pbc::RepeatedField<global::Packet.NpcFavorabilityItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcFavorabilityItem> FItems {
      get { return fItems_; }
    }

    /// <summary>Field number for the "roleValue" field.</summary>
    public const int RoleValueFieldNumber = 2;
    private uint roleValue_;
    /// <summary>
    ///玩家好感点数（体力）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleValue {
      get { return roleValue_; }
      set {
        roleValue_ = value;
      }
    }

    /// <summary>Field number for the "lastRecoverTime" field.</summary>
    public const int LastRecoverTimeFieldNumber = 3;
    private uint lastRecoverTime_;
    /// <summary>
    ///上次体力恢复时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRecoverTime {
      get { return lastRecoverTime_; }
      set {
        lastRecoverTime_ = value;
      }
    }

    /// <summary>Field number for the "lastRefreshTime" field.</summary>
    public const int LastRefreshTimeFieldNumber = 4;
    private uint lastRefreshTime_;
    /// <summary>
    /// 上次npc状态刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefreshTime {
      get { return lastRefreshTime_; }
      set {
        lastRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "fullNpcCount" field.</summary>
    public const int FullNpcCountFieldNumber = 6;
    private uint fullNpcCount_;
    /// <summary>
    ///repeated uint32 gotRewards = 5; //领过的地区奖励(已废除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FullNpcCount {
      get { return fullNpcCount_; }
      set {
        fullNpcCount_ = value;
      }
    }

    /// <summary>Field number for the "unlockZone" field.</summary>
    public const int UnlockZoneFieldNumber = 7;
    private global::Packet.NpcFavorabilityZoneList unlockZone_;
    /// <summary>
    ///解锁区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.NpcFavorabilityZoneList UnlockZone {
      get { return unlockZone_; }
      set {
        unlockZone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fItems_.WriteTo(output, _repeated_fItems_codec);
      if (RoleValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleValue);
      }
      if (LastRecoverTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastRecoverTime);
      }
      if (LastRefreshTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastRefreshTime);
      }
      if (FullNpcCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(FullNpcCount);
      }
      if (unlockZone_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UnlockZone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fItems_.CalculateSize(_repeated_fItems_codec);
      if (RoleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleValue);
      }
      if (LastRecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRecoverTime);
      }
      if (LastRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefreshTime);
      }
      if (FullNpcCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullNpcCount);
      }
      if (unlockZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockZone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fItems_.AddEntriesFrom(input, _repeated_fItems_codec);
            break;
          }
          case 16: {
            RoleValue = input.ReadUInt32();
            break;
          }
          case 24: {
            LastRecoverTime = input.ReadUInt32();
            break;
          }
          case 32: {
            LastRefreshTime = input.ReadUInt32();
            break;
          }
          case 48: {
            FullNpcCount = input.ReadUInt32();
            break;
          }
          case 58: {
            if (unlockZone_ == null) {
              unlockZone_ = new global::Packet.NpcFavorabilityZoneList();
            }
            input.ReadMessage(unlockZone_);
            break;
          }
        }
      }
    }

  }

  public sealed class GuildDetailInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildDetailInfo> _parser = new pb::MessageParser<GuildDetailInfo>(() => new GuildDetailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildDetailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "gName" field.</summary>
    public const int GNameFieldNumber = 1;
    private pb::ByteString gName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GName {
      get { return gName_; }
      set {
        gName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private pb::ByteString notice_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildStatus" field.</summary>
    public const int GuildStatusFieldNumber = 3;
    private uint guildStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildStatus {
      get { return guildStatus_; }
      set {
        guildStatus_ = value;
      }
    }

    /// <summary>Field number for the "lastRefreshTime" field.</summary>
    public const int LastRefreshTimeFieldNumber = 4;
    private uint lastRefreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefreshTime {
      get { return lastRefreshTime_; }
      set {
        lastRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 5;
    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "allmemberinfo" field.</summary>
    public const int AllmemberinfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.MemberInfo> _repeated_allmemberinfo_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.GuildDetailInfo.Types.MemberInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MemberInfo> allmemberinfo_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MemberInfo>();
    /// <summary>
    ///发给客户端的消息中不包含此项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MemberInfo> Allmemberinfo {
      get { return allmemberinfo_; }
    }

    /// <summary>Field number for the "allBuildings" field.</summary>
    public const int AllBuildingsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.Building> _repeated_allBuildings_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.GuildDetailInfo.Types.Building.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.Building> allBuildings_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.Building>();
    /// <summary>
    ///uint32 onlineMember = 7;
    ///建筑相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.Building> AllBuildings {
      get { return allBuildings_; }
    }

    /// <summary>Field number for the "nowUpgrade" field.</summary>
    public const int NowUpgradeFieldNumber = 9;
    private int nowUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowUpgrade {
      get { return nowUpgrade_; }
      set {
        nowUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "upgradeFinishTime" field.</summary>
    public const int UpgradeFinishTimeFieldNumber = 10;
    private uint upgradeFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpgradeFinishTime {
      get { return upgradeFinishTime_; }
      set {
        upgradeFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "guildCoin" field.</summary>
    public const int GuildCoinFieldNumber = 11;
    private uint guildCoin_;
    /// <summary>
    ///工会资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildCoin {
      get { return guildCoin_; }
      set {
        guildCoin_ = value;
      }
    }

    /// <summary>Field number for the "rewardBonus" field.</summary>
    public const int RewardBonusFieldNumber = 12;
    private uint rewardBonus_;
    /// <summary>
    ///分红
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardBonus {
      get { return rewardBonus_; }
      set {
        rewardBonus_ = value;
      }
    }

    /// <summary>Field number for the "listNews" field.</summary>
    public const int ListNewsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.GuildNews> _repeated_listNews_codec
        = pb::FieldCodec.ForMessage(106, global::Packet.GuildDetailInfo.Types.GuildNews.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.GuildNews> listNews_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.GuildNews>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.GuildNews> ListNews {
      get { return listNews_; }
    }

    /// <summary>Field number for the "autoAgree" field.</summary>
    public const int AutoAgreeFieldNumber = 14;
    private bool autoAgree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAgree {
      get { return autoAgree_; }
      set {
        autoAgree_ = value;
      }
    }

    /// <summary>Field number for the "minAutoLvl" field.</summary>
    public const int MinAutoLvlFieldNumber = 15;
    private uint minAutoLvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinAutoLvl {
      get { return minAutoLvl_; }
      set {
        minAutoLvl_ = value;
      }
    }

    /// <summary>Field number for the "branchMemberInfo" field.</summary>
    public const int BranchMemberInfoFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.BranchInfo> _repeated_branchMemberInfo_codec
        = pb::FieldCodec.ForMessage(130, global::Packet.GuildDetailInfo.Types.BranchInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.BranchInfo> branchMemberInfo_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.BranchInfo>();
    /// <summary>
    ///分会id ，信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.BranchInfo> BranchMemberInfo {
      get { return branchMemberInfo_; }
    }

    /// <summary>Field number for the "allMergeInfos" field.</summary>
    public const int AllMergeInfosFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.MergeInfo> _repeated_allMergeInfos_codec
        = pb::FieldCodec.ForMessage(138, global::Packet.GuildDetailInfo.Types.MergeInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MergeInfo> allMergeInfos_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MergeInfo>();
    /// <summary>
    ///10 个 被动申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.MergeInfo> AllMergeInfos {
      get { return allMergeInfos_; }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 18;
    private ulong guildId_;
    /// <summary>
    /// 从1开始，合服后会变动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "initiativeMerge" field.</summary>
    public const int InitiativeMergeFieldNumber = 19;
    private global::Packet.GuildDetailInfo.Types.MergeInfo initiativeMerge_;
    /// <summary>
    ///主动申请合并
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildDetailInfo.Types.MergeInfo InitiativeMerge {
      get { return initiativeMerge_; }
      set {
        initiativeMerge_ = value;
      }
    }

    /// <summary>Field number for the "todayDonateCoin" field.</summary>
    public const int TodayDonateCoinFieldNumber = 20;
    private uint todayDonateCoin_;
    /// <summary>
    ///今日获得的资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TodayDonateCoin {
      get { return todayDonateCoin_; }
      set {
        todayDonateCoin_ = value;
      }
    }

    /// <summary>Field number for the "applylist" field.</summary>
    public const int ApplylistFieldNumber = 21;
    private static readonly pb::FieldCodec<ulong> _repeated_applylist_codec
        = pb::FieldCodec.ForUInt64(170);
    private readonly pbc::RepeatedField<ulong> applylist_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///公会申请列表 ， 目前发给客户端的消息中不包含此项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Applylist {
      get { return applylist_; }
    }

    /// <summary>Field number for the "donateRecords" field.</summary>
    public const int DonateRecordsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.DonateRecord> _repeated_donateRecords_codec
        = pb::FieldCodec.ForMessage(178, global::Packet.GuildDetailInfo.Types.DonateRecord.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.DonateRecord> donateRecords_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.DonateRecord>();
    /// <summary>
    ///捐献记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.DonateRecord> DonateRecords {
      get { return donateRecords_; }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 23;
    private uint createTime_;
    /// <summary>
    ///公会创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "noticeOp" field.</summary>
    public const int NoticeOpFieldNumber = 24;
    private pb::ByteString noticeOp_ = pb::ByteString.Empty;
    /// <summary>
    ///公会公告操作者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NoticeOp {
      get { return noticeOp_; }
      set {
        noticeOp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agricultureExp" field.</summary>
    public const int AgricultureExpFieldNumber = 25;
    private uint agricultureExp_;
    /// <summary>
    ///繁荣度相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AgricultureExp {
      get { return agricultureExp_; }
      set {
        agricultureExp_ = value;
      }
    }

    /// <summary>Field number for the "businessExp" field.</summary>
    public const int BusinessExpFieldNumber = 26;
    private uint businessExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BusinessExp {
      get { return businessExp_; }
      set {
        businessExp_ = value;
      }
    }

    /// <summary>Field number for the "securityExp" field.</summary>
    public const int SecurityExpFieldNumber = 27;
    private uint securityExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecurityExp {
      get { return securityExp_; }
      set {
        securityExp_ = value;
      }
    }

    /// <summary>Field number for the "religionExp" field.</summary>
    public const int ReligionExpFieldNumber = 28;
    private uint religionExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReligionExp {
      get { return religionExp_; }
      set {
        religionExp_ = value;
      }
    }

    /// <summary>Field number for the "technologyExp" field.</summary>
    public const int TechnologyExpFieldNumber = 29;
    private uint technologyExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TechnologyExp {
      get { return technologyExp_; }
      set {
        technologyExp_ = value;
      }
    }

    /// <summary>Field number for the "prosperityLvl" field.</summary>
    public const int ProsperityLvlFieldNumber = 30;
    private uint prosperityLvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProsperityLvl {
      get { return prosperityLvl_; }
      set {
        prosperityLvl_ = value;
      }
    }

    /// <summary>Field number for the "terrIndex" field.</summary>
    public const int TerrIndexFieldNumber = 31;
    private uint terrIndex_;
    /// <summary>
    ///领地index)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerrIndex {
      get { return terrIndex_; }
      set {
        terrIndex_ = value;
      }
    }

    /// <summary>Field number for the "terrSvr" field.</summary>
    public const int TerrSvrFieldNumber = 32;
    private uint terrSvr_;
    /// <summary>
    /// 领地svr
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TerrSvr {
      get { return terrSvr_; }
      set {
        terrSvr_ = value;
      }
    }

    /// <summary>Field number for the "auctionBriefs" field.</summary>
    public const int AuctionBriefsFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Packet.GuildDetailInfo.Types.AuctionBrief> _repeated_auctionBriefs_codec
        = pb::FieldCodec.ForMessage(266, global::Packet.GuildDetailInfo.Types.AuctionBrief.Parser);
    private readonly pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief> auctionBriefs_ = new pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief>();
    /// <summary>
    ///正在进行的拍卖简略信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GuildDetailInfo.Types.AuctionBrief> AuctionBriefs {
      get { return auctionBriefs_; }
    }

    /// <summary>Field number for the "maintainCostTime" field.</summary>
    public const int MaintainCostTimeFieldNumber = 34;
    private uint maintainCostTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaintainCostTime {
      get { return maintainCostTime_; }
      set {
        maintainCostTime_ = value;
      }
    }

    /// <summary>Field number for the "coinGainWeekly" field.</summary>
    public const int CoinGainWeeklyFieldNumber = 35;
    private uint coinGainWeekly_;
    /// <summary>
    ///每周获得的家族资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoinGainWeekly {
      get { return coinGainWeekly_; }
      set {
        coinGainWeekly_ = value;
      }
    }

    /// <summary>Field number for the "resetCoinGainTime" field.</summary>
    public const int ResetCoinGainTimeFieldNumber = 36;
    private uint resetCoinGainTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetCoinGainTime {
      get { return resetCoinGainTime_; }
      set {
        resetCoinGainTime_ = value;
      }
    }

    /// <summary>Field number for the "guildUid" field.</summary>
    public const int GuildUidFieldNumber = 37;
    private ulong guildUid_;
    /// <summary>
    ///唯一id(serverId+seq)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildUid {
      get { return guildUid_; }
      set {
        guildUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GName);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Notice);
      }
      if (GuildStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildStatus);
      }
      if (LastRefreshTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastRefreshTime);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LeaderId);
      }
      allmemberinfo_.WriteTo(output, _repeated_allmemberinfo_codec);
      allBuildings_.WriteTo(output, _repeated_allBuildings_codec);
      if (NowUpgrade != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NowUpgrade);
      }
      if (UpgradeFinishTime != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(UpgradeFinishTime);
      }
      if (GuildCoin != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(GuildCoin);
      }
      if (RewardBonus != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RewardBonus);
      }
      listNews_.WriteTo(output, _repeated_listNews_codec);
      if (AutoAgree != false) {
        output.WriteRawTag(112);
        output.WriteBool(AutoAgree);
      }
      if (MinAutoLvl != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MinAutoLvl);
      }
      branchMemberInfo_.WriteTo(output, _repeated_branchMemberInfo_codec);
      allMergeInfos_.WriteTo(output, _repeated_allMergeInfos_codec);
      if (GuildId != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(GuildId);
      }
      if (initiativeMerge_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(InitiativeMerge);
      }
      if (TodayDonateCoin != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(TodayDonateCoin);
      }
      applylist_.WriteTo(output, _repeated_applylist_codec);
      donateRecords_.WriteTo(output, _repeated_donateRecords_codec);
      if (CreateTime != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(CreateTime);
      }
      if (NoticeOp.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(NoticeOp);
      }
      if (AgricultureExp != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(AgricultureExp);
      }
      if (BusinessExp != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(BusinessExp);
      }
      if (SecurityExp != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(SecurityExp);
      }
      if (ReligionExp != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ReligionExp);
      }
      if (TechnologyExp != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(TechnologyExp);
      }
      if (ProsperityLvl != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ProsperityLvl);
      }
      if (TerrIndex != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(TerrIndex);
      }
      if (TerrSvr != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(TerrSvr);
      }
      auctionBriefs_.WriteTo(output, _repeated_auctionBriefs_codec);
      if (MaintainCostTime != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(MaintainCostTime);
      }
      if (CoinGainWeekly != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(CoinGainWeekly);
      }
      if (ResetCoinGainTime != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ResetCoinGainTime);
      }
      if (GuildUid != 0UL) {
        output.WriteRawTag(168, 2);
        output.WriteUInt64(GuildUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GName);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Notice);
      }
      if (GuildStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildStatus);
      }
      if (LastRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefreshTime);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      size += allmemberinfo_.CalculateSize(_repeated_allmemberinfo_codec);
      size += allBuildings_.CalculateSize(_repeated_allBuildings_codec);
      if (NowUpgrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowUpgrade);
      }
      if (UpgradeFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpgradeFinishTime);
      }
      if (GuildCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCoin);
      }
      if (RewardBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardBonus);
      }
      size += listNews_.CalculateSize(_repeated_listNews_codec);
      if (AutoAgree != false) {
        size += 1 + 1;
      }
      if (MinAutoLvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAutoLvl);
      }
      size += branchMemberInfo_.CalculateSize(_repeated_branchMemberInfo_codec);
      size += allMergeInfos_.CalculateSize(_repeated_allMergeInfos_codec);
      if (GuildId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (initiativeMerge_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitiativeMerge);
      }
      if (TodayDonateCoin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TodayDonateCoin);
      }
      size += applylist_.CalculateSize(_repeated_applylist_codec);
      size += donateRecords_.CalculateSize(_repeated_donateRecords_codec);
      if (CreateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (NoticeOp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(NoticeOp);
      }
      if (AgricultureExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AgricultureExp);
      }
      if (BusinessExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BusinessExp);
      }
      if (SecurityExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SecurityExp);
      }
      if (ReligionExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReligionExp);
      }
      if (TechnologyExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TechnologyExp);
      }
      if (ProsperityLvl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProsperityLvl);
      }
      if (TerrIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerrIndex);
      }
      if (TerrSvr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TerrSvr);
      }
      size += auctionBriefs_.CalculateSize(_repeated_auctionBriefs_codec);
      if (MaintainCostTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaintainCostTime);
      }
      if (CoinGainWeekly != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CoinGainWeekly);
      }
      if (ResetCoinGainTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResetCoinGainTime);
      }
      if (GuildUid != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(GuildUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GName = input.ReadBytes();
            break;
          }
          case 18: {
            Notice = input.ReadBytes();
            break;
          }
          case 24: {
            GuildStatus = input.ReadUInt32();
            break;
          }
          case 32: {
            LastRefreshTime = input.ReadUInt32();
            break;
          }
          case 40: {
            LeaderId = input.ReadUInt64();
            break;
          }
          case 50: {
            allmemberinfo_.AddEntriesFrom(input, _repeated_allmemberinfo_codec);
            break;
          }
          case 66: {
            allBuildings_.AddEntriesFrom(input, _repeated_allBuildings_codec);
            break;
          }
          case 72: {
            NowUpgrade = input.ReadInt32();
            break;
          }
          case 80: {
            UpgradeFinishTime = input.ReadUInt32();
            break;
          }
          case 88: {
            GuildCoin = input.ReadUInt32();
            break;
          }
          case 96: {
            RewardBonus = input.ReadUInt32();
            break;
          }
          case 106: {
            listNews_.AddEntriesFrom(input, _repeated_listNews_codec);
            break;
          }
          case 112: {
            AutoAgree = input.ReadBool();
            break;
          }
          case 120: {
            MinAutoLvl = input.ReadUInt32();
            break;
          }
          case 130: {
            branchMemberInfo_.AddEntriesFrom(input, _repeated_branchMemberInfo_codec);
            break;
          }
          case 138: {
            allMergeInfos_.AddEntriesFrom(input, _repeated_allMergeInfos_codec);
            break;
          }
          case 144: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 154: {
            if (initiativeMerge_ == null) {
              initiativeMerge_ = new global::Packet.GuildDetailInfo.Types.MergeInfo();
            }
            input.ReadMessage(initiativeMerge_);
            break;
          }
          case 160: {
            TodayDonateCoin = input.ReadUInt32();
            break;
          }
          case 170:
          case 168: {
            applylist_.AddEntriesFrom(input, _repeated_applylist_codec);
            break;
          }
          case 178: {
            donateRecords_.AddEntriesFrom(input, _repeated_donateRecords_codec);
            break;
          }
          case 184: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 194: {
            NoticeOp = input.ReadBytes();
            break;
          }
          case 200: {
            AgricultureExp = input.ReadUInt32();
            break;
          }
          case 208: {
            BusinessExp = input.ReadUInt32();
            break;
          }
          case 216: {
            SecurityExp = input.ReadUInt32();
            break;
          }
          case 224: {
            ReligionExp = input.ReadUInt32();
            break;
          }
          case 232: {
            TechnologyExp = input.ReadUInt32();
            break;
          }
          case 240: {
            ProsperityLvl = input.ReadUInt32();
            break;
          }
          case 248: {
            TerrIndex = input.ReadUInt32();
            break;
          }
          case 256: {
            TerrSvr = input.ReadUInt32();
            break;
          }
          case 266: {
            auctionBriefs_.AddEntriesFrom(input, _repeated_auctionBriefs_codec);
            break;
          }
          case 272: {
            MaintainCostTime = input.ReadUInt32();
            break;
          }
          case 280: {
            CoinGainWeekly = input.ReadUInt32();
            break;
          }
          case 288: {
            ResetCoinGainTime = input.ReadUInt32();
            break;
          }
          case 296: {
            GuildUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GuildDetailInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MemberInfo : pb::IMessage {
        private static readonly pb::MessageParser<MemberInfo> _parser = new pb::MessageParser<MemberInfo>(() => new MemberInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MemberInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private uint position_;
        /// <summary>
        ///分会*10000 + 职位 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "weekContribution" field.</summary>
        public const int WeekContributionFieldNumber = 3;
        private uint weekContribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint WeekContribution {
          get { return weekContribution_; }
          set {
            weekContribution_ = value;
          }
        }

        /// <summary>Field number for the "totalContribution" field.</summary>
        public const int TotalContributionFieldNumber = 4;
        private uint totalContribution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TotalContribution {
          get { return totalContribution_; }
          set {
            totalContribution_ = value;
          }
        }

        /// <summary>Field number for the "joinTime" field.</summary>
        public const int JoinTimeFieldNumber = 5;
        private uint joinTime_;
        /// <summary>
        /// 入族时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint JoinTime {
          get { return joinTime_; }
          set {
            joinTime_ = value;
          }
        }

        /// <summary>Field number for the "battlePosition" field.</summary>
        public const int BattlePositionFieldNumber = 6;
        private uint battlePosition_;
        /// <summary>
        /// 参与族战的有效职位
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BattlePosition {
          get { return battlePosition_; }
          set {
            battlePosition_ = value;
          }
        }

        /// <summary>Field number for the "battleHintTime" field.</summary>
        public const int BattleHintTimeFieldNumber = 7;
        private uint battleHintTime_;
        /// <summary>
        /// 族战提示生效时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BattleHintTime {
          get { return battleHintTime_; }
          set {
            battleHintTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (Position != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Position);
          }
          if (WeekContribution != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(WeekContribution);
          }
          if (TotalContribution != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(TotalContribution);
          }
          if (JoinTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(JoinTime);
          }
          if (BattlePosition != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(BattlePosition);
          }
          if (BattleHintTime != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(BattleHintTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
          }
          if (WeekContribution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekContribution);
          }
          if (TotalContribution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalContribution);
          }
          if (JoinTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinTime);
          }
          if (BattlePosition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattlePosition);
          }
          if (BattleHintTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleHintTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                Position = input.ReadUInt32();
                break;
              }
              case 24: {
                WeekContribution = input.ReadUInt32();
                break;
              }
              case 32: {
                TotalContribution = input.ReadUInt32();
                break;
              }
              case 40: {
                JoinTime = input.ReadUInt32();
                break;
              }
              case 48: {
                BattlePosition = input.ReadUInt32();
                break;
              }
              case 56: {
                BattleHintTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Building : pb::IMessage {
        private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Building> Parser { get { return _parser; } }

        /// <summary>Field number for the "lvl" field.</summary>
        public const int LvlFieldNumber = 1;
        private uint lvl_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lvl {
          get { return lvl_; }
          set {
            lvl_ = value;
          }
        }

        /// <summary>Field number for the "skillMap" field.</summary>
        public const int SkillMapFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_skillMap_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> skillMap_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///技能
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> SkillMap {
          get { return skillMap_; }
        }

        /// <summary>Field number for the "nowUpgrade" field.</summary>
        public const int NowUpgradeFieldNumber = 3;
        private int nowUpgrade_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NowUpgrade {
          get { return nowUpgrade_; }
          set {
            nowUpgrade_ = value;
          }
        }

        /// <summary>Field number for the "upgradeFinishTime" field.</summary>
        public const int UpgradeFinishTimeFieldNumber = 4;
        private uint upgradeFinishTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UpgradeFinishTime {
          get { return upgradeFinishTime_; }
          set {
            upgradeFinishTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Lvl != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Lvl);
          }
          skillMap_.WriteTo(output, _repeated_skillMap_codec);
          if (NowUpgrade != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(NowUpgrade);
          }
          if (UpgradeFinishTime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(UpgradeFinishTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Lvl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
          }
          size += skillMap_.CalculateSize(_repeated_skillMap_codec);
          if (NowUpgrade != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowUpgrade);
          }
          if (UpgradeFinishTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpgradeFinishTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Lvl = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                skillMap_.AddEntriesFrom(input, _repeated_skillMap_codec);
                break;
              }
              case 24: {
                NowUpgrade = input.ReadInt32();
                break;
              }
              case 32: {
                UpgradeFinishTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class GuildNews : pb::IMessage {
        private static readonly pb::MessageParser<GuildNews> _parser = new pb::MessageParser<GuildNews>(() => new GuildNews());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GuildNews> Parser { get { return _parser; } }

        /// <summary>Field number for the "newsType" field.</summary>
        public const int NewsTypeFieldNumber = 1;
        private uint newsType_;
        /// <summary>
        /// 1.会长转让 2.系统不上线踢出 3.审批进入 4.踢人 5.quit 6 拒绝进入 7 自动加入公会 8邀请加入 9玩家更名 10玩家转职 11玩家职位调整
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NewsType {
          get { return newsType_; }
          set {
            newsType_ = value;
          }
        }

        /// <summary>Field number for the "role1" field.</summary>
        public const int Role1FieldNumber = 2;
        private pb::ByteString role1_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Role1 {
          get { return role1_; }
          set {
            role1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "role2" field.</summary>
        public const int Role2FieldNumber = 3;
        private pb::ByteString role2_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Role2 {
          get { return role2_; }
          set {
            role2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 4;
        private pb::ByteString reason_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Reason {
          get { return reason_; }
          set {
            reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "happenTime" field.</summary>
        public const int HappenTimeFieldNumber = 5;
        private uint happenTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HappenTime {
          get { return happenTime_; }
          set {
            happenTime_ = value;
          }
        }

        /// <summary>Field number for the "headIcon" field.</summary>
        public const int HeadIconFieldNumber = 6;
        private uint headIcon_;
        /// <summary>
        ///role1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeadIcon {
          get { return headIcon_; }
          set {
            headIcon_ = value;
          }
        }

        /// <summary>Field number for the "lvl" field.</summary>
        public const int LvlFieldNumber = 7;
        private uint lvl_;
        /// <summary>
        ///role1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lvl {
          get { return lvl_; }
          set {
            lvl_ = value;
          }
        }

        /// <summary>Field number for the "career1" field.</summary>
        public const int Career1FieldNumber = 8;
        private uint career1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Career1 {
          get { return career1_; }
          set {
            career1_ = value;
          }
        }

        /// <summary>Field number for the "career2" field.</summary>
        public const int Career2FieldNumber = 9;
        private uint career2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Career2 {
          get { return career2_; }
          set {
            career2_ = value;
          }
        }

        /// <summary>Field number for the "oldPosition" field.</summary>
        public const int OldPositionFieldNumber = 10;
        private uint oldPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OldPosition {
          get { return oldPosition_; }
          set {
            oldPosition_ = value;
          }
        }

        /// <summary>Field number for the "newPosition" field.</summary>
        public const int NewPositionFieldNumber = 11;
        private uint newPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NewPosition {
          get { return newPosition_; }
          set {
            newPosition_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NewsType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(NewsType);
          }
          if (Role1.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Role1);
          }
          if (Role2.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Role2);
          }
          if (Reason.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Reason);
          }
          if (HappenTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(HappenTime);
          }
          if (HeadIcon != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(HeadIcon);
          }
          if (Lvl != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Lvl);
          }
          if (Career1 != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(Career1);
          }
          if (Career2 != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Career2);
          }
          if (OldPosition != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(OldPosition);
          }
          if (NewPosition != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(NewPosition);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NewsType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewsType);
          }
          if (Role1.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Role1);
          }
          if (Role2.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Role2);
          }
          if (Reason.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Reason);
          }
          if (HappenTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HappenTime);
          }
          if (HeadIcon != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIcon);
          }
          if (Lvl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lvl);
          }
          if (Career1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career1);
          }
          if (Career2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career2);
          }
          if (OldPosition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldPosition);
          }
          if (NewPosition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewPosition);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NewsType = input.ReadUInt32();
                break;
              }
              case 18: {
                Role1 = input.ReadBytes();
                break;
              }
              case 26: {
                Role2 = input.ReadBytes();
                break;
              }
              case 34: {
                Reason = input.ReadBytes();
                break;
              }
              case 40: {
                HappenTime = input.ReadUInt32();
                break;
              }
              case 48: {
                HeadIcon = input.ReadUInt32();
                break;
              }
              case 56: {
                Lvl = input.ReadUInt32();
                break;
              }
              case 64: {
                Career1 = input.ReadUInt32();
                break;
              }
              case 72: {
                Career2 = input.ReadUInt32();
                break;
              }
              case 80: {
                OldPosition = input.ReadUInt32();
                break;
              }
              case 88: {
                NewPosition = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class BranchInfo : pb::IMessage {
        private static readonly pb::MessageParser<BranchInfo> _parser = new pb::MessageParser<BranchInfo>(() => new BranchInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BranchInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "memberCount" field.</summary>
        public const int MemberCountFieldNumber = 3;
        private int memberCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MemberCount {
          get { return memberCount_; }
          set {
            memberCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Name);
          }
          if (MemberCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(MemberCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (MemberCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadBytes();
                break;
              }
              case 24: {
                MemberCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MergeInfo : pb::IMessage {
        private static readonly pb::MessageParser<MergeInfo> _parser = new pb::MessageParser<MergeInfo>(() => new MergeInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MergeInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "otherId" field.</summary>
        public const int OtherIdFieldNumber = 1;
        private ulong otherId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong OtherId {
          get { return otherId_; }
          set {
            otherId_ = value;
          }
        }

        /// <summary>Field number for the "dstId" field.</summary>
        public const int DstIdFieldNumber = 2;
        private ulong dstId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DstId {
          get { return dstId_; }
          set {
            dstId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OtherId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(OtherId);
          }
          if (DstId != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(DstId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OtherId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherId);
          }
          if (DstId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DstId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                OtherId = input.ReadUInt64();
                break;
              }
              case 16: {
                DstId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class DonateRecord : pb::IMessage {
        private static readonly pb::MessageParser<DonateRecord> _parser = new pb::MessageParser<DonateRecord>(() => new DonateRecord());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DonateRecord> Parser { get { return _parser; } }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private pb::ByteString name_ = pb::ByteString.Empty;
        /// <summary>
        ///role name
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "guildCoin" field.</summary>
        public const int GuildCoinFieldNumber = 2;
        private uint guildCoin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint GuildCoin {
          get { return guildCoin_; }
          set {
            guildCoin_ = value;
          }
        }

        /// <summary>Field number for the "itemId" field.</summary>
        public const int ItemIdFieldNumber = 3;
        private uint itemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemId {
          get { return itemId_; }
          set {
            itemId_ = value;
          }
        }

        /// <summary>Field number for the "itemCount" field.</summary>
        public const int ItemCountFieldNumber = 4;
        private uint itemCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemCount {
          get { return itemCount_; }
          set {
            itemCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Name);
          }
          if (GuildCoin != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(GuildCoin);
          }
          if (ItemId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ItemId);
          }
          if (ItemCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ItemCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          if (GuildCoin != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCoin);
          }
          if (ItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
          }
          if (ItemCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadBytes();
                break;
              }
              case 16: {
                GuildCoin = input.ReadUInt32();
                break;
              }
              case 24: {
                ItemId = input.ReadUInt32();
                break;
              }
              case 32: {
                ItemCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class AuctionBrief : pb::IMessage {
        private static readonly pb::MessageParser<AuctionBrief> _parser = new pb::MessageParser<AuctionBrief>(() => new AuctionBrief());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuctionBrief> Parser { get { return _parser; } }

        /// <summary>Field number for the "activeId" field.</summary>
        public const int ActiveIdFieldNumber = 1;
        private uint activeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActiveId {
          get { return activeId_; }
          set {
            activeId_ = value;
          }
        }

        /// <summary>Field number for the "endTime" field.</summary>
        public const int EndTimeFieldNumber = 2;
        private uint endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ActiveId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ActiveId);
          }
          if (EndTime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(EndTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ActiveId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
          }
          if (EndTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ActiveId = input.ReadUInt32();
                break;
              }
              case 16: {
                EndTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class GuildAuctionRecord : pb::IMessage {
    private static readonly pb::MessageParser<GuildAuctionRecord> _parser = new pb::MessageParser<GuildAuctionRecord>(() => new GuildAuctionRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildAuctionRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    /// <summary>
    ///拍卖活动类型，见GuildAuctionType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "itemInfoId" field.</summary>
    public const int ItemInfoIdFieldNumber = 2;
    private uint itemInfoId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemInfoId {
      get { return itemInfoId_; }
      set {
        itemInfoId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "dealTime" field.</summary>
    public const int DealTimeFieldNumber = 5;
    private uint dealTime_;
    /// <summary>
    ///bool bind = 4;  //废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DealTime {
      get { return dealTime_; }
      set {
        dealTime_ = value;
      }
    }

    /// <summary>Field number for the "dealType" field.</summary>
    public const int DealTypeFieldNumber = 6;
    private uint dealType_;
    /// <summary>
    /// 0-流拍， 1-一口价， 2-竞拍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DealType {
      get { return dealType_; }
      set {
        dealType_ = value;
      }
    }

    /// <summary>Field number for the "dealPrice" field.</summary>
    public const int DealPriceFieldNumber = 7;
    private uint dealPrice_;
    /// <summary>
    ///dealType>0有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DealPrice {
      get { return dealPrice_; }
      set {
        dealPrice_ = value;
      }
    }

    /// <summary>Field number for the "currencyType" field.</summary>
    public const int CurrencyTypeFieldNumber = 8;
    private uint currencyType_;
    /// <summary>
    ///成交货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (ItemInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemInfoId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (DealTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DealTime);
      }
      if (DealType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DealType);
      }
      if (DealPrice != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DealPrice);
      }
      if (CurrencyType != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CurrencyType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (ItemInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemInfoId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (DealTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DealTime);
      }
      if (DealType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DealType);
      }
      if (DealPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DealPrice);
      }
      if (CurrencyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemInfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 40: {
            DealTime = input.ReadUInt32();
            break;
          }
          case 48: {
            DealType = input.ReadUInt32();
            break;
          }
          case 56: {
            DealPrice = input.ReadUInt32();
            break;
          }
          case 64: {
            CurrencyType = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GuildAuctionRecord message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum DealType {
        NotDeal = 0,
        OnePrice = 1,
        Bid = 2,
      }

    }
    #endregion

  }

  public sealed class GuildAuctionMyInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildAuctionMyInfo> _parser = new pb::MessageParser<GuildAuctionMyInfo>(() => new GuildAuctionMyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildAuctionMyInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activeId" field.</summary>
    public const int ActiveIdFieldNumber = 1;
    private uint activeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveId {
      get { return activeId_; }
      set {
        activeId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 3;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///当前价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private uint count_;
    /// <summary>
    ///单份数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "myPrice" field.</summary>
    public const int MyPriceFieldNumber = 5;
    private uint myPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyPrice {
      get { return myPrice_; }
      set {
        myPrice_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private uint endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "owned" field.</summary>
    public const int OwnedFieldNumber = 7;
    private bool owned_;
    /// <summary>
    ///是否归属自己
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Owned {
      get { return owned_; }
      set {
        owned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveId);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (InfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
      if (MyPrice != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MyPrice);
      }
      if (EndTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(EndTime);
      }
      if (Owned != false) {
        output.WriteRawTag(56);
        output.WriteBool(Owned);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (MyPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyPrice);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (Owned != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
          case 40: {
            MyPrice = input.ReadUInt32();
            break;
          }
          case 48: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 56: {
            Owned = input.ReadBool();
            break;
          }
          case 64: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///人物传记(新) 首通信息， 与db共用
  /// </summary>
  public sealed class BioInsFirstPassInfo : pb::IMessage {
    private static readonly pb::MessageParser<BioInsFirstPassInfo> _parser = new pb::MessageParser<BioInsFirstPassInfo>(() => new BioInsFirstPassInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BioInsFirstPassInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "passTime" field.</summary>
    public const int PassTimeFieldNumber = 2;
    private uint passTime_;
    /// <summary>
    ///秒， = 0表示还没首通
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassTime {
      get { return passTime_; }
      set {
        passTime_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.BioInsFirstPassInfo.Types.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.BioInsFirstPassInfo.Types.Player.Parser);
    private readonly pbc::RepeatedField<global::Packet.BioInsFirstPassInfo.Types.Player> players_ = new pbc::RepeatedField<global::Packet.BioInsFirstPassInfo.Types.Player>();
    /// <summary>
    ///首通的队伍玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BioInsFirstPassInfo.Types.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (PassTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PassTime);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (PassTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassTime);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            PassTime = input.ReadUInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BioInsFirstPassInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Player : pb::IMessage {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "roleName" field.</summary>
        public const int RoleNameFieldNumber = 2;
        private pb::ByteString roleName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RoleName {
          get { return roleName_; }
          set {
            roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (RoleName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(RoleName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (RoleName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                RoleName = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class SimpleItem : pb::IMessage {
    private static readonly pb::MessageParser<SimpleItem> _parser = new pb::MessageParser<SimpleItem>(() => new SimpleItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemInfoId" field.</summary>
    public const int ItemInfoIdFieldNumber = 1;
    private uint itemInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemInfoId {
      get { return itemInfoId_; }
      set {
        itemInfoId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemInfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemInfoId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemInfoId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemInfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MyEnvelope : pb::IMessage {
    private static readonly pb::MessageParser<MyEnvelope> _parser = new pb::MessageParser<MyEnvelope>(() => new MyEnvelope());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyEnvelope> Parser { get { return _parser; } }

    /// <summary>Field number for the "envelopeId" field.</summary>
    public const int EnvelopeIdFieldNumber = 1;
    private uint envelopeId_;
    /// <summary>
    ///系统的红包id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnvelopeId {
      get { return envelopeId_; }
      set {
        envelopeId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    /// <summary>
    /// 状态 0 未发送 1 已发送  （状态略蛋疼，中间的状态改变需要前端自己去check显示）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "aliveTime" field.</summary>
    public const int AliveTimeFieldNumber = 3;
    private uint aliveTime_;
    /// <summary>
    /// 存活时间  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AliveTime {
      get { return aliveTime_; }
      set {
        aliveTime_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 4;
    private uint infoId_;
    /// <summary>
    ///excel id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private uint expireTime_;
    /// <summary>
    ///未发送的过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnvelopeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnvelopeId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if (AliveTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AliveTime);
      }
      if (InfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(InfoId);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnvelopeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnvelopeId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (AliveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AliveTime);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EnvelopeId = input.ReadUInt32();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 24: {
            AliveTime = input.ReadUInt32();
            break;
          }
          case 32: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 40: {
            ExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildBattleMatchUnit : pb::IMessage {
    private static readonly pb::MessageParser<GuildBattleMatchUnit> _parser = new pb::MessageParser<GuildBattleMatchUnit>(() => new GuildBattleMatchUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBattleMatchUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildUid" field.</summary>
    public const int GuildUidFieldNumber = 4;
    private ulong guildUid_;
    /// <summary>
    /// 家族唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildUid {
      get { return guildUid_; }
      set {
        guildUid_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamesvrId" field.</summary>
    public const int GamesvrIdFieldNumber = 3;
    private uint gamesvrId_;
    /// <summary>
    /// gameid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesvrId {
      get { return gamesvrId_; }
      set {
        gamesvrId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GuildName);
      }
      if (GamesvrId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GamesvrId);
      }
      if (GuildUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GuildUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildUid);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GamesvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesvrId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadBytes();
            break;
          }
          case 24: {
            GamesvrId = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///跳过剧情按钮数据
  /// </summary>
  public sealed class TaskSkipTalkBtn : pb::IMessage {
    private static readonly pb::MessageParser<TaskSkipTalkBtn> _parser = new pb::MessageParser<TaskSkipTalkBtn>(() => new TaskSkipTalkBtn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskSkipTalkBtn> Parser { get { return _parser; } }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private uint key_;
    /// <summary>
    ///            子id
    ///经典头目战      0
    ///人物传记       副本表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 2;
    private bool skip_;
    /// <summary>
    ///是否跳过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Key);
      }
      if (Skip != false) {
        output.WriteRawTag(16);
        output.WriteBool(Skip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Key);
      }
      if (Skip != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadUInt32();
            break;
          }
          case 16: {
            Skip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class BossTowerRankUnit : pb::IMessage {
    private static readonly pb::MessageParser<BossTowerRankUnit> _parser = new pb::MessageParser<BossTowerRankUnit>(() => new BossTowerRankUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BossTowerRankUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 4;
    private uint layer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 5;
    private uint round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private uint time_;
    /// <summary>
    ///通关日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 7;
    private bool isBoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 8;
    private uint third_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (Layer != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Layer);
      }
      if (Round != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Round);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Time);
      }
      if (IsBoss != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBoss);
      }
      if (Third != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Third);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 32: {
            Layer = input.ReadUInt32();
            break;
          }
          case 40: {
            Round = input.ReadUInt32();
            break;
          }
          case 48: {
            Time = input.ReadUInt32();
            break;
          }
          case 56: {
            IsBoss = input.ReadBool();
            break;
          }
          case 64: {
            Third = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
