// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dropreward.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///2200 +
  /// </summary>
  public enum CmdDropReward {
    None = 0,
    /// <summary>
    ///抽奖请求
    /// </summary>
    CmdLuckyDrawDrawReq = 2201,
    /// <summary>
    ///抽奖返回 理论上都会返回
    /// </summary>
    CmdLuckyDrawDrawRes = 2202,
    /// <summary>
    ///上线通知次数
    /// </summary>
    CmdLuckyDrawDrawInfoNtf = 2203,
  }

  public enum ErrorDropReward {
    None = 0,
    /// <summary>
    ///玩家不存在
    /// </summary>
    RoleNotExist = 2201,
    /// <summary>
    ///掉落处理错误
    /// </summary>
    DropReward = 2202,
    /// <summary>
    ///加入背包错误
    /// </summary>
    AddBagItem = 2203,
    /// <summary>
    ///花费的id策划填写的0
    /// </summary>
    ErrorLuckyDrawItemId = 2204,
  }

  public enum LuckyDrawActiveReason {
    None = 0,
    /// <summary>
    ///火焰鼠彩票 奖励表
    /// </summary>
    Draw = 2201,
    /// <summary>
    ///  战斗结束掉落
    /// </summary>
    BattleEnd = 2202,
    /// <summary>
    ///骑宠抽奖
    /// </summary>
    MountDraw = 2203,
  }

  #endregion

  #region Messages
  public sealed class CmdLuckyDrawDrawReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdLuckyDrawDrawReq> _parser = new pb::MessageParser<CmdLuckyDrawDrawReq>(() => new CmdLuckyDrawDrawReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLuckyDrawDrawReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private uint flag_;
    /// <summary>
    ///0: 1抽 1: 5抽 2:高级1抽 3:高级5抽 4:骑宠1抽 5:骑宠5抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "useMoney" field.</summary>
    public const int UseMoneyFieldNumber = 2;
    private uint useMoney_;
    /// <summary>
    /// 0 不使用 1 使用魔币自动补足
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseMoney {
      get { return useMoney_; }
      set {
        useMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Flag);
      }
      if (UseMoney != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (UseMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Flag = input.ReadUInt32();
            break;
          }
          case 16: {
            UseMoney = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLuckyDrawDrawRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdLuckyDrawDrawRes> _parser = new pb::MessageParser<CmdLuckyDrawDrawRes>(() => new CmdLuckyDrawDrawRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLuckyDrawDrawRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_itemid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> itemid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 道具id 3中的awardId 已经能查出来itemid itemcount 所以1、2不发了客户端注意别报错
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Itemid {
      get { return itemid_; }
    }

    /// <summary>Field number for the "itemcount" field.</summary>
    public const int ItemcountFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemcount_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemcount_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 道具数量 服务器保证两行数量对应 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Itemcount {
      get { return itemcount_; }
    }

    /// <summary>Field number for the "awardId" field.</summary>
    public const int AwardIdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_awardId_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> awardId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 服务器保证跟上边数组大小相对应//抽奖表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardId {
      get { return awardId_; }
    }

    /// <summary>Field number for the "petUID" field.</summary>
    public const int PetUIDFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_petUID_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> petUID_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///宠物得uuid跟上边数量不一致，只有有宠物的时候才会有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> PetUID {
      get { return petUID_; }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private uint ret_;
    /// <summary>
    ///0是正常 非0 不正常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "extraGiftNum" field.</summary>
    public const int ExtraGiftNumFieldNumber = 6;
    private uint extraGiftNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtraGiftNum {
      get { return extraGiftNum_; }
      set {
        extraGiftNum_ = value;
      }
    }

    /// <summary>Field number for the "timesrst" field.</summary>
    public const int TimesrstFieldNumber = 7;
    private uint timesrst_;
    /// <summary>
    ///重置得那个次数 玩家知道自己的保底次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timesrst {
      get { return timesrst_; }
      set {
        timesrst_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 8;
    private uint flag_;
    /// <summary>
    ///0: 1抽 1: 5抽 2:高级1抽 3:高级5抽 4:骑宠1抽 5:骑宠5抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemid_.WriteTo(output, _repeated_itemid_codec);
      itemcount_.WriteTo(output, _repeated_itemcount_codec);
      if (Ret != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ret);
      }
      awardId_.WriteTo(output, _repeated_awardId_codec);
      petUID_.WriteTo(output, _repeated_petUID_codec);
      if (ExtraGiftNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraGiftNum);
      }
      if (Timesrst != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Timesrst);
      }
      if (Flag != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemid_.CalculateSize(_repeated_itemid_codec);
      size += itemcount_.CalculateSize(_repeated_itemcount_codec);
      size += awardId_.CalculateSize(_repeated_awardId_codec);
      size += petUID_.CalculateSize(_repeated_petUID_codec);
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (ExtraGiftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraGiftNum);
      }
      if (Timesrst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timesrst);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemid_.AddEntriesFrom(input, _repeated_itemid_codec);
            break;
          }
          case 18:
          case 16: {
            itemcount_.AddEntriesFrom(input, _repeated_itemcount_codec);
            break;
          }
          case 24: {
            Ret = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            awardId_.AddEntriesFrom(input, _repeated_awardId_codec);
            break;
          }
          case 42:
          case 40: {
            petUID_.AddEntriesFrom(input, _repeated_petUID_codec);
            break;
          }
          case 48: {
            ExtraGiftNum = input.ReadUInt32();
            break;
          }
          case 56: {
            Timesrst = input.ReadUInt32();
            break;
          }
          case 64: {
            Flag = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdLuckyDrawDrawInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdLuckyDrawDrawInfoNtf> _parser = new pb::MessageParser<CmdLuckyDrawDrawInfoNtf>(() => new CmdLuckyDrawDrawInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdLuckyDrawDrawInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "timesrst" field.</summary>
    public const int TimesrstFieldNumber = 1;
    private uint timesrst_;
    /// <summary>
    ///重置得那个次数 玩家知道自己的保底次数(高级抽奖)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timesrst {
      get { return timesrst_; }
      set {
        timesrst_ = value;
      }
    }

    /// <summary>Field number for the "mountTimesrst" field.</summary>
    public const int MountTimesrstFieldNumber = 2;
    private uint mountTimesrst_;
    /// <summary>
    ///保底次数(骑宠抽奖)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountTimesrst {
      get { return mountTimesrst_; }
      set {
        mountTimesrst_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timesrst != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timesrst);
      }
      if (MountTimesrst != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MountTimesrst);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timesrst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timesrst);
      }
      if (MountTimesrst != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountTimesrst);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timesrst = input.ReadUInt32();
            break;
          }
          case 16: {
            MountTimesrst = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
