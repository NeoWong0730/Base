// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dailyinstance.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///2800+
  /// </summary>
  public enum CmdDailyInstance {
    None = 0,
    /// <summary>
    ///请求职业通关排行
    /// </summary>
    RankInfoReq = 2902,
    RankInfoRes = 2903,
    /// <summary>
    ///请求单层最佳通关信息
    /// </summary>
    BestInfoReq = 2904,
    BestInfoRes = 2905,
    /// <summary>
    ///日常副本单副本更新(废弃)
    /// </summary>
    EntryUpdateNtf = 2906,
    /// <summary>
    ///自己的最佳通关记录更新
    /// </summary>
    StageUpdateNtf = 2907,
    /// <summary>
    ///更新日常次数
    /// </summary>
    PlayTimesUpdateNtf = 2908,
  }

  public enum ErrorDailyInstance {
    None = 0,
    /// <summary>
    ///前置副本未解锁
    /// </summary>
    InstanceLocked = 2901,
    /// <summary>
    ///前置副本未通关
    /// </summary>
    PreInstanceNotPassed = 2902,
    /// <summary>
    ///关卡未找到
    /// </summary>
    StageNotFound = 2903,
    /// <summary>
    ///前置关卡未通关
    /// </summary>
    PreStageNotPassed = 2904,
    /// <summary>
    ///失败尝试次数已用完
    /// </summary>
    FailTimesexhausted = 2905,
  }

  #endregion

  #region Messages
  /// <summary>
  ///日常副本某玩法数据
  /// </summary>
  public sealed class DailyInsData : pb::IMessage {
    private static readonly pb::MessageParser<DailyInsData> _parser = new pb::MessageParser<DailyInsData>(() => new DailyInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyInsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.DailyInsEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.DailyInsEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailyInsEntry> entries_ = new pbc::RepeatedField<global::Packet.DailyInsEntry>();
    /// <summary>
    ///所有日常副本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailyInsEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "playTimesLimit" field.</summary>
    public const int PlayTimesLimitFieldNumber = 3;
    private global::Packet.ResLimit playTimesLimit_;
    /// <summary>
    ///对应日常活动玩法次数，每挑战一次+1（无论胜败）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit PlayTimesLimit {
      get { return playTimesLimit_; }
      set {
        playTimesLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (playTimesLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayTimesLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (playTimesLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayTimesLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 26: {
            if (playTimesLimit_ == null) {
              playTimesLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(playTimesLimit_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本单关信息
  /// </summary>
  public sealed class DailyStage : pb::IMessage {
    private static readonly pb::MessageParser<DailyStage> _parser = new pb::MessageParser<DailyStage>(() => new DailyStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyStage> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "bestTime" field.</summary>
    public const int BestTimeFieldNumber = 2;
    private uint bestTime_;
    /// <summary>
    ///个人最佳记录(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BestTime {
      get { return bestTime_; }
      set {
        bestTime_ = value;
      }
    }

    /// <summary>Field number for the "bestRound" field.</summary>
    public const int BestRoundFieldNumber = 3;
    private uint bestRound_;
    /// <summary>
    ///个人最佳记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BestRound {
      get { return bestRound_; }
      set {
        bestRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageId);
      }
      if (BestTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BestTime);
      }
      if (BestRound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BestRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      if (BestTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestTime);
      }
      if (BestRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BestRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadUInt32();
            break;
          }
          case 16: {
            BestTime = input.ReadUInt32();
            break;
          }
          case 24: {
            BestRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单副本
  /// </summary>
  public sealed class DailyInsEntry : pb::IMessage {
    private static readonly pb::MessageParser<DailyInsEntry> _parser = new pb::MessageParser<DailyInsEntry>(() => new DailyInsEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyInsEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Packet.DailyStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(90, global::Packet.DailyStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailyStage> stages_ = new pbc::RepeatedField<global::Packet.DailyStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailyStage> Stages {
      get { return stages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 90: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class DailyStageBestInfo : pb::IMessage {
    private static readonly pb::MessageParser<DailyStageBestInfo> _parser = new pb::MessageParser<DailyStageBestInfo>(() => new DailyStageBestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyStageBestInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private uint stageId_;
    /// <summary>
    ///关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private uint round_;
    /// <summary>
    ///所用回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "stageTime" field.</summary>
    public const int StageTimeFieldNumber = 5;
    private uint stageTime_;
    /// <summary>
    ///关卡耗时(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageTime {
      get { return stageTime_; }
      set {
        stageTime_ = value;
      }
    }

    /// <summary>Field number for the "battleRecordId" field.</summary>
    public const int BattleRecordIdFieldNumber = 6;
    private ulong battleRecordId_;
    /// <summary>
    ///录像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BattleRecordId {
      get { return battleRecordId_; }
      set {
        battleRecordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RoleName);
      }
      if (Round != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Round);
      }
      if (StageTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(StageTime);
      }
      if (BattleRecordId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BattleRecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (StageTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageTime);
      }
      if (BattleRecordId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BattleRecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            RoleName = input.ReadBytes();
            break;
          }
          case 32: {
            Round = input.ReadUInt32();
            break;
          }
          case 40: {
            StageTime = input.ReadUInt32();
            break;
          }
          case 48: {
            BattleRecordId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通关排行信息
  /// </summary>
  public sealed class DailyInsPassRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<DailyInsPassRankInfo> _parser = new pb::MessageParser<DailyInsPassRankInfo>(() => new DailyInsPassRankInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyInsPassRankInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passedStage" field.</summary>
    public const int PassedStageFieldNumber = 3;
    private uint passedStage_;
    /// <summary>
    ///通关关数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassedStage {
      get { return passedStage_; }
      set {
        passedStage_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private uint round_;
    /// <summary>
    ///所用回合数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "totalTime" field.</summary>
    public const int TotalTimeFieldNumber = 5;
    private uint totalTime_;
    /// <summary>
    ///总耗时(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (PassedStage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PassedStage);
      }
      if (Round != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Round);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (PassedStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassedStage);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            PassedStage = input.ReadUInt32();
            break;
          }
          case 32: {
            Round = input.ReadUInt32();
            break;
          }
          case 40: {
            TotalTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求通关排行榜信息
  /// </summary>
  public sealed class CmdDailyInstanceRankInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceRankInfoReq> _parser = new pb::MessageParser<CmdDailyInstanceRankInfoReq>(() => new CmdDailyInstanceRankInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceRankInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyInstanceRankInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceRankInfoRes> _parser = new pb::MessageParser<CmdDailyInstanceRankInfoRes>(() => new CmdDailyInstanceRankInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceRankInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "rankInfos" field.</summary>
    public const int RankInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.DailyInsPassRankInfo> _repeated_rankInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.DailyInsPassRankInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailyInsPassRankInfo> rankInfos_ = new pbc::RepeatedField<global::Packet.DailyInsPassRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailyInsPassRankInfo> RankInfos {
      get { return rankInfos_; }
    }

    /// <summary>Field number for the "selfRankInfo" field.</summary>
    public const int SelfRankInfoFieldNumber = 4;
    private global::Packet.DailyInsPassRankInfo selfRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailyInsPassRankInfo SelfRankInfo {
      get { return selfRankInfo_; }
      set {
        selfRankInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Career);
      }
      rankInfos_.WriteTo(output, _repeated_rankInfos_codec);
      if (selfRankInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfRankInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      size += rankInfos_.CalculateSize(_repeated_rankInfos_codec);
      if (selfRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRankInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Career = input.ReadUInt32();
            break;
          }
          case 26: {
            rankInfos_.AddEntriesFrom(input, _repeated_rankInfos_codec);
            break;
          }
          case 34: {
            if (selfRankInfo_ == null) {
              selfRankInfo_ = new global::Packet.DailyInsPassRankInfo();
            }
            input.ReadMessage(selfRankInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求最佳通关信息
  /// </summary>
  public sealed class CmdDailyInstanceBestInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceBestInfoReq> _parser = new pb::MessageParser<CmdDailyInstanceBestInfoReq>(() => new CmdDailyInstanceBestInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceBestInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyInstanceBestInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceBestInfoRes> _parser = new pb::MessageParser<CmdDailyInstanceBestInfoRes>(() => new CmdDailyInstanceBestInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceBestInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "bestInfos" field.</summary>
    public const int BestInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.DailyStageBestInfo> _repeated_bestInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.DailyStageBestInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailyStageBestInfo> bestInfos_ = new pbc::RepeatedField<global::Packet.DailyStageBestInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailyStageBestInfo> BestInfos {
      get { return bestInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      bestInfos_.WriteTo(output, _repeated_bestInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      size += bestInfos_.CalculateSize(_repeated_bestInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 18: {
            bestInfos_.AddEntriesFrom(input, _repeated_bestInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///日常副本数据解锁或更新
  /// </summary>
  public sealed class CmdDailyInstanceEntryUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceEntryUpdateNtf> _parser = new pb::MessageParser<CmdDailyInstanceEntryUpdateNtf>(() => new CmdDailyInstanceEntryUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceEntryUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "dailyEntry" field.</summary>
    public const int DailyEntryFieldNumber = 2;
    private global::Packet.DailyInsEntry dailyEntry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailyInsEntry DailyEntry {
      get { return dailyEntry_; }
      set {
        dailyEntry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (dailyEntry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DailyEntry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (dailyEntry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyEntry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (dailyEntry_ == null) {
              dailyEntry_ = new global::Packet.DailyInsEntry();
            }
            input.ReadMessage(dailyEntry_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyInstanceStageUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstanceStageUpdateNtf> _parser = new pb::MessageParser<CmdDailyInstanceStageUpdateNtf>(() => new CmdDailyInstanceStageUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstanceStageUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "insType" field.</summary>
    public const int InsTypeFieldNumber = 1;
    private uint insType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsType {
      get { return insType_; }
      set {
        insType_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 2;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private global::Packet.DailyStage stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailyStage Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsType);
      }
      if (PlayType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayType);
      }
      if (InstanceId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InstanceId);
      }
      if (stage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsType);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsType = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 24: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 34: {
            if (stage_ == null) {
              stage_ = new global::Packet.DailyStage();
            }
            input.ReadMessage(stage_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdDailyInstancePlayTimesUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdDailyInstancePlayTimesUpdateNtf> _parser = new pb::MessageParser<CmdDailyInstancePlayTimesUpdateNtf>(() => new CmdDailyInstancePlayTimesUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdDailyInstancePlayTimesUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "playTimesLimit" field.</summary>
    public const int PlayTimesLimitFieldNumber = 1;
    private global::Packet.ResLimit playTimesLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit PlayTimesLimit {
      get { return playTimesLimit_; }
      set {
        playTimesLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playTimesLimit_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayTimesLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playTimesLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayTimesLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playTimesLimit_ == null) {
              playTimesLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(playTimesLimit_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
