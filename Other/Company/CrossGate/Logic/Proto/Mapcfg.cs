// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapcfg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum BrushType {
    None = 0,
    /// <summary>
    ///固定npc
    /// </summary>
    RigNpc = 1,
    /// <summary>
    ///随机npc
    /// </summary>
    RanNpc = 2,
    /// <summary>
    ///跳转点
    /// </summary>
    Tel = 4,
    /// <summary>
    ///遇敌npc
    /// </summary>
    MonsterGrp = 5,
    /// <summary>
    ///世界boss
    /// </summary>
    Boss = 6,
    /// <summary>
    ///战场安全区域
    /// </summary>
    SafeArea = 7,
    /// <summary>
    ///战场阻挡墙
    /// </summary>
    Block = 8,
  }

  public enum DayNight {
    Day = 0,
    Night = 1,
  }

  public enum Weather {
    None = 0,
    Rainy = 1,
    Snow = 2,
  }

  public enum CondID {
    None = 0,
    /// <summary>
    /// </summary>
    HasQuest = 10001,
    HasItem = 10041,
    ComQuest = 10051,
    NotQuest = 10071,
    AcceptQuest = 10081,
    SubmitQuest = 10091,
    Occ = 10111,
    StagePassed = 10121,
    DayNight = 10011,
    Weather = 10021,
    Season = 10031,
    CliStatus = 10141,
    TargetUncomplete = 10151,
    TargetComplete = 10161,
    ReputationLevel = 10171,
    LevelGreater = 10181,
    LevelLess = 10191,
    LevelEqual = 10201,
    LevelGreaterOrEqual = 10202,
    ActivateNpc = 10401,
    SwitchEnemyOn = 10601,
    GoddessTrialMonsterGroup = 10701,
    Riddle = 10801,
    NotRiddle = 10811,
    InTeam = 10901,
    ChargeMoney = 11101,
    LoginDay = 11201,
    HasTreasure = 11401,
    TripperAwakeLevel = 12001,
    TeamMemberGreater = 12101,
    ActivityValueMax = 12201,
    TerrorInsPass = 12301,
    GuildProsperityLvl = 12401,
    GuildProsperityLvlLess = 12501,
    GuildProsperityLvlMax = 12601,
    GuildBuildLvl = 12701,
    GuildBuildLvlLess = 12801,
    WorldLevelGe = 13001,
    GoddessTrialAwardGet = 13101,
    UnderGroundMonsterChoice = 15001,
  }

  #endregion

  #region Messages
  public sealed class MapCfgInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapCfgInfo> _parser = new pb::MessageParser<MapCfgInfo>(() => new MapCfgInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCfgInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    /// <summary>
    ///地图宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    /// <summary>
    ///高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "BrushIndex" field.</summary>
    public const int BrushIndexFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.MapCfgInfo.Types.BrushArray> _repeated_brushIndex_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.MapCfgInfo.Types.BrushArray.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapCfgInfo.Types.BrushArray> brushIndex_ = new pbc::RepeatedField<global::Packet.MapCfgInfo.Types.BrushArray>();
    /// <summary>
    ///地图每个格子对应的笔刷数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapCfgInfo.Types.BrushArray> BrushIndex {
      get { return brushIndex_; }
    }

    /// <summary>Field number for the "brushInfos" field.</summary>
    public const int BrushInfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.BrushInfo> _repeated_brushInfos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.BrushInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.BrushInfo> brushInfos_ = new pbc::RepeatedField<global::Packet.BrushInfo>();
    /// <summary>
    ///所有笔刷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BrushInfo> BrushInfos {
      get { return brushInfos_; }
    }

    /// <summary>Field number for the "npcInfos" field.</summary>
    public const int NpcInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.NpcCfg> _repeated_npcInfos_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.NpcCfg.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcCfg> npcInfos_ = new pbc::RepeatedField<global::Packet.NpcCfg>();
    /// <summary>
    ///所有固定npc 随机npc(工具将格子遍历汇总，省去程序遍历)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcCfg> NpcInfos {
      get { return npcInfos_; }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 6;
    private uint mapId_;
    /// <summary>
    ///地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "bStatic" field.</summary>
    public const int BStaticFieldNumber = 7;
    private bool bStatic_;
    /// <summary>
    ///是否静态地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BStatic {
      get { return bStatic_; }
      set {
        bStatic_ = value;
      }
    }

    /// <summary>Field number for the "monsters" field.</summary>
    public const int MonstersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.TriggerMonsterGrp> _repeated_monsters_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.TriggerMonsterGrp.Parser);
    private readonly pbc::RepeatedField<global::Packet.TriggerMonsterGrp> monsters_ = new pbc::RepeatedField<global::Packet.TriggerMonsterGrp>();
    /// <summary>
    ///地图每个格子中怪物暗雷 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TriggerMonsterGrp> Monsters {
      get { return monsters_; }
    }

    /// <summary>Field number for the "bossNpcs" field.</summary>
    public const int BossNpcsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Packet.NpcCfg> _repeated_bossNpcs_codec
        = pb::FieldCodec.ForMessage(74, global::Packet.NpcCfg.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcCfg> bossNpcs_ = new pbc::RepeatedField<global::Packet.NpcCfg>();
    /// <summary>
    /// （5 bossnpc， boss 被单独塞入了不同的结构）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcCfg> BossNpcs {
      get { return bossNpcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      brushIndex_.WriteTo(output, _repeated_brushIndex_codec);
      brushInfos_.WriteTo(output, _repeated_brushInfos_codec);
      npcInfos_.WriteTo(output, _repeated_npcInfos_codec);
      if (MapId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MapId);
      }
      if (BStatic != false) {
        output.WriteRawTag(56);
        output.WriteBool(BStatic);
      }
      monsters_.WriteTo(output, _repeated_monsters_codec);
      bossNpcs_.WriteTo(output, _repeated_bossNpcs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += brushIndex_.CalculateSize(_repeated_brushIndex_codec);
      size += brushInfos_.CalculateSize(_repeated_brushInfos_codec);
      size += npcInfos_.CalculateSize(_repeated_npcInfos_codec);
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (BStatic != false) {
        size += 1 + 1;
      }
      size += monsters_.CalculateSize(_repeated_monsters_codec);
      size += bossNpcs_.CalculateSize(_repeated_bossNpcs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            brushIndex_.AddEntriesFrom(input, _repeated_brushIndex_codec);
            break;
          }
          case 34: {
            brushInfos_.AddEntriesFrom(input, _repeated_brushInfos_codec);
            break;
          }
          case 42: {
            npcInfos_.AddEntriesFrom(input, _repeated_npcInfos_codec);
            break;
          }
          case 48: {
            MapId = input.ReadUInt32();
            break;
          }
          case 56: {
            BStatic = input.ReadBool();
            break;
          }
          case 66: {
            monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
            break;
          }
          case 74: {
            bossNpcs_.AddEntriesFrom(input, _repeated_bossNpcs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MapCfgInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class BrushArray : pb::IMessage {
        private static readonly pb::MessageParser<BrushArray> _parser = new pb::MessageParser<BrushArray>(() => new BrushArray());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BrushArray> Parser { get { return _parser; } }

        /// <summary>Field number for the "BrushIndex" field.</summary>
        public const int BrushIndexFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_brushIndex_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> brushIndex_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///下标1开始,0留空（每个格子对应的笔刷index）
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> BrushIndex {
          get { return brushIndex_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          brushIndex_.WriteTo(output, _repeated_brushIndex_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += brushIndex_.CalculateSize(_repeated_brushIndex_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                brushIndex_.AddEntriesFrom(input, _repeated_brushIndex_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///服务器平面对应xz平面，y轴对应-z，+x 对应+x, offY工具导出反了，需要取反
  /// </summary>
  public sealed class BrushInfo : pb::IMessage {
    private static readonly pb::MessageParser<BrushInfo> _parser = new pb::MessageParser<BrushInfo>(() => new BrushInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrushInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Packet.BrushType type_ = 0;
    /// <summary>
    /// 画刷类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tel" field.</summary>
    public const int TelFieldNumber = 2;
    private global::Packet.BrushInfo.Types.Teleporter tel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushInfo.Types.Teleporter Tel {
      get { return tel_; }
      set {
        tel_ = value;
      }
    }

    /// <summary>Field number for the "rigidNpc" field.</summary>
    public const int RigidNpcFieldNumber = 3;
    private global::Packet.BrushInfo.Types.RigidNpc rigidNpc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushInfo.Types.RigidNpc RigidNpc {
      get { return rigidNpc_; }
      set {
        rigidNpc_ = value;
      }
    }

    /// <summary>Field number for the "randomNpc" field.</summary>
    public const int RandomNpcFieldNumber = 4;
    private global::Packet.BrushInfo.Types.RandomNpc randomNpc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushInfo.Types.RandomNpc RandomNpc {
      get { return randomNpc_; }
      set {
        randomNpc_ = value;
      }
    }

    /// <summary>Field number for the "bossNpc" field.</summary>
    public const int BossNpcFieldNumber = 5;
    private global::Packet.BrushInfo.Types.BossNpc bossNpc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushInfo.Types.BossNpc BossNpc {
      get { return bossNpc_; }
      set {
        bossNpc_ = value;
      }
    }

    /// <summary>Field number for the "battleconfig" field.</summary>
    public const int BattleconfigFieldNumber = 6;
    private global::Packet.BrushInfo.Types.BattlefieldInfo battleconfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BrushInfo.Types.BattlefieldInfo Battleconfig {
      get { return battleconfig_; }
      set {
        battleconfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (tel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tel);
      }
      if (rigidNpc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RigidNpc);
      }
      if (randomNpc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RandomNpc);
      }
      if (bossNpc_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BossNpc);
      }
      if (battleconfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Battleconfig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (tel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tel);
      }
      if (rigidNpc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigidNpc);
      }
      if (randomNpc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomNpc);
      }
      if (bossNpc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BossNpc);
      }
      if (battleconfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battleconfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Packet.BrushType) input.ReadEnum();
            break;
          }
          case 18: {
            if (tel_ == null) {
              tel_ = new global::Packet.BrushInfo.Types.Teleporter();
            }
            input.ReadMessage(tel_);
            break;
          }
          case 26: {
            if (rigidNpc_ == null) {
              rigidNpc_ = new global::Packet.BrushInfo.Types.RigidNpc();
            }
            input.ReadMessage(rigidNpc_);
            break;
          }
          case 34: {
            if (randomNpc_ == null) {
              randomNpc_ = new global::Packet.BrushInfo.Types.RandomNpc();
            }
            input.ReadMessage(randomNpc_);
            break;
          }
          case 42: {
            if (bossNpc_ == null) {
              bossNpc_ = new global::Packet.BrushInfo.Types.BossNpc();
            }
            input.ReadMessage(bossNpc_);
            break;
          }
          case 50: {
            if (battleconfig_ == null) {
              battleconfig_ = new global::Packet.BrushInfo.Types.BattlefieldInfo();
            }
            input.ReadMessage(battleconfig_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BrushInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      /// <summary>
      ///地图跳转
      /// </summary>
      public sealed class Teleporter : pb::IMessage {
        private static readonly pb::MessageParser<Teleporter> _parser = new pb::MessageParser<Teleporter>(() => new Teleporter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Teleporter> Parser { get { return _parser; } }

        /// <summary>Field number for the "mapId" field.</summary>
        public const int MapIdFieldNumber = 1;
        private uint mapId_;
        /// <summary>
        ///下面是目标地图的信息
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MapId {
          get { return mapId_; }
          set {
            mapId_ = value;
          }
        }

        /// <summary>Field number for the "posX" field.</summary>
        public const int PosXFieldNumber = 2;
        private uint posX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosX {
          get { return posX_; }
          set {
            posX_ = value;
          }
        }

        /// <summary>Field number for the "posY" field.</summary>
        public const int PosYFieldNumber = 3;
        private uint posY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosY {
          get { return posY_; }
          set {
            posY_ = value;
          }
        }

        /// <summary>Field number for the "offX" field.</summary>
        public const int OffXFieldNumber = 4;
        private float offX_;
        /// <summary>
        ///偏转坐标，不大于屏幕
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float OffX {
          get { return offX_; }
          set {
            offX_ = value;
          }
        }

        /// <summary>Field number for the "offY" field.</summary>
        public const int OffYFieldNumber = 5;
        private float offY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float OffY {
          get { return offY_; }
          set {
            offY_ = value;
          }
        }

        /// <summary>Field number for the "rangeX" field.</summary>
        public const int RangeXFieldNumber = 6;
        private int rangeX_;
        /// <summary>
        ///范围
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RangeX {
          get { return rangeX_; }
          set {
            rangeX_ = value;
          }
        }

        /// <summary>Field number for the "rangeY" field.</summary>
        public const int RangeYFieldNumber = 7;
        private int rangeY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RangeY {
          get { return rangeY_; }
          set {
            rangeY_ = value;
          }
        }

        /// <summary>Field number for the "condId" field.</summary>
        public const int CondIdFieldNumber = 8;
        private uint condId_;
        /// <summary>
        ///条件表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CondId {
          get { return condId_; }
          set {
            condId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MapId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(MapId);
          }
          if (PosX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PosX);
          }
          if (PosY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PosY);
          }
          if (OffX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(OffX);
          }
          if (OffY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(OffY);
          }
          if (RangeX != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(RangeX);
          }
          if (RangeY != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(RangeY);
          }
          if (CondId != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(CondId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MapId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
          }
          if (PosX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
          }
          if (PosY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
          }
          if (OffX != 0F) {
            size += 1 + 4;
          }
          if (OffY != 0F) {
            size += 1 + 4;
          }
          if (RangeX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeX);
          }
          if (RangeY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeY);
          }
          if (CondId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MapId = input.ReadUInt32();
                break;
              }
              case 16: {
                PosX = input.ReadUInt32();
                break;
              }
              case 24: {
                PosY = input.ReadUInt32();
                break;
              }
              case 37: {
                OffX = input.ReadFloat();
                break;
              }
              case 45: {
                OffY = input.ReadFloat();
                break;
              }
              case 48: {
                RangeX = input.ReadInt32();
                break;
              }
              case 56: {
                RangeY = input.ReadInt32();
                break;
              }
              case 64: {
                CondId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///固定npc
      /// </summary>
      public sealed class RigidNpc : pb::IMessage {
        private static readonly pb::MessageParser<RigidNpc> _parser = new pb::MessageParser<RigidNpc>(() => new RigidNpc());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RigidNpc> Parser { get { return _parser; } }

        /// <summary>Field number for the "npcs" field.</summary>
        public const int NpcsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Packet.BrushInfo.Types.RigidNpc.Types.NpcUnit> _repeated_npcs_codec
            = pb::FieldCodec.ForMessage(10, global::Packet.BrushInfo.Types.RigidNpc.Types.NpcUnit.Parser);
        private readonly pbc::RepeatedField<global::Packet.BrushInfo.Types.RigidNpc.Types.NpcUnit> npcs_ = new pbc::RepeatedField<global::Packet.BrushInfo.Types.RigidNpc.Types.NpcUnit>();
        /// <summary>
        ///npc数组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.BrushInfo.Types.RigidNpc.Types.NpcUnit> Npcs {
          get { return npcs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          npcs_.WriteTo(output, _repeated_npcs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += npcs_.CalculateSize(_repeated_npcs_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the RigidNpc message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static class Types {
          public sealed class NpcUnit : pb::IMessage {
            private static readonly pb::MessageParser<NpcUnit> _parser = new pb::MessageParser<NpcUnit>(() => new NpcUnit());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NpcUnit> Parser { get { return _parser; } }

            /// <summary>Field number for the "npcId" field.</summary>
            public const int NpcIdFieldNumber = 1;
            private uint npcId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NpcId {
              get { return npcId_; }
              set {
                npcId_ = value;
              }
            }

            /// <summary>Field number for the "width" field.</summary>
            public const int WidthFieldNumber = 2;
            private uint width_;
            /// <summary>
            ///区域宽
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Width {
              get { return width_; }
              set {
                width_ = value;
              }
            }

            /// <summary>Field number for the "height" field.</summary>
            public const int HeightFieldNumber = 3;
            private uint height_;
            /// <summary>
            ///区域高
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Height {
              get { return height_; }
              set {
                height_ = value;
              }
            }

            /// <summary>Field number for the "offX" field.</summary>
            public const int OffXFieldNumber = 4;
            private int offX_;
            /// <summary>
            ///x偏移
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int OffX {
              get { return offX_; }
              set {
                offX_ = value;
              }
            }

            /// <summary>Field number for the "offY" field.</summary>
            public const int OffYFieldNumber = 5;
            private int offY_;
            /// <summary>
            ///y偏移
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int OffY {
              get { return offY_; }
              set {
                offY_ = value;
              }
            }

            /// <summary>Field number for the "rotaX" field.</summary>
            public const int RotaXFieldNumber = 6;
            private float rotaX_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaX {
              get { return rotaX_; }
              set {
                rotaX_ = value;
              }
            }

            /// <summary>Field number for the "rotaY" field.</summary>
            public const int RotaYFieldNumber = 7;
            private float rotaY_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaY {
              get { return rotaY_; }
              set {
                rotaY_ = value;
              }
            }

            /// <summary>Field number for the "rotaZ" field.</summary>
            public const int RotaZFieldNumber = 8;
            private float rotaZ_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaZ {
              get { return rotaZ_; }
              set {
                rotaZ_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NpcId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(NpcId);
              }
              if (Width != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Width);
              }
              if (Height != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Height);
              }
              if (OffX != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(OffX);
              }
              if (OffY != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(OffY);
              }
              if (RotaX != 0F) {
                output.WriteRawTag(53);
                output.WriteFloat(RotaX);
              }
              if (RotaY != 0F) {
                output.WriteRawTag(61);
                output.WriteFloat(RotaY);
              }
              if (RotaZ != 0F) {
                output.WriteRawTag(69);
                output.WriteFloat(RotaZ);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NpcId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
              }
              if (Width != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
              }
              if (Height != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
              }
              if (OffX != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffX);
              }
              if (OffY != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffY);
              }
              if (RotaX != 0F) {
                size += 1 + 4;
              }
              if (RotaY != 0F) {
                size += 1 + 4;
              }
              if (RotaZ != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    NpcId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Width = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Height = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    OffX = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    OffY = input.ReadInt32();
                    break;
                  }
                  case 53: {
                    RotaX = input.ReadFloat();
                    break;
                  }
                  case 61: {
                    RotaY = input.ReadFloat();
                    break;
                  }
                  case 69: {
                    RotaZ = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///世界boss
      /// </summary>
      public sealed class BossNpc : pb::IMessage {
        private static readonly pb::MessageParser<BossNpc> _parser = new pb::MessageParser<BossNpc>(() => new BossNpc());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BossNpc> Parser { get { return _parser; } }

        /// <summary>Field number for the "npcs" field.</summary>
        public const int NpcsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Packet.BrushInfo.Types.BossNpc.Types.NpcUnit> _repeated_npcs_codec
            = pb::FieldCodec.ForMessage(10, global::Packet.BrushInfo.Types.BossNpc.Types.NpcUnit.Parser);
        private readonly pbc::RepeatedField<global::Packet.BrushInfo.Types.BossNpc.Types.NpcUnit> npcs_ = new pbc::RepeatedField<global::Packet.BrushInfo.Types.BossNpc.Types.NpcUnit>();
        /// <summary>
        ///npc数组
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.BrushInfo.Types.BossNpc.Types.NpcUnit> Npcs {
          get { return npcs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          npcs_.WriteTo(output, _repeated_npcs_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += npcs_.CalculateSize(_repeated_npcs_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BossNpc message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static class Types {
          public sealed class NpcUnit : pb::IMessage {
            private static readonly pb::MessageParser<NpcUnit> _parser = new pb::MessageParser<NpcUnit>(() => new NpcUnit());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<NpcUnit> Parser { get { return _parser; } }

            /// <summary>Field number for the "npcId" field.</summary>
            public const int NpcIdFieldNumber = 1;
            private uint npcId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint NpcId {
              get { return npcId_; }
              set {
                npcId_ = value;
              }
            }

            /// <summary>Field number for the "width" field.</summary>
            public const int WidthFieldNumber = 2;
            private uint width_;
            /// <summary>
            ///区域宽
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Width {
              get { return width_; }
              set {
                width_ = value;
              }
            }

            /// <summary>Field number for the "height" field.</summary>
            public const int HeightFieldNumber = 3;
            private uint height_;
            /// <summary>
            ///区域高
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Height {
              get { return height_; }
              set {
                height_ = value;
              }
            }

            /// <summary>Field number for the "offX" field.</summary>
            public const int OffXFieldNumber = 4;
            private int offX_;
            /// <summary>
            ///x偏移
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int OffX {
              get { return offX_; }
              set {
                offX_ = value;
              }
            }

            /// <summary>Field number for the "offY" field.</summary>
            public const int OffYFieldNumber = 5;
            private int offY_;
            /// <summary>
            ///y偏移
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int OffY {
              get { return offY_; }
              set {
                offY_ = value;
              }
            }

            /// <summary>Field number for the "rotaX" field.</summary>
            public const int RotaXFieldNumber = 6;
            private float rotaX_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaX {
              get { return rotaX_; }
              set {
                rotaX_ = value;
              }
            }

            /// <summary>Field number for the "rotaY" field.</summary>
            public const int RotaYFieldNumber = 7;
            private float rotaY_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaY {
              get { return rotaY_; }
              set {
                rotaY_ = value;
              }
            }

            /// <summary>Field number for the "rotaZ" field.</summary>
            public const int RotaZFieldNumber = 8;
            private float rotaZ_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float RotaZ {
              get { return rotaZ_; }
              set {
                rotaZ_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NpcId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(NpcId);
              }
              if (Width != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Width);
              }
              if (Height != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Height);
              }
              if (OffX != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(OffX);
              }
              if (OffY != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(OffY);
              }
              if (RotaX != 0F) {
                output.WriteRawTag(53);
                output.WriteFloat(RotaX);
              }
              if (RotaY != 0F) {
                output.WriteRawTag(61);
                output.WriteFloat(RotaY);
              }
              if (RotaZ != 0F) {
                output.WriteRawTag(69);
                output.WriteFloat(RotaZ);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NpcId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
              }
              if (Width != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
              }
              if (Height != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
              }
              if (OffX != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffX);
              }
              if (OffY != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffY);
              }
              if (RotaX != 0F) {
                size += 1 + 4;
              }
              if (RotaY != 0F) {
                size += 1 + 4;
              }
              if (RotaZ != 0F) {
                size += 1 + 4;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    NpcId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Width = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Height = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    OffX = input.ReadInt32();
                    break;
                  }
                  case 40: {
                    OffY = input.ReadInt32();
                    break;
                  }
                  case 53: {
                    RotaX = input.ReadFloat();
                    break;
                  }
                  case 61: {
                    RotaY = input.ReadFloat();
                    break;
                  }
                  case 69: {
                    RotaZ = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///随机npc
      /// </summary>
      public sealed class RandomNpc : pb::IMessage {
        private static readonly pb::MessageParser<RandomNpc> _parser = new pb::MessageParser<RandomNpc>(() => new RandomNpc());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RandomNpc> Parser { get { return _parser; } }

        /// <summary>Field number for the "npcGroup" field.</summary>
        public const int NpcGroupFieldNumber = 1;
        private uint npcGroup_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NpcGroup {
          get { return npcGroup_; }
          set {
            npcGroup_ = value;
          }
        }

        /// <summary>Field number for the "minNum" field.</summary>
        public const int MinNumFieldNumber = 2;
        private uint minNum_;
        /// <summary>
        ///随机个数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinNum {
          get { return minNum_; }
          set {
            minNum_ = value;
          }
        }

        /// <summary>Field number for the "maxNum" field.</summary>
        public const int MaxNumFieldNumber = 3;
        private uint maxNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxNum {
          get { return maxNum_; }
          set {
            maxNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NpcGroup != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(NpcGroup);
          }
          if (MinNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(MinNum);
          }
          if (MaxNum != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NpcGroup != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcGroup);
          }
          if (MinNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinNum);
          }
          if (MaxNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                NpcGroup = input.ReadUInt32();
                break;
              }
              case 16: {
                MinNum = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///战场安全区和战场阻挡墙
      /// </summary>
      public sealed class BattlefieldInfo : pb::IMessage {
        private static readonly pb::MessageParser<BattlefieldInfo> _parser = new pb::MessageParser<BattlefieldInfo>(() => new BattlefieldInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BattlefieldInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 1;
        private int width_;
        /// <summary>
        ///区域宽
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private int height_;
        /// <summary>
        ///区域高
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        /// <summary>Field number for the "offx" field.</summary>
        public const int OffxFieldNumber = 3;
        private int offx_;
        /// <summary>
        ///x偏移
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Offx {
          get { return offx_; }
          set {
            offx_ = value;
          }
        }

        /// <summary>Field number for the "offy" field.</summary>
        public const int OffyFieldNumber = 4;
        private int offy_;
        /// <summary>
        ///y偏移
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Offy {
          get { return offy_; }
          set {
            offy_ = value;
          }
        }

        /// <summary>Field number for the "camp" field.</summary>
        public const int CampFieldNumber = 5;
        private int camp_;
        /// <summary>
        ///阵营
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Camp {
          get { return camp_; }
          set {
            camp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Width != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Height);
          }
          if (Offx != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Offx);
          }
          if (Offy != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Offy);
          }
          if (Camp != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Camp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (Offx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offx);
          }
          if (Offy != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offy);
          }
          if (Camp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Width = input.ReadInt32();
                break;
              }
              case 16: {
                Height = input.ReadInt32();
                break;
              }
              case 24: {
                Offx = input.ReadInt32();
                break;
              }
              case 32: {
                Offy = input.ReadInt32();
                break;
              }
              case 40: {
                Camp = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class NpcCfg : pb::IMessage {
    private static readonly pb::MessageParser<NpcCfg> _parser = new pb::MessageParser<NpcCfg>(() => new NpcCfg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCfg> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1 固定  2 随机  （5 boss， boss 被单独塞入了不同的结构）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "BrushIndex" field.</summary>
    public const int BrushIndexFieldNumber = 2;
    private uint brushIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BrushIndex {
      get { return brushIndex_; }
      set {
        brushIndex_ = value;
      }
    }

    /// <summary>Field number for the "posInfos" field.</summary>
    public const int PosInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.NpcCfg.Types.PosInfo> _repeated_posInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.NpcCfg.Types.PosInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.NpcCfg.Types.PosInfo> posInfos_ = new pbc::RepeatedField<global::Packet.NpcCfg.Types.PosInfo>();
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.NpcCfg.Types.PosInfo> PosInfos {
      get { return posInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (BrushIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BrushIndex);
      }
      posInfos_.WriteTo(output, _repeated_posInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (BrushIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BrushIndex);
      }
      size += posInfos_.CalculateSize(_repeated_posInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            BrushIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            posInfos_.AddEntriesFrom(input, _repeated_posInfos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NpcCfg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PosInfo : pb::IMessage {
        private static readonly pb::MessageParser<PosInfo> _parser = new pb::MessageParser<PosInfo>(() => new PosInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PosInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "posX" field.</summary>
        public const int PosXFieldNumber = 1;
        private uint posX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosX {
          get { return posX_; }
          set {
            posX_ = value;
          }
        }

        /// <summary>Field number for the "posY" field.</summary>
        public const int PosYFieldNumber = 2;
        private uint posY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosY {
          get { return posY_; }
          set {
            posY_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PosX != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PosX);
          }
          if (PosY != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PosY);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PosX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
          }
          if (PosY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PosX = input.ReadUInt32();
                break;
              }
              case 16: {
                PosY = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CondPair : pb::IMessage {
    private static readonly pb::MessageParser<CondPair> _parser = new pb::MessageParser<CondPair>(() => new CondPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CondPair> Parser { get { return _parser; } }

    /// <summary>Field number for the "condId" field.</summary>
    public const int CondIdFieldNumber = 1;
    private uint condId_;
    /// <summary>
    ///条件id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CondId {
      get { return condId_; }
      set {
        condId_ = value;
      }
    }

    /// <summary>Field number for the "condParam" field.</summary>
    public const int CondParamFieldNumber = 2;
    private uint condParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CondParam {
      get { return condParam_; }
      set {
        condParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CondId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CondId);
      }
      if (CondParam != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CondParam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CondId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondId);
      }
      if (CondParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondParam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CondId = input.ReadUInt32();
            break;
          }
          case 16: {
            CondParam = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TriggerMonsterCondContent : pb::IMessage {
    private static readonly pb::MessageParser<TriggerMonsterCondContent> _parser = new pb::MessageParser<TriggerMonsterCondContent>(() => new TriggerMonsterCondContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerMonsterCondContent> Parser { get { return _parser; } }

    /// <summary>Field number for the "condId" field.</summary>
    public const int CondIdFieldNumber = 1;
    private uint condId_;
    /// <summary>
    ///条件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CondId {
      get { return condId_; }
      set {
        condId_ = value;
      }
    }

    /// <summary>Field number for the "orCond" field.</summary>
    public const int OrCondFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TriggerMonsterCondContent.Types.AndCond> _repeated_orCond_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TriggerMonsterCondContent.Types.AndCond.Parser);
    private readonly pbc::RepeatedField<global::Packet.TriggerMonsterCondContent.Types.AndCond> orCond_ = new pbc::RepeatedField<global::Packet.TriggerMonsterCondContent.Types.AndCond>();
    /// <summary>
    ///或条件组合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TriggerMonsterCondContent.Types.AndCond> OrCond {
      get { return orCond_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CondId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CondId);
      }
      orCond_.WriteTo(output, _repeated_orCond_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CondId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondId);
      }
      size += orCond_.CalculateSize(_repeated_orCond_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CondId = input.ReadUInt32();
            break;
          }
          case 18: {
            orCond_.AddEntriesFrom(input, _repeated_orCond_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TriggerMonsterCondContent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AndCond : pb::IMessage {
        private static readonly pb::MessageParser<AndCond> _parser = new pb::MessageParser<AndCond>(() => new AndCond());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AndCond> Parser { get { return _parser; } }

        /// <summary>Field number for the "conds" field.</summary>
        public const int CondsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Packet.CondPair> _repeated_conds_codec
            = pb::FieldCodec.ForMessage(10, global::Packet.CondPair.Parser);
        private readonly pbc::RepeatedField<global::Packet.CondPair> conds_ = new pbc::RepeatedField<global::Packet.CondPair>();
        /// <summary>
        ///并且的条件
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.CondPair> Conds {
          get { return conds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conds_.WriteTo(output, _repeated_conds_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conds_.CalculateSize(_repeated_conds_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                conds_.AddEntriesFrom(input, _repeated_conds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///怪物
  /// </summary>
  public sealed class MonsterTuple : pb::IMessage {
    private static readonly pb::MessageParser<MonsterTuple> _parser = new pb::MessageParser<MonsterTuple>(() => new MonsterTuple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterTuple> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commonCd" field.</summary>
    public const int CommonCdFieldNumber = 3;
    private uint commonCd_;
    /// <summary>
    ///公共冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CommonCd {
      get { return commonCd_; }
      set {
        commonCd_ = value;
      }
    }

    /// <summary>Field number for the "monsters" field.</summary>
    public const int MonstersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.MonsterTuple.Types.MonsterPair> _repeated_monsters_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.MonsterTuple.Types.MonsterPair.Parser);
    private readonly pbc::RepeatedField<global::Packet.MonsterTuple.Types.MonsterPair> monsters_ = new pbc::RepeatedField<global::Packet.MonsterTuple.Types.MonsterPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MonsterTuple.Types.MonsterPair> Monsters {
      get { return monsters_; }
    }

    /// <summary>Field number for the "poses" field.</summary>
    public const int PosesFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_poses_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> poses_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///队形
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Poses {
      get { return poses_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 6;
    private uint num_;
    /// <summary>
    ///次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "totalRate" field.</summary>
    public const int TotalRateFieldNumber = 7;
    private uint totalRate_;
    /// <summary>
    ///编辑器可以给算出来也可以读取的时候服务器自己算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRate {
      get { return totalRate_; }
      set {
        totalRate_ = value;
      }
    }

    /// <summary>Field number for the "hasRoleNumMonsters" field.</summary>
    public const int HasRoleNumMonstersFieldNumber = 8;
    private bool hasRoleNumMonsters_;
    /// <summary>
    ///功能 #109221【主干】【合EDG分支】【遇敌组】当出现1级宝宝时，1级宝宝的数量随玩家队伍中玩家数量决定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoleNumMonsters {
      get { return hasRoleNumMonsters_; }
      set {
        hasRoleNumMonsters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CommonCd != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CommonCd);
      }
      monsters_.WriteTo(output, _repeated_monsters_codec);
      poses_.WriteTo(output, _repeated_poses_codec);
      if (Num != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Num);
      }
      if (TotalRate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalRate);
      }
      if (HasRoleNumMonsters != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasRoleNumMonsters);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CommonCd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommonCd);
      }
      size += monsters_.CalculateSize(_repeated_monsters_codec);
      size += poses_.CalculateSize(_repeated_poses_codec);
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (TotalRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRate);
      }
      if (HasRoleNumMonsters != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CommonCd = input.ReadUInt32();
            break;
          }
          case 34: {
            monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
            break;
          }
          case 42:
          case 40: {
            poses_.AddEntriesFrom(input, _repeated_poses_codec);
            break;
          }
          case 48: {
            Num = input.ReadUInt32();
            break;
          }
          case 56: {
            TotalRate = input.ReadUInt32();
            break;
          }
          case 64: {
            HasRoleNumMonsters = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonsterTuple message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MonsterPair : pb::IMessage {
        private static readonly pb::MessageParser<MonsterPair> _parser = new pb::MessageParser<MonsterPair>(() => new MonsterPair());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MonsterPair> Parser { get { return _parser; } }

        /// <summary>Field number for the "monsterInfoId" field.</summary>
        public const int MonsterInfoIdFieldNumber = 1;
        private uint monsterInfoId_;
        /// <summary>
        ///怪物的infoId
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MonsterInfoId {
          get { return monsterInfoId_; }
          set {
            monsterInfoId_ = value;
          }
        }

        /// <summary>Field number for the "rate" field.</summary>
        public const int RateFieldNumber = 2;
        private uint rate_;
        /// <summary>
        ///权重
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Rate {
          get { return rate_; }
          set {
            rate_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MonsterInfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(MonsterInfoId);
          }
          if (Rate != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Rate);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MonsterInfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterInfoId);
          }
          if (Rate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rate);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MonsterInfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                Rate = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///单独放在一个文件 monstertuples.bin
  /// </summary>
  public sealed class MonsterTupleCfg : pb::IMessage {
    private static readonly pb::MessageParser<MonsterTupleCfg> _parser = new pb::MessageParser<MonsterTupleCfg>(() => new MonsterTupleCfg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterTupleCfg> Parser { get { return _parser; } }

    /// <summary>Field number for the "mt" field.</summary>
    public const int MtFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MonsterTuple> _repeated_mt_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MonsterTuple.Parser);
    private readonly pbc::RepeatedField<global::Packet.MonsterTuple> mt_ = new pbc::RepeatedField<global::Packet.MonsterTuple>();
    /// <summary>
    ///客户端不支持map 先用数组吧 服务器读到内存再自己变换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MonsterTuple> Mt {
      get { return mt_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mt_.WriteTo(output, _repeated_mt_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mt_.CalculateSize(_repeated_mt_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mt_.AddEntriesFrom(input, _repeated_mt_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MonsterGrp : pb::IMessage {
    private static readonly pb::MessageParser<MonsterGrp> _parser = new pb::MessageParser<MonsterGrp>(() => new MonsterGrp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterGrp> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///本组自己的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 2;
    private uint maxNum_;
    /// <summary>
    ///最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 4;
    private string comment_ = "";
    /// <summary>
    ///备注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_sceneId_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> sceneId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///就叫这个吧，战斗场景id对应战斗场景表的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SceneId {
      get { return sceneId_; }
    }

    /// <summary>Field number for the "mgc" field.</summary>
    public const int MgcFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.MonsterGrp.Types.MopnsterGrpCont> _repeated_mgc_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.MonsterGrp.Types.MopnsterGrpCont.Parser);
    private readonly pbc::RepeatedField<global::Packet.MonsterGrp.Types.MopnsterGrpCont> mgc_ = new pbc::RepeatedField<global::Packet.MonsterGrp.Types.MopnsterGrpCont>();
    /// <summary>
    ///遇敌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MonsterGrp.Types.MopnsterGrpCont> Mgc {
      get { return mgc_; }
    }

    /// <summary>Field number for the "minNum" field.</summary>
    public const int MinNumFieldNumber = 7;
    private uint minNum_;
    /// <summary>
    ///怪物的最小数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinNum {
      get { return minNum_; }
      set {
        minNum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxNum);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Comment);
      }
      sceneId_.WriteTo(output, _repeated_sceneId_codec);
      mgc_.WriteTo(output, _repeated_mgc_codec);
      if (MinNum != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MinNum);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNum);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      size += sceneId_.CalculateSize(_repeated_sceneId_codec);
      size += mgc_.CalculateSize(_repeated_mgc_codec);
      if (MinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinNum);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxNum = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Comment = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            sceneId_.AddEntriesFrom(input, _repeated_sceneId_codec);
            break;
          }
          case 50: {
            mgc_.AddEntriesFrom(input, _repeated_mgc_codec);
            break;
          }
          case 56: {
            MinNum = input.ReadUInt32();
            break;
          }
          case 64: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonsterGrp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MopnsterGrpCont : pb::IMessage {
        private static readonly pb::MessageParser<MopnsterGrpCont> _parser = new pb::MessageParser<MopnsterGrpCont>(() => new MopnsterGrpCont());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MopnsterGrpCont> Parser { get { return _parser; } }

        /// <summary>Field number for the "cond" field.</summary>
        public const int CondFieldNumber = 1;
        private uint cond_;
        /// <summary>
        ///遇敌条件 条件id 因为条件放在另一张表 用id吧
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Cond {
          get { return cond_; }
          set {
            cond_ = value;
          }
        }

        /// <summary>Field number for the "mtid" field.</summary>
        public const int MtidFieldNumber = 2;
        private uint mtid_;
        /// <summary>
        ///MonsterTuple id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Mtid {
          get { return mtid_; }
          set {
            mtid_ = value;
          }
        }

        /// <summary>Field number for the "rate" field.</summary>
        public const int RateFieldNumber = 3;
        private uint rate_;
        /// <summary>
        ///权重
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Rate {
          get { return rate_; }
          set {
            rate_ = value;
          }
        }

        /// <summary>Field number for the "mtindex" field.</summary>
        public const int MtindexFieldNumber = 4;
        private int mtindex_;
        /// <summary>
        ///monster tuple下标客户端 编辑器可以不管
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mtindex {
          get { return mtindex_; }
          set {
            mtindex_ = value;
          }
        }

        /// <summary>Field number for the "condIndex" field.</summary>
        public const int CondIndexFieldNumber = 5;
        private int condIndex_;
        /// <summary>
        ///cond表的下标 编辑器客户端不管`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CondIndex {
          get { return condIndex_; }
          set {
            condIndex_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Cond != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Cond);
          }
          if (Mtid != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Mtid);
          }
          if (Rate != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Rate);
          }
          if (Mtindex != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Mtindex);
          }
          if (CondIndex != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(CondIndex);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Cond != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cond);
          }
          if (Mtid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mtid);
          }
          if (Rate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rate);
          }
          if (Mtindex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mtindex);
          }
          if (CondIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CondIndex);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Cond = input.ReadUInt32();
                break;
              }
              case 16: {
                Mtid = input.ReadUInt32();
                break;
              }
              case 24: {
                Rate = input.ReadUInt32();
                break;
              }
              case 32: {
                Mtindex = input.ReadInt32();
                break;
              }
              case 40: {
                CondIndex = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///单独放一个配置文件里 monstergrps.bin
  /// </summary>
  public sealed class MonsterGrpCfg : pb::IMessage {
    private static readonly pb::MessageParser<MonsterGrpCfg> _parser = new pb::MessageParser<MonsterGrpCfg>(() => new MonsterGrpCfg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterGrpCfg> Parser { get { return _parser; } }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MonsterGrp> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MonsterGrp.Parser);
    private readonly pbc::RepeatedField<global::Packet.MonsterGrp> groups_ = new pbc::RepeatedField<global::Packet.MonsterGrp>();
    /// <summary>
    ///客户端不支持map 先用数组吧 服务器读到内存再自己变换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MonsterGrp> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单独放在一个配置文件里conds.bin
  /// </summary>
  public sealed class CondCfg : pb::IMessage {
    private static readonly pb::MessageParser<CondCfg> _parser = new pb::MessageParser<CondCfg>(() => new CondCfg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CondCfg> Parser { get { return _parser; } }

    /// <summary>Field number for the "condMap" field.</summary>
    public const int CondMapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TriggerMonsterCondContent> _repeated_condMap_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TriggerMonsterCondContent.Parser);
    private readonly pbc::RepeatedField<global::Packet.TriggerMonsterCondContent> condMap_ = new pbc::RepeatedField<global::Packet.TriggerMonsterCondContent>();
    /// <summary>
    ///客户端不支持map 先用数组吧 服务器读到内存再自己变换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TriggerMonsterCondContent> CondMap {
      get { return condMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      condMap_.WriteTo(output, _repeated_condMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += condMap_.CalculateSize(_repeated_condMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            condMap_.AddEntriesFrom(input, _repeated_condMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TriggerMonsterGrp : pb::IMessage {
    private static readonly pb::MessageParser<TriggerMonsterGrp> _parser = new pb::MessageParser<TriggerMonsterGrp>(() => new TriggerMonsterGrp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerMonsterGrp> Parser { get { return _parser; } }

    /// <summary>Field number for the "monsterGrpId" field.</summary>
    public const int MonsterGrpIdFieldNumber = 1;
    private uint monsterGrpId_;
    /// <summary>
    ///怪物组的id 因为怪物组合要写在另一张表里这里配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterGrpId {
      get { return monsterGrpId_; }
      set {
        monsterGrpId_ = value;
      }
    }

    /// <summary>Field number for the "minRate" field.</summary>
    public const int MinRateFieldNumber = 2;
    private uint minRate_;
    /// <summary>
    ///最小概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinRate {
      get { return minRate_; }
      set {
        minRate_ = value;
      }
    }

    /// <summary>Field number for the "maxRate" field.</summary>
    public const int MaxRateFieldNumber = 3;
    private uint maxRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxRate {
      get { return maxRate_; }
      set {
        maxRate_ = value;
      }
    }

    /// <summary>Field number for the "continueRate" field.</summary>
    public const int ContinueRateFieldNumber = 4;
    private uint continueRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinueRate {
      get { return continueRate_; }
      set {
        continueRate_ = value;
      }
    }

    /// <summary>Field number for the "continueIndex" field.</summary>
    public const int ContinueIndexFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_continueIndex_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> continueIndex_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ContinueIndex {
      get { return continueIndex_; }
    }

    /// <summary>Field number for the "monstergroupIndex" field.</summary>
    public const int MonstergroupIndexFieldNumber = 6;
    private int monstergroupIndex_;
    /// <summary>
    ///怪物组index客户端编辑器不需要管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonstergroupIndex {
      get { return monstergroupIndex_; }
      set {
        monstergroupIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterGrpId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonsterGrpId);
      }
      if (MinRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MinRate);
      }
      if (MaxRate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxRate);
      }
      if (ContinueRate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ContinueRate);
      }
      continueIndex_.WriteTo(output, _repeated_continueIndex_codec);
      if (MonstergroupIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MonstergroupIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterGrpId);
      }
      if (MinRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRate);
      }
      if (MaxRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRate);
      }
      if (ContinueRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinueRate);
      }
      size += continueIndex_.CalculateSize(_repeated_continueIndex_codec);
      if (MonstergroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonstergroupIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MonsterGrpId = input.ReadUInt32();
            break;
          }
          case 16: {
            MinRate = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxRate = input.ReadUInt32();
            break;
          }
          case 32: {
            ContinueRate = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            continueIndex_.AddEntriesFrom(input, _repeated_continueIndex_codec);
            break;
          }
          case 48: {
            MonstergroupIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
