// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: towntask.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 8800+
  /// </summary>
  public enum CmdTownTask {
    None = 0,
    /// <summary>
    ///城镇任务数据通知
    /// </summary>
    InfoNtf = 8801,
    /// <summary>
    ///请求获取城镇任务数据，返回CmdTownTask_InfoNtf
    /// </summary>
    GetInfoReq = 8802,
    /// <summary>
    ///请求提交任务
    /// </summary>
    CommitReq = 8803,
    CommitRes = 8804,
    /// <summary>
    ///请求刷新任务
    /// </summary>
    RefreshTaskReq = 8805,
    RefreshTaskRes = 8806,
    /// <summary>
    ///请求领取贡献奖励
    /// </summary>
    TakeAwardReq = 8807,
    TakeAwardRes = 8808,
  }

  public enum ErrorTownTask {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///配置表参数出错
    /// </summary>
    CsvErr = 8801,
    /// <summary>
    ///未找到该任务
    /// </summary>
    NoFoundTask = 8802,
    /// <summary>
    ///该任务已完成
    /// </summary>
    IsFinish = 8803,
    /// <summary>
    ///提交物品不符合要求
    /// </summary>
    ItemIdErr = 8804,
    /// <summary>
    ///NPC好感度不足，不能完成该城镇任务
    /// </summary>
    Vitality = 8805,
    /// <summary>
    ///NPC好感等级不足，不能完成该城镇任务
    /// </summary>
    Favorability = 8806,
  }

  public enum TownTaskActiveReason {
    None = 0,
    /// <summary>
    ///提交城镇任务
    /// </summary>
    Task = 8801,
    /// <summary>
    ///城镇任务贡献奖励
    /// </summary>
    Contribute = 8802,
    /// <summary>
    ///刷新城镇任务
    /// </summary>
    RefreshTask = 8803,
  }

  #endregion

  #region Messages
  /// <summary>
  ///任务数据
  /// </summary>
  public sealed class TownTaskUnit : pb::IMessage {
    private static readonly pb::MessageParser<TownTaskUnit> _parser = new pb::MessageParser<TownTaskUnit>(() => new TownTaskUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TownTaskUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private uint taskId_;
    /// <summary>
    ///任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 3;
    private bool finish_;
    /// <summary>
    ///true-该任务已完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (Finish != false) {
        output.WriteRawTag(24);
        output.WriteBool(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Finish != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            Finish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///城镇数据
  /// </summary>
  public sealed class TownTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<TownTaskInfo> _parser = new pb::MessageParser<TownTaskInfo>(() => new TownTaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TownTaskInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "townId" field.</summary>
    public const int TownIdFieldNumber = 1;
    private uint townId_;
    /// <summary>
    ///城镇ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TownId {
      get { return townId_; }
      set {
        townId_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TownTaskUnit> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TownTaskUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.TownTaskUnit> taskList_ = new pbc::RepeatedField<global::Packet.TownTaskUnit>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TownTaskUnit> TaskList {
      get { return taskList_; }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///城镇等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///城镇经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "awardTake" field.</summary>
    public const int AwardTakeFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_awardTake_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> awardTake_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已领取贡献奖励列表，infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardTake {
      get { return awardTake_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TownId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TownId);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
      awardTake_.WriteTo(output, _repeated_awardTake_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TownId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TownId);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      size += awardTake_.CalculateSize(_repeated_awardTake_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TownId = input.ReadUInt32();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            awardTake_.AddEntriesFrom(input, _repeated_awardTake_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///城镇任务数据通知
  /// </summary>
  public sealed class CmdTownTaskInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskInfoNtf> _parser = new pb::MessageParser<CmdTownTaskInfoNtf>(() => new CmdTownTaskInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "townTaskList" field.</summary>
    public const int TownTaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TownTaskInfo> _repeated_townTaskList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TownTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TownTaskInfo> townTaskList_ = new pbc::RepeatedField<global::Packet.TownTaskInfo>();
    /// <summary>
    ///所有城镇的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TownTaskInfo> TownTaskList {
      get { return townTaskList_; }
    }

    /// <summary>Field number for the "lastRefreshTime" field.</summary>
    public const int LastRefreshTimeFieldNumber = 2;
    private uint lastRefreshTime_;
    /// <summary>
    ///任务下次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRefreshTime {
      get { return lastRefreshTime_; }
      set {
        lastRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "activated" field.</summary>
    public const int ActivatedFieldNumber = 3;
    private bool activated_;
    /// <summary>
    ///城镇任务已激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Activated {
      get { return activated_; }
      set {
        activated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      townTaskList_.WriteTo(output, _repeated_townTaskList_codec);
      if (LastRefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRefreshTime);
      }
      if (Activated != false) {
        output.WriteRawTag(24);
        output.WriteBool(Activated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += townTaskList_.CalculateSize(_repeated_townTaskList_codec);
      if (LastRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRefreshTime);
      }
      if (Activated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            townTaskList_.AddEntriesFrom(input, _repeated_townTaskList_codec);
            break;
          }
          case 16: {
            LastRefreshTime = input.ReadUInt32();
            break;
          }
          case 24: {
            Activated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获取城镇任务数据，返回CmdTownTask_InfoNtf
  /// </summary>
  public sealed class CmdTownTaskGetInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskGetInfoReq> _parser = new pb::MessageParser<CmdTownTaskGetInfoReq>(() => new CmdTownTaskGetInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskGetInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求提交任务
  /// </summary>
  public sealed class CmdTownTaskCommitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskCommitReq> _parser = new pb::MessageParser<CmdTownTaskCommitReq>(() => new CmdTownTaskCommitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskCommitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "townId" field.</summary>
    public const int TownIdFieldNumber = 1;
    private uint townId_;
    /// <summary>
    ///城镇ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TownId {
      get { return townId_; }
      set {
        townId_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    ///表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "itemUuid" field.</summary>
    public const int ItemUuidFieldNumber = 3;
    private ulong itemUuid_;
    /// <summary>
    ///提交装备时需传uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUuid {
      get { return itemUuid_; }
      set {
        itemUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TownId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TownId);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (ItemUuid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ItemUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TownId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TownId);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (ItemUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TownId = input.ReadUInt32();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemUuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTownTaskCommitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskCommitRes> _parser = new pb::MessageParser<CmdTownTaskCommitRes>(() => new CmdTownTaskCommitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskCommitRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "townId" field.</summary>
    public const int TownIdFieldNumber = 1;
    private uint townId_;
    /// <summary>
    ///城镇ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TownId {
      get { return townId_; }
      set {
        townId_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    ///表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///城镇等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///城镇经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "roleValue" field.</summary>
    public const int RoleValueFieldNumber = 5;
    private uint roleValue_;
    /// <summary>
    ///玩家好感点数（体力）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleValue {
      get { return roleValue_; }
      set {
        roleValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TownId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TownId);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
      if (RoleValue != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoleValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TownId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TownId);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (RoleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TownId = input.ReadUInt32();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
          case 40: {
            RoleValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求刷新任务
  /// </summary>
  public sealed class CmdTownTaskRefreshTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskRefreshTaskReq> _parser = new pb::MessageParser<CmdTownTaskRefreshTaskReq>(() => new CmdTownTaskRefreshTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskRefreshTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "townId" field.</summary>
    public const int TownIdFieldNumber = 1;
    private uint townId_;
    /// <summary>
    ///城镇ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TownId {
      get { return townId_; }
      set {
        townId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TownId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TownId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TownId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TownId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TownId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTownTaskRefreshTaskRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskRefreshTaskRes> _parser = new pb::MessageParser<CmdTownTaskRefreshTaskRes>(() => new CmdTownTaskRefreshTaskRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskRefreshTaskRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "townId" field.</summary>
    public const int TownIdFieldNumber = 1;
    private uint townId_;
    /// <summary>
    ///城镇ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TownId {
      get { return townId_; }
      set {
        townId_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TownTaskUnit> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TownTaskUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.TownTaskUnit> taskList_ = new pbc::RepeatedField<global::Packet.TownTaskUnit>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TownTaskUnit> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TownId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TownId);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TownId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TownId);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TownId = input.ReadUInt32();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取贡献奖励
  /// </summary>
  public sealed class CmdTownTaskTakeAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskTakeAwardReq> _parser = new pb::MessageParser<CmdTownTaskTakeAwardReq>(() => new CmdTownTaskTakeAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskTakeAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///infoID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "getAll" field.</summary>
    public const int GetAllFieldNumber = 2;
    private bool getAll_;
    /// <summary>
    ///true-一键领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GetAll {
      get { return getAll_; }
      set {
        getAll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (GetAll != false) {
        output.WriteRawTag(16);
        output.WriteBool(GetAll);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (GetAll != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            GetAll = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTownTaskTakeAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTownTaskTakeAwardRes> _parser = new pb::MessageParser<CmdTownTaskTakeAwardRes>(() => new CmdTownTaskTakeAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTownTaskTakeAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_infoId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> infoId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///领取的奖励infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InfoId {
      get { return infoId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoId_.WriteTo(output, _repeated_infoId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoId_.CalculateSize(_repeated_infoId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            infoId_.AddEntriesFrom(input, _repeated_infoId_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
