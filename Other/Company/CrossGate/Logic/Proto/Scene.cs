// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdScene {
    None = 0,
    /// <summary>
    ///进入场景服 gateway 发给场景服
    /// </summary>
    EnterGameReq = 1400,
    /// <summary>
    ///游戏服告诉gateway 场景服，或者场景服要告诉gateway 切换场景服
    /// </summary>
    SwitchSceneReq = 1401,
    CreateRole = 1402,
  }

  public enum ErrorScene {
    None = 0,
    NoMemForRole = 1,
  }

  #endregion

  #region Messages
  public sealed class CmdSceneEnterGameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSceneEnterGameReq> _parser = new pb::MessageParser<CmdSceneEnterGameReq>(() => new CmdSceneEnterGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSceneEnterGameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 2;
    private bool first_;
    /// <summary>
    ///是不是第一次进入场景服 true是进入场景服 false是切场景服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 3;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (First != false) {
        output.WriteRawTag(16);
        output.WriteBool(First);
      }
      if (MapId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MapId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (First != false) {
        size += 1 + 1;
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            First = input.ReadBool();
            break;
          }
          case 24: {
            MapId = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSceneSwitchSceneReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSceneSwitchSceneReq> _parser = new pb::MessageParser<CmdSceneSwitchSceneReq>(() => new CmdSceneSwitchSceneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSceneSwitchSceneReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "fromGamesvr" field.</summary>
    public const int FromGamesvrFieldNumber = 2;
    private bool fromGamesvr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromGamesvr {
      get { return fromGamesvr_; }
      set {
        fromGamesvr_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
      if (FromGamesvr != false) {
        output.WriteRawTag(16);
        output.WriteBool(FromGamesvr);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (FromGamesvr != false) {
        size += 1 + 1;
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
          case 16: {
            FromGamesvr = input.ReadBool();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSceneCreateRole : pb::IMessage {
    private static readonly pb::MessageParser<CmdSceneCreateRole> _parser = new pb::MessageParser<CmdSceneCreateRole>(() => new CmdSceneCreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSceneCreateRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 3;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MapId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MapId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
