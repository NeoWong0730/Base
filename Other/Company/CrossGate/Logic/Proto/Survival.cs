// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: survival.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///生存竞技场模块 协议号5900开始
  /// </summary>
  public enum CmdSurvival {
    None = 0,
    /// <summary>
    ///请求主面板数据
    /// </summary>
    InfoReq = 5901,
    InfoRes = 5902,
    /// <summary>
    ///请求关闭主面板
    /// </summary>
    MainPanelCloseReq = 5903,
    /// <summary>
    ///请求消息标记设置(无返回)
    /// </summary>
    SetMsgFlagReq = 5905,
    /// <summary>
    ///战斗结算
    /// </summary>
    NotifyFightEnd = 5906,
    /// <summary>
    ///队伍成员战绩通知
    /// </summary>
    NotifyTeamMemberScore = 5907,
    /// <summary>
    ///请求队伍成员战绩
    /// </summary>
    TeamMemberScoreReq = 5908,
  }

  public enum ErrorSurvival {
    None = 0,
    /// <summary>
    ///活动未开始
    /// </summary>
    NotStart = 5901,
    /// <summary>
    ///活动不在准备阶段
    /// </summary>
    NotInReady = 5902,
    /// <summary>
    ///错误的分组
    /// </summary>
    ErrorThird = 5903,
    /// <summary>
    ///未找到活动地图
    /// </summary>
    NotFindMap = 5904,
    /// <summary>
    ///准备阶段还未结束
    /// </summary>
    InReadyNotEnd = 5905,
    /// <summary>
    ///等级未到40
    /// </summary>
    Lesser40Level5906 = 5906,
    /// <summary>
    ///匹配类型错误
    /// </summary>
    MatchTypeErr = 5907,
  }

  public enum SurvivalItemReason {
    None = 0,
    /// <summary>
    ///生存竞技场战斗奖励
    /// </summary>
    FightReward = 5901,
    /// <summary>
    ///生存竞技场排行奖励
    /// </summary>
    RankReward = 5902,
    /// <summary>
    ///生存竞技场挂机奖励
    /// </summary>
    HangupReward = 5903,
  }

  public enum SurvivalMsgType {
    /// <summary>
    ///己方赢
    /// </summary>
    MsgTypeFriendWin = 0,
    /// <summary>
    ///己方输
    /// </summary>
    MsgTypeFriendFail = 1,
    /// <summary>
    ///战胜第一名
    /// </summary>
    MsgTypeWinFirst = 2,
    /// <summary>
    ///连胜3场
    /// </summary>
    MsgTypeLastWin3 = 3,
  }

  #endregion

  #region Messages
  public sealed class SurvivalTime : pb::IMessage {
    private static readonly pb::MessageParser<SurvivalTime> _parser = new pb::MessageParser<SurvivalTime>(() => new SurvivalTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurvivalTime> Parser { get { return _parser; } }

    /// <summary>Field number for the "opentime" field.</summary>
    public const int OpentimeFieldNumber = 1;
    private uint opentime_;
    /// <summary>
    ///活动开启时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Opentime {
      get { return opentime_; }
      set {
        opentime_ = value;
      }
    }

    /// <summary>Field number for the "readytime" field.</summary>
    public const int ReadytimeFieldNumber = 2;
    private uint readytime_;
    /// <summary>
    ///活动准备时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Readytime {
      get { return readytime_; }
      set {
        readytime_ = value;
      }
    }

    /// <summary>Field number for the "totalsec" field.</summary>
    public const int TotalsecFieldNumber = 3;
    private uint totalsec_;
    /// <summary>
    ///活动持续的时间(秒)含准备时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Totalsec {
      get { return totalsec_; }
      set {
        totalsec_ = value;
      }
    }

    /// <summary>Field number for the "grouptime" field.</summary>
    public const int GrouptimeFieldNumber = 4;
    private uint grouptime_;
    /// <summary>
    ///跨组开启时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grouptime {
      get { return grouptime_; }
      set {
        grouptime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opentime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Opentime);
      }
      if (Readytime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Readytime);
      }
      if (Totalsec != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Totalsec);
      }
      if (Grouptime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Grouptime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opentime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Opentime);
      }
      if (Readytime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Readytime);
      }
      if (Totalsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Totalsec);
      }
      if (Grouptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grouptime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Opentime = input.ReadUInt32();
            break;
          }
          case 16: {
            Readytime = input.ReadUInt32();
            break;
          }
          case 24: {
            Totalsec = input.ReadUInt32();
            break;
          }
          case 32: {
            Grouptime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SurvivalBase : pb::IMessage {
    private static readonly pb::MessageParser<SurvivalBase> _parser = new pb::MessageParser<SurvivalBase>(() => new SurvivalBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurvivalBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    ///排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 2;
    private uint join_;
    /// <summary>
    ///战斗次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private uint win_;
    /// <summary>
    ///胜场次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    ///战绩分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Join != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Join);
      }
      if (Win != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Win);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Join = input.ReadUInt32();
            break;
          }
          case 24: {
            Win = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SurvivalPlayer : pb::IMessage {
    private static readonly pb::MessageParser<SurvivalPlayer> _parser = new pb::MessageParser<SurvivalPlayer>(() => new SurvivalPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurvivalPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "changeScore" field.</summary>
    public const int ChangeScoreFieldNumber = 3;
    private uint changeScore_;
    /// <summary>
    ///战绩变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeScore {
      get { return changeScore_; }
      set {
        changeScore_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    ///当前战绩值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (ChangeScore != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChangeScore);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (ChangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeScore);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            ChangeScore = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SurvivalMsg : pb::IMessage {
    private static readonly pb::MessageParser<SurvivalMsg> _parser = new pb::MessageParser<SurvivalMsg>(() => new SurvivalMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurvivalMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    ///时间戳 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 2;
    private uint msgType_;
    /// <summary>
    ///消息类型SurvivalMsgType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "player1" field.</summary>
    public const int Player1FieldNumber = 3;
    private global::Packet.SurvivalPlayer player1_;
    /// <summary>
    ///前面的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SurvivalPlayer Player1 {
      get { return player1_; }
      set {
        player1_ = value;
      }
    }

    /// <summary>Field number for the "player2" field.</summary>
    public const int Player2FieldNumber = 4;
    private global::Packet.SurvivalPlayer player2_;
    /// <summary>
    ///后面的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SurvivalPlayer Player2 {
      get { return player2_; }
      set {
        player2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (MsgType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MsgType);
      }
      if (player1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player1);
      }
      if (player2_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgType);
      }
      if (player1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player1);
      }
      if (player2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 16: {
            MsgType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (player1_ == null) {
              player1_ = new global::Packet.SurvivalPlayer();
            }
            input.ReadMessage(player1_);
            break;
          }
          case 34: {
            if (player2_ == null) {
              player2_ = new global::Packet.SurvivalPlayer();
            }
            input.ReadMessage(player2_);
            break;
          }
        }
      }
    }

  }

  public sealed class SurvivalMsgList : pb::IMessage {
    private static readonly pb::MessageParser<SurvivalMsgList> _parser = new pb::MessageParser<SurvivalMsgList>(() => new SurvivalMsgList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SurvivalMsgList> Parser { get { return _parser; } }

    /// <summary>Field number for the "msgs" field.</summary>
    public const int MsgsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.SurvivalMsg> _repeated_msgs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.SurvivalMsg.Parser);
    private readonly pbc::RepeatedField<global::Packet.SurvivalMsg> msgs_ = new pbc::RepeatedField<global::Packet.SurvivalMsg>();
    /// <summary>
    ///消息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SurvivalMsg> Msgs {
      get { return msgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      msgs_.WriteTo(output, _repeated_msgs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += msgs_.CalculateSize(_repeated_msgs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            msgs_.AddEntriesFrom(input, _repeated_msgs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TeamMemberScore : pb::IMessage {
    private static readonly pb::MessageParser<TeamMemberScore> _parser = new pb::MessageParser<TeamMemberScore>(() => new TeamMemberScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///战绩分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdSurvivalInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalInfoReq> _parser = new pb::MessageParser<CmdSurvivalInfoReq>(() => new CmdSurvivalInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSurvivalInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalInfoRes> _parser = new pb::MessageParser<CmdSurvivalInfoRes>(() => new CmdSurvivalInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private global::Packet.SurvivalTime time_;
    /// <summary>
    ///时间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SurvivalTime Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private global::Packet.SurvivalBase base_;
    /// <summary>
    ///基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SurvivalBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private global::Packet.SurvivalMsgList msg_;
    /// <summary>
    ///消息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SurvivalMsgList Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 5;
    private bool flag_;
    /// <summary>
    ///消息设置标记(true是勾选)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (time_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Time);
      }
      if (base_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Base);
      }
      if (msg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Msg);
      }
      if (Flag != false) {
        output.WriteRawTag(40);
        output.WriteBool(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (time_ == null) {
              time_ = new global::Packet.SurvivalTime();
            }
            input.ReadMessage(time_);
            break;
          }
          case 18: {
            if (base_ == null) {
              base_ = new global::Packet.SurvivalBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 26: {
            if (msg_ == null) {
              msg_ = new global::Packet.SurvivalMsgList();
            }
            input.ReadMessage(msg_);
            break;
          }
          case 40: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdSurvivalMainPanelCloseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalMainPanelCloseReq> _parser = new pb::MessageParser<CmdSurvivalMainPanelCloseReq>(() => new CmdSurvivalMainPanelCloseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalMainPanelCloseReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSurvivalSetMsgFlagReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalSetMsgFlagReq> _parser = new pb::MessageParser<CmdSurvivalSetMsgFlagReq>(() => new CmdSurvivalSetMsgFlagReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalSetMsgFlagReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private bool flag_;
    /// <summary>
    ///true是勾选
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSurvivalNotifyFightEnd : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalNotifyFightEnd> _parser = new pb::MessageParser<CmdSurvivalNotifyFightEnd>(() => new CmdSurvivalNotifyFightEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalNotifyFightEnd> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    /// <summary>
    ///战斗结果EFightResult
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "oldscore" field.</summary>
    public const int OldscoreFieldNumber = 2;
    private uint oldscore_;
    /// <summary>
    ///旧战绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Oldscore {
      get { return oldscore_; }
      set {
        oldscore_ = value;
      }
    }

    /// <summary>Field number for the "newscore" field.</summary>
    public const int NewscoreFieldNumber = 3;
    private uint newscore_;
    /// <summary>
    ///新战绩
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newscore {
      get { return newscore_; }
      set {
        newscore_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励数量, size和id一样
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 6;
    private uint join_;
    /// <summary>
    ///已参加次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
      if (Oldscore != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Oldscore);
      }
      if (Newscore != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Newscore);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
      if (Join != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Join);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (Oldscore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Oldscore);
      }
      if (Newscore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newscore);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
          case 16: {
            Oldscore = input.ReadUInt32();
            break;
          }
          case 24: {
            Newscore = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 42:
          case 40: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
          case 48: {
            Join = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdSurvivalTeamMemberScoreReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalTeamMemberScoreReq> _parser = new pb::MessageParser<CmdSurvivalTeamMemberScoreReq>(() => new CmdSurvivalTeamMemberScoreReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalTeamMemberScoreReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSurvivalNotifyTeamMemberScore : pb::IMessage {
    private static readonly pb::MessageParser<CmdSurvivalNotifyTeamMemberScore> _parser = new pb::MessageParser<CmdSurvivalNotifyTeamMemberScore>(() => new CmdSurvivalNotifyTeamMemberScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSurvivalNotifyTeamMemberScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TeamMemberScore> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TeamMemberScore.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamMemberScore> members_ = new pbc::RepeatedField<global::Packet.TeamMemberScore>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamMemberScore> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
