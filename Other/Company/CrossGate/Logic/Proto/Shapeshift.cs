// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shapeshift.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///8900
  /// </summary>
  public enum CmdShapeShift {
    None = 0,
    Begin = 8900,
    /// <summary>
    /// 上线推送
    /// </summary>
    DataNty = 8901,
    /// <summary>
    /// 请求升级主系节点
    /// </summary>
    UpdateMainNodeReq = 8902,
    /// <summary>
    /// 通知升级主系节点
    /// </summary>
    UpdateMainNodeNty = 8903,
    /// <summary>
    /// 请求升级分支节点
    /// </summary>
    UpdateSubNodeReq = 8904,
    /// <summary>
    /// 通知升级分支节点
    /// </summary>
    UpdateSubNodeNty = 8905,
    /// <summary>
    /// 请求遗忘分支节点
    /// </summary>
    ResetSubNodeReq = 8906,
    /// <summary>
    /// 通知遗忘分支节点
    /// </summary>
    ResetSubNodeNty = 8907,
    /// <summary>
    /// 请求重修技能
    /// </summary>
    RefreshSkillReq = 8908,
    /// <summary>
    /// 通知重修技能
    /// </summary>
    RefreshSkillNty = 8909,
    /// <summary>
    /// 请求处理未确认的重修技能
    /// </summary>
    ConfirmRefreshReq = 8910,
    /// <summary>
    /// 通知处理未确认的重修技能
    /// </summary>
    ConfirmRefreshNty = 8911,
    /// <summary>
    /// 请求解锁全系技能格
    /// </summary>
    UnlockMasterNodeReq = 8912,
    /// <summary>
    /// 通知解锁全系技能格
    /// </summary>
    UnlockMasterNodeNty = 8913,
    /// <summary>
    /// 增加方案
    /// </summary>
    AddPlanReq = 8914,
    /// <summary>
    /// 增加方案
    /// </summary>
    AddPlanNty = 8915,
    /// <summary>
    /// 改名
    /// </summary>
    PlanRenameReq = 8916,
    /// <summary>
    /// 改名
    /// </summary>
    PlanRenameNty = 8917,
    /// <summary>
    /// 切换方案
    /// </summary>
    ChangePlanReq = 8918,
    /// <summary>
    /// 切换方案
    /// </summary>
    ChangePlanNty = 8919,
  }

  public enum ErrorShapeShift {
    None = 0,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 8901,
    /// <summary>
    /// 功能未开放
    /// </summary>
    FunctionNotOpen = 8902,
    /// <summary>
    /// 变身研究已达最大等阶
    /// </summary>
    MainNodeMaxRank = 8903,
    /// <summary>
    /// 世界等级不满足要求
    /// </summary>
    WorldLevelNotEnough = 8904,
    /// <summary>
    /// 种族研究等阶不满足要求
    /// </summary>
    SubNodeRankNotEnough = 8905,
    /// <summary>
    /// 种族研究已达最大等级
    /// </summary>
    SubNodeMaxLevel = 8906,
    /// <summary>
    /// 变身研究等阶不满足要求
    /// </summary>
    MainNodeRankNotEnough = 8907,
    /// <summary>
    /// 不能遗忘初始节点
    /// </summary>
    CanNotResetInitNode = 8908,
    /// <summary>
    /// 技能格未解锁
    /// </summary>
    SkillGridLocked = 8909,
    /// <summary>
    /// 没有未确认的重修技能
    /// </summary>
    NoSkillToConfirm = 8910,
    /// <summary>
    /// 其他技能格有未确认的重修
    /// </summary>
    OtherGridNotConfirmed = 8911,
    /// <summary>
    /// 变身卡所需种族研究等级不足
    /// </summary>
    LevelTooLowToUseCard = 8912,
    /// <summary>
    /// 全系技能格已解锁过
    /// </summary>
    MasterNodeAlreadyUnlocked = 8913,
    /// <summary>
    /// 全系技能格解锁阶数条件未满足
    /// </summary>
    SubNodeRankNotMeet = 8914,
    /// <summary>
    /// 方案ID错误
    /// </summary>
    PlanIndexError = 8915,
    /// <summary>
    /// 方案解锁配置错误
    /// </summary>
    PlanOpenParamError = 8916,
    /// <summary>
    /// 方案数量已经达到上限
    /// </summary>
    PlanCountOverMax = 8917,
  }

  public enum ShapeShiftActiveReason {
    None = 0,
    /// <summary>
    /// 变身研究消耗
    /// </summary>
    UpdateMainNode = 8901,
    /// <summary>
    /// 种族研究消耗
    /// </summary>
    UpdateSubNode = 8902,
    /// <summary>
    /// 种族研究遗忘获得
    /// </summary>
    ResetSubNode = 8903,
    /// <summary>
    /// 重修技能消耗
    /// </summary>
    RefreshSkill = 8904,
    /// <summary>
    /// 全系技能格解锁
    /// </summary>
    UnlockMasterNode = 8905,
    /// <summary>
    /// 开启新方案
    /// </summary>
    OpenNewPlan = 8906,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 变身研究
  /// </summary>
  public sealed class ShapeShiftMainNode : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftMainNode> _parser = new pb::MessageParser<ShapeShiftMainNode>(() => new ShapeShiftMainNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftMainNode> Parser { get { return _parser; } }

    /// <summary>Field number for the "mainnodeid" field.</summary>
    public const int MainnodeidFieldNumber = 1;
    private uint mainnodeid_;
    /// <summary>
    /// 变身研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mainnodeid {
      get { return mainnodeid_; }
      set {
        mainnodeid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mainnodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mainnodeid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mainnodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mainnodeid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mainnodeid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 变身技能格
  /// </summary>
  public sealed class ShapeShiftSkillGrid : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftSkillGrid> _parser = new pb::MessageParser<ShapeShiftSkillGrid>(() => new ShapeShiftSkillGrid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftSkillGrid> Parser { get { return _parser; } }

    /// <summary>Field number for the "gridid" field.</summary>
    public const int GrididFieldNumber = 1;
    private uint gridid_;
    /// <summary>
    /// 变身技能格表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gridid {
      get { return gridid_; }
      set {
        gridid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    /// 被动技能信息表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "replaceid" field.</summary>
    public const int ReplaceidFieldNumber = 3;
    private uint replaceid_;
    /// <summary>
    /// 重修后未确认的被动技能信息表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replaceid {
      get { return replaceid_; }
      set {
        replaceid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gridid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Gridid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Replaceid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Replaceid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gridid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gridid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Replaceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replaceid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gridid = input.ReadUInt32();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            Replaceid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 种族研究节点
  /// </summary>
  public sealed class ShapeShiftSubNode : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftSubNode> _parser = new pb::MessageParser<ShapeShiftSubNode>(() => new ShapeShiftSubNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftSubNode> Parser { get { return _parser; } }

    /// <summary>Field number for the "subnodeid" field.</summary>
    public const int SubnodeidFieldNumber = 1;
    private uint subnodeid_;
    /// <summary>
    /// 种族研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subnodeid {
      get { return subnodeid_; }
      set {
        subnodeid_ = value;
      }
    }

    /// <summary>Field number for the "grids" field.</summary>
    public const int GridsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftSkillGrid> _repeated_grids_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ShapeShiftSkillGrid.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> grids_ = new pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid>();
    /// <summary>
    /// 技能格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> Grids {
      get { return grids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Subnodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Subnodeid);
      }
      grids_.WriteTo(output, _repeated_grids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Subnodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Subnodeid);
      }
      size += grids_.CalculateSize(_repeated_grids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Subnodeid = input.ReadUInt32();
            break;
          }
          case 18: {
            grids_.AddEntriesFrom(input, _repeated_grids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 变身种族
  /// </summary>
  public sealed class ShapeShiftType : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftType> _parser = new pb::MessageParser<ShapeShiftType>(() => new ShapeShiftType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftType> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 种族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "attrper" field.</summary>
    public const int AttrperFieldNumber = 2;
    private uint attrper_;
    /// <summary>
    /// 属性加成百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attrper {
      get { return attrper_; }
      set {
        attrper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Attrper != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Attrper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Attrper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attrper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Attrper = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 变身种族列表
  /// </summary>
  public sealed class ShapeShiftTypeList : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftTypeList> _parser = new pb::MessageParser<ShapeShiftTypeList>(() => new ShapeShiftTypeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftTypeList> Parser { get { return _parser; } }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftType> _repeated_types_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ShapeShiftType.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftType> types_ = new pbc::RepeatedField<global::Packet.ShapeShiftType>();
    /// <summary>
    /// 种族列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftType> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      types_.WriteTo(output, _repeated_types_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += types_.CalculateSize(_repeated_types_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///变身方案
  /// </summary>
  public sealed class ShapeShiftPlan : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShiftPlan> _parser = new pb::MessageParser<ShapeShiftPlan>(() => new ShapeShiftPlan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShiftPlan> Parser { get { return _parser; } }

    /// <summary>Field number for the "planName" field.</summary>
    public const int PlanNameFieldNumber = 1;
    private pb::ByteString planName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlanName {
      get { return planName_; }
      set {
        planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnodes" field.</summary>
    public const int SubnodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftSubNode> _repeated_subnodes_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ShapeShiftSubNode.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftSubNode> subnodes_ = new pbc::RepeatedField<global::Packet.ShapeShiftSubNode>();
    /// <summary>
    /// 分支节点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftSubNode> Subnodes {
      get { return subnodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PlanName);
      }
      subnodes_.WriteTo(output, _repeated_subnodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
      }
      size += subnodes_.CalculateSize(_repeated_subnodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlanName = input.ReadBytes();
            break;
          }
          case 18: {
            subnodes_.AddEntriesFrom(input, _repeated_subnodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 变身
  /// </summary>
  public sealed class ShapeShift : pb::IMessage {
    private static readonly pb::MessageParser<ShapeShift> _parser = new pb::MessageParser<ShapeShift>(() => new ShapeShift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeShift> Parser { get { return _parser; } }

    /// <summary>Field number for the "mainnode" field.</summary>
    public const int MainnodeFieldNumber = 1;
    private global::Packet.ShapeShiftMainNode mainnode_;
    /// <summary>
    /// 主节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftMainNode Mainnode {
      get { return mainnode_; }
      set {
        mainnode_ = value;
      }
    }

    /// <summary>Field number for the "typelist" field.</summary>
    public const int TypelistFieldNumber = 3;
    private global::Packet.ShapeShiftTypeList typelist_;
    /// <summary>
    ///repeated ShapeShiftSubNode  subnodes      = 2;    // 分支节点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftTypeList Typelist {
      get { return typelist_; }
      set {
        typelist_ = value;
      }
    }

    /// <summary>Field number for the "curPlanIndex" field.</summary>
    public const int CurPlanIndexFieldNumber = 4;
    private uint curPlanIndex_;
    /// <summary>
    ///当前使用的方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurPlanIndex {
      get { return curPlanIndex_; }
      set {
        curPlanIndex_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftPlan> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.ShapeShiftPlan.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftPlan> plans_ = new pbc::RepeatedField<global::Packet.ShapeShiftPlan>();
    /// <summary>
    ///方案-分支节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftPlan> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mainnode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mainnode);
      }
      if (typelist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Typelist);
      }
      if (CurPlanIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurPlanIndex);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mainnode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mainnode);
      }
      if (typelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Typelist);
      }
      if (CurPlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurPlanIndex);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mainnode_ == null) {
              mainnode_ = new global::Packet.ShapeShiftMainNode();
            }
            input.ReadMessage(mainnode_);
            break;
          }
          case 26: {
            if (typelist_ == null) {
              typelist_ = new global::Packet.ShapeShiftTypeList();
            }
            input.ReadMessage(typelist_);
            break;
          }
          case 32: {
            CurPlanIndex = input.ReadUInt32();
            break;
          }
          case 42: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftDataNty> _parser = new pb::MessageParser<CmdShapeShiftDataNty>(() => new CmdShapeShiftDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.ShapeShift data_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShift Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.ShapeShift();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdShapeShiftUpdateMainNodeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUpdateMainNodeReq> _parser = new pb::MessageParser<CmdShapeShiftUpdateMainNodeReq>(() => new CmdShapeShiftUpdateMainNodeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUpdateMainNodeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdShapeShiftUpdateMainNodeNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUpdateMainNodeNty> _parser = new pb::MessageParser<CmdShapeShiftUpdateMainNodeNty>(() => new CmdShapeShiftUpdateMainNodeNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUpdateMainNodeNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "formernodeid" field.</summary>
    public const int FormernodeidFieldNumber = 1;
    private uint formernodeid_;
    /// <summary>
    /// 原变身研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Formernodeid {
      get { return formernodeid_; }
      set {
        formernodeid_ = value;
      }
    }

    /// <summary>Field number for the "currentnodeid" field.</summary>
    public const int CurrentnodeidFieldNumber = 2;
    private uint currentnodeid_;
    /// <summary>
    /// 现变身研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentnodeid {
      get { return currentnodeid_; }
      set {
        currentnodeid_ = value;
      }
    }

    /// <summary>Field number for the "typelist" field.</summary>
    public const int TypelistFieldNumber = 3;
    private global::Packet.ShapeShiftTypeList typelist_;
    /// <summary>
    /// 种族列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftTypeList Typelist {
      get { return typelist_; }
      set {
        typelist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Formernodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Formernodeid);
      }
      if (Currentnodeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Currentnodeid);
      }
      if (typelist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Typelist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Formernodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Formernodeid);
      }
      if (Currentnodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentnodeid);
      }
      if (typelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Typelist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Formernodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Currentnodeid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (typelist_ == null) {
              typelist_ = new global::Packet.ShapeShiftTypeList();
            }
            input.ReadMessage(typelist_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftUpdateSubNodeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUpdateSubNodeReq> _parser = new pb::MessageParser<CmdShapeShiftUpdateSubNodeReq>(() => new CmdShapeShiftUpdateSubNodeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUpdateSubNodeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "subnodetype" field.</summary>
    public const int SubnodetypeFieldNumber = 1;
    private uint subnodetype_;
    /// <summary>
    /// 种族研究类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subnodetype {
      get { return subnodetype_; }
      set {
        subnodetype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Subnodetype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Subnodetype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Subnodetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Subnodetype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Subnodetype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftUpdateSubNodeNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUpdateSubNodeNty> _parser = new pb::MessageParser<CmdShapeShiftUpdateSubNodeNty>(() => new CmdShapeShiftUpdateSubNodeNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUpdateSubNodeNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "formernodeid" field.</summary>
    public const int FormernodeidFieldNumber = 1;
    private uint formernodeid_;
    /// <summary>
    /// 原种族研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Formernodeid {
      get { return formernodeid_; }
      set {
        formernodeid_ = value;
      }
    }

    /// <summary>Field number for the "currentnodeid" field.</summary>
    public const int CurrentnodeidFieldNumber = 2;
    private uint currentnodeid_;
    /// <summary>
    /// 现种族研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentnodeid {
      get { return currentnodeid_; }
      set {
        currentnodeid_ = value;
      }
    }

    /// <summary>Field number for the "newgrids" field.</summary>
    public const int NewgridsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftSkillGrid> _repeated_newgrids_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.ShapeShiftSkillGrid.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> newgrids_ = new pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid>();
    /// <summary>
    /// 升级解锁的新技能格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> Newgrids {
      get { return newgrids_; }
    }

    /// <summary>Field number for the "typelist" field.</summary>
    public const int TypelistFieldNumber = 4;
    private global::Packet.ShapeShiftTypeList typelist_;
    /// <summary>
    /// 种族列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftTypeList Typelist {
      get { return typelist_; }
      set {
        typelist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Formernodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Formernodeid);
      }
      if (Currentnodeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Currentnodeid);
      }
      newgrids_.WriteTo(output, _repeated_newgrids_codec);
      if (typelist_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Typelist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Formernodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Formernodeid);
      }
      if (Currentnodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentnodeid);
      }
      size += newgrids_.CalculateSize(_repeated_newgrids_codec);
      if (typelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Typelist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Formernodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Currentnodeid = input.ReadUInt32();
            break;
          }
          case 26: {
            newgrids_.AddEntriesFrom(input, _repeated_newgrids_codec);
            break;
          }
          case 34: {
            if (typelist_ == null) {
              typelist_ = new global::Packet.ShapeShiftTypeList();
            }
            input.ReadMessage(typelist_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftResetSubNodeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftResetSubNodeReq> _parser = new pb::MessageParser<CmdShapeShiftResetSubNodeReq>(() => new CmdShapeShiftResetSubNodeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftResetSubNodeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "subnodetype" field.</summary>
    public const int SubnodetypeFieldNumber = 1;
    private uint subnodetype_;
    /// <summary>
    /// 种族研究类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subnodetype {
      get { return subnodetype_; }
      set {
        subnodetype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Subnodetype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Subnodetype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Subnodetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Subnodetype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Subnodetype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftResetSubNodeNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftResetSubNodeNty> _parser = new pb::MessageParser<CmdShapeShiftResetSubNodeNty>(() => new CmdShapeShiftResetSubNodeNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftResetSubNodeNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "formernodeid" field.</summary>
    public const int FormernodeidFieldNumber = 1;
    private uint formernodeid_;
    /// <summary>
    /// 原种族研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Formernodeid {
      get { return formernodeid_; }
      set {
        formernodeid_ = value;
      }
    }

    /// <summary>Field number for the "currentnodeid" field.</summary>
    public const int CurrentnodeidFieldNumber = 2;
    private uint currentnodeid_;
    /// <summary>
    /// 现种族研究表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentnodeid {
      get { return currentnodeid_; }
      set {
        currentnodeid_ = value;
      }
    }

    /// <summary>Field number for the "typelist" field.</summary>
    public const int TypelistFieldNumber = 3;
    private global::Packet.ShapeShiftTypeList typelist_;
    /// <summary>
    /// 种族列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftTypeList Typelist {
      get { return typelist_; }
      set {
        typelist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Formernodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Formernodeid);
      }
      if (Currentnodeid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Currentnodeid);
      }
      if (typelist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Typelist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Formernodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Formernodeid);
      }
      if (Currentnodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentnodeid);
      }
      if (typelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Typelist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Formernodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Currentnodeid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (typelist_ == null) {
              typelist_ = new global::Packet.ShapeShiftTypeList();
            }
            input.ReadMessage(typelist_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftRefreshSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftRefreshSkillReq> _parser = new pb::MessageParser<CmdShapeShiftRefreshSkillReq>(() => new CmdShapeShiftRefreshSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftRefreshSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "gridid" field.</summary>
    public const int GrididFieldNumber = 1;
    private uint gridid_;
    /// <summary>
    /// 变身技能格表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gridid {
      get { return gridid_; }
      set {
        gridid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    /// <summary>
    ///方案索引 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gridid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Gridid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gridid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gridid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gridid = input.ReadUInt32();
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftRefreshSkillNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftRefreshSkillNty> _parser = new pb::MessageParser<CmdShapeShiftRefreshSkillNty>(() => new CmdShapeShiftRefreshSkillNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftRefreshSkillNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private global::Packet.ShapeShiftSkillGrid grid_;
    /// <summary>
    /// 变身技能格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftSkillGrid Grid {
      get { return grid_; }
      set {
        grid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    /// <summary>
    ///方案索引 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (grid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Grid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (grid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (grid_ == null) {
              grid_ = new global::Packet.ShapeShiftSkillGrid();
            }
            input.ReadMessage(grid_);
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftConfirmRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftConfirmRefreshReq> _parser = new pb::MessageParser<CmdShapeShiftConfirmRefreshReq>(() => new CmdShapeShiftConfirmRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftConfirmRefreshReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "gridid" field.</summary>
    public const int GrididFieldNumber = 1;
    private uint gridid_;
    /// <summary>
    /// 变身技能格表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gridid {
      get { return gridid_; }
      set {
        gridid_ = value;
      }
    }

    /// <summary>Field number for the "save" field.</summary>
    public const int SaveFieldNumber = 2;
    private bool save_;
    /// <summary>
    /// true保留, false放弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Save {
      get { return save_; }
      set {
        save_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 3;
    private uint planIndex_;
    /// <summary>
    ///方案索引 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gridid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Gridid);
      }
      if (Save != false) {
        output.WriteRawTag(16);
        output.WriteBool(Save);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gridid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gridid);
      }
      if (Save != false) {
        size += 1 + 1;
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gridid = input.ReadUInt32();
            break;
          }
          case 16: {
            Save = input.ReadBool();
            break;
          }
          case 24: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftConfirmRefreshNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftConfirmRefreshNty> _parser = new pb::MessageParser<CmdShapeShiftConfirmRefreshNty>(() => new CmdShapeShiftConfirmRefreshNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftConfirmRefreshNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private global::Packet.ShapeShiftSkillGrid grid_;
    /// <summary>
    /// 变身技能格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftSkillGrid Grid {
      get { return grid_; }
      set {
        grid_ = value;
      }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    /// <summary>
    ///方案索引 0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (grid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Grid);
      }
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (grid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Grid);
      }
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (grid_ == null) {
              grid_ = new global::Packet.ShapeShiftSkillGrid();
            }
            input.ReadMessage(grid_);
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftUnlockMasterNodeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUnlockMasterNodeReq> _parser = new pb::MessageParser<CmdShapeShiftUnlockMasterNodeReq>(() => new CmdShapeShiftUnlockMasterNodeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUnlockMasterNodeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "gridid" field.</summary>
    public const int GrididFieldNumber = 1;
    private uint gridid_;
    /// <summary>
    /// 全系加成表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gridid {
      get { return gridid_; }
      set {
        gridid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gridid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Gridid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gridid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gridid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gridid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftUnlockMasterNodeNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftUnlockMasterNodeNty> _parser = new pb::MessageParser<CmdShapeShiftUnlockMasterNodeNty>(() => new CmdShapeShiftUnlockMasterNodeNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftUnlockMasterNodeNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ShapeShiftSkillGrid> _repeated_grid_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ShapeShiftSkillGrid.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> grid_ = new pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid>();
    /// <summary>
    /// 变身技能格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShapeShiftSkillGrid> Grid {
      get { return grid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      grid_.WriteTo(output, _repeated_grid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += grid_.CalculateSize(_repeated_grid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            grid_.AddEntriesFrom(input, _repeated_grid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftAddPlanReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftAddPlanReq> _parser = new pb::MessageParser<CmdShapeShiftAddPlanReq>(() => new CmdShapeShiftAddPlanReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftAddPlanReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "copy" field.</summary>
    public const int CopyFieldNumber = 1;
    private bool copy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Copy {
      get { return copy_; }
      set {
        copy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Copy != false) {
        output.WriteRawTag(8);
        output.WriteBool(Copy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Copy != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Copy = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftAddPlanNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftAddPlanNty> _parser = new pb::MessageParser<CmdShapeShiftAddPlanNty>(() => new CmdShapeShiftAddPlanNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftAddPlanNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 1;
    private global::Packet.ShapeShiftPlan plan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ShapeShiftPlan Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (plan_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Plan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (plan_ == null) {
              plan_ = new global::Packet.ShapeShiftPlan();
            }
            input.ReadMessage(plan_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftPlanRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftPlanRenameReq> _parser = new pb::MessageParser<CmdShapeShiftPlanRenameReq>(() => new CmdShapeShiftPlanRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftPlanRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftPlanRenameNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftPlanRenameNty> _parser = new pb::MessageParser<CmdShapeShiftPlanRenameNty>(() => new CmdShapeShiftPlanRenameNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftPlanRenameNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftChangePlanReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftChangePlanReq> _parser = new pb::MessageParser<CmdShapeShiftChangePlanReq>(() => new CmdShapeShiftChangePlanReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftChangePlanReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShapeShiftChangePlanNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdShapeShiftChangePlanNty> _parser = new pb::MessageParser<CmdShapeShiftChangePlanNty>(() => new CmdShapeShiftChangePlanNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShapeShiftChangePlanNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
