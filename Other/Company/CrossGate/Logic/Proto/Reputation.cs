// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reputation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 4100+
  /// </summary>
  public enum CmdReputation {
    None = 0,
    /// <summary>
    ///经验兑换声望值请求
    /// </summary>
    ExpExchangeReq = 4100,
    /// <summary>
    ///经验兑换声望值应答
    /// </summary>
    ExpExchangeRes = 4101,
    /// <summary>
    ///功勋兑换声望值请求
    /// </summary>
    ExploitExchangeReq = 4102,
    /// <summary>
    ///功勋兑换声望值应答
    /// </summary>
    ExploitExchangeRes = 4103,
    /// <summary>
    ///昨天最大声望等级通知
    /// </summary>
    YesterdayMaxLevelNtf = 4104,
    /// <summary>
    ///玩家声望等级或声望值更新通知
    /// </summary>
    RoleReputationNtf = 4105,
    /// <summary>
    ///进入游戏通知客户端声望相关信息
    /// </summary>
    EnterGameNtf = 4106,
  }

  public enum ErrorReputation {
    None = 0,
    /// <summary>
    ///玩家不存在
    /// </summary>
    RoleNotExist = 4100,
    /// <summary>
    ///经验兑换声望值玩家等级不够
    /// </summary>
    ExpChangeLevel = 4101,
    /// <summary>
    ///家族功勋兑换声望值功勋等级不够
    /// </summary>
    ExploitChangeLevel = 4103,
    /// <summary>
    ///全局表经验兑换声望值配置错误
    /// </summary>
    CsvparamExp = 4104,
    /// <summary>
    ///全局表家族兑换声望值配置错误
    /// </summary>
    CsvparamExploit = 4105,
    /// <summary>
    ///玩家经验不足
    /// </summary>
    ExpNoEnough = 4106,
    /// <summary>
    ///玩家家族功勋不足
    /// </summary>
    ExploitNoEnough = 4107,
    /// <summary>
    ///表配置错误
    /// </summary>
    Csvnull = 4108,
    /// <summary>
    ///加成值错误
    /// </summary>
    AddType = 4109,
    /// <summary>
    ///玩家声望加成等级不足
    /// </summary>
    AddValueLevel = 4110,
  }

  public enum ReputationActiveReason {
    None = 0,
    ExploitExchange = 4100,
  }

  #endregion

  #region Messages
  /// <summary>
  ///经验兑换声望值请求
  /// </summary>
  public sealed class CmdReputationExpExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationExpExchangeReq> _parser = new pb::MessageParser<CmdReputationExpExchangeReq>(() => new CmdReputationExpExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationExpExchangeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///经验兑换声望值应答
  /// </summary>
  public sealed class CmdReputationExpExchangeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationExpExchangeRes> _parser = new pb::MessageParser<CmdReputationExpExchangeRes>(() => new CmdReputationExpExchangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationExpExchangeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "reputationLevel" field.</summary>
    public const int ReputationLevelFieldNumber = 1;
    private uint reputationLevel_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLevel {
      get { return reputationLevel_; }
      set {
        reputationLevel_ = value;
      }
    }

    /// <summary>Field number for the "reputationValue" field.</summary>
    public const int ReputationValueFieldNumber = 2;
    private uint reputationValue_;
    /// <summary>
    ///当前声望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationValue {
      get { return reputationValue_; }
      set {
        reputationValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReputationLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReputationLevel);
      }
      if (ReputationValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReputationValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReputationLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLevel);
      }
      if (ReputationValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReputationLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            ReputationValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///功勋兑换声望值请求
  /// </summary>
  public sealed class CmdReputationExploitExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationExploitExchangeReq> _parser = new pb::MessageParser<CmdReputationExploitExchangeReq>(() => new CmdReputationExploitExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationExploitExchangeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///功勋兑换声望值应答
  /// </summary>
  public sealed class CmdReputationExploitExchangeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationExploitExchangeRes> _parser = new pb::MessageParser<CmdReputationExploitExchangeRes>(() => new CmdReputationExploitExchangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationExploitExchangeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "reputationLevel" field.</summary>
    public const int ReputationLevelFieldNumber = 1;
    private uint reputationLevel_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLevel {
      get { return reputationLevel_; }
      set {
        reputationLevel_ = value;
      }
    }

    /// <summary>Field number for the "reputationValue" field.</summary>
    public const int ReputationValueFieldNumber = 2;
    private uint reputationValue_;
    /// <summary>
    ///当前声望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationValue {
      get { return reputationValue_; }
      set {
        reputationValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReputationLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReputationLevel);
      }
      if (ReputationValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReputationValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReputationLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLevel);
      }
      if (ReputationValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReputationLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            ReputationValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///昨天最大声望等级通知
  /// </summary>
  public sealed class CmdReputationYesterdayMaxLevelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationYesterdayMaxLevelNtf> _parser = new pb::MessageParser<CmdReputationYesterdayMaxLevelNtf>(() => new CmdReputationYesterdayMaxLevelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationYesterdayMaxLevelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reputationLevel" field.</summary>
    public const int ReputationLevelFieldNumber = 1;
    private uint reputationLevel_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLevel {
      get { return reputationLevel_; }
      set {
        reputationLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReputationLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReputationLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReputationLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReputationLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家声望等级或声望值更新通知
  /// </summary>
  public sealed class CmdReputationRoleReputationNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationRoleReputationNtf> _parser = new pb::MessageParser<CmdReputationRoleReputationNtf>(() => new CmdReputationRoleReputationNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationRoleReputationNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reputationLevel" field.</summary>
    public const int ReputationLevelFieldNumber = 1;
    private uint reputationLevel_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLevel {
      get { return reputationLevel_; }
      set {
        reputationLevel_ = value;
      }
    }

    /// <summary>Field number for the "reputationValue" field.</summary>
    public const int ReputationValueFieldNumber = 2;
    private uint reputationValue_;
    /// <summary>
    ///当前声望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationValue {
      get { return reputationValue_; }
      set {
        reputationValue_ = value;
      }
    }

    /// <summary>Field number for the "addValue" field.</summary>
    public const int AddValueFieldNumber = 3;
    private uint addValue_;
    /// <summary>
    ///此次增加的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddValue {
      get { return addValue_; }
      set {
        addValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReputationLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReputationLevel);
      }
      if (ReputationValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReputationValue);
      }
      if (AddValue != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AddValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReputationLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLevel);
      }
      if (ReputationValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationValue);
      }
      if (AddValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReputationLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            ReputationValue = input.ReadUInt32();
            break;
          }
          case 24: {
            AddValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入游戏通知客户端声望相关信息
  /// </summary>
  public sealed class CmdReputationEnterGameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdReputationEnterGameNtf> _parser = new pb::MessageParser<CmdReputationEnterGameNtf>(() => new CmdReputationEnterGameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdReputationEnterGameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reputationLevel" field.</summary>
    public const int ReputationLevelFieldNumber = 1;
    private uint reputationLevel_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLevel {
      get { return reputationLevel_; }
      set {
        reputationLevel_ = value;
      }
    }

    /// <summary>Field number for the "reputationValue" field.</summary>
    public const int ReputationValueFieldNumber = 2;
    private uint reputationValue_;
    /// <summary>
    ///当前声望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationValue {
      get { return reputationValue_; }
      set {
        reputationValue_ = value;
      }
    }

    /// <summary>Field number for the "yesterdayMaxLevel" field.</summary>
    public const int YesterdayMaxLevelFieldNumber = 3;
    private uint yesterdayMaxLevel_;
    /// <summary>
    ///昨天最大声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint YesterdayMaxLevel {
      get { return yesterdayMaxLevel_; }
      set {
        yesterdayMaxLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReputationLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReputationLevel);
      }
      if (ReputationValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReputationValue);
      }
      if (YesterdayMaxLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(YesterdayMaxLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReputationLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLevel);
      }
      if (ReputationValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReputationValue);
      }
      if (YesterdayMaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(YesterdayMaxLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReputationLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            ReputationValue = input.ReadUInt32();
            break;
          }
          case 24: {
            YesterdayMaxLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
