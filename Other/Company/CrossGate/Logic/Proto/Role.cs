// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdRole {
    None = 0,
    LoginReq = 1001,
    LoginRes = 1002,
    CreateReq = 1003,
    CreateRes = 1004,
    /// <summary>
    ///废弃
    /// </summary>
    EnterGameReq = 1005,
    EnterGameNtf = 1006,
    RemoveReq = 1007,
    RemoveRes = 1008,
    /// <summary>
    /// 通知被踢下线
    /// </summary>
    KickedNtf = 1009,
    /// <summary>
    /// 服务器时间同步
    /// </summary>
    ServerTimeNtf = 1010,
    /// <summary>
    /// 断线重连
    /// </summary>
    ReconnectReq = 1011,
    ReconnectRes = 1012,
    /// <summary>
    /// 正常退出游戏
    /// </summary>
    ExitGameReq = 1013,
    ExitGameRes = 1014,
    /// <summary>
    ///改名请求
    /// </summary>
    RenameReq = 1015,
    /// <summary>
    ///改名返回 成功时返回不成功会有专门提示
    /// </summary>
    RenameRes = 1016,
    /// <summary>
    ///初始选择职业请求
    /// </summary>
    SelectCareerReq = 1017,
    /// <summary>
    ///初始选择职业返回
    /// </summary>
    SelectCareerRes = 1018,
    /// <summary>
    ///心跳包请求
    /// </summary>
    HeartBeatReq = 1019,
    /// <summary>
    ///心跳包返回
    /// </summary>
    HeartBeatRes = 1020,
    /// <summary>
    /// 晋升职业等级请求
    /// </summary>
    PromoteCareerRankReq = 1021,
    /// <summary>
    /// 晋升职业等级返回
    /// </summary>
    PromoteCareerRankRes = 1022,
    /// <summary>
    /// 通知玩家已完成各模块消息推送 客户端知道所有消息推送完了，再进行新手引导的计算，客户端需要用到任务 等级、服务器记录的引导等等信息
    /// </summary>
    FinishEnterGameNtf = 1023,
    /// <summary>
    ///投票开始广播
    /// </summary>
    StartVoteNtf = 1024,
    /// <summary>
    ///玩家投票
    /// </summary>
    DoVoteReq = 1025,
    /// <summary>
    ///玩家投票通知
    /// </summary>
    DoVoteNtf = 1026,
    /// <summary>
    ///取消投票
    /// </summary>
    CancelVoteReq = 1027,
    /// <summary>
    ///投票结果
    /// </summary>
    VoteEndNtf = 1028,
    /// <summary>
    ///投票信息更新， 一般是新加了投票人
    /// </summary>
    VoteUpdateNtf = 1029,
    /// <summary>
    ///改名过期
    /// </summary>
    RenameExpireReq = 1030,
    /// <summary>
    ///改名过期
    /// </summary>
    RenameExpireRes = 1031,
    /// <summary>
    /// App评分请求
    /// </summary>
    AppScoreReq = 1032,
    /// <summary>
    /// App评分同步
    /// </summary>
    AppScoreNtf = 1033,
    /// <summary>
    ///请求T掉自己
    /// </summary>
    KickReq = 1034,
    /// <summary>
    ///下面的协议号发送到scenesvr
    /// </summary>
    SettingNtf = 1050,
    /// <summary>
    ///玩家设置请求
    /// </summary>
    SettingReq = 1051,
    /// <summary>
    /// 客户端状态设置
    /// </summary>
    ClientStateReq = 1052,
    /// <summary>
    ///CmdRole_ClientStateRes = 1053;	// 客户端状态返回(废弃)
    /// </summary>
    ClientStateNtf = 1060,
    /// <summary>
    /// 开服时间天数
    /// </summary>
    OpenServiceDayNtf = 1054,
    /// <summary>
    ///问卷星
    /// </summary>
    WjxinfoNtf = 1055,
    /// <summary>
    ///兑换码 
    /// </summary>
    ExchangeGiftReq = 1056,
    /// <summary>
    ///兑换码返回
    /// </summary>
    ExchangeGiftRes = 1057,
    /// <summary>
    ///排队信息通知
    /// </summary>
    LoginQueueNtf = 1058,
    /// <summary>
    ///排队信息动态请求 跟老奇迹一样吧 客户端隔一段时间请求一下
    /// </summary>
    LoginQueueInfoReq = 1059,
    /// <summary>
    ///领取用户分层奖励
    /// </summary>
    GetLayerRewardReq = 1061,
    GetLayerRewardAck = 1062,
    /// <summary>
    ///用户取消排队
    /// </summary>
    CancelLoginQueueReq = 1063,
    /// <summary>
    ///玩家跨天（自然天）通知
    /// </summary>
    CrossDayNtf = 1064,
    /// <summary>
    ///玩家封禁相关信息
    /// </summary>
    BanInfoNtf = 1065,
    /// <summary>
    /// 玩家PC端设置改变请求
    /// </summary>
    PcsettingChangeReq = 1066,
    /// <summary>
    /// 玩家PC端设置请求
    /// </summary>
    PcsettingReq = 1067,
    /// <summary>
    /// 玩家PC端设置返回
    /// </summary>
    PcsettingRes = 1068,
    /// <summary>
    /// 更新跨服状态
    /// </summary>
    UpdateCrossState = 1069,
    /// <summary>
    /// </summary>
    BindPhoneTakeAwardReq = 1070,
    /// <summary>
    /// </summary>
    BindPhoneTakeAwardRes = 1071,
    /// <summary>
    ///动态通知客户端绑定手机开启或者关闭
    /// </summary>
    BindPhoneSwitchNtf = 1072,
    /// <summary>
    /// 下发玩家有没有公测充值进入游戏下发 有充值的才下发
    /// </summary>
    ChargeRebateNtf = 1073,
    /// <summary>
    /// 领取公测充值
    /// </summary>
    ChargeRebateGetReq = 1074,
    /// <summary>
    ///下发玩家奖励信息
    /// </summary>
    RewardNtf = 1075,
    /// <summary>
    ///领取奖励
    /// </summary>
    RewardTakeReq = 1076,
    /// <summary>
    ///请求玩家平均进阶评分
    /// </summary>
    CareerUpInfoReq = 1077,
    /// <summary>
    ///返回玩家平均进阶评分
    /// </summary>
    CareerUpInfoRes = 1078,
    /// <summary>
    ///角色已查看的功能预览列表 上线推送
    /// </summary>
    FunctionViewListNtf = 1079,
    /// <summary>
    ///查看功能
    /// </summary>
    FunctionViewReq = 1080,
    /// <summary>
    ///查看功能返回
    /// </summary>
    FunctionViewRes = 1081,
    /// <summary>
    ///通知玩家需要调起个人中心绑定手机 
    /// </summary>
    NeedBindPhoneNtf = 1082,
    /// <summary>
    /// 请求转职
    /// </summary>
    ChangeCareerReq = 1083,
    /// <summary>
    /// 通知转职
    /// </summary>
    ChangeCareerNty = 1084,
    /// <summary>
    /// </summary>
    AttrPlanNtf = 1085,
    /// <summary>
    ///查看世界等级请求
    /// </summary>
    ClickWorldLevelReq = 1086,
    /// <summary>
    ///查看世界等级请求
    /// </summary>
    ClickWorldLevelRes = 1087,
    /// <summary>
    ///玩家使用道具进行魔法变身请求
    /// </summary>
    MagicShapeShiftReq = 1088,
    /// <summary>
    ///玩家使用道具进行魔法变身请求
    /// </summary>
    MagicShapeShiftRes = 1089,
    /// <summary>
    ///队长发起组队进阶
    /// </summary>
    TeamLeaderInvitePromoteCareerNtf = 1090,
    /// <summary>
    ///队伍有人拒绝/同意了组队进阶
    /// </summary>
    TeamPromoteCareerAgreeOrCancelNtf = 1091,
    /// <summary>
    ///队长发起进阶请求前检测队员能否进阶
    /// </summary>
    TeamLeaderCheckPromoteCareerReq = 1092,
    /// <summary>
    ///队长发起进阶请求前检测队员能否进阶
    /// </summary>
    TeamLeaderCheckPromoteCareerRes = 1093,
  }

  /// <summary>
  /// 玩家设置
  /// </summary>
  public enum ESetting {
    /// <summary>
    /// 语音设置--默认勾选
    /// </summary>
    SettingBitMusic = 0,
    /// <summary>
    /// 音效
    /// </summary>
    SettingBitSound = 1,
    /// <summary>
    /// 系统语音
    /// </summary>
    SettingBitVoiceSystem = 2,
    /// <summary>
    /// 玩家语音
    /// </summary>
    SettingBitVoicePlayer = 3,
    /// <summary>
    /// 世界频道语音
    /// </summary>
    SettingBitVoiceWorld = 4,
    /// <summary>
    /// 当前频道语音
    /// </summary>
    SettingBitVoiceCur = 5,
    /// <summary>
    /// 家族频道语音
    /// </summary>
    SettingBitVoiceGuild = 6,
    /// <summary>
    /// 队伍频道语音
    /// </summary>
    SettingBitVoiceTeam = 7,
    /// <summary>
    /// 仅在无线网络语音
    /// </summary>
    SettingBitVoiceWife = 8,
    /// <summary>
    /// 拒绝组队邀请
    /// </summary>
    SettingBitNoTeamInvite = 9,
    /// <summary>
    /// 拒绝家族邀请
    /// </summary>
    SettingBitNoGuildInvite = 10,
    /// <summary>
    /// 拒绝陌生人信息
    /// </summary>
    SettingBitNoStranger = 11,
    /// <summary>
    /// 拒绝切磋
    /// </summary>
    SettingBitNoCompete = 12,
    /// <summary>
    /// 自动抓宠
    /// </summary>
    SettingBitAutoCatchPet = 13,
    /// <summary>
    /// 自动购买封印卡
    /// </summary>
    SettingBitAutoBuyPetCatchCard = 14,
    /// <summary>
    /// 拒绝组队请求提示
    /// </summary>
    SettingBitRefuseTeamApplyTip = 15,
    /// <summary>
    /// 在线自动挂机
    /// </summary>
    SettingBitAutoOnlineHangUp = 16,
    /// <summary>
    /// 在线挂机时自动匹配
    /// </summary>
    SettingBitAutoMatchWhileHangUp = 17,
    /// <summary>
    /// 离线自动挂机
    /// </summary>
    SettingBitAutoOfflineHangUp = 18,
    /// <summary>
    /// 战斗气泡
    /// </summary>
    SettingBitFightBubble = 19,
    /// <summary>
    /// 场景气泡
    /// </summary>
    SettingBitSceneBubble = 20,
    /// <summary>
    /// 使用端游进战斗动画
    /// </summary>
    SettingBitUsePcStyleEnterFight = 21,
    /// <summary>
    /// 关闭省电
    /// </summary>
    SettingBitClosePowerSaving = 22,
    /// <summary>
    /// 家族酒会推送
    /// </summary>
    SettingBitNtfGuildParty = 23,
    /// <summary>
    /// 荣耀竞技场推送
    /// </summary>
    SettingBitNtfArena = 24,
    /// <summary>
    /// 生存竞技场推送
    /// </summary>
    SettingBitNtfSurvival = 25,
    /// <summary>
    /// 家族BOSS(牛鬼来袭)推送
    /// </summary>
    SettingBitNtfGuildBoss = 26,
    /// <summary>
    /// 家族兽推送
    /// </summary>
    SettingBitNtfGuildPet = 27,
    /// <summary>
    /// 家族资源战推送
    /// </summary>
    SettingBitNtfGuildResBattle = 28,
    /// <summary>
    /// 疲劳保护
    /// </summary>
    SettingBitTriedPointProtection = 29,
    /// <summary>
    /// 开启战斗录像
    /// </summary>
    SettingBitOpenFightVideo = 30,
    /// <summary>
    /// 是否屏蔽成就提示
    /// </summary>
    SettingBitHideAchievementHint = 31,
    /// <summary>
    /// 是否使用变身形象
    /// </summary>
    SettintBitUseShapeShift = 32,
  }

  /// <summary>
  ///这个是客户端设置 用bit无法表示，每一个是一个值
  ///这个enum就是数组下标
  /// </summary>
  public enum ESettingValue {
    /// <summary>
    ///音乐音量            
    /// </summary>
    Bgmvalue = 0,
    /// <summary>
    ///音效音量            
    /// </summary>
    SoundValue = 1,
    /// <summary>
    ///系统语音音量            
    /// </summary>
    SystemVoiceValue = 2,
    /// <summary>
    ///玩家语音音量
    /// </summary>
    PlayerVoiceValue = 3,
    /// <summary>
    ///所有档位宠物，满档宠物，1档及以上宠物…19档及以上宠物。内含多个选项，具体读配置表 保留宠物档数选择数组下标
    /// </summary>
    AbandonAutoPet = 4,
    /// <summary>
    ///使用所有类型封印卡，使用银质封印卡，使用普通封印卡。内含三个选项，具体读配置表   
    /// </summary>
    AutoPetCatchCardQuality = 5,
    /// <summary>
    ///精简界面消息接受flag
    /// </summary>
    ChatSimplifyDisplayFlag = 6,
    /// <summary>
    ///系统界面显示 喇叭/个人
    /// </summary>
    ChatSystemChannelShow = 7,
  }

  public enum ErrorRole {
    None = 0,
    /// <summary>
    /// 角色名称非法
    /// </summary>
    NameInvalid = 1001,
    /// <summary>
    /// 该帐号已有角色
    /// </summary>
    AccountHasRole = 1002,
    /// <summary>
    /// 帐号已存在
    /// </summary>
    AccountHasExist = 1003,
    /// <summary>
    /// 帐号不存在
    /// </summary>
    AccountHasNotExist = 1004,
    /// <summary>
    /// 角色id已经存在
    /// </summary>
    AddIdHasExist = 1005,
    /// <summary>
    /// 不在线
    /// </summary>
    ConnNull = 1006,
    /// <summary>
    /// 断线重连链接状态错误
    /// </summary>
    ReconnectStatusFailed = 1007,
    /// <summary>
    /// 角色不存在
    /// </summary>
    RoleNotExist = 1008,
    /// <summary>
    /// 重连key不匹配
    /// </summary>
    ReconnectKeyNotMatch = 1009,
    /// <summary>
    /// 角色不在线
    /// </summary>
    RoleOffline = 1010,
    /// <summary>
    ///名字含有非utf8字符 角色名称非法
    /// </summary>
    NameInvalidutf8 = 1011,
    /// <summary>
    ///名字重复
    /// </summary>
    NameExist = 1012,
    /// <summary>
    ///不该有的错误
    /// </summary>
    RenameSys = 1013,
    /// <summary>
    ///客户端发过来的英雄id表里找不到
    /// </summary>
    HeroNotValid = 1014,
    /// <summary>
    /// 角色分配失败*
    /// </summary>
    AllocFail = 1015,
    /// <summary>
    /// 职业id错误
    /// </summary>
    CareerId = 1016,
    /// <summary>
    /// 已选择职业
    /// </summary>
    CareerInit = 1017,
    /// <summary>
    /// 获取表失败
    /// </summary>
    Csvnull = 1018,
    /// <summary>
    /// 职业还没开放
    /// </summary>
    CareerNotOpen = 1019,
    /// <summary>
    /// 玩家未转职无法职业进阶
    /// </summary>
    PromoteCareerNoCareer = 1020,
    /// <summary>
    /// 职业进阶条件不满足
    /// </summary>
    PromoteCareerCondition = 1021,
    /// <summary>
    /// 职业进阶已达最大等级
    /// </summary>
    PromoteCareerMax = 1022,
    /// <summary>
    /// 客户端协议跟服务器不一致 为了保证不出错 客户端大于也不行
    /// </summary>
    ProtoVerWrong = 1024,
    /// <summary>
    /// 账号长度超限制
    /// </summary>
    AccountOutOfLength = 1025,
    /// <summary>
    ///投票不存在
    /// </summary>
    InvalidVote = 1026,
    /// <summary>
    ///不能重复投票
    /// </summary>
    HasVoted = 1027,
    /// <summary>
    ///没有投票资格
    /// </summary>
    CannotVote = 1028,
    /// <summary>
    ///投票已结束
    /// </summary>
    VoteHasEnded = 1029,
    /// <summary>
    ///未支持的投票类型
    /// </summary>
    UnsupportVote = 1030,
    /// <summary>
    ///正在投票
    /// </summary>
    InVoting = 1031,
    /// <summary>
    /// 玩家redis数据解析错误
    /// </summary>
    RedisUnpackErr = 1032,
    /// <summary>
    /// 参数错误
    /// </summary>
    ParamErr = 1033,
    /// <summary>
    /// 验签失败
    /// </summary>
    CheckSignatureErr = 1034,
    /// <summary>
    /// 登录签名过期无效;需要重新登录获取最新签名
    /// </summary>
    SignatureInvalid = 1035,
    /// <summary>
    ///没有该服务器
    /// </summary>
    HasNoGamesvr = 1036,
    /// <summary>
    /// adtype非法
    /// </summary>
    AdtypeErr = 1037,
    /// <summary>
    /// 角色被封号
    /// </summary>
    Ban = 1038,
    /// <summary>
    ///没有该服务器
    /// </summary>
    HasNoScenesvr = 1039,
    /// <summary>
    /// </summary>
    TooManyRoles = 1040,
    /// <summary>
    ///account 分配失败 内存错误
    /// </summary>
    AccountAllocFailed = 1041,
    /// <summary>
    ///客户端发过来的入口是错的
    /// </summary>
    ServerIdError = 1042,
    /// <summary>
    ///重复领取
    /// </summary>
    GetLayerRewardAlready = 1043,
    /// <summary>
    /// 服务器维护中
    /// </summary>
    ServerMaintaining = 1044,
    /// <summary>
    ///创角失败,请稍后再试
    /// </summary>
    CreateFailed = 1045,
    /// <summary>
    ///功能没开启
    /// </summary>
    FunctionNotOpen = 1050,
    /// <summary>
    ///快手要求当不设置排队到达最高pcu 不让进
    /// </summary>
    MaxPcu = 1051,
    /// <summary>
    ///进入游戏需要去数据库load 这个是异步过程 防止玩家点两次 设置一个cd 2秒，
    /// </summary>
    HighFrequency = 1052,
    /// <summary>
    ///创建角色也是需要去快手异步验证名字，所以在返回之前不能再次点击 设置cd 2秒
    /// </summary>
    AccRoleNotExist = 1053,
    /// <summary>
    /// 玩家db数据解析错误
    /// </summary>
    DbunPackErr = 1054,
    /// <summary>
    /// 玩家等级不足
    /// </summary>
    LevelLess = 1055,
    /// <summary>
    ///跨服禁止改名
    /// </summary>
    RenameInKuafu = 1056,
    /// <summary>
    /// 领充值返利已经领取了
    /// </summary>
    Rebate = 1058,
    /// <summary>
    ///领运营奖励 已经领取了 
    /// </summary>
    Reward = 1059,
    /// <summary>
    ///快手要求当设置排队到达最高pcu 不让排队
    /// </summary>
    QueueMaxPcu = 1060,
    /// <summary>
    /// 还未就职
    /// </summary>
    NoCareer = 1061,
    /// <summary>
    /// 转职目标与当前职业相同
    /// </summary>
    SameCareer = 1062,
    /// <summary>
    /// 不能在跨服转职
    /// </summary>
    CanNotChangeCareerInKfScene = 1063,
    /// <summary>
    /// 战斗中不能转职
    /// </summary>
    CanNotChangeCareerInFight = 1064,
    /// <summary>
    /// 未达到转职等级
    /// </summary>
    LevelTooLowToChangeCareer = 1065,
    /// <summary>
    /// 角色形象相同
    /// </summary>
    MagicShapeShiftSameHeroId = 1066,
    /// <summary>
    /// 跨服不予许操作
    /// </summary>
    MagicShapeShiftKuafu = 1067,
    /// <summary>
    /// 转职任务未完成
    /// </summary>
    ChangeCareerTaskNotFinish = 1068,
    /// <summary>
    ///未达到进阶需要的开服天数
    /// </summary>
    CareerNeedServerStartTime = 1070,
    /// <summary>
    ///法兰商队等级不足
    /// </summary>
    CareerNeedMerchantLevel = 1071,
    /// <summary>
    ///有队友不在线或暂离或是机器人
    /// </summary>
    CareerTeamNotEligible = 1072,
    /// <summary>
    ///有队友不满足进阶条件
    /// </summary>
    CareerTeamMemberFail = 1073,
  }

  public enum RoleExpActiveReason {
    /// <summary>
    /// 无
    /// </summary>
    None = 0,
    /// <summary>
    /// Gm设置玩家等级
    /// </summary>
    GmSetLv = 1001,
    /// <summary>
    /// 转职消耗
    /// </summary>
    ChangeCareerCost = 1002,
    /// <summary>
    /// 魔法变身消耗
    /// </summary>
    RoleActiveReasonMagicShapeShiftCost = 1003,
  }

  public enum RoleOffReason {
    /// <summary>
    /// 默认非法值
    /// </summary>
    None = 0,
    /// <summary>
    /// 网络原因，异常掉线
    /// </summary>
    Net = 1,
    /// <summary>
    /// 客户端主动退出游戏
    /// </summary>
    Active = 2,
    /// <summary>
    /// 玩家已在其它地方登录(被另一个客户端t掉 这个需要客户端提示)
    /// </summary>
    EnterOther = 3,
    /// <summary>
    /// 网络错误，被踢下线 服务器发现客户端异常(比如发送非法协议号 发送的包解析失败 可提示系统异常)
    /// </summary>
    Kicked = 4,
    /// <summary>
    /// 服务器停服
    /// </summary>
    Stop = 5,
    /// <summary>
    /// 玩家未掉线时客户端重连(被断线重连踢掉 发生情况就是 本客户端发了多个断线重连 提示一下跟3 区分让玩家上报能区分)
    /// </summary>
    ReconnKicked = 6,
    /// <summary>
    /// 被管理员踢掉(返回登录界面)(gm提掉线 可能没有 不过会做gm指令 客户端需要提示另外服务器会附带描述)
    /// </summary>
    Gm = 7,
    /// <summary>
    /// 被封号(被封号 客户端需要提示 另外服务器会附带描述)
    /// </summary>
    Ban = 8,
    /// <summary>
    /// 玩家切换地图时出错
    /// </summary>
    SwitchMap = 9,
    /// <summary>
    /// 玩家不在地图里
    /// </summary>
    NoMap = 10,
    /// <summary>
    ///玩家移动作弊
    /// </summary>
    KickedMove = 11,
    /// <summary>
    ///创角界面待时间过久（这个是在大厅创角界面待的太久，为了不浪费服务器资源t掉需要客户端提示)
    /// </summary>
    HobbyTimeOut = 13,
    /// <summary>
    ///服务器发生了未知的数据异常
    /// </summary>
    SystemError = 14,
    /// <summary>
    ///断线重连 玩家离线太长时间内存没有不让重连
    /// </summary>
    ReconnRoleNotExist = 15,
    /// <summary>
    ///断线重连key错误
    /// </summary>
    ReconnKeyError = 16,
    /// <summary>
    ///已关闭注册
    /// </summary>
    CloseReg = 17,
    /// <summary>
    ///断线重连, 版本号不匹配
    /// </summary>
    ProtoVerWrong = 18,
    /// <summary>
    ///GMT 全服踢到登录界面
    /// </summary>
    GmAllLogin = 19,
    /// <summary>
    ///GMT 全服踢人 退出app
    /// </summary>
    GmAllExitApp = 20,
    /// <summary>
    ///取消排队 t掉链接
    /// </summary>
    CancelQueue = 21,
    /// <summary>
    ///GMT 踢回选服前
    /// </summary>
    GmBeforeSelectService = 22,
    /// <summary>
    ///GMT 踢回账号登录前
    /// </summary>
    GmBeforeLoginAccount = 23,
    /// <summary>
    ///GMT 踢回热更前
    /// </summary>
    GmBeforeHotUpdate = 24,
    /// <summary>
    ///没有绑定手机
    /// </summary>
    PhoneNotBind = 25,
    /// <summary>
    ///不准模拟器
    /// </summary>
    WrongDevice = 26,
    /// <summary>
    ///被网易易盾ban了 提示可以提示联系客服 策划润色一下该怎么提示
    /// </summary>
    DunCheckBan = 27,
    /// <summary>
    ///不准ios越狱设备登陆
    /// </summary>
    NoIosbreak = 28,
    /// <summary>
    ///删除玩家
    /// </summary>
    RmRole = 29,
  }

  /// <summary>
  ///投票类型
  /// </summary>
  public enum VoteType {
    None = 0,
    /// <summary>
    ///申请带队
    /// </summary>
    ApplyLeading = 1,
    /// <summary>
    ///多人副本进入投票
    /// </summary>
    MultiInsEnter = 2,
    /// <summary>
    ///恐怖旅团进本
    /// </summary>
    TerrorSeries = 3,
    /// <summary>
    ///多人料理进入
    /// </summary>
    Cook = 4,
    /// <summary>
    ///女神试炼进本
    /// </summary>
    GoddessTrial = 5,
    /// <summary>
    ///经典boss战投票战斗
    /// </summary>
    ClassicBoss = 6,
    /// <summary>
    ///人物传记(新)
    /// </summary>
    Biography = 7,
    /// <summary>
    ///地下竞技场
    /// </summary>
    UnderGround = 8,
    /// <summary>
    ///boss资格挑战赛
    /// </summary>
    BossTower = 9,
  }

  /// <summary>
  ///投票运作类型
  /// </summary>
  public enum VoteCase {
    /// <summary>
    ///无效
    /// </summary>
    None = 0,
    /// <summary>
    ///所有投票人公平投票，按比例通过
    /// </summary>
    Normal = 1,
    /// <summary>
    ///申请某权限 (Leader有一票通过，拒绝权)
    /// </summary>
    ApplyAuthority = 2,
  }

  /// <summary>
  ///投票人操作类型
  /// </summary>
  public enum VoterOpType {
    /// <summary>
    ///未操作
    /// </summary>
    None = 0,
    /// <summary>
    ///同意
    /// </summary>
    Agree = 1,
    /// <summary>
    ///反对
    /// </summary>
    Disagree = 2,
  }

  /// <summary>
  ///投票结果
  /// </summary>
  public enum VoteResultType {
    /// <summary>
    ///待定
    /// </summary>
    None = 0,
    /// <summary>
    ///投票通过
    /// </summary>
    Pass = 1,
    /// <summary>
    ///未通过
    /// </summary>
    Fail = 2,
  }

  public enum VoteFailReason {
    /// <summary>
    ///无效值
    /// </summary>
    None = 0,
    /// <summary>
    ///未通过
    /// </summary>
    Disagree = 1,
    /// <summary>
    ///系统取消
    /// </summary>
    SystemCancel = 2,
    /// <summary>
    ///人为取消
    /// </summary>
    ManualCancel = 3,
  }

  public enum RolePlanType {
    None = 0,
    /// <summary>
    ///家族历练
    /// </summary>
    GuildExperience = 1,
    /// <summary>
    ///宠物加点
    /// </summary>
    Pet = 2,
    /// <summary>
    ///宠物强化
    /// </summary>
    PetEnhance = 3,
    /// <summary>
    ///人物加点
    /// </summary>
    Role = 4,
    /// <summary>
    ///天赋
    /// </summary>
    Talent = 5,
    /// <summary>
    ///伙伴
    /// </summary>
    Partner = 6,
  }

  #endregion

  #region Messages
  public sealed class CmdRoleLoginReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleLoginReq> _parser = new pb::MessageParser<CmdRoleLoginReq>(() => new CmdRoleLoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleLoginReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 1;
    private int accountType_;
    /// <summary>
    /// adtype 原来用错了客户端用的zoneid 现在改为 安卓:16 ios:32 可以使用common.proto里的 enum AccountType  功能单 功能 #112153
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 3;
    private int serverId_;
    /// <summary>
    ///服务器入口id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "varifyKey" field.</summary>
    public const int VarifyKeyFieldNumber = 4;
    private pb::ByteString varifyKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VarifyKey {
      get { return varifyKey_; }
      set {
        varifyKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protover" field.</summary>
    public const int ProtoverFieldNumber = 5;
    private uint protover_;
    /// <summary>
    ///客户端从表里读出来的协议号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Protover {
      get { return protover_; }
      set {
        protover_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 6;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    /// 登录签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 7;
    private uint addr_;
    /// <summary>
    /// ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Addr {
      get { return addr_; }
      set {
        addr_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 9;
    private pb::ByteString channel_ = pb::ByteString.Empty;
    /// <summary>
    /// sdk获取的channel, 如"ks"( 没有sdk的为"test")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 10;
    private ulong roleId_;
    /// <summary>
    /// 默认服务器登陆最近角色那种可以发0，也可以发过来roleid，随意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "netWork" field.</summary>
    public const int NetWorkFieldNumber = 11;
    private pb::ByteString netWork_ = pb::ByteString.Empty;
    /// <summary>
    /// 网络/WIFI/移动网络
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NetWork {
      get { return netWork_; }
      set {
        netWork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemVersion" field.</summary>
    public const int SystemVersionFieldNumber = 12;
    private pb::ByteString systemVersion_ = pb::ByteString.Empty;
    /// <summary>
    /// 移动终端操作系统版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SystemVersion {
      get { return systemVersion_; }
      set {
        systemVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phoneModel" field.</summary>
    public const int PhoneModelFieldNumber = 13;
    private pb::ByteString phoneModel_ = pb::ByteString.Empty;
    /// <summary>
    /// 移动终端机型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PhoneModel {
      get { return phoneModel_; }
      set {
        phoneModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 14;
    private pb::ByteString operation_ = pb::ByteString.Empty;
    /// <summary>
    /// 运营商
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Operation {
      get { return operation_; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenWidth" field.</summary>
    public const int ScreenWidthFieldNumber = 15;
    private uint screenWidth_;
    /// <summary>
    /// 显示屏宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScreenWidth {
      get { return screenWidth_; }
      set {
        screenWidth_ = value;
      }
    }

    /// <summary>Field number for the "pixelDensity" field.</summary>
    public const int PixelDensityFieldNumber = 16;
    private uint pixelDensity_;
    /// <summary>
    /// 像素密度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PixelDensity {
      get { return pixelDensity_; }
      set {
        pixelDensity_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 17;
    private pb::ByteString cpu_ = pb::ByteString.Empty;
    /// <summary>
    /// cpu类型|频率|核数    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cpu {
      get { return cpu_; }
      set {
        cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memorySize" field.</summary>
    public const int MemorySizeFieldNumber = 18;
    private uint memorySize_;
    /// <summary>
    /// 内存信息(单位：M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemorySize {
      get { return memorySize_; }
      set {
        memorySize_ = value;
      }
    }

    /// <summary>Field number for the "appVersion" field.</summary>
    public const int AppVersionFieldNumber = 20;
    private pb::ByteString appVersion_ = pb::ByteString.Empty;
    /// <summary>
    /// 客户端版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packageChannel" field.</summary>
    public const int PackageChannelFieldNumber = 21;
    private pb::ByteString packageChannel_ = pb::ByteString.Empty;
    /// <summary>
    /// 包发行渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PackageChannel {
      get { return packageChannel_; }
      set {
        packageChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameUserId" field.</summary>
    public const int GameUserIdFieldNumber = 22;
    private pb::ByteString gameUserId_ = pb::ByteString.Empty;
    /// <summary>
    /// 融合sdk的userId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GameUserId {
      get { return gameUserId_; }
      set {
        gameUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 23;
    private pb::ByteString deviceId_ = pb::ByteString.Empty;
    /// <summary>
    /// 设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 24;
    private uint platform_;
    /// <summary>
    /// 平台ID(快手文档2.81 platform枚举)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "isTestAccount" field.</summary>
    public const int IsTestAccountFieldNumber = 25;
    private pb::ByteString isTestAccount_ = pb::ByteString.Empty;
    /// <summary>
    /// 1为测试账号, 0为正是账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsTestAccount {
      get { return isTestAccount_; }
      set {
        isTestAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "testId" field.</summary>
    public const int TestIdFieldNumber = 26;
    private pb::ByteString testId_ = pb::ByteString.Empty;
    /// <summary>
    /// 测试ID(公测填OB, 测试填CCB1---CCBn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TestId {
      get { return testId_; }
      set {
        testId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSimulator" field.</summary>
    public const int IsSimulatorFieldNumber = 27;
    private pb::ByteString isSimulator_ = pb::ByteString.Empty;
    /// <summary>
    /// 是否模拟器登录(0否/1是)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsSimulator {
      get { return isSimulator_; }
      set {
        isSimulator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extensiondata" field.</summary>
    public const int ExtensiondataFieldNumber = 28;
    private pb::ByteString extensiondata_ = pb::ByteString.Empty;
    /// <summary>
    /// 列表服返回的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extensiondata {
      get { return extensiondata_; }
      set {
        extensiondata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 29;
    private uint deviceType_;
    /// <summary>
    /// 设备类型(0=移动端, 1=模拟器, 2=PC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "duntoken" field.</summary>
    public const int DuntokenFieldNumber = 30;
    private pb::ByteString duntoken_ = pb::ByteString.Empty;
    /// <summary>
    ///网易易盾token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Duntoken {
      get { return duntoken_; }
      set {
        duntoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isIOSBreak" field.</summary>
    public const int IsIOSBreakFieldNumber = 31;
    private pb::ByteString isIOSBreak_ = pb::ByteString.Empty;
    /// <summary>
    /// 是否ios越狱设备登陆(0否/1是)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsIOSBreak {
      get { return isIOSBreak_; }
      set {
        isIOSBreak_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountType);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Account);
      }
      if (ServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerId);
      }
      if (VarifyKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(VarifyKey);
      }
      if (Protover != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Protover);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Signature);
      }
      if (Addr != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Addr);
      }
      if (Time != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Time);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Channel);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RoleId);
      }
      if (NetWork.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(NetWork);
      }
      if (SystemVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(SystemVersion);
      }
      if (PhoneModel.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(PhoneModel);
      }
      if (Operation.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Operation);
      }
      if (ScreenWidth != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ScreenWidth);
      }
      if (PixelDensity != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PixelDensity);
      }
      if (Cpu.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(Cpu);
      }
      if (MemorySize != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(MemorySize);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(AppVersion);
      }
      if (PackageChannel.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(PackageChannel);
      }
      if (GameUserId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(GameUserId);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(DeviceId);
      }
      if (Platform != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Platform);
      }
      if (IsTestAccount.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(IsTestAccount);
      }
      if (TestId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteBytes(TestId);
      }
      if (IsSimulator.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(IsSimulator);
      }
      if (Extensiondata.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteBytes(Extensiondata);
      }
      if (DeviceType != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(DeviceType);
      }
      if (Duntoken.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(Duntoken);
      }
      if (IsIOSBreak.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(IsIOSBreak);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountType);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (VarifyKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarifyKey);
      }
      if (Protover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Protover);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (Addr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Addr);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Channel);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (NetWork.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NetWork);
      }
      if (SystemVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SystemVersion);
      }
      if (PhoneModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PhoneModel);
      }
      if (Operation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Operation);
      }
      if (ScreenWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidth);
      }
      if (PixelDensity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PixelDensity);
      }
      if (Cpu.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Cpu);
      }
      if (MemorySize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MemorySize);
      }
      if (AppVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AppVersion);
      }
      if (PackageChannel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PackageChannel);
      }
      if (GameUserId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(GameUserId);
      }
      if (DeviceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(DeviceId);
      }
      if (Platform != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Platform);
      }
      if (IsTestAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IsTestAccount);
      }
      if (TestId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TestId);
      }
      if (IsSimulator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IsSimulator);
      }
      if (Extensiondata.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Extensiondata);
      }
      if (DeviceType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeviceType);
      }
      if (Duntoken.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Duntoken);
      }
      if (IsIOSBreak.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IsIOSBreak);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountType = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadBytes();
            break;
          }
          case 24: {
            ServerId = input.ReadInt32();
            break;
          }
          case 34: {
            VarifyKey = input.ReadBytes();
            break;
          }
          case 40: {
            Protover = input.ReadUInt32();
            break;
          }
          case 50: {
            Signature = input.ReadBytes();
            break;
          }
          case 56: {
            Addr = input.ReadUInt32();
            break;
          }
          case 64: {
            Time = input.ReadUInt32();
            break;
          }
          case 74: {
            Channel = input.ReadBytes();
            break;
          }
          case 80: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 90: {
            NetWork = input.ReadBytes();
            break;
          }
          case 98: {
            SystemVersion = input.ReadBytes();
            break;
          }
          case 106: {
            PhoneModel = input.ReadBytes();
            break;
          }
          case 114: {
            Operation = input.ReadBytes();
            break;
          }
          case 120: {
            ScreenWidth = input.ReadUInt32();
            break;
          }
          case 128: {
            PixelDensity = input.ReadUInt32();
            break;
          }
          case 138: {
            Cpu = input.ReadBytes();
            break;
          }
          case 144: {
            MemorySize = input.ReadUInt32();
            break;
          }
          case 162: {
            AppVersion = input.ReadBytes();
            break;
          }
          case 170: {
            PackageChannel = input.ReadBytes();
            break;
          }
          case 178: {
            GameUserId = input.ReadBytes();
            break;
          }
          case 186: {
            DeviceId = input.ReadBytes();
            break;
          }
          case 192: {
            Platform = input.ReadUInt32();
            break;
          }
          case 202: {
            IsTestAccount = input.ReadBytes();
            break;
          }
          case 210: {
            TestId = input.ReadBytes();
            break;
          }
          case 218: {
            IsSimulator = input.ReadBytes();
            break;
          }
          case 226: {
            Extensiondata = input.ReadBytes();
            break;
          }
          case 232: {
            DeviceType = input.ReadUInt32();
            break;
          }
          case 242: {
            Duntoken = input.ReadBytes();
            break;
          }
          case 250: {
            IsIOSBreak = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleLoginRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleLoginRes> _parser = new pb::MessageParser<CmdRoleLoginRes>(() => new CmdRoleLoginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleLoginRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private uint serverTime_;
    /// <summary>
    /// 服务器当前时间(secs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private uint role_;
    /// <summary>
    ///0表示没有角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 3;
    private int timezone_;
    /// <summary>
    /// 服务器时区时差(Seconds east of UTC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timezone {
      get { return timezone_; }
      set {
        timezone_ = value;
      }
    }

    /// <summary>Field number for the "originCryptoKey" field.</summary>
    public const int OriginCryptoKeyFieldNumber = 4;
    private uint originCryptoKey_;
    /// <summary>
    /// if is 0, mean don't use encrypt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginCryptoKey {
      get { return originCryptoKey_; }
      set {
        originCryptoKey_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_roles_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> roles_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ////
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "insSvrId" field.</summary>
    public const int InsSvrIdFieldNumber = 6;
    private uint insSvrId_;
    /// <summary>
    /// 实际进入的服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsSvrId {
      get { return insSvrId_; }
      set {
        insSvrId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerTime);
      }
      if (Role != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Role);
      }
      if (Timezone != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timezone);
      }
      if (OriginCryptoKey != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OriginCryptoKey);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (InsSvrId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(InsSvrId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Role);
      }
      if (Timezone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      if (OriginCryptoKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginCryptoKey);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (InsSvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsSvrId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadUInt32();
            break;
          }
          case 16: {
            Role = input.ReadUInt32();
            break;
          }
          case 24: {
            Timezone = input.ReadInt32();
            break;
          }
          case 32: {
            OriginCryptoKey = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 48: {
            InsSvrId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleLoginQueueNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleLoginQueueNtf> _parser = new pb::MessageParser<CmdRoleLoginQueueNtf>(() => new CmdRoleLoginQueueNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleLoginQueueNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "queueNum" field.</summary>
    public const int QueueNumFieldNumber = 1;
    private uint queueNum_;
    /// <summary>
    ///排队人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QueueNum {
      get { return queueNum_; }
      set {
        queueNum_ = value;
      }
    }

    /// <summary>Field number for the "leftTime" field.</summary>
    public const int LeftTimeFieldNumber = 2;
    private uint leftTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    /// <summary>Field number for the "myturn" field.</summary>
    public const int MyturnFieldNumber = 3;
    private uint myturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Myturn {
      get { return myturn_; }
      set {
        myturn_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 4;
    private uint ret_;
    /// <summary>
    ///0正常返回排队数据 1 排队到达上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QueueNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(QueueNum);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeftTime);
      }
      if (Myturn != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Myturn);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QueueNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueueNum);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftTime);
      }
      if (Myturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Myturn);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QueueNum = input.ReadUInt32();
            break;
          }
          case 16: {
            LeftTime = input.ReadUInt32();
            break;
          }
          case 24: {
            Myturn = input.ReadUInt32();
            break;
          }
          case 32: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleLoginQueueInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleLoginQueueInfoReq> _parser = new pb::MessageParser<CmdRoleLoginQueueInfoReq>(() => new CmdRoleLoginQueueInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleLoginQueueInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleCancelLoginQueueReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCancelLoginQueueReq> _parser = new pb::MessageParser<CmdRoleCancelLoginQueueReq>(() => new CmdRoleCancelLoginQueueReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCancelLoginQueueReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 角色基本数据
  /// </summary>
  public sealed class RoleBase : pb::IMessage {
    private static readonly pb::MessageParser<RoleBase> _parser = new pb::MessageParser<RoleBase>(() => new RoleBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private ulong exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 5;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 6;
    private uint career_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 7;
    private uint careerRank_;
    /// <summary>
    /// 职业职阶(等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 8;
    private ulong guildId_;
    /// <summary>
    ///公会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "extraExp" field.</summary>
    public const int ExtraExpFieldNumber = 9;
    private ulong extraExp_;
    /// <summary>
    ///gmt操作产生的额外经验值(显示要为负的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExtraExp {
      get { return extraExp_; }
      set {
        extraExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Exp);
      }
      if (HeroId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroId);
      }
      if (Career != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Career);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CareerRank);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(GuildId);
      }
      if (ExtraExp != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(ExtraExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (ExtraExp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt64();
            break;
          }
          case 40: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 48: {
            Career = input.ReadUInt32();
            break;
          }
          case 56: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 72: {
            ExtraExp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家扩展信息
  /// </summary>
  public sealed class RoleExtraData : pb::IMessage {
    private static readonly pb::MessageParser<RoleExtraData> _parser = new pb::MessageParser<RoleExtraData>(() => new RoleExtraData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleExtraData> Parser { get { return _parser; } }

    /// <summary>Field number for the "netWork" field.</summary>
    public const int NetWorkFieldNumber = 1;
    private pb::ByteString netWork_ = pb::ByteString.Empty;
    /// <summary>
    /// 网络/WIFI/移动网络
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NetWork {
      get { return netWork_; }
      set {
        netWork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "systemVersion" field.</summary>
    public const int SystemVersionFieldNumber = 2;
    private pb::ByteString systemVersion_ = pb::ByteString.Empty;
    /// <summary>
    /// 移动终端操作系统版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SystemVersion {
      get { return systemVersion_; }
      set {
        systemVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phoneModel" field.</summary>
    public const int PhoneModelFieldNumber = 3;
    private pb::ByteString phoneModel_ = pb::ByteString.Empty;
    /// <summary>
    /// 移动终端机型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PhoneModel {
      get { return phoneModel_; }
      set {
        phoneModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 4;
    private pb::ByteString operation_ = pb::ByteString.Empty;
    /// <summary>
    /// 运营商
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Operation {
      get { return operation_; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "screenWidth" field.</summary>
    public const int ScreenWidthFieldNumber = 5;
    private uint screenWidth_;
    /// <summary>
    /// 显示屏宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScreenWidth {
      get { return screenWidth_; }
      set {
        screenWidth_ = value;
      }
    }

    /// <summary>Field number for the "pixelDensity" field.</summary>
    public const int PixelDensityFieldNumber = 6;
    private uint pixelDensity_;
    /// <summary>
    /// 像素密度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PixelDensity {
      get { return pixelDensity_; }
      set {
        pixelDensity_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 7;
    private pb::ByteString cpu_ = pb::ByteString.Empty;
    /// <summary>
    /// cpu类型|频率|核数    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cpu {
      get { return cpu_; }
      set {
        cpu_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memorySize" field.</summary>
    public const int MemorySizeFieldNumber = 8;
    private uint memorySize_;
    /// <summary>
    /// 内存信息(单位：M)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemorySize {
      get { return memorySize_; }
      set {
        memorySize_ = value;
      }
    }

    /// <summary>Field number for the "isSimulator" field.</summary>
    public const int IsSimulatorFieldNumber = 9;
    private pb::ByteString isSimulator_ = pb::ByteString.Empty;
    /// <summary>
    /// 是否模拟器登录(0否/1是)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsSimulator {
      get { return isSimulator_; }
      set {
        isSimulator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 10;
    private uint deviceType_;
    /// <summary>
    /// 设备类型(0=移动端, 1=模拟器, 2=PC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 11;
    private pb::ByteString channel_ = pb::ByteString.Empty;
    /// <summary>
    /// sdk获取的channel, 如"ks"( 没有sdk的为"test")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appVersion" field.</summary>
    public const int AppVersionFieldNumber = 12;
    private pb::ByteString appVersion_ = pb::ByteString.Empty;
    /// <summary>
    /// 客户端版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packageChannel" field.</summary>
    public const int PackageChannelFieldNumber = 13;
    private pb::ByteString packageChannel_ = pb::ByteString.Empty;
    /// <summary>
    /// 包发行渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PackageChannel {
      get { return packageChannel_; }
      set {
        packageChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 15;
    private pb::ByteString deviceId_ = pb::ByteString.Empty;
    /// <summary>
    /// 设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 16;
    private uint platform_;
    /// <summary>
    /// 平台ID(快手文档2.81 platform枚举)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "isTestAccount" field.</summary>
    public const int IsTestAccountFieldNumber = 17;
    private pb::ByteString isTestAccount_ = pb::ByteString.Empty;
    /// <summary>
    /// 1为测试账号, 0为正是账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsTestAccount {
      get { return isTestAccount_; }
      set {
        isTestAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "testId" field.</summary>
    public const int TestIdFieldNumber = 18;
    private pb::ByteString testId_ = pb::ByteString.Empty;
    /// <summary>
    /// 测试ID(公测填OB, 测试填CCB1---CCBn)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TestId {
      get { return testId_; }
      set {
        testId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetWork.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NetWork);
      }
      if (SystemVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SystemVersion);
      }
      if (PhoneModel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PhoneModel);
      }
      if (Operation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Operation);
      }
      if (ScreenWidth != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScreenWidth);
      }
      if (PixelDensity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PixelDensity);
      }
      if (Cpu.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Cpu);
      }
      if (MemorySize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MemorySize);
      }
      if (IsSimulator.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(IsSimulator);
      }
      if (DeviceType != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(DeviceType);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Channel);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(AppVersion);
      }
      if (PackageChannel.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(PackageChannel);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(DeviceId);
      }
      if (Platform != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Platform);
      }
      if (IsTestAccount.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(IsTestAccount);
      }
      if (TestId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(TestId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetWork.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NetWork);
      }
      if (SystemVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SystemVersion);
      }
      if (PhoneModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PhoneModel);
      }
      if (Operation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Operation);
      }
      if (ScreenWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidth);
      }
      if (PixelDensity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PixelDensity);
      }
      if (Cpu.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cpu);
      }
      if (MemorySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemorySize);
      }
      if (IsSimulator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IsSimulator);
      }
      if (DeviceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceType);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Channel);
      }
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppVersion);
      }
      if (PackageChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackageChannel);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceId);
      }
      if (Platform != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Platform);
      }
      if (IsTestAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IsTestAccount);
      }
      if (TestId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TestId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NetWork = input.ReadBytes();
            break;
          }
          case 18: {
            SystemVersion = input.ReadBytes();
            break;
          }
          case 26: {
            PhoneModel = input.ReadBytes();
            break;
          }
          case 34: {
            Operation = input.ReadBytes();
            break;
          }
          case 40: {
            ScreenWidth = input.ReadUInt32();
            break;
          }
          case 48: {
            PixelDensity = input.ReadUInt32();
            break;
          }
          case 58: {
            Cpu = input.ReadBytes();
            break;
          }
          case 64: {
            MemorySize = input.ReadUInt32();
            break;
          }
          case 74: {
            IsSimulator = input.ReadBytes();
            break;
          }
          case 80: {
            DeviceType = input.ReadUInt32();
            break;
          }
          case 90: {
            Channel = input.ReadBytes();
            break;
          }
          case 98: {
            AppVersion = input.ReadBytes();
            break;
          }
          case 106: {
            PackageChannel = input.ReadBytes();
            break;
          }
          case 122: {
            DeviceId = input.ReadBytes();
            break;
          }
          case 128: {
            Platform = input.ReadUInt32();
            break;
          }
          case 138: {
            IsTestAccount = input.ReadBytes();
            break;
          }
          case 146: {
            TestId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色请求
  /// </summary>
  public sealed class CmdRoleCreateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCreateReq> _parser = new pb::MessageParser<CmdRoleCreateReq>(() => new CmdRoleCreateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCreateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    /// <summary>
    ///选择的角色 角色表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "isIOSBreak" field.</summary>
    public const int IsIOSBreakFieldNumber = 5;
    private pb::ByteString isIOSBreak_ = pb::ByteString.Empty;
    /// <summary>
    /// RoleExtraData extraData = 4; // login有填充相关数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IsIOSBreak {
      get { return isIOSBreak_; }
      set {
        isIOSBreak_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (IsIOSBreak.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IsIOSBreak);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (IsIOSBreak.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IsIOSBreak);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 42: {
            IsIOSBreak = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建角色回复
  /// </summary>
  public sealed class CmdRoleCreateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCreateRes> _parser = new pb::MessageParser<CmdRoleCreateRes>(() => new CmdRoleCreateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCreateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    ///ret 0. 成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除角色请求
  /// </summary>
  public sealed class CmdRoleRemoveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRemoveReq> _parser = new pb::MessageParser<CmdRoleRemoveReq>(() => new CmdRoleRemoveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRemoveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除角色回复
  /// </summary>
  public sealed class CmdRoleRemoveRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRemoveRes> _parser = new pb::MessageParser<CmdRoleRemoveRes>(() => new CmdRoleRemoveRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRemoveRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleEnterGameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleEnterGameReq> _parser = new pb::MessageParser<CmdRoleEnterGameReq>(() => new CmdRoleEnterGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleEnterGameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 默认服务器登陆最近角色那种可以发0，也可以发过来roleid，随意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入游戏通知
  /// </summary>
  public sealed class CmdRoleEnterGameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleEnterGameNtf> _parser = new pb::MessageParser<CmdRoleEnterGameNtf>(() => new CmdRoleEnterGameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleEnterGameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reconnKey" field.</summary>
    public const int ReconnKeyFieldNumber = 1;
    private uint reconnKey_;
    /// <summary>
    /// 断线重连key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReconnKey {
      get { return reconnKey_; }
      set {
        reconnKey_ = value;
      }
    }

    /// <summary>Field number for the "isReconnect" field.</summary>
    public const int IsReconnectFieldNumber = 2;
    private bool isReconnect_;
    /// <summary>
    /// 是否为重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReconnect {
      get { return isReconnect_; }
      set {
        isReconnect_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private global::Packet.RoleBase role_;
    /// <summary>
    /// 角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleBase Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "openServiceDay" field.</summary>
    public const int OpenServiceDayFieldNumber = 4;
    private uint openServiceDay_;
    /// <summary>
    ///开服天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenServiceDay {
      get { return openServiceDay_; }
      set {
        openServiceDay_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 5;
    private uint openTime_;
    /// <summary>
    ///开服时间(unix时间戳，UTC时间，注意使用时是否需要转换为本地时间)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "lastOffTime" field.</summary>
    public const int LastOffTimeFieldNumber = 6;
    private uint lastOffTime_;
    /// <summary>
    ///上次离线时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffTime {
      get { return lastOffTime_; }
      set {
        lastOffTime_ = value;
      }
    }

    /// <summary>Field number for the "onlineTime" field.</summary>
    public const int OnlineTimeFieldNumber = 7;
    private uint onlineTime_;
    /// <summary>
    ///在线总时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = value;
      }
    }

    /// <summary>Field number for the "layerReward" field.</summary>
    public const int LayerRewardFieldNumber = 8;
    private bool layerReward_;
    /// <summary>
    ///用户分层奖励是否领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LayerReward {
      get { return layerReward_; }
      set {
        layerReward_ = value;
      }
    }

    /// <summary>Field number for the "createEnter" field.</summary>
    public const int CreateEnterFieldNumber = 9;
    private bool createEnter_;
    /// <summary>
    /// 是否是创角登录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateEnter {
      get { return createEnter_; }
      set {
        createEnter_ = value;
      }
    }

    /// <summary>Field number for the "loginDay" field.</summary>
    public const int LoginDayFieldNumber = 10;
    private uint loginDay_;
    /// <summary>
    ///登录天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    /// <summary>Field number for the "bCrossSvr" field.</summary>
    public const int BCrossSvrFieldNumber = 11;
    private bool bCrossSvr_;
    /// <summary>
    ///是否是在跨服上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCrossSvr {
      get { return bCrossSvr_; }
      set {
        bCrossSvr_ = value;
      }
    }

    /// <summary>Field number for the "bindPhone" field.</summary>
    public const int BindPhoneFieldNumber = 12;
    private bool bindPhone_;
    /// <summary>
    /// true 就是领取过了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BindPhone {
      get { return bindPhone_; }
      set {
        bindPhone_ = value;
      }
    }

    /// <summary>Field number for the "bindPhoneSwitch" field.</summary>
    public const int BindPhoneSwitchFieldNumber = 13;
    private bool bindPhoneSwitch_;
    /// <summary>
    /// true 开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BindPhoneSwitch {
      get { return bindPhoneSwitch_; }
      set {
        bindPhoneSwitch_ = value;
      }
    }

    /// <summary>Field number for the "openTimeGame" field.</summary>
    public const int OpenTimeGameFieldNumber = 14;
    private uint openTimeGame_;
    /// <summary>
    ///游戏开服时间(带服务器时区)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTimeGame {
      get { return openTimeGame_; }
      set {
        openTimeGame_ = value;
      }
    }

    /// <summary>Field number for the "lastLoginTime" field.</summary>
    public const int LastLoginTimeFieldNumber = 15;
    private uint lastLoginTime_;
    /// <summary>
    /// 上次登陆时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = value;
      }
    }

    /// <summary>Field number for the "lastClickOpenServiceDay" field.</summary>
    public const int LastClickOpenServiceDayFieldNumber = 16;
    private uint lastClickOpenServiceDay_;
    /// <summary>
    ///上一次点击时候的开服天数 一开始没有数据时是0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastClickOpenServiceDay {
      get { return lastClickOpenServiceDay_; }
      set {
        lastClickOpenServiceDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReconnKey != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReconnKey);
      }
      if (IsReconnect != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReconnect);
      }
      if (role_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Role);
      }
      if (OpenServiceDay != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OpenServiceDay);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(OpenTime);
      }
      if (LastOffTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LastOffTime);
      }
      if (OnlineTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OnlineTime);
      }
      if (LayerReward != false) {
        output.WriteRawTag(64);
        output.WriteBool(LayerReward);
      }
      if (CreateEnter != false) {
        output.WriteRawTag(72);
        output.WriteBool(CreateEnter);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LoginDay);
      }
      if (BCrossSvr != false) {
        output.WriteRawTag(88);
        output.WriteBool(BCrossSvr);
      }
      if (BindPhone != false) {
        output.WriteRawTag(96);
        output.WriteBool(BindPhone);
      }
      if (BindPhoneSwitch != false) {
        output.WriteRawTag(104);
        output.WriteBool(BindPhoneSwitch);
      }
      if (OpenTimeGame != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(OpenTimeGame);
      }
      if (LastLoginTime != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(LastLoginTime);
      }
      if (LastClickOpenServiceDay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LastClickOpenServiceDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReconnKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReconnKey);
      }
      if (IsReconnect != false) {
        size += 1 + 1;
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (OpenServiceDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenServiceDay);
      }
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (LastOffTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffTime);
      }
      if (OnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineTime);
      }
      if (LayerReward != false) {
        size += 1 + 1;
      }
      if (CreateEnter != false) {
        size += 1 + 1;
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginDay);
      }
      if (BCrossSvr != false) {
        size += 1 + 1;
      }
      if (BindPhone != false) {
        size += 1 + 1;
      }
      if (BindPhoneSwitch != false) {
        size += 1 + 1;
      }
      if (OpenTimeGame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTimeGame);
      }
      if (LastLoginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastLoginTime);
      }
      if (LastClickOpenServiceDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastClickOpenServiceDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReconnKey = input.ReadUInt32();
            break;
          }
          case 16: {
            IsReconnect = input.ReadBool();
            break;
          }
          case 26: {
            if (role_ == null) {
              role_ = new global::Packet.RoleBase();
            }
            input.ReadMessage(role_);
            break;
          }
          case 32: {
            OpenServiceDay = input.ReadUInt32();
            break;
          }
          case 40: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 48: {
            LastOffTime = input.ReadUInt32();
            break;
          }
          case 56: {
            OnlineTime = input.ReadUInt32();
            break;
          }
          case 64: {
            LayerReward = input.ReadBool();
            break;
          }
          case 72: {
            CreateEnter = input.ReadBool();
            break;
          }
          case 80: {
            LoginDay = input.ReadUInt32();
            break;
          }
          case 88: {
            BCrossSvr = input.ReadBool();
            break;
          }
          case 96: {
            BindPhone = input.ReadBool();
            break;
          }
          case 104: {
            BindPhoneSwitch = input.ReadBool();
            break;
          }
          case 112: {
            OpenTimeGame = input.ReadUInt32();
            break;
          }
          case 120: {
            LastLoginTime = input.ReadUInt32();
            break;
          }
          case 128: {
            LastClickOpenServiceDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleKickReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleKickReq> _parser = new pb::MessageParser<CmdRoleKickReq>(() => new CmdRoleKickReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleKickReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "kickType" field.</summary>
    public const int KickTypeFieldNumber = 1;
    private uint kickType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KickType {
      get { return kickType_; }
      set {
        kickType_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private pb::ByteString param_ = pb::ByteString.Empty;
    /// <summary>
    ///根据kickType填充值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KickType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(KickType);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KickType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KickType);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KickType = input.ReadUInt32();
            break;
          }
          case 18: {
            Param = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdRoleKickReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum KickType {
        /// <summary>
        ///ios越狱设备，进游戏后收到广播触发,
        /// </summary>
        Iosbreak = 0,
      }

    }
    #endregion

  }

  /// <summary>
  /// 通知被踢下线
  /// </summary>
  public sealed class CmdRoleKickedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleKickedNtf> _parser = new pb::MessageParser<CmdRoleKickedNtf>(() => new CmdRoleKickedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleKickedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 2;
    private pb::ByteString comment_ = pb::ByteString.Empty;
    /// <summary>
    ///附带描述 用于gm踢人带的描述 可能为空字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Comment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Comment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
          case 18: {
            Comment = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器时间同步
  /// </summary>
  public sealed class CmdRoleServerTimeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleServerTimeNtf> _parser = new pb::MessageParser<CmdRoleServerTimeNtf>(() => new CmdRoleServerTimeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleServerTimeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private uint serverTime_;
    /// <summary>
    /// 服务器当前时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleVitalityNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleVitalityNtf> _parser = new pb::MessageParser<CmdRoleVitalityNtf>(() => new CmdRoleVitalityNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleVitalityNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "nowVitality" field.</summary>
    public const int NowVitalityFieldNumber = 1;
    private uint nowVitality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NowVitality {
      get { return nowVitality_; }
      set {
        nowVitality_ = value;
      }
    }

    /// <summary>Field number for the "lastRecoverTime" field.</summary>
    public const int LastRecoverTimeFieldNumber = 2;
    private uint lastRecoverTime_;
    /// <summary>
    ///上次体力回复时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastRecoverTime {
      get { return lastRecoverTime_; }
      set {
        lastRecoverTime_ = value;
      }
    }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 3;
    private uint buyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NowVitality != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NowVitality);
      }
      if (LastRecoverTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastRecoverTime);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuyCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NowVitality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowVitality);
      }
      if (LastRecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastRecoverTime);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NowVitality = input.ReadUInt32();
            break;
          }
          case 16: {
            LastRecoverTime = input.ReadUInt32();
            break;
          }
          case 24: {
            BuyCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleBuyVitalityReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBuyVitalityReq> _parser = new pb::MessageParser<CmdRoleBuyVitalityReq>(() => new CmdRoleBuyVitalityReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBuyVitalityReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleBuyVitalityRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBuyVitalityRes> _parser = new pb::MessageParser<CmdRoleBuyVitalityRes>(() => new CmdRoleBuyVitalityRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBuyVitalityRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bSuc" field.</summary>
    public const int BSucFieldNumber = 1;
    private bool bSuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BSuc {
      get { return bSuc_; }
      set {
        bSuc_ = value;
      }
    }

    /// <summary>Field number for the "buytimes" field.</summary>
    public const int BuytimesFieldNumber = 2;
    private uint buytimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buytimes {
      get { return buytimes_; }
      set {
        buytimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BSuc != false) {
        output.WriteRawTag(8);
        output.WriteBool(BSuc);
      }
      if (Buytimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Buytimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BSuc != false) {
        size += 1 + 1;
      }
      if (Buytimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buytimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BSuc = input.ReadBool();
            break;
          }
          case 16: {
            Buytimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleReconnectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleReconnectReq> _parser = new pb::MessageParser<CmdRoleReconnectReq>(() => new CmdRoleReconnectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleReconnectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "reconnKey" field.</summary>
    public const int ReconnKeyFieldNumber = 1;
    private uint reconnKey_;
    /// <summary>
    /// 重连key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReconnKey {
      get { return reconnKey_; }
      set {
        reconnKey_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "svrId" field.</summary>
    public const int SvrIdFieldNumber = 3;
    private uint svrId_;
    /// <summary>
    ///客户端把svrId发过来 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SvrId {
      get { return svrId_; }
      set {
        svrId_ = value;
      }
    }

    /// <summary>Field number for the "protover" field.</summary>
    public const int ProtoverFieldNumber = 4;
    private uint protover_;
    /// <summary>
    ///客户端从表里读出来的协议号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Protover {
      get { return protover_; }
      set {
        protover_ = value;
      }
    }

    /// <summary>Field number for the "remoteAddr" field.</summary>
    public const int RemoteAddrFieldNumber = 5;
    private uint remoteAddr_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoteAddr {
      get { return remoteAddr_; }
      set {
        remoteAddr_ = value;
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 6;
    private global::Packet.RoleExtraData extraData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleExtraData ExtraData {
      get { return extraData_; }
      set {
        extraData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReconnKey != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReconnKey);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (SvrId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SvrId);
      }
      if (Protover != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Protover);
      }
      if (RemoteAddr != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RemoteAddr);
      }
      if (extraData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExtraData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReconnKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReconnKey);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (SvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SvrId);
      }
      if (Protover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Protover);
      }
      if (RemoteAddr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoteAddr);
      }
      if (extraData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReconnKey = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            SvrId = input.ReadUInt32();
            break;
          }
          case 32: {
            Protover = input.ReadUInt32();
            break;
          }
          case 40: {
            RemoteAddr = input.ReadUInt32();
            break;
          }
          case 50: {
            if (extraData_ == null) {
              extraData_ = new global::Packet.RoleExtraData();
            }
            input.ReadMessage(extraData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleReconnectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleReconnectRes> _parser = new pb::MessageParser<CmdRoleReconnectRes>(() => new CmdRoleReconnectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleReconnectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// (0=成功)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private global::Packet.RoleBase role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleBase Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 3;
    private uint serverTime_;
    /// <summary>
    /// 服务器当前时间(secs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (role_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Role);
      }
      if (ServerTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            if (role_ == null) {
              role_ = new global::Packet.RoleBase();
            }
            input.ReadMessage(role_);
            break;
          }
          case 24: {
            ServerTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色退出游戏
  /// </summary>
  public sealed class CmdRoleExitGameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleExitGameReq> _parser = new pb::MessageParser<CmdRoleExitGameReq>(() => new CmdRoleExitGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleExitGameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 角色退出游戏回复
  /// </summary>
  public sealed class CmdRoleExitGameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleExitGameRes> _parser = new pb::MessageParser<CmdRoleExitGameRes>(() => new CmdRoleExitGameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleExitGameRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RoleRenameData : pb::IMessage {
    private static readonly pb::MessageParser<RoleRenameData> _parser = new pb::MessageParser<RoleRenameData>(() => new RoleRenameData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleRenameData> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 曾用名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    /// 改名时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "isBack" field.</summary>
    public const int IsBackFieldNumber = 3;
    private bool isBack_;
    /// <summary>
    /// 是否改回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBack {
      get { return isBack_; }
      set {
        isBack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (IsBack != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsBack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (IsBack != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 24: {
            IsBack = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 改名
  /// </summary>
  public sealed class CmdRoleRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRenameReq> _parser = new pb::MessageParser<CmdRoleRenameReq>(() => new CmdRoleRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 1;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    /// <summary>
    ///新名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回必然成功, 不返回会有飘字提示
  /// </summary>
  public sealed class CmdRoleRenameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRenameRes> _parser = new pb::MessageParser<CmdRoleRenameRes>(() => new CmdRoleRenameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRenameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    /// <summary>
    /// uint32 flag = 1;          // 1:检测 2:改名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Packet.RoleRenameData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleRenameData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Packet.RoleRenameData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 改名CD
  /// </summary>
  public sealed class CmdRoleRenameExpireReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRenameExpireReq> _parser = new pb::MessageParser<CmdRoleRenameExpireReq>(() => new CmdRoleRenameExpireReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRenameExpireReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleRenameExpireRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRenameExpireRes> _parser = new pb::MessageParser<CmdRoleRenameExpireRes>(() => new CmdRoleRenameExpireRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRenameExpireRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///初始选择职业请求
  /// </summary>
  public sealed class CmdRoleSelectCareerReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleSelectCareerReq> _parser = new pb::MessageParser<CmdRoleSelectCareerReq>(() => new CmdRoleSelectCareerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleSelectCareerReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "careerId" field.</summary>
    public const int CareerIdFieldNumber = 1;
    private uint careerId_;
    /// <summary>
    ///职业id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerId {
      get { return careerId_; }
      set {
        careerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CareerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CareerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CareerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CareerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///初始选择职业返回
  /// </summary>
  public sealed class CmdRoleSelectCareerRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleSelectCareerRes> _parser = new pb::MessageParser<CmdRoleSelectCareerRes>(() => new CmdRoleSelectCareerRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleSelectCareerRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "careerId" field.</summary>
    public const int CareerIdFieldNumber = 1;
    private uint careerId_;
    /// <summary>
    ///职业id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerId {
      get { return careerId_; }
      set {
        careerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CareerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CareerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CareerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CareerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdRole_PromoteCareerRankReq = 1021;  // 晋升职业等级请求
  /// </summary>
  public sealed class CmdRolePromoteCareerRankReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRolePromoteCareerRankReq> _parser = new pb::MessageParser<CmdRolePromoteCareerRankReq>(() => new CmdRolePromoteCareerRankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRolePromoteCareerRankReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "agreePromote" field.</summary>
    public const int AgreePromoteFieldNumber = 1;
    private uint agreePromote_;
    /// <summary>
    /// 1:同意进阶 0:不同意进阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AgreePromote {
      get { return agreePromote_; }
      set {
        agreePromote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AgreePromote != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AgreePromote);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AgreePromote != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AgreePromote);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AgreePromote = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdRole_PromoteCareerRankRes = 1022;  // 晋升职业等级返回
  /// </summary>
  public sealed class CmdRolePromoteCareerRankRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRolePromoteCareerRankRes> _parser = new pb::MessageParser<CmdRolePromoteCareerRankRes>(() => new CmdRolePromoteCareerRankRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRolePromoteCareerRankRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "nowRank" field.</summary>
    public const int NowRankFieldNumber = 1;
    private uint nowRank_;
    /// <summary>
    /// 现在的rank
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NowRank {
      get { return nowRank_; }
      set {
        nowRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NowRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NowRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NowRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NowRank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleHeartBeatReq> _parser = new pb::MessageParser<CmdRoleHeartBeatReq>(() => new CmdRoleHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private uint seq_;
    /// <summary>
    ///序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleHeartBeatRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleHeartBeatRes> _parser = new pb::MessageParser<CmdRoleHeartBeatRes>(() => new CmdRoleHeartBeatRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleHeartBeatRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private uint seq_;
    /// <summary>
    ///客户端发过来的序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Seq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Seq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleFinishEnterGameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleFinishEnterGameNtf> _parser = new pb::MessageParser<CmdRoleFinishEnterGameNtf>(() => new CmdRoleFinishEnterGameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleFinishEnterGameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "clientState" field.</summary>
    public const int ClientStateFieldNumber = 1;
    private uint clientState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientState {
      get { return clientState_; }
      set {
        clientState_ = value;
      }
    }

    /// <summary>Field number for the "renameData" field.</summary>
    public const int RenameDataFieldNumber = 2;
    private global::Packet.RoleRenameData renameData_;
    /// <summary>
    ///改名数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleRenameData RenameData {
      get { return renameData_; }
      set {
        renameData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientState != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClientState);
      }
      if (renameData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RenameData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientState);
      }
      if (renameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenameData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientState = input.ReadUInt32();
            break;
          }
          case 18: {
            if (renameData_ == null) {
              renameData_ = new global::Packet.RoleRenameData();
            }
            input.ReadMessage(renameData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///投票开始广播
  /// </summary>
  public sealed class CmdRoleStartVoteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleStartVoteNtf> _parser = new pb::MessageParser<CmdRoleStartVoteNtf>(() => new CmdRoleStartVoteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleStartVoteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "voteType" field.</summary>
    public const int VoteTypeFieldNumber = 2;
    private uint voteType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VoteType {
      get { return voteType_; }
      set {
        voteType_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private uint startTime_;
    /// <summary>
    ///uint32 lastTime = 3; //持续时间(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "clientData" field.</summary>
    public const int ClientDataFieldNumber = 4;
    private pb::ByteString clientData_ = pb::ByteString.Empty;
    /// <summary>
    ///clientData 对不同VoteType用不同message解析
    /// VoteType_ApplyLeading : 空
    /// VoteType_MultiInsEnter : InstanceStartVoteNtf (instance.proto)
    /// VoteType_TerrorSeries : TerrorSeriesMemItems (terrorseries.proto)
    /// VoteType_GoddessTrial : GoddessTrialTeamMemData (goddesstrial.proto)
    /// VoteType_ClassicBoss : ClassicBossCliVoteData (classicboss.proto)
    /// VoteType_Biography : BioInsVoteData (bioinstance.proto)
    /// VoteType_UnderGround : UnderGroundInsVoteData (underground.proto)
    /// VoteType_BossTower : BossTowerVoteData (bosstower.proto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientData {
      get { return clientData_; }
      set {
        clientData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
      if (VoteType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(VoteType);
      }
      if (ClientData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientData);
      }
      if (StartTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(StartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      if (VoteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoteType);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (ClientData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
          case 16: {
            VoteType = input.ReadUInt32();
            break;
          }
          case 34: {
            ClientData = input.ReadBytes();
            break;
          }
          case 40: {
            StartTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///投票请求
  /// </summary>
  public sealed class CmdRoleDoVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleDoVoteReq> _parser = new pb::MessageParser<CmdRoleDoVoteReq>(() => new CmdRoleDoVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleDoVoteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private uint op_;
    /// <summary>
    /// VoterOpType 1=同意， 2=反对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
          case 16: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleDoVoteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleDoVoteNtf> _parser = new pb::MessageParser<CmdRoleDoVoteNtf>(() => new CmdRoleDoVoteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleDoVoteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 3;
    private int op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Op != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            Op = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleCancelVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCancelVoteReq> _parser = new pb::MessageParser<CmdRoleCancelVoteReq>(() => new CmdRoleCancelVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCancelVoteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleVoteEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleVoteEndNtf> _parser = new pb::MessageParser<CmdRoleVoteEndNtf>(() => new CmdRoleVoteEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleVoteEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "resultType" field.</summary>
    public const int ResultTypeFieldNumber = 2;
    private uint resultType_;
    /// <summary>
    ///VoteResultType 1-通过，2-未通过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultType {
      get { return resultType_; }
      set {
        resultType_ = value;
      }
    }

    /// <summary>Field number for the "voterIds" field.</summary>
    public const int VoterIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_voterIds_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> voterIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///所有投票者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> VoterIds {
      get { return voterIds_; }
    }

    /// <summary>Field number for the "disagreeIds" field.</summary>
    public const int DisagreeIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_disagreeIds_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> disagreeIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///拒绝者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> DisagreeIds {
      get { return disagreeIds_; }
    }

    /// <summary>Field number for the "failReason" field.</summary>
    public const int FailReasonFieldNumber = 4;
    private uint failReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FailReason {
      get { return failReason_; }
      set {
        failReason_ = value;
      }
    }

    /// <summary>Field number for the "cancelVoterId" field.</summary>
    public const int CancelVoterIdFieldNumber = 5;
    private ulong cancelVoterId_;
    /// <summary>
    ///如果未通过原因是被取消，填充该玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CancelVoterId {
      get { return cancelVoterId_; }
      set {
        cancelVoterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
      if (ResultType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultType);
      }
      disagreeIds_.WriteTo(output, _repeated_disagreeIds_codec);
      if (FailReason != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FailReason);
      }
      if (CancelVoterId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CancelVoterId);
      }
      voterIds_.WriteTo(output, _repeated_voterIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      if (ResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultType);
      }
      size += voterIds_.CalculateSize(_repeated_voterIds_codec);
      size += disagreeIds_.CalculateSize(_repeated_disagreeIds_codec);
      if (FailReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FailReason);
      }
      if (CancelVoterId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CancelVoterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResultType = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            disagreeIds_.AddEntriesFrom(input, _repeated_disagreeIds_codec);
            break;
          }
          case 32: {
            FailReason = input.ReadUInt32();
            break;
          }
          case 40: {
            CancelVoterId = input.ReadUInt64();
            break;
          }
          case 50:
          case 48: {
            voterIds_.AddEntriesFrom(input, _repeated_voterIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleVoteUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleVoteUpdateNtf> _parser = new pb::MessageParser<CmdRoleVoteUpdateNtf>(() => new CmdRoleVoteUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleVoteUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "voteId" field.</summary>
    public const int VoteIdFieldNumber = 1;
    private ulong voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "clientData" field.</summary>
    public const int ClientDataFieldNumber = 4;
    private pb::ByteString clientData_ = pb::ByteString.Empty;
    /// <summary>
    ///解析参考CmdRoleStartVoteNtf中clientData说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientData {
      get { return clientData_; }
      set {
        clientData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(VoteId);
      }
      if (ClientData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteId);
      }
      if (ClientData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VoteId = input.ReadUInt64();
            break;
          }
          case 34: {
            ClientData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///setting 支持是否跟value值，value值
  ///原则上不应该加新的字段，是否放在bit 值得放在value
  /// </summary>
  public sealed class CmdRoleSettingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleSettingReq> _parser = new pb::MessageParser<CmdRoleSettingReq>(() => new CmdRoleSettingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleSettingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "bitsettings" field.</summary>
    public const int BitsettingsFieldNumber = 1;
    private ulong bitsettings_;
    /// <summary>
    ///bit位 bit设置就是勾上 bit位参考上边SettingBit enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitsettings {
      get { return bitsettings_; }
      set {
        bitsettings_ = value;
      }
    }

    /// <summary>Field number for the "valueSettings" field.</summary>
    public const int ValueSettingsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_valueSettings_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> valueSettings_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 音量设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ValueSettings {
      get { return valueSettings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bitsettings != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Bitsettings);
      }
      valueSettings_.WriteTo(output, _repeated_valueSettings_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bitsettings != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitsettings);
      }
      size += valueSettings_.CalculateSize(_repeated_valueSettings_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bitsettings = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            valueSettings_.AddEntriesFrom(input, _repeated_valueSettings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleSettingNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleSettingNtf> _parser = new pb::MessageParser<CmdRoleSettingNtf>(() => new CmdRoleSettingNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleSettingNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bitsettings" field.</summary>
    public const int BitsettingsFieldNumber = 1;
    private ulong bitsettings_;
    /// <summary>
    ///bit位 bit设置就是勾上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bitsettings {
      get { return bitsettings_; }
      set {
        bitsettings_ = value;
      }
    }

    /// <summary>Field number for the "valueSettings" field.</summary>
    public const int ValueSettingsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_valueSettings_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> valueSettings_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 音量设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ValueSettings {
      get { return valueSettings_; }
    }

    /// <summary>Field number for the "pcSettingNum" field.</summary>
    public const int PcSettingNumFieldNumber = 3;
    private uint pcSettingNum_;
    /// <summary>
    /// PC端设置编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PcSettingNum {
      get { return pcSettingNum_; }
      set {
        pcSettingNum_ = value;
      }
    }

    /// <summary>Field number for the "pcSetting" field.</summary>
    public const int PcSettingFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pcSetting_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> pcSetting_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// PC端设置(给客户端同步要单独请求)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> PcSetting {
      get { return pcSetting_; }
    }

    /// <summary>Field number for the "appScoreLastTime" field.</summary>
    public const int AppScoreLastTimeFieldNumber = 5;
    private uint appScoreLastTime_;
    /// <summary>
    /// app评分最后一次时间 --废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AppScoreLastTime {
      get { return appScoreLastTime_; }
      set {
        appScoreLastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bitsettings != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Bitsettings);
      }
      valueSettings_.WriteTo(output, _repeated_valueSettings_codec);
      if (PcSettingNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PcSettingNum);
      }
      pcSetting_.WriteTo(output, _repeated_pcSetting_codec);
      if (AppScoreLastTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AppScoreLastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bitsettings != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bitsettings);
      }
      size += valueSettings_.CalculateSize(_repeated_valueSettings_codec);
      if (PcSettingNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PcSettingNum);
      }
      size += pcSetting_.CalculateSize(_repeated_pcSetting_codec);
      if (AppScoreLastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppScoreLastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bitsettings = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            valueSettings_.AddEntriesFrom(input, _repeated_valueSettings_codec);
            break;
          }
          case 24: {
            PcSettingNum = input.ReadUInt32();
            break;
          }
          case 34: {
            pcSetting_.AddEntriesFrom(input, _repeated_pcSetting_codec);
            break;
          }
          case 40: {
            AppScoreLastTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家PC端设置改变请求
  /// </summary>
  public sealed class CmdRolePCSettingChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRolePCSettingChangeReq> _parser = new pb::MessageParser<CmdRolePCSettingChangeReq>(() => new CmdRolePCSettingChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRolePCSettingChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "pcSettingNum" field.</summary>
    public const int PcSettingNumFieldNumber = 1;
    private uint pcSettingNum_;
    /// <summary>
    /// PC端设置编号    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PcSettingNum {
      get { return pcSettingNum_; }
      set {
        pcSettingNum_ = value;
      }
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_setting_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> setting_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// PC端设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Setting {
      get { return setting_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PcSettingNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PcSettingNum);
      }
      setting_.WriteTo(output, _repeated_setting_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PcSettingNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PcSettingNum);
      }
      size += setting_.CalculateSize(_repeated_setting_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PcSettingNum = input.ReadUInt32();
            break;
          }
          case 18: {
            setting_.AddEntriesFrom(input, _repeated_setting_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家PC端设置请求
  /// </summary>
  public sealed class CmdRolePCSettingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRolePCSettingReq> _parser = new pb::MessageParser<CmdRolePCSettingReq>(() => new CmdRolePCSettingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRolePCSettingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 玩家PC端设置返回
  /// </summary>
  public sealed class CmdRolePCSettingRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRolePCSettingRes> _parser = new pb::MessageParser<CmdRolePCSettingRes>(() => new CmdRolePCSettingRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRolePCSettingRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pcSettingNum" field.</summary>
    public const int PcSettingNumFieldNumber = 1;
    private uint pcSettingNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PcSettingNum {
      get { return pcSettingNum_; }
      set {
        pcSettingNum_ = value;
      }
    }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_setting_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> setting_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Setting {
      get { return setting_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PcSettingNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PcSettingNum);
      }
      setting_.WriteTo(output, _repeated_setting_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PcSettingNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PcSettingNum);
      }
      size += setting_.CalculateSize(_repeated_setting_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PcSettingNum = input.ReadUInt32();
            break;
          }
          case 18: {
            setting_.AddEntriesFrom(input, _repeated_setting_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置客户端状态标识
  /// </summary>
  public sealed class CmdRoleClientStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleClientStateReq> _parser = new pb::MessageParser<CmdRoleClientStateReq>(() => new CmdRoleClientStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleClientStateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "clientStateId" field.</summary>
    public const int ClientStateIdFieldNumber = 1;
    private uint clientStateId_;
    /// <summary>
    /// 状态id, 1~32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientStateId {
      get { return clientStateId_; }
      set {
        clientStateId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    /// <summary>
    /// 状态开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientStateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClientStateId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientStateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientStateId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientStateId = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleClientStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleClientStateNtf> _parser = new pb::MessageParser<CmdRoleClientStateNtf>(() => new CmdRoleClientStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleClientStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bEnter" field.</summary>
    public const int BEnterFieldNumber = 1;
    private bool bEnter_;
    /// <summary>
    ///=true时，根据字段2设置初始状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BEnter {
      get { return bEnter_; }
      set {
        bEnter_ = value;
      }
    }

    /// <summary>Field number for the "setClientStatus" field.</summary>
    public const int SetClientStatusFieldNumber = 2;
    private uint setClientStatus_;
    /// <summary>
    ///例： =5 表示打开 状态1 和 状态3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetClientStatus {
      get { return setClientStatus_; }
      set {
        setClientStatus_ = value;
      }
    }

    /// <summary>Field number for the "clearClientStatus" field.</summary>
    public const int ClearClientStatusFieldNumber = 3;
    private uint clearClientStatus_;
    /// <summary>
    ///例： =10 表示关闭 状态2 和状态4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClearClientStatus {
      get { return clearClientStatus_; }
      set {
        clearClientStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BEnter != false) {
        output.WriteRawTag(8);
        output.WriteBool(BEnter);
      }
      if (SetClientStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SetClientStatus);
      }
      if (ClearClientStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClearClientStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BEnter != false) {
        size += 1 + 1;
      }
      if (SetClientStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetClientStatus);
      }
      if (ClearClientStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClearClientStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BEnter = input.ReadBool();
            break;
          }
          case 16: {
            SetClientStatus = input.ReadUInt32();
            break;
          }
          case 24: {
            ClearClientStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleOpenServiceDayNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleOpenServiceDayNtf> _parser = new pb::MessageParser<CmdRoleOpenServiceDayNtf>(() => new CmdRoleOpenServiceDayNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleOpenServiceDayNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "openServiceDay" field.</summary>
    public const int OpenServiceDayFieldNumber = 1;
    private uint openServiceDay_;
    /// <summary>
    /// 开服天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenServiceDay {
      get { return openServiceDay_; }
      set {
        openServiceDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpenServiceDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpenServiceDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpenServiceDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenServiceDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpenServiceDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家跨天（自然天）通知
  /// </summary>
  public sealed class CmdRoleCrossDayNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCrossDayNtf> _parser = new pb::MessageParser<CmdRoleCrossDayNtf>(() => new CmdRoleCrossDayNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCrossDayNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///玩家封禁相关信息
  /// </summary>
  public sealed class CmdRoleBanInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBanInfoNtf> _parser = new pb::MessageParser<CmdRoleBanInfoNtf>(() => new CmdRoleBanInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBanInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "banType" field.</summary>
    public const int BanTypeFieldNumber = 1;
    private uint banType_;
    /// <summary>
    ///封禁类型 (gm.proto中BanType类型)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BanType {
      get { return banType_; }
      set {
        banType_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 4;
    private uint serverTime_;
    /// <summary>
    /// 服务器当前时间(secs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 5;
    private int timezone_;
    /// <summary>
    /// 服务器时区时差(Seconds east of UTC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timezone {
      get { return timezone_; }
      set {
        timezone_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BanType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BanType);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
      if (ServerTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ServerTime);
      }
      if (Timezone != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Timezone);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BanType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BanType);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTime);
      }
      if (Timezone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timezone);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BanType = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 32: {
            ServerTime = input.ReadUInt32();
            break;
          }
          case 40: {
            Timezone = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleWJXInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleWJXInfoNtf> _parser = new pb::MessageParser<CmdRoleWJXInfoNtf>(() => new CmdRoleWJXInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleWJXInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "wjxId" field.</summary>
    public const int WjxIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_wjxId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> wjxId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已提交id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> WjxId {
      get { return wjxId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      wjxId_.WriteTo(output, _repeated_wjxId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wjxId_.CalculateSize(_repeated_wjxId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            wjxId_.AddEntriesFrom(input, _repeated_wjxId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleExchangeGiftReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleExchangeGiftReq> _parser = new pb::MessageParser<CmdRoleExchangeGiftReq>(() => new CmdRoleExchangeGiftReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleExchangeGiftReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private pb::ByteString code_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gametoken" field.</summary>
    public const int GametokenFieldNumber = 2;
    private pb::ByteString gametoken_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Gametoken {
      get { return gametoken_; }
      set {
        gametoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Code);
      }
      if (Gametoken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Gametoken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
      }
      if (Gametoken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Gametoken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadBytes();
            break;
          }
          case 18: {
            Gametoken = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleExchangeGiftRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleExchangeGiftRes> _parser = new pb::MessageParser<CmdRoleExchangeGiftRes>(() => new CmdRoleExchangeGiftRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleExchangeGiftRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    /// 0是成功 非0是表示兑换失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "errorstr" field.</summary>
    public const int ErrorstrFieldNumber = 2;
    private pb::ByteString errorstr_ = pb::ByteString.Empty;
    /// <summary>
    ///如果这个字段非空 就直接飘这个字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Errorstr {
      get { return errorstr_; }
      set {
        errorstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
      if (Errorstr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Errorstr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (Errorstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Errorstr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
          case 18: {
            Errorstr = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleGetLayerRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleGetLayerRewardReq> _parser = new pb::MessageParser<CmdRoleGetLayerRewardReq>(() => new CmdRoleGetLayerRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleGetLayerRewardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleGetLayerRewardAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleGetLayerRewardAck> _parser = new pb::MessageParser<CmdRoleGetLayerRewardAck>(() => new CmdRoleGetLayerRewardAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleGetLayerRewardAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleUpdateCrossState : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleUpdateCrossState> _parser = new pb::MessageParser<CmdRoleUpdateCrossState>(() => new CmdRoleUpdateCrossState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleUpdateCrossState> Parser { get { return _parser; } }

    /// <summary>Field number for the "bCrossSvr" field.</summary>
    public const int BCrossSvrFieldNumber = 1;
    private bool bCrossSvr_;
    /// <summary>
    /// 是否在跨服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BCrossSvr {
      get { return bCrossSvr_; }
      set {
        bCrossSvr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BCrossSvr != false) {
        output.WriteRawTag(8);
        output.WriteBool(BCrossSvr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BCrossSvr != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BCrossSvr = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleBindPhoneSwitchNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBindPhoneSwitchNtf> _parser = new pb::MessageParser<CmdRoleBindPhoneSwitchNtf>(() => new CmdRoleBindPhoneSwitchNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBindPhoneSwitchNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "setting" field.</summary>
    public const int SettingFieldNumber = 1;
    private bool setting_;
    /// <summary>
    ///true 打开 false 关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Setting {
      get { return setting_; }
      set {
        setting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Setting != false) {
        output.WriteRawTag(8);
        output.WriteBool(Setting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Setting != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Setting = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleBindPhoneTakeAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBindPhoneTakeAwardReq> _parser = new pb::MessageParser<CmdRoleBindPhoneTakeAwardReq>(() => new CmdRoleBindPhoneTakeAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBindPhoneTakeAwardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleBindPhoneTakeAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleBindPhoneTakeAwardRes> _parser = new pb::MessageParser<CmdRoleBindPhoneTakeAwardRes>(() => new CmdRoleBindPhoneTakeAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleBindPhoneTakeAwardRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleChargeRebateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleChargeRebateNtf> _parser = new pb::MessageParser<CmdRoleChargeRebateNtf>(() => new CmdRoleChargeRebateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleChargeRebateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasGet" field.</summary>
    public const int HasGetFieldNumber = 3;
    private bool hasGet_;
    /// <summary>
    ///repeated uint32_t money = 1;
    ///repeated uint32_t num = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGet {
      get { return hasGet_; }
      set {
        hasGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            HasGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleChargeRebateGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleChargeRebateGetReq> _parser = new pb::MessageParser<CmdRoleChargeRebateGetReq>(() => new CmdRoleChargeRebateGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleChargeRebateGetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleRewardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRewardNtf> _parser = new pb::MessageParser<CmdRoleRewardNtf>(() => new CmdRoleRewardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRewardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardids" field.</summary>
    public const int AwardidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_awardids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> awardids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///两个数组长度一样 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Awardids {
      get { return awardids_; }
    }

    /// <summary>Field number for the "awardState" field.</summary>
    public const int AwardStateFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_awardState_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> awardState_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///玩家对应上边奖励的状态 1,可领取 2，已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AwardState {
      get { return awardState_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardids_.WriteTo(output, _repeated_awardids_codec);
      awardState_.WriteTo(output, _repeated_awardState_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardids_.CalculateSize(_repeated_awardids_codec);
      size += awardState_.CalculateSize(_repeated_awardState_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            awardids_.AddEntriesFrom(input, _repeated_awardids_codec);
            break;
          }
          case 18:
          case 16: {
            awardState_.AddEntriesFrom(input, _repeated_awardState_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleRewardTakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleRewardTakeReq> _parser = new pb::MessageParser<CmdRoleRewardTakeReq>(() => new CmdRoleRewardTakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleRewardTakeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///0 全部领取 其他 领取对应id奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleCareerUpInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCareerUpInfoReq> _parser = new pb::MessageParser<CmdRoleCareerUpInfoReq>(() => new CmdRoleCareerUpInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCareerUpInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///当前阶 % 10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleCareerUpInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleCareerUpInfoRes> _parser = new pb::MessageParser<CmdRoleCareerUpInfoRes>(() => new CmdRoleCareerUpInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleCareerUpInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "averagePower" field.</summary>
    public const int AveragePowerFieldNumber = 2;
    private uint averagePower_;
    /// <summary>
    ///玩家真实的平均评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AveragePower {
      get { return averagePower_; }
      set {
        averagePower_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///进阶人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (AveragePower != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AveragePower);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (AveragePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AveragePower);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            AveragePower = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleFunctionViewListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleFunctionViewListNtf> _parser = new pb::MessageParser<CmdRoleFunctionViewListNtf>(() => new CmdRoleFunctionViewListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleFunctionViewListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "funcList" field.</summary>
    public const int FuncListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_funcList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> funcList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FuncList {
      get { return funcList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      funcList_.WriteTo(output, _repeated_funcList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += funcList_.CalculateSize(_repeated_funcList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            funcList_.AddEntriesFrom(input, _repeated_funcList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleFunctionViewReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleFunctionViewReq> _parser = new pb::MessageParser<CmdRoleFunctionViewReq>(() => new CmdRoleFunctionViewReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleFunctionViewReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "funcId" field.</summary>
    public const int FuncIdFieldNumber = 1;
    private uint funcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FuncId {
      get { return funcId_; }
      set {
        funcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FuncId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FuncId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FuncId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FuncId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FuncId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleFunctionViewRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleFunctionViewRes> _parser = new pb::MessageParser<CmdRoleFunctionViewRes>(() => new CmdRoleFunctionViewRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleFunctionViewRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "funcId" field.</summary>
    public const int FuncIdFieldNumber = 1;
    private uint funcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FuncId {
      get { return funcId_; }
      set {
        funcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FuncId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FuncId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FuncId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FuncId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FuncId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleAppScoreReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleAppScoreReq> _parser = new pb::MessageParser<CmdRoleAppScoreReq>(() => new CmdRoleAppScoreReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleAppScoreReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleAppScoreNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleAppScoreNtf> _parser = new pb::MessageParser<CmdRoleAppScoreNtf>(() => new CmdRoleAppScoreNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleAppScoreNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 1;
    private uint lastTime_;
    /// <summary>
    /// 上次评分时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleNeedBindPhoneNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleNeedBindPhoneNtf> _parser = new pb::MessageParser<CmdRoleNeedBindPhoneNtf>(() => new CmdRoleNeedBindPhoneNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleNeedBindPhoneNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleChangeCareerReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleChangeCareerReq> _parser = new pb::MessageParser<CmdRoleChangeCareerReq>(() => new CmdRoleChangeCareerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleChangeCareerReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 1;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Career != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdRoleChangeCareerNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleChangeCareerNty> _parser = new pb::MessageParser<CmdRoleChangeCareerNty>(() => new CmdRoleChangeCareerNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleChangeCareerNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 1;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Career != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RolePlanData : pb::IMessage {
    private static readonly pb::MessageParser<RolePlanData> _parser = new pb::MessageParser<RolePlanData>(() => new RolePlanData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePlanData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RolePlanData.Types.planInfo> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RolePlanData.Types.planInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.RolePlanData.Types.planInfo> plans_ = new pbc::RepeatedField<global::Packet.RolePlanData.Types.planInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RolePlanData.Types.planInfo> Plans {
      get { return plans_; }
    }

    /// <summary>Field number for the "selectIndex" field.</summary>
    public const int SelectIndexFieldNumber = 3;
    private uint selectIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectIndex {
      get { return selectIndex_; }
      set {
        selectIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
      if (SelectIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SelectIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      if (SelectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
          case 24: {
            SelectIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RolePlanData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class planInfo : pb::IMessage {
        private static readonly pb::MessageParser<planInfo> _parser = new pb::MessageParser<planInfo>(() => new planInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<planInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "planName" field.</summary>
        public const int PlanNameFieldNumber = 2;
        private pb::ByteString planName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PlanName {
          get { return planName_; }
          set {
            planName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (PlanName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(PlanName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (PlanName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlanName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 18: {
                PlanName = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdRoleAttrPlanNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleAttrPlanNtf> _parser = new pb::MessageParser<CmdRoleAttrPlanNtf>(() => new CmdRoleAttrPlanNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleAttrPlanNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RolePlanData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RolePlanData.Parser);
    private readonly pbc::RepeatedField<global::Packet.RolePlanData> datas_ = new pbc::RepeatedField<global::Packet.RolePlanData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RolePlanData> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdRole_ClickWorldLevelReq = 1086;//查看世界等级请求
  /// </summary>
  public sealed class CmdRoleClickWorldLevelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleClickWorldLevelReq> _parser = new pb::MessageParser<CmdRoleClickWorldLevelReq>(() => new CmdRoleClickWorldLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleClickWorldLevelReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdRole_ClickWorldLevelRes = 1087;//查看世界等级请求
  /// </summary>
  public sealed class CmdRoleClickWorldLevelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleClickWorldLevelRes> _parser = new pb::MessageParser<CmdRoleClickWorldLevelRes>(() => new CmdRoleClickWorldLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleClickWorldLevelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "openServiceDay" field.</summary>
    public const int OpenServiceDayFieldNumber = 1;
    private uint openServiceDay_;
    /// <summary>
    ///当前开服天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenServiceDay {
      get { return openServiceDay_; }
      set {
        openServiceDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpenServiceDay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpenServiceDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpenServiceDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenServiceDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpenServiceDay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdRole_MagicShapeShiftReq = 1088;//玩家使用道具进行魔法变身请求
  /// </summary>
  public sealed class CmdRoleMagicShapeShiftReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleMagicShapeShiftReq> _parser = new pb::MessageParser<CmdRoleMagicShapeShiftReq>(() => new CmdRoleMagicShapeShiftReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleMagicShapeShiftReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdRole_MagicShapeShiftRes = 1089;//玩家使用道具进行魔法变身请求
  /// </summary>
  public sealed class CmdRoleMagicShapeShiftRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleMagicShapeShiftRes> _parser = new pb::MessageParser<CmdRoleMagicShapeShiftRes>(() => new CmdRoleMagicShapeShiftRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleMagicShapeShiftRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleTeamLeaderInvitePromoteCareerNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleTeamLeaderInvitePromoteCareerNtf> _parser = new pb::MessageParser<CmdRoleTeamLeaderInvitePromoteCareerNtf>(() => new CmdRoleTeamLeaderInvitePromoteCareerNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleTeamLeaderInvitePromoteCareerNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRoleTeamPromoteCareerAgreeOrCancelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleTeamPromoteCareerAgreeOrCancelNtf> _parser = new pb::MessageParser<CmdRoleTeamPromoteCareerAgreeOrCancelNtf>(() => new CmdRoleTeamPromoteCareerAgreeOrCancelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleTeamPromoteCareerAgreeOrCancelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 1;
    private uint agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Agree != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Agree);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Agree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Agree);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Agree = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///空
  /// </summary>
  public sealed class CmdRoleTeamLeaderCheckPromoteCareerReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerReq> _parser = new pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerReq>(() => new CmdRoleTeamLeaderCheckPromoteCareerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///空
  /// </summary>
  public sealed class CmdRoleTeamLeaderCheckPromoteCareerRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerRes> _parser = new pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerRes>(() => new CmdRoleTeamLeaderCheckPromoteCareerRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRoleTeamLeaderCheckPromoteCareerRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
