// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///3400 + 活跃度
  /// </summary>
  public enum CmdActivityVal {
    None = 0,
    GetRewardReq = 3400,
    GetRewardAck = 3401,
    /// <summary>
    ///活跃度各种信息
    /// </summary>
    InfoReq = 3402,
    InfoAck = 3403,
    /// <summary>
    ///活跃度改变
    /// </summary>
    ChangeNtf = 3404,
    /// <summary>
    ///日常活动次数通知(废弃)
    /// </summary>
    DailyNtf = 3411,
    /// <summary>
    ///日常活动次数更新(废弃)
    /// </summary>
    DailyUpdateNtf = 3412,
    /// <summary>
    ///客户端一键清空
    /// </summary>
    ClientClearReq = 3413,
    ClientClearNtf = 3414,
    MonsterKillNtf = 3415,
  }

  public enum ErrorActivityVal {
    None = 0,
    /// <summary>
    ///已领
    /// </summary>
    GotAlready = 3400,
    /// <summary>
    ///配置没有
    /// </summary>
    CfgError = 3401,
    /// <summary>
    ///活跃不够
    /// </summary>
    NotEnough = 3402,
  }

  #endregion

  #region Messages
  public sealed class CmdActivityValGetRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValGetRewardReq> _parser = new pb::MessageParser<CmdActivityValGetRewardReq>(() => new CmdActivityValGetRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValGetRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///table id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityValGetRewardAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValGetRewardAck> _parser = new pb::MessageParser<CmdActivityValGetRewardAck>(() => new CmdActivityValGetRewardAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValGetRewardAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///table id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityValInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValInfoReq> _parser = new pb::MessageParser<CmdActivityValInfoReq>(() => new CmdActivityValInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdActivityValInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValInfoAck> _parser = new pb::MessageParser<CmdActivityValInfoAck>(() => new CmdActivityValInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "recommendActivity" field.</summary>
    public const int RecommendActivityFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_recommendActivity_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> recommendActivity_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///推荐活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RecommendActivity {
      get { return recommendActivity_; }
    }

    /// <summary>Field number for the "gotReward" field.</summary>
    public const int GotRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_gotReward_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> gotReward_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///领过的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GotReward {
      get { return gotReward_; }
    }

    /// <summary>Field number for the "valItem" field.</summary>
    public const int ValItemFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.CmdActivityValInfoAck.Types.ActivityItem> _repeated_valItem_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.CmdActivityValInfoAck.Types.ActivityItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdActivityValInfoAck.Types.ActivityItem> valItem_ = new pbc::RepeatedField<global::Packet.CmdActivityValInfoAck.Types.ActivityItem>();
    /// <summary>
    ///所有日常活跃度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdActivityValInfoAck.Types.ActivityItem> ValItem {
      get { return valItem_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 4;
    private uint refreshTime_;
    /// <summary>
    ///本次刷新时间（用于过天重新请求）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recommendActivity_.WriteTo(output, _repeated_recommendActivity_codec);
      gotReward_.WriteTo(output, _repeated_gotReward_codec);
      valItem_.WriteTo(output, _repeated_valItem_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RefreshTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recommendActivity_.CalculateSize(_repeated_recommendActivity_codec);
      size += gotReward_.CalculateSize(_repeated_gotReward_codec);
      size += valItem_.CalculateSize(_repeated_valItem_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            recommendActivity_.AddEntriesFrom(input, _repeated_recommendActivity_codec);
            break;
          }
          case 18:
          case 16: {
            gotReward_.AddEntriesFrom(input, _repeated_gotReward_codec);
            break;
          }
          case 26: {
            valItem_.AddEntriesFrom(input, _repeated_valItem_codec);
            break;
          }
          case 32: {
            RefreshTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdActivityValInfoAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ActivityItem : pb::IMessage {
        private static readonly pb::MessageParser<ActivityItem> _parser = new pb::MessageParser<ActivityItem>(() => new ActivityItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ActivityItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "val" field.</summary>
        public const int ValFieldNumber = 2;
        private uint val_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Val {
          get { return val_; }
          set {
            val_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Val != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Val);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Val != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Val);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Val = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdActivityValChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValChangeNtf> _parser = new pb::MessageParser<CmdActivityValChangeNtf>(() => new CmdActivityValChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///活动表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private uint val_;
    /// <summary>
    ///当前活跃度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Val != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Val);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Val);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Val = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DailyActivity : pb::IMessage {
    private static readonly pb::MessageParser<DailyActivity> _parser = new pb::MessageParser<DailyActivity>(() => new DailyActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyActivity> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///玩法类型，日常入口表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "resLimit" field.</summary>
    public const int ResLimitFieldNumber = 2;
    private global::Packet.ResLimit resLimit_;
    /// <summary>
    ///次数相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ResLimit ResLimit {
      get { return resLimit_; }
      set {
        resLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      if (resLimit_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      if (resLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            if (resLimit_ == null) {
              resLimit_ = new global::Packet.ResLimit();
            }
            input.ReadMessage(resLimit_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///(废弃)
  /// </summary>
  public sealed class CmdActivityValDailyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValDailyNtf> _parser = new pb::MessageParser<CmdActivityValDailyNtf>(() => new CmdActivityValDailyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValDailyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activities" field.</summary>
    public const int ActivitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.DailyActivity> _repeated_activities_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.DailyActivity.Parser);
    private readonly pbc::RepeatedField<global::Packet.DailyActivity> activities_ = new pbc::RepeatedField<global::Packet.DailyActivity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DailyActivity> Activities {
      get { return activities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activities_.WriteTo(output, _repeated_activities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activities_.CalculateSize(_repeated_activities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activities_.AddEntriesFrom(input, _repeated_activities_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///(废弃)
  /// </summary>
  public sealed class CmdActivityValDailyUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValDailyUpdateNtf> _parser = new pb::MessageParser<CmdActivityValDailyUpdateNtf>(() => new CmdActivityValDailyUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValDailyUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activity" field.</summary>
    public const int ActivityFieldNumber = 1;
    private global::Packet.DailyActivity activity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DailyActivity Activity {
      get { return activity_; }
      set {
        activity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (activity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Activity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (activity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Activity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (activity_ == null) {
              activity_ = new global::Packet.DailyActivity();
            }
            input.ReadMessage(activity_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityValClientClearReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValClientClearReq> _parser = new pb::MessageParser<CmdActivityValClientClearReq>(() => new CmdActivityValClientClearReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValClientClearReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdActivityValClientClearNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValClientClearNtf> _parser = new pb::MessageParser<CmdActivityValClientClearNtf>(() => new CmdActivityValClientClearNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValClientClearNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "clearTime" field.</summary>
    public const int ClearTimeFieldNumber = 1;
    private uint clearTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClearTime {
      get { return clearTime_; }
      set {
        clearTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClearTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ClearTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClearTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClearTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClearTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityValMonsterKillNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityValMonsterKillNtf> _parser = new pb::MessageParser<CmdActivityValMonsterKillNtf>(() => new CmdActivityValMonsterKillNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityValMonsterKillNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
