// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shop.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 3300+
  /// </summary>
  public enum CmdShop {
    None = 0,
    /// <summary>
    ///购买记录请求
    /// </summary>
    ItemRecordReq = 3301,
    ItemRecordRes = 3302,
    /// <summary>
    ///购买请求
    /// </summary>
    BuyReq = 3304,
    BuyRes = 3305,
    /// <summary>
    ///限购商品购买行为后通知库存变化
    /// </summary>
    ItemRecordUpdateNtf = 3306,
    /// <summary>
    ///登录下发有库存的红点商品
    /// </summary>
    RedDotItemsNtf = 3307,
  }

  public enum ErrorShop {
    None = 0,
    /// <summary>
    ///未找到商品
    /// </summary>
    ShopCsvnotFound = 3301,
    /// <summary>
    ///等级不足无法购买
    /// </summary>
    LevelNotEnough = 3302,
    /// <summary>
    ///可购买数量不足
    /// </summary>
    ReaminNotEnough = 3303,
    /// <summary>
    ///货币不足无法购买
    /// </summary>
    CurrencyNotEnough = 3304,
    /// <summary>
    ///不支持的购买类型
    /// </summary>
    UnSupportBuyType = 3305,
    /// <summary>
    ///库存未刷新
    /// </summary>
    StockNotRefresh = 3306,
    /// <summary>
    ///订单过多，稍后再试
    /// </summary>
    TooManyGlobalReq = 3307,
    /// <summary>
    ///数量异常情况下请求购买太频繁
    /// </summary>
    SystemBusy = 3308,
    /// <summary>
    ///购买失败，价格已发生变动
    /// </summary>
    PriceHasBeenChanged = 3309,
    /// <summary>
    ///相关任务未完成无法购买
    /// </summary>
    TaskNotFinish = 3310,
    /// <summary>
    ///未找到相关商品
    /// </summary>
    ShopItemNotFound = 3311,
    /// <summary>
    ///商店为空
    /// </summary>
    ShopIsEmpty = 3312,
    /// <summary>
    ///商品已下架
    /// </summary>
    ShopItemIsExpired = 3313,
    /// <summary>
    ///npc好感度未达到要求
    /// </summary>
    NpcFavorabilityCheckFailed = 3314,
    /// <summary>
    ///npc商店已重新刷新
    /// </summary>
    NpcShopRefresh = 3315,
    /// <summary>
    ///功能未开启不能购买
    /// </summary>
    FuncNotOpenCannotBuy = 3316,
    /// <summary>
    ///购买请求太频繁
    /// </summary>
    BuyReqBusy = 3317,
    /// <summary>
    ///超过单次购买最大数
    /// </summary>
    LimitNumMax = 3318,
    /// <summary>
    ///npc距离太远, 无法使用商店
    /// </summary>
    NpcFarAway = 3319,
    /// <summary>
    ///导师等级不足无法购买
    /// </summary>
    TutorLevelNotEnough = 3320,
    /// <summary>
    ///不能赠送商品给非好友
    /// </summary>
    NotFriendCannotGift = 3321,
    /// <summary>
    ///该商品不能赠送
    /// </summary>
    ShopItemCannotGift = 3322,
    /// <summary>
    ///战令等级不满足要求
    /// </summary>
    ShopItemBattlePassLevel = 3323,
    /// <summary>
    ///不是高级战令
    /// </summary>
    ShopItemBattlePassAdvanceToken = 3324,
    /// <summary>
    ///时装抽奖活动未开启
    /// </summary>
    ShopItemFashionDrawStart = 3325,
  }

  #endregion

  #region Messages
  /// <summary>
  ///限购商品的购买数量
  /// </summary>
  public sealed class ShopItem : pb::IMessage {
    private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => new ShopItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopItemId" field.</summary>
    public const int ShopItemIdFieldNumber = 1;
    private uint shopItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopItemId {
      get { return shopItemId_; }
      set {
        shopItemId_ = value;
      }
    }

    /// <summary>Field number for the "selfCount" field.</summary>
    public const int SelfCountFieldNumber = 2;
    private uint selfCount_;
    /// <summary>
    ///个人已购数量 or 个人历史已购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfCount {
      get { return selfCount_; }
      set {
        selfCount_ = value;
      }
    }

    /// <summary>Field number for the "globalCount" field.</summary>
    public const int GlobalCountFieldNumber = 3;
    private uint globalCount_;
    /// <summary>
    ///全服已购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalCount {
      get { return globalCount_; }
      set {
        globalCount_ = value;
      }
    }

    /// <summary>Field number for the "priceType" field.</summary>
    public const int PriceTypeFieldNumber = 7;
    private uint priceType_;
    /// <summary>
    ///当前价格的货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private uint price_;
    /// <summary>
    ///当前价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "selfNum" field.</summary>
    public const int SelfNumFieldNumber = 5;
    private uint selfNum_;
    /// <summary>
    ///个人可购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfNum {
      get { return selfNum_; }
      set {
        selfNum_ = value;
      }
    }

    /// <summary>Field number for the "globalNum" field.</summary>
    public const int GlobalNumFieldNumber = 6;
    private uint globalNum_;
    /// <summary>
    ///全服可购数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalNum {
      get { return globalNum_; }
      set {
        globalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopItemId);
      }
      if (SelfCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SelfCount);
      }
      if (GlobalCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GlobalCount);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Price);
      }
      if (SelfNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SelfNum);
      }
      if (GlobalNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GlobalNum);
      }
      if (PriceType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PriceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopItemId);
      }
      if (SelfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelfCount);
      }
      if (GlobalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalCount);
      }
      if (PriceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceType);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (SelfNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelfNum);
      }
      if (GlobalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            SelfCount = input.ReadUInt32();
            break;
          }
          case 24: {
            GlobalCount = input.ReadUInt32();
            break;
          }
          case 32: {
            Price = input.ReadUInt32();
            break;
          }
          case 40: {
            SelfNum = input.ReadUInt32();
            break;
          }
          case 48: {
            GlobalNum = input.ReadUInt32();
            break;
          }
          case 56: {
            PriceType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopItemRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopItemRecordReq> _parser = new pb::MessageParser<CmdShopItemRecordReq>(() => new CmdShopItemRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopItemRecordReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private uint shopId_;
    /// <summary>
    ///商店id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "npcUid" field.</summary>
    public const int NpcUidFieldNumber = 2;
    private ulong npcUid_;
    /// <summary>
    ///npc唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopId);
      }
      if (NpcUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopId);
      }
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopItemRecordRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopItemRecordRes> _parser = new pb::MessageParser<CmdShopItemRecordRes>(() => new CmdShopItemRecordRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopItemRecordRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopId" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private uint shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "shopItemList" field.</summary>
    public const int ShopItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ShopItem> _repeated_shopItemList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ShopItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.ShopItem> shopItemList_ = new pbc::RepeatedField<global::Packet.ShopItem>();
    /// <summary>
    ///商店展示的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ShopItem> ShopItemList {
      get { return shopItemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopId);
      }
      shopItemList_.WriteTo(output, _repeated_shopItemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopId);
      }
      size += shopItemList_.CalculateSize(_repeated_shopItemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadUInt32();
            break;
          }
          case 18: {
            shopItemList_.AddEntriesFrom(input, _repeated_shopItemList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopBuyReq> _parser = new pb::MessageParser<CmdShopBuyReq>(() => new CmdShopBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopItemId" field.</summary>
    public const int ShopItemIdFieldNumber = 1;
    private uint shopItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopItemId {
      get { return shopItemId_; }
      set {
        shopItemId_ = value;
      }
    }

    /// <summary>Field number for the "buyCount" field.</summary>
    public const int BuyCountFieldNumber = 2;
    private uint buyCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "buyPrice" field.</summary>
    public const int BuyPriceFieldNumber = 3;
    private uint buyPrice_;
    /// <summary>
    ///购买时价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyPrice {
      get { return buyPrice_; }
      set {
        buyPrice_ = value;
      }
    }

    /// <summary>Field number for the "npcUid" field.</summary>
    public const int NpcUidFieldNumber = 4;
    private ulong npcUid_;
    /// <summary>
    ///npc唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 5;
    private ulong friendId_;
    /// <summary>
    ///若为赠送购买， 填充好友id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopItemId);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BuyCount);
      }
      if (BuyPrice != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuyPrice);
      }
      if (NpcUid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NpcUid);
      }
      if (FriendId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopItemId);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      if (BuyPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyPrice);
      }
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      if (FriendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            BuyCount = input.ReadUInt32();
            break;
          }
          case 24: {
            BuyPrice = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcUid = input.ReadUInt64();
            break;
          }
          case 40: {
            FriendId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopBuyRes> _parser = new pb::MessageParser<CmdShopBuyRes>(() => new CmdShopBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///返回值，0成功， 1购买失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "shopItemId" field.</summary>
    public const int ShopItemIdFieldNumber = 2;
    private uint shopItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopItemId {
      get { return shopItemId_; }
      set {
        shopItemId_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 5;
    private ulong friendId_;
    /// <summary>
    ///若为赠送购买， 填充好友id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (ShopItemId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShopItemId);
      }
      if (FriendId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (ShopItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopItemId);
      }
      if (FriendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            ShopItemId = input.ReadUInt32();
            break;
          }
          case 40: {
            FriendId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopItemRecordUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopItemRecordUpdateNtf> _parser = new pb::MessageParser<CmdShopItemRecordUpdateNtf>(() => new CmdShopItemRecordUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopItemRecordUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopItemId" field.</summary>
    public const int ShopItemIdFieldNumber = 1;
    private uint shopItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopItemId {
      get { return shopItemId_; }
      set {
        shopItemId_ = value;
      }
    }

    /// <summary>Field number for the "selfCount" field.</summary>
    public const int SelfCountFieldNumber = 2;
    private uint selfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfCount {
      get { return selfCount_; }
      set {
        selfCount_ = value;
      }
    }

    /// <summary>Field number for the "globalCount" field.</summary>
    public const int GlobalCountFieldNumber = 3;
    private uint globalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GlobalCount {
      get { return globalCount_; }
      set {
        globalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShopItemId);
      }
      if (SelfCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SelfCount);
      }
      if (GlobalCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GlobalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopItemId);
      }
      if (SelfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelfCount);
      }
      if (GlobalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            SelfCount = input.ReadUInt32();
            break;
          }
          case 24: {
            GlobalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdShopRedDotItemsNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdShopRedDotItemsNtf> _parser = new pb::MessageParser<CmdShopRedDotItemsNtf>(() => new CmdShopRedDotItemsNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdShopRedDotItemsNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "shopItems" field.</summary>
    public const int ShopItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdShopRedDotItemsNtf.Types.Item> _repeated_shopItems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdShopRedDotItemsNtf.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdShopRedDotItemsNtf.Types.Item> shopItems_ = new pbc::RepeatedField<global::Packet.CmdShopRedDotItemsNtf.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdShopRedDotItemsNtf.Types.Item> ShopItems {
      get { return shopItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shopItems_.WriteTo(output, _repeated_shopItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shopItems_.CalculateSize(_repeated_shopItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shopItems_.AddEntriesFrom(input, _repeated_shopItems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdShopRedDotItemsNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        /// <summary>Field number for the "shopId" field.</summary>
        public const int ShopIdFieldNumber = 1;
        private uint shopId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShopId {
          get { return shopId_; }
          set {
            shopId_ = value;
          }
        }

        /// <summary>Field number for the "shopItemId" field.</summary>
        public const int ShopItemIdFieldNumber = 2;
        private uint shopItemId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ShopItemId {
          get { return shopItemId_; }
          set {
            shopItemId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ShopId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ShopId);
          }
          if (ShopItemId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ShopItemId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ShopId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopId);
          }
          if (ShopItemId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopItemId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ShopId = input.ReadUInt32();
                break;
              }
              case 16: {
                ShopItemId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
