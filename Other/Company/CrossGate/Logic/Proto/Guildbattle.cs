// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildbattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdGuildBattle {
    /// <summary>
    /// 默认
    /// </summary>
    None = 0,
    /// <summary>
    /// 起始
    /// </summary>
    Begin = 7000,
    /// <summary>
    /// 请求报名家族战
    /// </summary>
    ApplyReq = 7001,
    /// <summary>
    /// 通知家族战报名状态
    /// </summary>
    ApplyNty = 7002,
    /// <summary>
    /// 请求取消报名家族战
    /// </summary>
    CancelReq = 7003,
    /// <summary>
    /// 取消报名家族战返回
    /// </summary>
    CancelAck = 7004,
    /// <summary>
    /// 请求进入族战地图
    /// </summary>
    EnterReq = 7005,
    /// <summary>
    /// 族战状态通知
    /// </summary>
    StateNty = 7006,
    /// <summary>
    /// 请求检查族战报名条件
    /// </summary>
    CheckApplyCondReq = 7007,
    /// <summary>
    /// 检查族战报名条件返回
    /// </summary>
    CheckApplyCondRes = 7008,
    /// <summary>
    /// 通知玩家战场数据
    /// </summary>
    DataNty = 7009,
    /// <summary>
    /// 通知新增战场玩家数据
    /// </summary>
    AddRoleDataNty = 7010,
    /// <summary>
    /// 通知更新战场玩家数据
    /// </summary>
    UpdateRoleDataNty = 7011,
    /// <summary>
    /// 请求关注战场地图数据
    /// </summary>
    FocusMiniMapReq = 7012,
    /// <summary>
    /// 通知战场地图数据
    /// </summary>
    MiniMapDataNty = 7013,
    /// <summary>
    /// 族战攻击请求
    /// </summary>
    AttackReq = 7014,
    /// <summary>
    /// 通知族战惩罚
    /// </summary>
    PunishNty = 7015,
    /// <summary>
    /// 请求治疗
    /// </summary>
    RecoveryReq = 7016,
    /// <summary>
    /// 通知治疗生效
    /// </summary>
    RecoveryNty = 7017,
    /// <summary>
    /// 请求上交资源
    /// </summary>
    HandInResourceReq = 7018,
    /// <summary>
    /// 上交资源返回
    /// </summary>
    HandInResourceRes = 7019,
    /// <summary>
    /// 通知族战结果
    /// </summary>
    ResultNty = 7020,
    /// <summary>
    /// 请求匹配队伍数据
    /// </summary>
    MatchTeamDataReq = 7021,
    /// <summary>
    /// 匹配队伍数据返回
    /// </summary>
    MatchTeamDataRes = 7022,
    /// <summary>
    /// 请求匹配人物数据
    /// </summary>
    MatchRoleDataReq = 7023,
    /// <summary>
    /// 匹配人物数据返回
    /// </summary>
    MatchRoleDataRes = 7024,
    /// <summary>
    /// 通知更新战场家族数据
    /// </summary>
    UpdateGuildDataNty = 7025,
    /// <summary>
    /// 通知显示战场提示
    /// </summary>
    DisplayHintNty = 7026,
    /// <summary>
    /// 通知更新战场资源数据
    /// </summary>
    UpdateResourceDataNty = 7027,
    /// <summary>
    /// 通知显示报名提示
    /// </summary>
    DisplayApplyHintNty = 7028,
    /// <summary>
    /// 请求设置报名提示
    /// </summary>
    ConfigureApplyHintReq = 7029,
    /// <summary>
    /// 通知报名提示设置
    /// </summary>
    ApplyHintConfigNty = 7030,
    /// <summary>
    /// 请求关注战场核心队伍
    /// </summary>
    FocusCoreTeamReq = 7031,
    /// <summary>
    /// 通知更新战场核心队伍
    /// </summary>
    UpdateCoreTeamNty = 7032,
    /// <summary>
    /// 通知战场核心队伍数据
    /// </summary>
    CoreTeamDataNty = 7033,
  }

  public enum ErrorGuildBattle {
    None = 0,
    /// <summary>
    /// 已报名过族战
    /// </summary>
    HasApplied = 7001,
    /// <summary>
    /// 未报名过族战
    /// </summary>
    NotApplied = 7002,
    /// <summary>
    /// 未到族战报名时间
    /// </summary>
    NotTimeToApply = 7003,
    /// <summary>
    /// 不在可入场时间
    /// </summary>
    NotTimeToEnterBattle = 7004,
    /// <summary>
    /// 公会等级不满足要求
    /// </summary>
    GuildLevelNotMeet = 7005,
    /// <summary>
    /// 公会成员数量不满足要求
    /// </summary>
    MemberCountNotMeet = 7006,
    /// <summary>
    /// 公会活跃的成员数量不满足要求
    /// </summary>
    ActiveMemberCountNotMeet = 7007,
    /// <summary>
    /// 玩家等级太低不能进入族战战场
    /// </summary>
    RoleLevelTooLowToEnter = 7008,
    /// <summary>
    /// 玩家入族时长不满足要求
    /// </summary>
    JoinTimeNotMeet = 7009,
    /// <summary>
    /// 不在族战地图
    /// </summary>
    NotInBattleMap = 7010,
    /// <summary>
    /// 队员数量少于对方
    /// </summary>
    LessMember = 7011,
    /// <summary>
    /// 离目标太远
    /// </summary>
    FarFromTarget = 7012,
    /// <summary>
    /// 不是我方阵营的npc
    /// </summary>
    NotMyCampNpc = 7013,
    /// <summary>
    /// 身上已有资源不能采集
    /// </summary>
    AlreadyHasResource = 7014,
    /// <summary>
    /// 身上有资源不能骑乘
    /// </summary>
    CanNotMountWithResource = 7015,
    /// <summary>
    /// 没有可挑战的家族
    /// </summary>
    NoOpponent = 7016,
    /// <summary>
    /// 没有可用的跨服scene
    /// </summary>
    NoCrossSceneFound = 7017,
    /// <summary>
    /// 运输中不能退出
    /// </summary>
    CanNotLeaveOnCarrying = 7018,
    /// <summary>
    /// 对战结束不能进入地图
    /// </summary>
    BattleFinish = 7019,
    /// <summary>
    /// 报名族战中的家族不能改名
    /// </summary>
    CanNotChangeName = 7020,
    /// <summary>
    /// 报名族战中的家族不能解散
    /// </summary>
    CanNotDimiss = 7021,
    /// <summary>
    /// 报名族战中的家族不能被合并
    /// </summary>
    CanNotMerge = 7022,
    /// <summary>
    /// 族战中不能暂离
    /// </summary>
    CanNotTmpLeave = 7023,
    /// <summary>
    /// 没有可用的跨服服务器
    /// </summary>
    NoKfSceneFound = 7024,
    /// <summary>
    /// 队里有暂离成员不能进入战场
    /// </summary>
    CanNotEnterWithTmpLeaveMem = 7025,
    /// <summary>
    /// 队里有离线成员不能进入战场
    /// </summary>
    CanNotEnterWithOfflineMem = 7026,
    /// <summary>
    /// 有且仅有一方在族战地图
    /// </summary>
    OnlyOneInBattleMap = 7027,
    /// <summary>
    /// 不在同一张地图不能在战场中操作组队
    /// </summary>
    NotInSameMap = 7028,
    /// <summary>
    /// 队长运输资源中不能进队
    /// </summary>
    CanNotEnterTeamOnLeaderCarryingResource = 7029,
    /// <summary>
    /// 队伍运输资源中不能离队
    /// </summary>
    CanNotLeaveTeamOnLeaderCarryingResource = 7030,
    /// <summary>
    /// 队伍运输资源中不能暂离
    /// </summary>
    CanNotTmpLeaveTeamOnLeaderCarryingResource = 7031,
    /// <summary>
    /// 战场准备和战斗阶段不能退出家族
    /// </summary>
    CanNotQuitGuildWhenFighting = 7032,
    /// <summary>
    /// 不能在非安全区战斗
    /// </summary>
    CanNotFightInSafeArea = 7033,
    /// <summary>
    /// 安全区外不能进行队伍操作
    /// </summary>
    CanNotOperateTeamOutOfSafeArea = 7034,
    /// <summary>
    /// 请求匹配信息太频繁
    /// </summary>
    TooManyMatchDataRequests = 7035,
    /// <summary>
    /// 队长采集中不能更换队长
    /// </summary>
    CanNotChangeLeaderOnCollecting = 7036,
    /// <summary>
    /// 不属于当前战场
    /// </summary>
    NotBelongToThisBattle = 7037,
    /// <summary>
    /// 不能从战场传出
    /// </summary>
    CanNotTeleportOutside = 7038,
    /// <summary>
    /// 不属于同一家族
    /// </summary>
    NotInSameGuild = 7039,
    /// <summary>
    /// 处于保护中
    /// </summary>
    InProtection = 7040,
  }

  #endregion

  #region Messages
  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleApplyReq> _parser = new pb::MessageParser<CmdGuildBattleApplyReq>(() => new CmdGuildBattleApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleApplyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 族战对手信息
  /// </summary>
  public sealed class GuildBattleOppoInfo : pb::IMessage {
    private static readonly pb::MessageParser<GuildBattleOppoInfo> _parser = new pb::MessageParser<GuildBattleOppoInfo>(() => new GuildBattleOppoInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBattleOppoInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 1;
    private uint gameId_;
    /// <summary>
    /// 服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 2;
    private pb::ByteString gameName_ = pb::ByteString.Empty;
    /// <summary>
    /// 服务器名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    /// <summary>
    /// 家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 4;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameId);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GameName);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(GuildName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GameName);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameId = input.ReadUInt32();
            break;
          }
          case 18: {
            GameName = input.ReadBytes();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 34: {
            GuildName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleApplyNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleApplyNty> _parser = new pb::MessageParser<CmdGuildBattleApplyNty>(() => new CmdGuildBattleApplyNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleApplyNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "applyState" field.</summary>
    public const int ApplyStateFieldNumber = 1;
    private uint applyState_;
    /// <summary>
    /// 报名状态(0未报名, 1已报名, 2轮空)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyState {
      get { return applyState_; }
      set {
        applyState_ = value;
      }
    }

    /// <summary>Field number for the "oppo" field.</summary>
    public const int OppoFieldNumber = 2;
    private global::Packet.GuildBattleOppoInfo oppo_;
    /// <summary>
    /// 族战对手
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBattleOppoInfo Oppo {
      get { return oppo_; }
      set {
        oppo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyState != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ApplyState);
      }
      if (oppo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Oppo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplyState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyState);
      }
      if (oppo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oppo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyState = input.ReadUInt32();
            break;
          }
          case 18: {
            if (oppo_ == null) {
              oppo_ = new global::Packet.GuildBattleOppoInfo();
            }
            input.ReadMessage(oppo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleCancelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleCancelReq> _parser = new pb::MessageParser<CmdGuildBattleCancelReq>(() => new CmdGuildBattleCancelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleCancelReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleCancelAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleCancelAck> _parser = new pb::MessageParser<CmdGuildBattleCancelAck>(() => new CmdGuildBattleCancelAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleCancelAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleEnterReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleEnterReq> _parser = new pb::MessageParser<CmdGuildBattleEnterReq>(() => new CmdGuildBattleEnterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleEnterReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBattleStateNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleStateNty> _parser = new pb::MessageParser<CmdGuildBattleStateNty>(() => new CmdGuildBattleStateNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleStateNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private uint state_;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 2;
    private uint expiretime_;
    /// <summary>
    /// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(State);
      }
      if (Expiretime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expiretime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            State = input.ReadUInt32();
            break;
          }
          case 16: {
            Expiretime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleCheckApplyCondReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleCheckApplyCondReq> _parser = new pb::MessageParser<CmdGuildBattleCheckApplyCondReq>(() => new CmdGuildBattleCheckApplyCondReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleCheckApplyCondReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBattleCheckApplyCondRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleCheckApplyCondRes> _parser = new pb::MessageParser<CmdGuildBattleCheckApplyCondRes>(() => new CmdGuildBattleCheckApplyCondRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleCheckApplyCondRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_result_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> result_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 结果(0时间 1职位 2家族等级 3家族人数 4家族活跃人数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场家族数据
  /// </summary>
  public sealed class BattleGuildMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleGuildMapData> _parser = new pb::MessageParser<BattleGuildMapData>(() => new BattleGuildMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleGuildMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 家族id (填充guildUid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 3;
    private uint camp_;
    /// <summary>
    /// 阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 4;
    private uint resource_;
    /// <summary>
    /// 总上交资源数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.BattleRoleMapData> _repeated_members_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.BattleRoleMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleRoleMapData> members_ = new pbc::RepeatedField<global::Packet.BattleRoleMapData>();
    /// <summary>
    /// 玩家列表  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleRoleMapData> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GuildName);
      }
      if (Camp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Camp);
      }
      if (Resource != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Resource);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            GuildName = input.ReadBytes();
            break;
          }
          case 24: {
            Camp = input.ReadUInt32();
            break;
          }
          case 32: {
            Resource = input.ReadUInt32();
            break;
          }
          case 42: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场玩家数据
  /// </summary>
  public sealed class BattleRoleMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleMapData> _parser = new pb::MessageParser<BattleRoleMapData>(() => new BattleRoleMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    /// 玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private uint resource_;
    /// <summary>
    /// 资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (Resource != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Resource);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 24: {
            Resource = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场核心玩家数据
  /// </summary>
  public sealed class BattleCoreRoleMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleCoreRoleMapData> _parser = new pb::MessageParser<BattleCoreRoleMapData>(() => new BattleCoreRoleMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleCoreRoleMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    /// <summary>
    /// 模型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 3;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "fashionList" field.</summary>
    public const int FashionListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionList_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionList_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    /// <summary>
    /// 时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionList {
      get { return fashionList_; }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private uint title_;
    /// <summary>
    /// 称号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "weaponItemID" field.</summary>
    public const int WeaponItemIDFieldNumber = 7;
    private uint weaponItemID_;
    /// <summary>
    /// 主手武器的ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponItemID {
      get { return weaponItemID_; }
      set {
        weaponItemID_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 8;
    private uint totalScore_;
    /// <summary>
    /// 综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (Career != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      fashionList_.WriteTo(output, _repeated_fashionList_codec);
      if (Title != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Title);
      }
      if (WeaponItemID != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(WeaponItemID);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TotalScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += fashionList_.CalculateSize(_repeated_fashionList_codec);
      if (Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (WeaponItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponItemID);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 24: {
            Career = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 42: {
            fashionList_.AddEntriesFrom(input, _repeated_fashionList_codec);
            break;
          }
          case 48: {
            Title = input.ReadUInt32();
            break;
          }
          case 56: {
            WeaponItemID = input.ReadUInt32();
            break;
          }
          case 64: {
            TotalScore = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场核心队伍数据
  /// </summary>
  public sealed class BattleCoreTeamMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleCoreTeamMapData> _parser = new pb::MessageParser<BattleCoreTeamMapData>(() => new BattleCoreTeamMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleCoreTeamMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    /// 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleCoreRoleMapData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleCoreRoleMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCoreRoleMapData> roles_ = new pbc::RepeatedField<global::Packet.BattleCoreRoleMapData>();
    /// <summary>
    /// 队员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCoreRoleMapData> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "fighting" field.</summary>
    public const int FightingFieldNumber = 3;
    private bool fighting_;
    /// <summary>
    /// 是否在战斗中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fighting {
      get { return fighting_; }
      set {
        fighting_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 4;
    private uint resource_;
    /// <summary>
    /// 持有资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (Fighting != false) {
        output.WriteRawTag(24);
        output.WriteBool(Fighting);
      }
      if (Resource != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Resource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (Fighting != false) {
        size += 1 + 1;
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 18: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 24: {
            Fighting = input.ReadBool();
            break;
          }
          case 32: {
            Resource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场资源数据
  /// </summary>
  public sealed class BattleResourceMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleResourceMapData> _parser = new pb::MessageParser<BattleResourceMapData>(() => new BattleResourceMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleResourceMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 2;
    private uint maxCount_;
    /// <summary>
    /// 最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "leftCount" field.</summary>
    public const int LeftCountFieldNumber = 3;
    private uint leftCount_;
    /// <summary>
    /// 剩余数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftCount {
      get { return leftCount_; }
      set {
        leftCount_ = value;
      }
    }

    /// <summary>Field number for the "freshTime" field.</summary>
    public const int FreshTimeFieldNumber = 4;
    private uint freshTime_;
    /// <summary>
    /// 刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreshTime {
      get { return freshTime_; }
      set {
        freshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxCount);
      }
      if (LeftCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LeftCount);
      }
      if (FreshTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FreshTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCount);
      }
      if (LeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftCount);
      }
      if (FreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreshTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxCount = input.ReadUInt32();
            break;
          }
          case 24: {
            LeftCount = input.ReadUInt32();
            break;
          }
          case 32: {
            FreshTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleDataNty> _parser = new pb::MessageParser<CmdGuildBattleDataNty>(() => new CmdGuildBattleDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "guilds" field.</summary>
    public const int GuildsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleGuildMapData> _repeated_guilds_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleGuildMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleGuildMapData> guilds_ = new pbc::RepeatedField<global::Packet.BattleGuildMapData>();
    /// <summary>
    /// 家族列表  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleGuildMapData> Guilds {
      get { return guilds_; }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleResourceMapData> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleResourceMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleResourceMapData> resources_ = new pbc::RepeatedField<global::Packet.BattleResourceMapData>();
    /// <summary>
    /// 资源列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleResourceMapData> Resources {
      get { return resources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guilds_.WriteTo(output, _repeated_guilds_codec);
      resources_.WriteTo(output, _repeated_resources_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guilds_.CalculateSize(_repeated_guilds_codec);
      size += resources_.CalculateSize(_repeated_resources_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleAddRoleDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleAddRoleDataNty> _parser = new pb::MessageParser<CmdGuildBattleAddRoleDataNty>(() => new CmdGuildBattleAddRoleDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleAddRoleDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 家族id (填充guildUid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private global::Packet.BattleRoleMapData role_;
    /// <summary>
    /// 玩家数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleRoleMapData Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (role_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Role);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (role_ == null) {
              role_ = new global::Packet.BattleRoleMapData();
            }
            input.ReadMessage(role_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战场玩家更新数据
  /// </summary>
  public sealed class BattleRoleMapUpdateData : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleMapUpdateData> _parser = new pb::MessageParser<BattleRoleMapUpdateData>(() => new BattleRoleMapUpdateData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleMapUpdateData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private uint resource_;
    /// <summary>
    /// 资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private uint score_;
    /// <summary>
    /// 积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Resource != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Resource);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Resource = input.ReadUInt32();
            break;
          }
          case 24: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleUpdateRoleDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleUpdateRoleDataNty> _parser = new pb::MessageParser<CmdGuildBattleUpdateRoleDataNty>(() => new CmdGuildBattleUpdateRoleDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleUpdateRoleDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleRoleMapUpdateData> _repeated_role_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleRoleMapUpdateData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleRoleMapUpdateData> role_ = new pbc::RepeatedField<global::Packet.BattleRoleMapUpdateData>();
    /// <summary>
    /// 更新数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleRoleMapUpdateData> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      role_.WriteTo(output, _repeated_role_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += role_.CalculateSize(_repeated_role_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleFocusMiniMapReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleFocusMiniMapReq> _parser = new pb::MessageParser<CmdGuildBattleFocusMiniMapReq>(() => new CmdGuildBattleFocusMiniMapReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleFocusMiniMapReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    /// true开始关注 false取消关注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 族战玩家小地图数据
  /// </summary>
  public sealed class BattleRoleMiniMapData : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleMiniMapData> _parser = new pb::MessageParser<BattleRoleMiniMapData>(() => new BattleRoleMiniMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleMiniMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 2;
    private uint posX_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 3;
    private uint posY_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 4;
    private global::Packet.BattleRoleMiniMapData.Types.ResourceExtra extra_;
    /// <summary>
    /// 额外数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleRoleMiniMapData.Types.ResourceExtra Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosY);
      }
      if (extra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            PosX = input.ReadUInt32();
            break;
          }
          case 24: {
            PosY = input.ReadUInt32();
            break;
          }
          case 34: {
            if (extra_ == null) {
              extra_ = new global::Packet.BattleRoleMiniMapData.Types.ResourceExtra();
            }
            input.ReadMessage(extra_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleRoleMiniMapData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      /// <summary>
      /// 持有特殊资源的额外数据
      /// </summary>
      public sealed class ResourceExtra : pb::IMessage {
        private static readonly pb::MessageParser<ResourceExtra> _parser = new pb::MessageParser<ResourceExtra>(() => new ResourceExtra());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ResourceExtra> Parser { get { return _parser; } }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 1;
        private uint level_;
        /// <summary>
        /// 人物等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "heroId" field.</summary>
        public const int HeroIdFieldNumber = 2;
        private uint heroId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HeroId {
          get { return heroId_; }
          set {
            heroId_ = value;
          }
        }

        /// <summary>Field number for the "roleHead" field.</summary>
        public const int RoleHeadFieldNumber = 3;
        private uint roleHead_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RoleHead {
          get { return roleHead_; }
          set {
            roleHead_ = value;
          }
        }

        /// <summary>Field number for the "roleHeadFrame" field.</summary>
        public const int RoleHeadFrameFieldNumber = 4;
        private uint roleHeadFrame_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RoleHeadFrame {
          get { return roleHeadFrame_; }
          set {
            roleHeadFrame_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 5;
        private uint position_;
        /// <summary>
        /// 家族职位
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "fighting" field.</summary>
        public const int FightingFieldNumber = 6;
        private bool fighting_;
        /// <summary>
        /// 是否在战斗中
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Fighting {
          get { return fighting_; }
          set {
            fighting_ = value;
          }
        }

        /// <summary>Field number for the "resource" field.</summary>
        public const int ResourceFieldNumber = 7;
        private uint resource_;
        /// <summary>
        /// 持有资源类型
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Resource {
          get { return resource_; }
          set {
            resource_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
          if (HeroId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(HeroId);
          }
          if (RoleHead != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(RoleHead);
          }
          if (RoleHeadFrame != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(RoleHeadFrame);
          }
          if (Position != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Position);
          }
          if (Fighting != false) {
            output.WriteRawTag(48);
            output.WriteBool(Fighting);
          }
          if (Resource != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Resource);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (HeroId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
          }
          if (RoleHead != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHead);
          }
          if (RoleHeadFrame != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHeadFrame);
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
          }
          if (Fighting != false) {
            size += 1 + 1;
          }
          if (Resource != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
              case 16: {
                HeroId = input.ReadUInt32();
                break;
              }
              case 24: {
                RoleHead = input.ReadUInt32();
                break;
              }
              case 32: {
                RoleHeadFrame = input.ReadUInt32();
                break;
              }
              case 40: {
                Position = input.ReadUInt32();
                break;
              }
              case 48: {
                Fighting = input.ReadBool();
                break;
              }
              case 56: {
                Resource = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 族战玩家小地图数据列表
  /// </summary>
  public sealed class BattleRoleMiniMapDataList : pb::IMessage {
    private static readonly pb::MessageParser<BattleRoleMiniMapDataList> _parser = new pb::MessageParser<BattleRoleMiniMapDataList>(() => new BattleRoleMiniMapDataList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleMiniMapDataList> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleRoleMiniMapData> _repeated_role_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleRoleMiniMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleRoleMiniMapData> role_ = new pbc::RepeatedField<global::Packet.BattleRoleMiniMapData>();
    /// <summary>
    /// 玩家数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleRoleMiniMapData> Role {
      get { return role_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      role_.WriteTo(output, _repeated_role_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += role_.CalculateSize(_repeated_role_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleMiniMapDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleMiniMapDataNty> _parser = new pb::MessageParser<CmdGuildBattleMiniMapDataNty>(() => new CmdGuildBattleMiniMapDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleMiniMapDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "rolelist" field.</summary>
    public const int RolelistFieldNumber = 1;
    private global::Packet.BattleRoleMiniMapDataList rolelist_;
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleRoleMiniMapDataList Rolelist {
      get { return rolelist_; }
      set {
        rolelist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rolelist_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rolelist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rolelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rolelist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rolelist_ == null) {
              rolelist_ = new global::Packet.BattleRoleMiniMapDataList();
            }
            input.ReadMessage(rolelist_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleAttackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleAttackReq> _parser = new pb::MessageParser<CmdGuildBattleAttackReq>(() => new CmdGuildBattleAttackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleAttackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 对手id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattlePunishNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattlePunishNty> _parser = new pb::MessageParser<CmdGuildBattlePunishNty>(() => new CmdGuildBattlePunishNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattlePunishNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 1;
    private uint expiretime_;
    /// <summary>
    /// 惩罚到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Expiretime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Expiretime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Expiretime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleRecoveryReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleRecoveryReq> _parser = new pb::MessageParser<CmdGuildBattleRecoveryReq>(() => new CmdGuildBattleRecoveryReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleRecoveryReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcUid" field.</summary>
    public const int NpcUidFieldNumber = 1;
    private ulong npcUid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NpcUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleRecoveryNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleRecoveryNty> _parser = new pb::MessageParser<CmdGuildBattleRecoveryNty>(() => new CmdGuildBattleRecoveryNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleRecoveryNty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBattleHandInResourceReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleHandInResourceReq> _parser = new pb::MessageParser<CmdGuildBattleHandInResourceReq>(() => new CmdGuildBattleHandInResourceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleHandInResourceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcUid" field.</summary>
    public const int NpcUidFieldNumber = 1;
    private ulong npcUid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUid {
      get { return npcUid_; }
      set {
        npcUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NpcUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcUid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleHandInResourceRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleHandInResourceRes> _parser = new pb::MessageParser<CmdGuildBattleHandInResourceRes>(() => new CmdGuildBattleHandInResourceRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleHandInResourceRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "former" field.</summary>
    public const int FormerFieldNumber = 1;
    private uint former_;
    /// <summary>
    /// 原有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Former {
      get { return former_; }
      set {
        former_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private uint current_;
    /// <summary>
    /// 现有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Former != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Former);
      }
      if (Current != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Current);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Former != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Former);
      }
      if (Current != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Current);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Former = input.ReadUInt32();
            break;
          }
          case 16: {
            Current = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleResultNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleResultNty> _parser = new pb::MessageParser<CmdGuildBattleResultNty>(() => new CmdGuildBattleResultNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleResultNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    /// <summary>
    /// 族战结果(0失败 1获胜 2平局)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleMatchTeamDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleMatchTeamDataReq> _parser = new pb::MessageParser<CmdGuildBattleMatchTeamDataReq>(() => new CmdGuildBattleMatchTeamDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleMatchTeamDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 战场队伍匹配列表数据
  /// </summary>
  public sealed class BattleMatchTeamData : pb::IMessage {
    private static readonly pb::MessageParser<BattleMatchTeamData> _parser = new pb::MessageParser<BattleMatchTeamData>(() => new BattleMatchTeamData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMatchTeamData> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    /// <summary>
    /// 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 2;
    private uint memberCount_;
    /// <summary>
    /// 队员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "leaderData" field.</summary>
    public const int LeaderDataFieldNumber = 3;
    private global::Packet.BattleMatchRoleData leaderData_;
    /// <summary>
    /// 队长数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleMatchRoleData LeaderData {
      get { return leaderData_; }
      set {
        leaderData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MemberCount);
      }
      if (leaderData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LeaderData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (leaderData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaderData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 26: {
            if (leaderData_ == null) {
              leaderData_ = new global::Packet.BattleMatchRoleData();
            }
            input.ReadMessage(leaderData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleMatchTeamDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleMatchTeamDataRes> _parser = new pb::MessageParser<CmdGuildBattleMatchTeamDataRes>(() => new CmdGuildBattleMatchTeamDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleMatchTeamDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleMatchTeamData> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleMatchTeamData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleMatchTeamData> teams_ = new pbc::RepeatedField<global::Packet.BattleMatchTeamData>();
    /// <summary>
    /// 队伍列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleMatchTeamData> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleMatchRoleDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleMatchRoleDataReq> _parser = new pb::MessageParser<CmdGuildBattleMatchRoleDataReq>(() => new CmdGuildBattleMatchRoleDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleMatchRoleDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 战场人物匹配列表数据
  /// </summary>
  public sealed class BattleMatchRoleData : pb::IMessage {
    private static readonly pb::MessageParser<BattleMatchRoleData> _parser = new pb::MessageParser<BattleMatchRoleData>(() => new BattleMatchRoleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMatchRoleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 人物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    /// 人物等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 3;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "roleHead" field.</summary>
    public const int RoleHeadFieldNumber = 4;
    private uint roleHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHead {
      get { return roleHead_; }
      set {
        roleHead_ = value;
      }
    }

    /// <summary>Field number for the "roleHeadFrame" field.</summary>
    public const int RoleHeadFrameFieldNumber = 5;
    private uint roleHeadFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleHeadFrame {
      get { return roleHeadFrame_; }
      set {
        roleHeadFrame_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 6;
    private uint career_;
    /// <summary>
    /// 职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroId);
      }
      if (RoleHead != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoleHeadFrame);
      }
      if (Career != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (RoleHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHead);
      }
      if (RoleHeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHeadFrame);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleHead = input.ReadUInt32();
            break;
          }
          case 40: {
            RoleHeadFrame = input.ReadUInt32();
            break;
          }
          case 48: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleMatchRoleDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleMatchRoleDataRes> _parser = new pb::MessageParser<CmdGuildBattleMatchRoleDataRes>(() => new CmdGuildBattleMatchRoleDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleMatchRoleDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleMatchRoleData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleMatchRoleData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleMatchRoleData> roles_ = new pbc::RepeatedField<global::Packet.BattleMatchRoleData>();
    /// <summary>
    /// 人物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleMatchRoleData> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleUpdateGuildDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleUpdateGuildDataNty> _parser = new pb::MessageParser<CmdGuildBattleUpdateGuildDataNty>(() => new CmdGuildBattleUpdateGuildDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleUpdateGuildDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 家族id     (填充guildUid)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private uint resource_;
    /// <summary>
    /// 总上交资源数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      if (Resource != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Resource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 16: {
            Resource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleDisplayHintNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleDisplayHintNty> _parser = new pb::MessageParser<CmdGuildBattleDisplayHintNty>(() => new CmdGuildBattleDisplayHintNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleDisplayHintNty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBattleUpdateResourceDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleUpdateResourceDataNty> _parser = new pb::MessageParser<CmdGuildBattleUpdateResourceDataNty>(() => new CmdGuildBattleUpdateResourceDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleUpdateResourceDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleResourceMapData> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleResourceMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleResourceMapData> resources_ = new pbc::RepeatedField<global::Packet.BattleResourceMapData>();
    /// <summary>
    /// 资源列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleResourceMapData> Resources {
      get { return resources_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resources_.WriteTo(output, _repeated_resources_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resources_.CalculateSize(_repeated_resources_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdGuildBattleDisplayApplyHintNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleDisplayApplyHintNty> _parser = new pb::MessageParser<CmdGuildBattleDisplayApplyHintNty>(() => new CmdGuildBattleDisplayApplyHintNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleDisplayApplyHintNty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 报名提示开关
  /// </summary>
  public sealed class GuildBattleApplyHintSwitch : pb::IMessage {
    private static readonly pb::MessageParser<GuildBattleApplyHintSwitch> _parser = new pb::MessageParser<GuildBattleApplyHintSwitch>(() => new GuildBattleApplyHintSwitch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBattleApplyHintSwitch> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    /// 是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleConfigureApplyHintReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleConfigureApplyHintReq> _parser = new pb::MessageParser<CmdGuildBattleConfigureApplyHintReq>(() => new CmdGuildBattleConfigureApplyHintReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleConfigureApplyHintReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    /// 是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleApplyHintConfigNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleApplyHintConfigNty> _parser = new pb::MessageParser<CmdGuildBattleApplyHintConfigNty>(() => new CmdGuildBattleApplyHintConfigNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleApplyHintConfigNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "hintswitch" field.</summary>
    public const int HintswitchFieldNumber = 1;
    private global::Packet.GuildBattleApplyHintSwitch hintswitch_;
    /// <summary>
    /// 报名提示开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBattleApplyHintSwitch Hintswitch {
      get { return hintswitch_; }
      set {
        hintswitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hintswitch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hintswitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hintswitch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hintswitch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hintswitch_ == null) {
              hintswitch_ = new global::Packet.GuildBattleApplyHintSwitch();
            }
            input.ReadMessage(hintswitch_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleFocusCoreTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleFocusCoreTeamReq> _parser = new pb::MessageParser<CmdGuildBattleFocusCoreTeamReq>(() => new CmdGuildBattleFocusCoreTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleFocusCoreTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    /// true开始关注 false取消关注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBattleUpdateCoreTeamNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleUpdateCoreTeamNty> _parser = new pb::MessageParser<CmdGuildBattleUpdateCoreTeamNty>(() => new CmdGuildBattleUpdateCoreTeamNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleUpdateCoreTeamNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private ulong guildId_;
    /// <summary>
    /// 家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleCoreTeamMapData> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleCoreTeamMapData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCoreTeamMapData> updates_ = new pbc::RepeatedField<global::Packet.BattleCoreTeamMapData>();
    /// <summary>
    /// 核心队伍列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCoreTeamMapData> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GuildId);
      }
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 18: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 核心队伍数据
  /// </summary>
  public sealed class BattleCoreTeamTotalData : pb::IMessage {
    private static readonly pb::MessageParser<BattleCoreTeamTotalData> _parser = new pb::MessageParser<BattleCoreTeamTotalData>(() => new BattleCoreTeamTotalData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleCoreTeamTotalData> Parser { get { return _parser; } }

    /// <summary>Field number for the "guilds" field.</summary>
    public const int GuildsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleCoreTeamTotalData.Types.GuildData> _repeated_guilds_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleCoreTeamTotalData.Types.GuildData.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCoreTeamTotalData.Types.GuildData> guilds_ = new pbc::RepeatedField<global::Packet.BattleCoreTeamTotalData.Types.GuildData>();
    /// <summary>
    /// 家族列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCoreTeamTotalData.Types.GuildData> Guilds {
      get { return guilds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guilds_.WriteTo(output, _repeated_guilds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guilds_.CalculateSize(_repeated_guilds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleCoreTeamTotalData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class GuildData : pb::IMessage {
        private static readonly pb::MessageParser<GuildData> _parser = new pb::MessageParser<GuildData>(() => new GuildData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GuildData> Parser { get { return _parser; } }

        /// <summary>Field number for the "guildId" field.</summary>
        public const int GuildIdFieldNumber = 1;
        private ulong guildId_;
        /// <summary>
        /// 家族id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong GuildId {
          get { return guildId_; }
          set {
            guildId_ = value;
          }
        }

        /// <summary>Field number for the "teams" field.</summary>
        public const int TeamsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Packet.BattleCoreTeamMapData> _repeated_teams_codec
            = pb::FieldCodec.ForMessage(18, global::Packet.BattleCoreTeamMapData.Parser);
        private readonly pbc::RepeatedField<global::Packet.BattleCoreTeamMapData> teams_ = new pbc::RepeatedField<global::Packet.BattleCoreTeamMapData>();
        /// <summary>
        /// 核心队伍列表
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.BattleCoreTeamMapData> Teams {
          get { return teams_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GuildId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(GuildId);
          }
          teams_.WriteTo(output, _repeated_teams_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GuildId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
          }
          size += teams_.CalculateSize(_repeated_teams_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                GuildId = input.ReadUInt64();
                break;
              }
              case 18: {
                teams_.AddEntriesFrom(input, _repeated_teams_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdGuildBattleCoreTeamDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBattleCoreTeamDataNty> _parser = new pb::MessageParser<CmdGuildBattleCoreTeamDataNty>(() => new CmdGuildBattleCoreTeamDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBattleCoreTeamDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    /// <summary>
    /// true关注中 false不关注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Packet.BattleCoreTeamTotalData data_;
    /// <summary>
    /// 核心队伍数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleCoreTeamTotalData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Packet.BattleCoreTeamTotalData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
