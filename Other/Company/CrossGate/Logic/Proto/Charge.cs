// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdCharge {
    None = 0,
    /// <summary>
    ///上线时，数据变动时通知
    /// </summary>
    DataNtf = 5601,
    /// <summary>
    /// 充值请求，返回签名
    /// </summary>
    ChargeReq = 5602,
    /// <summary>
    /// </summary>
    ChargeRes = 5603,
    /// <summary>
    ///充值成功通知
    /// </summary>
    ChargeNtf = 5604,
    /// <summary>
    /// 首充礼包领取请求
    /// </summary>
    FirstGiftGetReq = 5605,
    /// <summary>
    /// 首充礼包领取返回
    /// </summary>
    FirstGiftGetRes = 5606,
    /// <summary>
    /// 首充礼包状态同步
    /// </summary>
    FirstGiftNtf = 5607,
    /// <summary>
    /// 累计充值领取请求
    /// </summary>
    CumulateGetReq = 5608,
    /// <summary>
    /// 累计充值领取返回
    /// </summary>
    CumulateGetRes = 5609,
    /// <summary>
    /// 累计充值同步
    /// </summary>
    CumulateNtf = 5610,
    /// <summary>
    /// 成长基金领取请求
    /// </summary>
    GrowthGetReq = 5611,
    /// <summary>
    /// 成长基金领取返回
    /// </summary>
    GrowthGetRes = 5612,
    /// <summary>
    /// 成长基金同步
    /// </summary>
    GrowthNtf = 5613,
    /// <summary>
    /// 月卡奖励领取请求(月卡/年卡)
    /// </summary>
    CardRewardGetReq = 5614,
    /// <summary>
    /// 月卡奖励领取返回
    /// </summary>
    CardRewardGetRes = 5615,
    /// <summary>
    /// 月卡信息同步
    /// </summary>
    CardDataNtf = 5616,
    /// <summary>
    /// 累计充值刷新请求
    /// </summary>
    CumulateRefreshReq = 5617,
    /// <summary>
    /// 成长基金刷新请求
    /// </summary>
    GrowthRefreshReq = 5618,
    /// <summary>
    /// 特权卡刷新请求
    /// </summary>
    CardRefreshReq = 5619,
    /// <summary>
    ///charge exp
    /// </summary>
    ExpNtf = 5620,
    /// <summary>
    ///聊天次数更新
    /// </summary>
    FreeChatUpdateNtf = 5621,
    /// <summary>
    ///使用代金券充值
    /// </summary>
    UseCashCouponReq = 5622,
    UseCashCouponRes = 5623,
    /// <summary>
    /// 赠送月卡同步
    /// </summary>
    GiftCardNtf = 5624,
  }

  public enum ErrorCharge {
    None = 0,
    /// <summary>
    ///未找到对应充值项
    /// </summary>
    CsvnotFound = 5601,
    SystemError = 5602,
    /// <summary>
    ///已关闭充值
    /// </summary>
    CloseDeposit = 5603,
    /// <summary>
    ///未激活-不可领取
    /// </summary>
    NotUnlock = 5604,
    /// <summary>
    ///奖励已领取
    /// </summary>
    RewardReceived = 5605,
    /// <summary>
    ///请求参数错误    
    /// </summary>
    ReqParamErr = 5606,
    /// <summary>
    ///首充礼包无对应职业配置
    /// </summary>
    CsvfirstGiftOccuErr = 5607,
    /// <summary>
    ///累充配置错误
    /// </summary>
    CsvcareerErr = 5608,
    /// <summary>
    ///成长基金配置错误
    /// </summary>
    CsvchargeGrowthErr = 5609,
    /// <summary>
    ///月卡配置错误
    /// </summary>
    CsvchargeCardErr = 5610,
    /// <summary>
    ///请求支付太频繁
    /// </summary>
    ChargeReqTooFast = 5611,
    /// <summary>
    ///代金券已过期
    /// </summary>
    CashCouponExpired = 5612,
    /// <summary>
    ///没找到对应代金券
    /// </summary>
    NotFoundCashCoupon = 5613,
    /// <summary>
    ///特权卡已达最大天数
    /// </summary>
    ChargeCardDayMax = 5614,
    /// <summary>
    ///特权卡赠送次数已达上限
    /// </summary>
    GiftCardTimesMax = 5615,
    /// <summary>
    ///特权卡首充次数不足
    /// </summary>
    FirstCardNumLess = 5616,
    /// <summary>
    ///好友不在线(用于充值好友赠送不在线, 返回game处理offMap)
    /// </summary>
    FriendOffLine = 5617,
    /// <summary>
    ///不是好友
    /// </summary>
    NotFriend = 5618,
    /// <summary>
    ///roleId跟userid不匹配
    /// </summary>
    UserDisMatch = 5619,
    /// <summary>
    ///重复通知
    /// </summary>
    Repeated = 5620,
    /// <summary>
    ///充值付款不对
    /// </summary>
    MoneryWrong = 5621,
  }

  public enum ChargeActiveReason {
    None = 0,
    /// <summary>
    ///充值
    /// </summary>
    Charge = 5601,
    /// <summary>
    ///首充赠送
    /// </summary>
    ChargeGift = 5602,
    /// <summary>
    ///首充礼包
    /// </summary>
    FirstGift = 5603,
    /// <summary>
    ///累计充值
    /// </summary>
    Cumulate = 5604,
    /// <summary>
    ///成长基金
    /// </summary>
    Growth = 5605,
    /// <summary>
    ///特权卡(月卡/年卡)
    /// </summary>
    Card = 5606,
    /// <summary>
    ///成长基金补偿
    /// </summary>
    GrowthCompensate = 5607,
    /// <summary>
    ///代金券充值
    /// </summary>
    CashCoupon = 5608,
    /// <summary>
    ///特权卡首充补偿
    /// </summary>
    FirstCardCompensate = 5609,
    /// <summary>
    ///特权卡赠送
    /// </summary>
    GiftCard = 5610,
  }

  public enum ChargeRewardStatus {
    None = 0,
    /// <summary>
    /// 可领取
    /// </summary>
    CanReceive = 1,
    /// <summary>
    /// 已领取
    /// </summary>
    Receivid = 2,
  }

  /// <summary>
  ///充值产品Id类型, 用于决定ProductId用哪一套
  /// </summary>
  public enum ChargeProductIdType {
    Normal = 0,
    /// <summary>
    ///苹果设备
    /// </summary>
    Apple = 1,
  }

  #endregion

  #region Messages
  public sealed class CmdChargeDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeDataNtf> _parser = new pb::MessageParser<CmdChargeDataNtf>(() => new CmdChargeDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "firstChargedIds" field.</summary>
    public const int FirstChargedIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_firstChargedIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> firstChargedIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///以下每个字段，都先清除本地数据再新加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> FirstChargedIds {
      get { return firstChargedIds_; }
    }

    /// <summary>Field number for the "firstGift" field.</summary>
    public const int FirstGiftFieldNumber = 2;
    private global::Packet.CmdChargeFirstGiftNtf firstGift_;
    /// <summary>
    ///首充礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdChargeFirstGiftNtf FirstGift {
      get { return firstGift_; }
      set {
        firstGift_ = value;
      }
    }

    /// <summary>Field number for the "cumulate" field.</summary>
    public const int CumulateFieldNumber = 3;
    private global::Packet.CmdChargeCumulateNtf cumulate_;
    /// <summary>
    ///累计充值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdChargeCumulateNtf Cumulate {
      get { return cumulate_; }
      set {
        cumulate_ = value;
      }
    }

    /// <summary>Field number for the "growth" field.</summary>
    public const int GrowthFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CmdChargeGrowthNtf> _repeated_growth_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CmdChargeGrowthNtf.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdChargeGrowthNtf> growth_ = new pbc::RepeatedField<global::Packet.CmdChargeGrowthNtf>();
    /// <summary>
    ///成长基金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdChargeGrowthNtf> Growth {
      get { return growth_; }
    }

    /// <summary>Field number for the "cardData" field.</summary>
    public const int CardDataFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.CmdChargeCardDataNtf> _repeated_cardData_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.CmdChargeCardDataNtf.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdChargeCardDataNtf> cardData_ = new pbc::RepeatedField<global::Packet.CmdChargeCardDataNtf>();
    /// <summary>
    /// 充值特权卡信息(月卡/年卡)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdChargeCardDataNtf> CardData {
      get { return cardData_; }
    }

    /// <summary>Field number for the "chargeActExp" field.</summary>
    public const int ChargeActExpFieldNumber = 6;
    private uint chargeActExp_;
    /// <summary>
    ///充值经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeActExp {
      get { return chargeActExp_; }
      set {
        chargeActExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      firstChargedIds_.WriteTo(output, _repeated_firstChargedIds_codec);
      if (firstGift_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstGift);
      }
      if (cumulate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cumulate);
      }
      growth_.WriteTo(output, _repeated_growth_codec);
      cardData_.WriteTo(output, _repeated_cardData_codec);
      if (ChargeActExp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ChargeActExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += firstChargedIds_.CalculateSize(_repeated_firstChargedIds_codec);
      if (firstGift_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstGift);
      }
      if (cumulate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cumulate);
      }
      size += growth_.CalculateSize(_repeated_growth_codec);
      size += cardData_.CalculateSize(_repeated_cardData_codec);
      if (ChargeActExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeActExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            firstChargedIds_.AddEntriesFrom(input, _repeated_firstChargedIds_codec);
            break;
          }
          case 18: {
            if (firstGift_ == null) {
              firstGift_ = new global::Packet.CmdChargeFirstGiftNtf();
            }
            input.ReadMessage(firstGift_);
            break;
          }
          case 26: {
            if (cumulate_ == null) {
              cumulate_ = new global::Packet.CmdChargeCumulateNtf();
            }
            input.ReadMessage(cumulate_);
            break;
          }
          case 34: {
            growth_.AddEntriesFrom(input, _repeated_growth_codec);
            break;
          }
          case 42: {
            cardData_.AddEntriesFrom(input, _repeated_cardData_codec);
            break;
          }
          case 48: {
            ChargeActExp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeChargeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeChargeReq> _parser = new pb::MessageParser<CmdChargeChargeReq>(() => new CmdChargeChargeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeChargeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chargeId" field.</summary>
    public const int ChargeIdFieldNumber = 1;
    private uint chargeId_;
    /// <summary>
    ///充值表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeId {
      get { return chargeId_; }
      set {
        chargeId_ = value;
      }
    }

    /// <summary>Field number for the "productIdType" field.</summary>
    public const int ProductIdTypeFieldNumber = 2;
    private uint productIdType_;
    /// <summary>
    ///参见enum ChargeProductIdType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProductIdType {
      get { return productIdType_; }
      set {
        productIdType_ = value;
      }
    }

    /// <summary>Field number for the "chargeChannel" field.</summary>
    public const int ChargeChannelFieldNumber = 3;
    private pb::ByteString chargeChannel_ = pb::ByteString.Empty;
    /// <summary>
    ///充值使用的channel， 据快手要求，ios需要使用"ks"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChargeChannel {
      get { return chargeChannel_; }
      set {
        chargeChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientParam" field.</summary>
    public const int ClientParamFieldNumber = 4;
    private uint clientParam_;
    /// <summary>
    ///可选参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientParam {
      get { return clientParam_; }
      set {
        clientParam_ = value;
      }
    }

    /// <summary>Field number for the "clientParam2" field.</summary>
    public const int ClientParam2FieldNumber = 5;
    private pb::ByteString clientParam2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientParam2 {
      get { return clientParam2_; }
      set {
        clientParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limitGiftId" field.</summary>
    public const int LimitGiftIdFieldNumber = 6;
    private uint limitGiftId_;
    /// <summary>
    ///若购买商品为条件礼包，需填充该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitGiftId {
      get { return limitGiftId_; }
      set {
        limitGiftId_ = value;
      }
    }

    /// <summary>Field number for the "friendId" field.</summary>
    public const int FriendIdFieldNumber = 7;
    private ulong friendId_;
    /// <summary>
    ///赠送好友ID, 不为空为赠送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChargeId);
      }
      if (ProductIdType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ProductIdType);
      }
      if (ChargeChannel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ChargeChannel);
      }
      if (ClientParam != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ClientParam);
      }
      if (ClientParam2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ClientParam2);
      }
      if (LimitGiftId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LimitGiftId);
      }
      if (FriendId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeId);
      }
      if (ProductIdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductIdType);
      }
      if (ChargeChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChargeChannel);
      }
      if (ClientParam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientParam);
      }
      if (ClientParam2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientParam2);
      }
      if (LimitGiftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitGiftId);
      }
      if (FriendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargeId = input.ReadUInt32();
            break;
          }
          case 16: {
            ProductIdType = input.ReadUInt32();
            break;
          }
          case 26: {
            ChargeChannel = input.ReadBytes();
            break;
          }
          case 32: {
            ClientParam = input.ReadUInt32();
            break;
          }
          case 42: {
            ClientParam2 = input.ReadBytes();
            break;
          }
          case 48: {
            LimitGiftId = input.ReadUInt32();
            break;
          }
          case 56: {
            FriendId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeChargeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeChargeRes> _parser = new pb::MessageParser<CmdChargeChargeRes>(() => new CmdChargeChargeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeChargeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "chargeId" field.</summary>
    public const int ChargeIdFieldNumber = 1;
    private uint chargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeId {
      get { return chargeId_; }
      set {
        chargeId_ = value;
      }
    }

    /// <summary>Field number for the "productIdType" field.</summary>
    public const int ProductIdTypeFieldNumber = 15;
    private uint productIdType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProductIdType {
      get { return productIdType_; }
      set {
        productIdType_ = value;
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 8;
    private pb::ByteString appId_ = pb::ByteString.Empty;
    /// <summary>
    ///--- 签名字段(非空参与) ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chargeChannel" field.</summary>
    public const int ChargeChannelFieldNumber = 17;
    private pb::ByteString chargeChannel_ = pb::ByteString.Empty;
    /// <summary>
    /// 充值使用的渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChargeChannel {
      get { return chargeChannel_; }
      set {
        chargeChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_type" field.</summary>
    public const int CurrencyTypeFieldNumber = 21;
    private pb::ByteString currencyType_ = pb::ByteString.Empty;
    /// <summary>
    ///货币类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 4;
    private pb::ByteString extension_ = pb::ByteString.Empty;
    /// <summary>
    ///客户端下单时附带该字符串，服务器收到充值回调时使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extension {
      get { return extension_; }
      set {
        extension_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 22;
    private pb::ByteString gameId_ = pb::ByteString.Empty;
    /// <summary>
    ///玩家账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 9;
    private uint money_;
    /// <summary>
    ///传给客户端，下单时使用这个金额(代替表格中的值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "notify_url" field.</summary>
    public const int NotifyUrlFieldNumber = 5;
    private pb::ByteString notifyUrl_ = pb::ByteString.Empty;
    /// <summary>
    ///通知回调地址， 传给sdk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NotifyUrl {
      get { return notifyUrl_; }
      set {
        notifyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_desc" field.</summary>
    public const int ProductDescFieldNumber = 12;
    private pb::ByteString productDesc_ = pb::ByteString.Empty;
    /// <summary>
    ///商品描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProductDesc {
      get { return productDesc_; }
      set {
        productDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 16;
    private pb::ByteString productId_ = pb::ByteString.Empty;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 11;
    private pb::ByteString productName_ = pb::ByteString.Empty;
    /// <summary>
    ///商品名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 23;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 20;
    private uint level_;
    /// <summary>
    ///角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 24;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 10;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 6;
    private pb::ByteString serverName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_party_trade_no" field.</summary>
    public const int ThirdPartyTradeNoFieldNumber = 2;
    private pb::ByteString thirdPartyTradeNo_ = pb::ByteString.Empty;
    /// <summary>
    ///游戏自定义订单id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPartyTradeNo {
      get { return thirdPartyTradeNo_; }
      set {
        thirdPartyTradeNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_ip" field.</summary>
    public const int UserIpFieldNumber = 7;
    private pb::ByteString userIp_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserIp {
      get { return userIp_; }
      set {
        userIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private pb::ByteString sign_ = pb::ByteString.Empty;
    /// <summary>
    ///服务器生成的充值签名(sha512 + base64)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_num" field.</summary>
    public const int ProductNumFieldNumber = 13;
    private uint productNum_;
    /// <summary>
    ///--- 签名字段 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProductNum {
      get { return productNum_; }
      set {
        productNum_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 14;
    private uint vip_;
    /// <summary>
    ///vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "clientParam" field.</summary>
    public const int ClientParamFieldNumber = 18;
    private uint clientParam_;
    /// <summary>
    ///--- 客户端自用参数 ---
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientParam {
      get { return clientParam_; }
      set {
        clientParam_ = value;
      }
    }

    /// <summary>Field number for the "clientParam2" field.</summary>
    public const int ClientParam2FieldNumber = 19;
    private pb::ByteString clientParam2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientParam2 {
      get { return clientParam2_; }
      set {
        clientParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChargeId);
      }
      if (ThirdPartyTradeNo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ThirdPartyTradeNo);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Sign);
      }
      if (Extension.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Extension);
      }
      if (NotifyUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(NotifyUrl);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ServerName);
      }
      if (UserIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(UserIp);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(AppId);
      }
      if (Money != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Money);
      }
      if (ServerId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ServerId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(ProductName);
      }
      if (ProductDesc.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ProductDesc);
      }
      if (ProductNum != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ProductNum);
      }
      if (Vip != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Vip);
      }
      if (ProductIdType != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ProductIdType);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(ProductId);
      }
      if (ChargeChannel.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(ChargeChannel);
      }
      if (ClientParam != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ClientParam);
      }
      if (ClientParam2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(ClientParam2);
      }
      if (Level != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Level);
      }
      if (CurrencyType.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(CurrencyType);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(GameId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(RoleName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeId);
      }
      if (ProductIdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductIdType);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppId);
      }
      if (ChargeChannel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ChargeChannel);
      }
      if (CurrencyType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(CurrencyType);
      }
      if (Extension.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extension);
      }
      if (GameId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(GameId);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Money);
      }
      if (NotifyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NotifyUrl);
      }
      if (ProductDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProductDesc);
      }
      if (ProductId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ProductId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProductName);
      }
      if (RoleId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (RoleName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerName);
      }
      if (ThirdPartyTradeNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPartyTradeNo);
      }
      if (UserIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserIp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sign);
      }
      if (ProductNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProductNum);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vip);
      }
      if (ClientParam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClientParam);
      }
      if (ClientParam2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ClientParam2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargeId = input.ReadUInt32();
            break;
          }
          case 18: {
            ThirdPartyTradeNo = input.ReadBytes();
            break;
          }
          case 26: {
            Sign = input.ReadBytes();
            break;
          }
          case 34: {
            Extension = input.ReadBytes();
            break;
          }
          case 42: {
            NotifyUrl = input.ReadBytes();
            break;
          }
          case 50: {
            ServerName = input.ReadBytes();
            break;
          }
          case 58: {
            UserIp = input.ReadBytes();
            break;
          }
          case 66: {
            AppId = input.ReadBytes();
            break;
          }
          case 72: {
            Money = input.ReadUInt32();
            break;
          }
          case 80: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 90: {
            ProductName = input.ReadBytes();
            break;
          }
          case 98: {
            ProductDesc = input.ReadBytes();
            break;
          }
          case 104: {
            ProductNum = input.ReadUInt32();
            break;
          }
          case 112: {
            Vip = input.ReadUInt32();
            break;
          }
          case 120: {
            ProductIdType = input.ReadUInt32();
            break;
          }
          case 130: {
            ProductId = input.ReadBytes();
            break;
          }
          case 138: {
            ChargeChannel = input.ReadBytes();
            break;
          }
          case 144: {
            ClientParam = input.ReadUInt32();
            break;
          }
          case 154: {
            ClientParam2 = input.ReadBytes();
            break;
          }
          case 160: {
            Level = input.ReadUInt32();
            break;
          }
          case 170: {
            CurrencyType = input.ReadBytes();
            break;
          }
          case 178: {
            GameId = input.ReadBytes();
            break;
          }
          case 184: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 194: {
            RoleName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeChargeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeChargeNtf> _parser = new pb::MessageParser<CmdChargeChargeNtf>(() => new CmdChargeChargeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeChargeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chargeId" field.</summary>
    public const int ChargeIdFieldNumber = 1;
    private uint chargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeId {
      get { return chargeId_; }
      set {
        chargeId_ = value;
      }
    }

    /// <summary>Field number for the "firstCharged" field.</summary>
    public const int FirstChargedFieldNumber = 2;
    private bool firstCharged_;
    /// <summary>
    ///该id是否为首充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstCharged {
      get { return firstCharged_; }
      set {
        firstCharged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChargeId);
      }
      if (FirstCharged != false) {
        output.WriteRawTag(16);
        output.WriteBool(FirstCharged);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeId);
      }
      if (FirstCharged != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargeId = input.ReadUInt32();
            break;
          }
          case 16: {
            FirstCharged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 首充礼包领取请求
  /// </summary>
  public sealed class CmdChargeFirstGiftGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeFirstGiftGetReq> _parser = new pb::MessageParser<CmdChargeFirstGiftGetReq>(() => new CmdChargeFirstGiftGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeFirstGiftGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 1;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 首充礼包领取返回
  /// </summary>
  public sealed class CmdChargeFirstGiftGetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeFirstGiftGetRes> _parser = new pb::MessageParser<CmdChargeFirstGiftGetRes>(() => new CmdChargeFirstGiftGetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeFirstGiftGetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 1;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 首充礼包状态同步
  /// </summary>
  public sealed class CmdChargeFirstGiftNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeFirstGiftNtf> _parser = new pb::MessageParser<CmdChargeFirstGiftNtf>(() => new CmdChargeFirstGiftNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeFirstGiftNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_status_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> status_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 累计充值领取请求
  /// </summary>
  public sealed class CmdChargeCumulateGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCumulateGetReq> _parser = new pb::MessageParser<CmdChargeCumulateGetReq>(() => new CmdChargeCumulateGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCumulateGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 1;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 累计充值领取返回
  /// </summary>
  public sealed class CmdChargeCumulateGetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCumulateGetRes> _parser = new pb::MessageParser<CmdChargeCumulateGetRes>(() => new CmdChargeCumulateGetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCumulateGetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 1;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 累计充值同步
  /// </summary>
  public sealed class CmdChargeCumulateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCumulateNtf> _parser = new pb::MessageParser<CmdChargeCumulateNtf>(() => new CmdChargeCumulateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCumulateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cumulateValue" field.</summary>
    public const int CumulateValueFieldNumber = 1;
    private uint cumulateValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CumulateValue {
      get { return cumulateValue_; }
      set {
        cumulateValue_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_status_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> status_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CumulateValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CumulateValue);
      }
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CumulateValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CumulateValue);
      }
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CumulateValue = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 累计充值刷新请求
  /// </summary>
  public sealed class CmdChargeCumulateRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCumulateRefreshReq> _parser = new pb::MessageParser<CmdChargeCumulateRefreshReq>(() => new CmdChargeCumulateRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCumulateRefreshReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 成长基金领取请求
  /// </summary>
  public sealed class CmdChargeGrowthGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeGrowthGetReq> _parser = new pb::MessageParser<CmdChargeGrowthGetReq>(() => new CmdChargeGrowthGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeGrowthGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 2;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      if (RewardIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成长基金领取返回
  /// </summary>
  public sealed class CmdChargeGrowthGetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeGrowthGetRes> _parser = new pb::MessageParser<CmdChargeGrowthGetRes>(() => new CmdChargeGrowthGetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeGrowthGetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "rewardIndex" field.</summary>
    public const int RewardIndexFieldNumber = 2;
    private uint rewardIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardIndex {
      get { return rewardIndex_; }
      set {
        rewardIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      if (RewardIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RewardIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      if (RewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 16: {
            RewardIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成长基金同步
  /// </summary>
  public sealed class CmdChargeGrowthNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeGrowthNtf> _parser = new pb::MessageParser<CmdChargeGrowthNtf>(() => new CmdChargeGrowthNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeGrowthNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_status_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> status_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成长基金刷新请求
  /// </summary>
  public sealed class CmdChargeGrowthRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeGrowthRefreshReq> _parser = new pb::MessageParser<CmdChargeGrowthRefreshReq>(() => new CmdChargeGrowthRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeGrowthRefreshReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月卡奖励领取请求
  /// </summary>
  public sealed class CmdChargeCardRewardGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCardRewardGetReq> _parser = new pb::MessageParser<CmdChargeCardRewardGetReq>(() => new CmdChargeCardRewardGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCardRewardGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private uint cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月卡奖励领取返回
  /// </summary>
  public sealed class CmdChargeCardRewardGetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCardRewardGetRes> _parser = new pb::MessageParser<CmdChargeCardRewardGetRes>(() => new CmdChargeCardRewardGetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCardRewardGetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private uint cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月卡奖励同步
  /// </summary>
  public sealed class CmdChargeCardDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCardDataNtf> _parser = new pb::MessageParser<CmdChargeCardDataNtf>(() => new CmdChargeCardDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCardDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private uint cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private uint times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "isGet" field.</summary>
    public const int IsGetFieldNumber = 3;
    private bool isGet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    /// <summary>Field number for the "giftCard" field.</summary>
    public const int GiftCardFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_giftCard_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> giftCard_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 可赠送月卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GiftCard {
      get { return giftCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Times);
      }
      if (IsGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGet);
      }
      giftCard_.WriteTo(output, _repeated_giftCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      size += giftCard_.CalculateSize(_repeated_giftCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
          case 16: {
            Times = input.ReadUInt32();
            break;
          }
          case 24: {
            IsGet = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            giftCard_.AddEntriesFrom(input, _repeated_giftCard_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月卡状态刷新
  /// </summary>
  public sealed class CmdChargeCardRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeCardRefreshReq> _parser = new pb::MessageParser<CmdChargeCardRefreshReq>(() => new CmdChargeCardRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeCardRefreshReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private uint cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 月卡赠送同步
  /// </summary>
  public sealed class CmdChargeGiftCardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeGiftCardNtf> _parser = new pb::MessageParser<CmdChargeGiftCardNtf>(() => new CmdChargeGiftCardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeGiftCardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cardId" field.</summary>
    public const int CardIdFieldNumber = 1;
    private uint cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeExpNtf> _parser = new pb::MessageParser<CmdChargeExpNtf>(() => new CmdChargeExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private uint exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeFreeChatUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeFreeChatUpdateNtf> _parser = new pb::MessageParser<CmdChargeFreeChatUpdateNtf>(() => new CmdChargeFreeChatUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeFreeChatUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "leftNum" field.</summary>
    public const int LeftNumFieldNumber = 1;
    private uint leftNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftNum {
      get { return leftNum_; }
      set {
        leftNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LeftNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeftNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeUseCashCouponReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeUseCashCouponReq> _parser = new pb::MessageParser<CmdChargeUseCashCouponReq>(() => new CmdChargeUseCashCouponReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeUseCashCouponReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chargeId" field.</summary>
    public const int ChargeIdFieldNumber = 1;
    private uint chargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeId {
      get { return chargeId_; }
      set {
        chargeId_ = value;
      }
    }

    /// <summary>Field number for the "itemUid" field.</summary>
    public const int ItemUidFieldNumber = 2;
    private ulong itemUid_;
    /// <summary>
    ///有效的代金券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUid {
      get { return itemUid_; }
      set {
        itemUid_ = value;
      }
    }

    /// <summary>Field number for the "limitGiftId" field.</summary>
    public const int LimitGiftIdFieldNumber = 3;
    private uint limitGiftId_;
    /// <summary>
    ///若购买商品为条件礼包，需填充该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitGiftId {
      get { return limitGiftId_; }
      set {
        limitGiftId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChargeId);
      }
      if (ItemUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemUid);
      }
      if (LimitGiftId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LimitGiftId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeId);
      }
      if (ItemUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUid);
      }
      if (LimitGiftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitGiftId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargeId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemUid = input.ReadUInt64();
            break;
          }
          case 24: {
            LimitGiftId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdChargeUseCashCouponRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdChargeUseCashCouponRes> _parser = new pb::MessageParser<CmdChargeUseCashCouponRes>(() => new CmdChargeUseCashCouponRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdChargeUseCashCouponRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "chargeId" field.</summary>
    public const int ChargeIdFieldNumber = 1;
    private uint chargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChargeId {
      get { return chargeId_; }
      set {
        chargeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChargeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChargeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargeId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
