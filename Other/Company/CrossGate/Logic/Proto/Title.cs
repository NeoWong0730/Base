// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: title.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdTitle {
    None = 0,
    /// <summary>
    /// 称号信息请求
    /// </summary>
    InfoReq = 3601,
    /// <summary>
    /// 称号信息返回
    /// </summary>
    InfoRes = 3602,
    /// <summary>
    /// 穿戴操作请求
    /// </summary>
    DressReq = 3603,
    /// <summary>
    /// 穿戴操作返回
    /// </summary>
    DressRes = 3604,
    /// <summary>
    /// 显示操作请求
    /// </summary>
    ShowReq = 3605,
    /// <summary>
    /// 显示操作返回
    /// </summary>
    ShowRes = 3606,
    /// <summary>
    /// 称号系列信息请求
    /// </summary>
    SuitInfoReq = 3607,
    /// <summary>
    /// 称号系列信息返回
    /// </summary>
    SuitInfoRes = 3608,
    /// <summary>
    /// 系列奖励领取请求
    /// </summary>
    GetRewardReq = 3609,
    /// <summary>
    /// 系列奖励领取返回
    /// </summary>
    GetRewardRes = 3610,
    /// <summary>
    /// 系列属性替换请求
    /// </summary>
    SuitChangeReq = 3611,
    /// <summary>
    /// 系列属性替换返回
    /// </summary>
    SuitChangeRes = 3612,
    /// <summary>
    /// 称号状态同步
    /// </summary>
    StateNtf = 3613,
    /// <summary>
    /// 新奖励可领同步 
    /// </summary>
    NewRewardNtf = 3614,
    /// <summary>
    /// 称号场景显示同步
    /// </summary>
    SceneShowNtf = 3615,
    /// <summary>
    /// 称号系列首次集齐请求
    /// </summary>
    SuitFirstCollectReq = 3616,
    /// <summary>
    /// 称号系列首次集齐返回
    /// </summary>
    SuitFirstCollectRes = 3617,
    /// <summary>
    /// 穿戴卸下请求
    /// </summary>
    DressUnloadReq = 3618,
    /// <summary>
    /// 穿戴卸下返回
    /// </summary>
    DressUnloadRes = 3619,
    /// <summary>
    /// 显示卸下请求
    /// </summary>
    ShowUnloadReq = 3620,
    /// <summary>
    /// 显示卸下返回
    /// </summary>
    ShowUnloadRes = 3621,
    /// <summary>
    /// Npc获取称号请求
    /// </summary>
    NpcGetTitleReq = 3622,
    /// <summary>
    /// Npc获取称号返回
    /// </summary>
    NpcGetTitleRes = 3623,
    /// <summary>
    /// 称号栏位同步
    /// </summary>
    PosListNtf = 3624,
    /// <summary>
    /// 称号过期请求
    /// </summary>
    ExpireTimeReq = 3625,
    /// <summary>
    /// 称号过期返回
    /// </summary>
    ExpireTimeRes = 3626,
  }

  public enum ErrorTitle {
    None = 0,
    /// <summary>
    /// 称号已拥有
    /// </summary>
    AlreadyHave = 3601,
    /// <summary>
    /// 称号未拥有
    /// </summary>
    NotHave = 3602,
    /// <summary>
    /// 称号未找到
    /// </summary>
    NotFind = 3603,
    /// <summary>
    /// 称号栏位未解锁
    /// </summary>
    PosNotUnlock = 3604,
    /// <summary>
    /// 称号已过期
    /// </summary>
    Expired = 3605,
    /// <summary>
    /// 称号CSV错误
    /// </summary>
    CsvtitleErr = 3606,
    /// <summary>
    /// 称号套装CSV错误
    /// </summary>
    CsvtitleSuitErr = 3607,
    /// <summary>
    /// 称号栏位CSV错误
    /// </summary>
    CsvtitleColumnErr = 3608,
    /// <summary>
    /// 称号套装未解锁
    /// </summary>
    SuitNotUnlock = 3609,
    /// <summary>
    /// 套装奖励状态错误
    /// </summary>
    SuitRewardErr = 3610,
    /// <summary>
    /// 无奖励可领取
    /// </summary>
    NotHaveReward = 3611,
    /// <summary>
    /// 奖励掉落错误
    /// </summary>
    DropRewardErr = 3612,
    /// <summary>
    /// 栏位不可重复
    /// </summary>
    PosRepeat = 3613,
    /// <summary>
    /// 职业错误
    /// </summary>
    OccuErr = 3614,
    /// <summary>
    /// 声望不足
    /// </summary>
    ReputationLess = 3615,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 称号信息
  /// </summary>
  public sealed class TitleInfo : pb::IMessage {
    private static readonly pb::MessageParser<TitleInfo> _parser = new pb::MessageParser<TitleInfo>(() => new TitleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private uint expireTime_;
    /// <summary>
    /// 过期时间(时间戳, 单位:秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号系列信息
  /// </summary>
  public sealed class TitleSuitInfo : pb::IMessage {
    private static readonly pb::MessageParser<TitleSuitInfo> _parser = new pb::MessageParser<TitleSuitInfo>(() => new TitleSuitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleSuitInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 系列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "isFirst" field.</summary>
    public const int IsFirstFieldNumber = 2;
    private bool isFirst_;
    /// <summary>
    /// 是否首次集齐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirst {
      get { return isFirst_; }
      set {
        isFirst_ = value;
      }
    }

    /// <summary>Field number for the "titleCount" field.</summary>
    public const int TitleCountFieldNumber = 3;
    private uint titleCount_;
    /// <summary>
    /// 已获得的称号数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleCount {
      get { return titleCount_; }
      set {
        titleCount_ = value;
      }
    }

    /// <summary>Field number for the "rewardType" field.</summary>
    public const int RewardTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_rewardType_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> rewardType_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 系列奖励状态 &lt;1: 可领取, 2: 已领取; 0或空为未解锁不可领取>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RewardType {
      get { return rewardType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
      if (IsFirst != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFirst);
      }
      if (TitleCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TitleCount);
      }
      rewardType_.WriteTo(output, _repeated_rewardType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (IsFirst != false) {
        size += 1 + 1;
      }
      if (TitleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleCount);
      }
      size += rewardType_.CalculateSize(_repeated_rewardType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsFirst = input.ReadBool();
            break;
          }
          case 24: {
            TitleCount = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            rewardType_.AddEntriesFrom(input, _repeated_rewardType_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号信息请求
  /// </summary>
  public sealed class CmdTitleInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleInfoReq> _parser = new pb::MessageParser<CmdTitleInfoReq>(() => new CmdTitleInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 称号信息返回
  /// </summary>
  public sealed class CmdTitleInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleInfoRes> _parser = new pb::MessageParser<CmdTitleInfoRes>(() => new CmdTitleInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "useId" field.</summary>
    public const int UseIdFieldNumber = 1;
    private uint useId_;
    /// <summary>
    /// 穿戴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseId {
      get { return useId_; }
      set {
        useId_ = value;
      }
    }

    /// <summary>Field number for the "showId" field.</summary>
    public const int ShowIdFieldNumber = 2;
    private uint showId_;
    /// <summary>
    /// 外观ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowId {
      get { return showId_; }
      set {
        showId_ = value;
      }
    }

    /// <summary>Field number for the "titleList" field.</summary>
    public const int TitleListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.TitleInfo> _repeated_titleList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.TitleInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TitleInfo> titleList_ = new pbc::RepeatedField<global::Packet.TitleInfo>();
    /// <summary>
    /// 称号信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TitleInfo> TitleList {
      get { return titleList_; }
    }

    /// <summary>Field number for the "titlePosList" field.</summary>
    public const int TitlePosListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_titlePosList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> titlePosList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 称号栏位列表 --suitId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TitlePosList {
      get { return titlePosList_; }
    }

    /// <summary>Field number for the "titleSuitList" field.</summary>
    public const int TitleSuitListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.TitleSuitInfo> _repeated_titleSuitList_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.TitleSuitInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TitleSuitInfo> titleSuitList_ = new pbc::RepeatedField<global::Packet.TitleSuitInfo>();
    /// <summary>
    /// 系列信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TitleSuitInfo> TitleSuitList {
      get { return titleSuitList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseId);
      }
      if (ShowId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShowId);
      }
      titleList_.WriteTo(output, _repeated_titleList_codec);
      titlePosList_.WriteTo(output, _repeated_titlePosList_codec);
      titleSuitList_.WriteTo(output, _repeated_titleSuitList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseId);
      }
      if (ShowId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowId);
      }
      size += titleList_.CalculateSize(_repeated_titleList_codec);
      size += titlePosList_.CalculateSize(_repeated_titlePosList_codec);
      size += titleSuitList_.CalculateSize(_repeated_titleSuitList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseId = input.ReadUInt32();
            break;
          }
          case 16: {
            ShowId = input.ReadUInt32();
            break;
          }
          case 26: {
            titleList_.AddEntriesFrom(input, _repeated_titleList_codec);
            break;
          }
          case 34:
          case 32: {
            titlePosList_.AddEntriesFrom(input, _repeated_titlePosList_codec);
            break;
          }
          case 42: {
            titleSuitList_.AddEntriesFrom(input, _repeated_titleSuitList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 穿戴操作请求
  /// </summary>
  public sealed class CmdTitleDressReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleDressReq> _parser = new pb::MessageParser<CmdTitleDressReq>(() => new CmdTitleDressReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleDressReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 穿戴操作返回
  /// </summary>
  public sealed class CmdTitleDressRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleDressRes> _parser = new pb::MessageParser<CmdTitleDressRes>(() => new CmdTitleDressRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleDressRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "useId" field.</summary>
    public const int UseIdFieldNumber = 1;
    private uint useId_;
    /// <summary>
    /// 穿戴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseId {
      get { return useId_; }
      set {
        useId_ = value;
      }
    }

    /// <summary>Field number for the "showId" field.</summary>
    public const int ShowIdFieldNumber = 2;
    private uint showId_;
    /// <summary>
    /// 外观ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowId {
      get { return showId_; }
      set {
        showId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseId);
      }
      if (ShowId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShowId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseId);
      }
      if (ShowId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseId = input.ReadUInt32();
            break;
          }
          case 16: {
            ShowId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 显示操作请求
  /// </summary>
  public sealed class CmdTitleShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleShowReq> _parser = new pb::MessageParser<CmdTitleShowReq>(() => new CmdTitleShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleShowReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 显示操作返回
  /// </summary>
  public sealed class CmdTitleShowRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleShowRes> _parser = new pb::MessageParser<CmdTitleShowRes>(() => new CmdTitleShowRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleShowRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "showId" field.</summary>
    public const int ShowIdFieldNumber = 1;
    private uint showId_;
    /// <summary>
    /// 外观ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowId {
      get { return showId_; }
      set {
        showId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShowId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系列奖励领取请求
  /// </summary>
  public sealed class CmdTitleGetRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleGetRewardReq> _parser = new pb::MessageParser<CmdTitleGetRewardReq>(() => new CmdTitleGetRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleGetRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 系列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系列奖励领取返回
  /// </summary>
  public sealed class CmdTitleGetRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleGetRewardRes> _parser = new pb::MessageParser<CmdTitleGetRewardRes>(() => new CmdTitleGetRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleGetRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 系列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系列属性替换请求
  /// </summary>
  public sealed class CmdTitleSuitChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleSuitChangeReq> _parser = new pb::MessageParser<CmdTitleSuitChangeReq>(() => new CmdTitleSuitChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleSuitChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 系列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "indexId" field.</summary>
    public const int IndexIdFieldNumber = 2;
    private uint indexId_;
    /// <summary>
    /// 下标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexId {
      get { return indexId_; }
      set {
        indexId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
      if (IndexId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IndexId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (IndexId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            IndexId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系列属性替换返回
  /// </summary>
  public sealed class CmdTitleSuitChangeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleSuitChangeRes> _parser = new pb::MessageParser<CmdTitleSuitChangeRes>(() => new CmdTitleSuitChangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleSuitChangeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 系列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    /// <summary>Field number for the "indexId" field.</summary>
    public const int IndexIdFieldNumber = 2;
    private uint indexId_;
    /// <summary>
    /// 下标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexId {
      get { return indexId_; }
      set {
        indexId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
      if (IndexId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IndexId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      if (IndexId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
          case 16: {
            IndexId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号状态同步
  /// </summary>
  public sealed class CmdTitleStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleStateNtf> _parser = new pb::MessageParser<CmdTitleStateNtf>(() => new CmdTitleStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private uint expireTime_;
    /// <summary>
    /// 过期时间 &lt;时间戳; 单位秒; 0: 没有过期时间, 1: 失效; >
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExpireTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新奖励可领同步 
  /// </summary>
  public sealed class CmdTitleNewRewardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleNewRewardNtf> _parser = new pb::MessageParser<CmdTitleNewRewardNtf>(() => new CmdTitleNewRewardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleNewRewardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdTitleNewRewardNtf.Types.reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdTitleNewRewardNtf.Types.reward.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdTitleNewRewardNtf.Types.reward> rewards_ = new pbc::RepeatedField<global::Packet.CmdTitleNewRewardNtf.Types.reward>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdTitleNewRewardNtf.Types.reward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTitleNewRewardNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class reward : pb::IMessage {
        private static readonly pb::MessageParser<reward> _parser = new pb::MessageParser<reward>(() => new reward());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<reward> Parser { get { return _parser; } }

        /// <summary>Field number for the "suitId" field.</summary>
        public const int SuitIdFieldNumber = 1;
        private uint suitId_;
        /// <summary>
        /// 系列ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SuitId {
          get { return suitId_; }
          set {
            suitId_ = value;
          }
        }

        /// <summary>Field number for the "indexId" field.</summary>
        public const int IndexIdFieldNumber = 2;
        private uint indexId_;
        /// <summary>
        /// 下标ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IndexId {
          get { return indexId_; }
          set {
            indexId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SuitId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SuitId);
          }
          if (IndexId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(IndexId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SuitId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
          }
          if (IndexId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SuitId = input.ReadUInt32();
                break;
              }
              case 16: {
                IndexId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 称号场景显示同步
  /// </summary>
  public sealed class CmdTitleSceneShowNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleSceneShowNtf> _parser = new pb::MessageParser<CmdTitleSceneShowNtf>(() => new CmdTitleSceneShowNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleSceneShowNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    /// 穿戴操作角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildPos" field.</summary>
    public const int GuildPosFieldNumber = 4;
    private uint guildPos_;
    /// <summary>
    /// 家族职位 // 暂时先不用吧考虑一下实现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildPos {
      get { return guildPos_; }
      set {
        guildPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
      if (GuildPos != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (GuildPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
          case 32: {
            GuildPos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号系列首次集齐
  /// </summary>
  public sealed class CmdTitleSuitFirstCollectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleSuitFirstCollectReq> _parser = new pb::MessageParser<CmdTitleSuitFirstCollectReq>(() => new CmdTitleSuitFirstCollectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleSuitFirstCollectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "suitId" field.</summary>
    public const int SuitIdFieldNumber = 1;
    private uint suitId_;
    /// <summary>
    /// 套装ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitId {
      get { return suitId_; }
      set {
        suitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SuitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SuitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SuitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SuitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号系列首次集齐返回
  /// </summary>
  public sealed class CmdTitleSuitFirstCollectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleSuitFirstCollectRes> _parser = new pb::MessageParser<CmdTitleSuitFirstCollectRes>(() => new CmdTitleSuitFirstCollectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleSuitFirstCollectRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 穿戴卸下请求
  /// </summary>
  public sealed class CmdTitleDressUnloadReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleDressUnloadReq> _parser = new pb::MessageParser<CmdTitleDressUnloadReq>(() => new CmdTitleDressUnloadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleDressUnloadReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 穿戴卸下返回
  /// </summary>
  public sealed class CmdTitleDressUnloadRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleDressUnloadRes> _parser = new pb::MessageParser<CmdTitleDressUnloadRes>(() => new CmdTitleDressUnloadRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleDressUnloadRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 显示卸下请求
  /// </summary>
  public sealed class CmdTitleShowUnloadReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleShowUnloadReq> _parser = new pb::MessageParser<CmdTitleShowUnloadReq>(() => new CmdTitleShowUnloadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleShowUnloadReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 显示卸下返回
  /// </summary>
  public sealed class CmdTitleShowUnloadRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleShowUnloadRes> _parser = new pb::MessageParser<CmdTitleShowUnloadRes>(() => new CmdTitleShowUnloadRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleShowUnloadRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Npc对话同步
  /// </summary>
  public sealed class CmdTitleNpcTalkNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleNpcTalkNtf> _parser = new pb::MessageParser<CmdTitleNpcTalkNtf>(() => new CmdTitleNpcTalkNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleNpcTalkNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "talkId" field.</summary>
    public const int TalkIdFieldNumber = 1;
    private uint talkId_;
    /// <summary>
    /// 对话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalkId {
      get { return talkId_; }
      set {
        talkId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalkId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TalkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TalkId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Npc获取称号请求
  /// </summary>
  public sealed class CmdTitleNpcGetTitleReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleNpcGetTitleReq> _parser = new pb::MessageParser<CmdTitleNpcGetTitleReq>(() => new CmdTitleNpcGetTitleReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleNpcGetTitleReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    /// <summary>
    /// npcID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Npc获取称号返回
  /// </summary>
  public sealed class CmdTitleNpcGetTitleRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleNpcGetTitleRes> _parser = new pb::MessageParser<CmdTitleNpcGetTitleRes>(() => new CmdTitleNpcGetTitleRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleNpcGetTitleRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 称号栏位信息同步
  /// </summary>
  public sealed class CmdTitlePosListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitlePosListNtf> _parser = new pb::MessageParser<CmdTitlePosListNtf>(() => new CmdTitlePosListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitlePosListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "posList" field.</summary>
    public const int PosListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_posList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> posList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 栏位信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PosList {
      get { return posList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      posList_.WriteTo(output, _repeated_posList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += posList_.CalculateSize(_repeated_posList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            posList_.AddEntriesFrom(input, _repeated_posList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号过期请求
  /// </summary>
  public sealed class CmdTitleExpireTimeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleExpireTimeReq> _parser = new pb::MessageParser<CmdTitleExpireTimeReq>(() => new CmdTitleExpireTimeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleExpireTimeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 1;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TitleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TitleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 称号过期返回
  /// </summary>
  public sealed class CmdTitleExpireTimeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTitleExpireTimeRes> _parser = new pb::MessageParser<CmdTitleExpireTimeRes>(() => new CmdTitleExpireTimeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTitleExpireTimeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
