// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attr.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 1100+
  /// </summary>
  public enum CmdAttr {
    None = 0,
    /// <summary>
    ///玩家属性通知
    /// </summary>
    AttrNtf = 1101,
    /// <summary>
    ///玩家血量更新
    /// </summary>
    RoleHpNtf = 1102,
    /// <summary>
    ///玩家魔力更新
    /// </summary>
    RoleMpNtf = 1103,
    /// <summary>
    ///请求分配属性点
    /// </summary>
    AllocPointReq = 1104,
    AllocPointRes = 1114,
    /// <summary>
    ///请求获取预设属性点
    /// </summary>
    GetBeforePointReq = 1105,
    GetBeforePointRes = 1106,
    /// <summary>
    ///请求设置预设属性点
    /// </summary>
    SetBeforePointReq = 1107,
    SetBeforePointRes = 1108,
    /// <summary>
    ///获取经验通知
    /// </summary>
    AddExpNtf = 1109,
    /// <summary>
    ///经验更新通知
    /// </summary>
    UpdateExpNtf = 1110,
    /// <summary>
    ///血蓝池更新通知
    /// </summary>
    UpdatePoolNtf = 1111,
    /// <summary>
    ///玩家血蓝更新
    /// </summary>
    RoleHpMpNtf = 1112,
    /// <summary>
    ///玩家评分更新
    /// </summary>
    PowerNtf = 1113,
    /// <summary>
    ///请求获取今日获得援助值、队长积分
    /// </summary>
    GetDailyPointReq = 1115,
    GetDailyPointRes = 1116,
    /// <summary>
    ///特权buff上线通知
    /// </summary>
    PrivilegeBuffNtf = 1117,
    /// <summary>
    ///特权buff更新
    /// </summary>
    PrivilegeBuffUpdateNtf = 1118,
    /// <summary>
    ///主动上报过期buff(buff过期时)
    /// </summary>
    DelPrivilegeBuffReq = 1119,
    /// <summary>
    ///请求洗点
    /// </summary>
    RePointReq = 1120,
    /// <summary>
    /// 作废
    /// </summary>
    CompensationExpNtf = 1121,
    /// <summary>
    /// 导师信息请求
    /// </summary>
    TutorInfoReq = 1122,
    /// <summary>
    /// 导师信息返回
    /// </summary>
    TutorInfoRes = 1123,
    /// <summary>
    ///使用血蓝道具剩余cd时间
    /// </summary>
    HpMpItemCdntf = 1124,
    /// <summary>
    ///设置是否自动购买血蓝池
    /// </summary>
    SetAutoHpMpPoolReq = 1125,
    SetAutoHpMpPoolRes = 1126,
    /// <summary>
    /// 通知经验找回
    /// </summary>
    CompensationExpNty = 1127,
    /// <summary>
    /// 请求领取经验
    /// </summary>
    GetCompensationExpReq = 1128,
    /// <summary>
    /// 通知移除补偿
    /// </summary>
    RemoveCompensationNty = 1129,
    /// <summary>
    ///gmt的经验变更通知
    /// </summary>
    GmtextraExpNtf = 1130,
    /// <summary>
    ///获取人物加点方案
    /// </summary>
    GetPointSchemeReq = 1131,
    GetPointSchemeRes = 1132,
    /// <summary>
    ///新增人物加点方案
    /// </summary>
    AddPointSchemeReq = 1133,
    AddPointSchemeRes = 1134,
    /// <summary>
    ///切换人物加点方案
    /// </summary>
    SwitchPointSchemeReq = 1135,
    SwitchPointSchemeRes = 1136,
    /// <summary>
    ///人物加点方案改名
    /// </summary>
    RenamePointSchemeReq = 1137,
    RenamePointSchemeRes = 1138,
    /// <summary>
    ///方案属性更新通知
    /// </summary>
    SchemeUpdateAttrNtf = 1139,
  }

  public enum ErrorAttr {
    None = 0,
    /// <summary>
    /// 未分配的潜能点数不足
    /// </summary>
    PointNotEnough = 1101,
    /// <summary>
    /// 无效的潜能点数
    /// </summary>
    PointInvalid = 1102,
    /// <summary>
    /// 预设的潜能点数不能超过每级新增的潜能点
    /// </summary>
    PointBefore = 1103,
    /// <summary>
    /// 获取表失败
    /// </summary>
    Csvnull = 1104,
    /// <summary>
    /// 升级获取的潜能点小于预设的潜能点，可能是配置表有更改
    /// </summary>
    NewLessBefore = 1105,
    /// <summary>
    /// 可重置的属性点不足
    /// </summary>
    AlloPointNo = 1106,
    /// <summary>
    /// 加的经验为0
    /// </summary>
    AddExpZero = 1107,
    /// <summary>
    /// 超过该属性最大可分配点数（每种属性最多只能加可分配点数的一半）    	    
    /// </summary>
    PointMax = 1108,
    /// <summary>
    /// 超过该属性最大可预设点数（每种属性最多只能加可分配点数的一半）
    /// </summary>
    PrePointMax = 1109,
    /// <summary>
    ///已达到角色最大等级
    /// </summary>
    RoleMaxLevel = 1110,
    /// <summary>
    ///超过免费洗点最大等级
    /// </summary>
    FreeRePointOver = 1111,
    /// <summary>
    ///找不到经验找回配置
    /// </summary>
    CompensationConfigNotFound = 1112,
    /// <summary>
    ///无效的经验找回id
    /// </summary>
    InvalidCompensationTid = 1113,
    /// <summary>
    ///经验找回次数不足
    /// </summary>
    NoExpLeftForCompensation = 1114,
    /// <summary>
    ///该经验找回不可领取经验
    /// </summary>
    CanNotGetExpFromThisType = 1115,
    /// <summary>
    ///人物加点方案切换-配置参数错误
    /// </summary>
    SchemePara = 1116,
    /// <summary>
    ///人物加点方案切换-已到页数上限
    /// </summary>
    SchemeMax = 1117,
    /// <summary>
    ///人物加点方案切换-请求索引错误
    /// </summary>
    SchemeIndex = 1118,
    /// <summary>
    ///人物加点方案切换-名称不合法
    /// </summary>
    SchemeRename = 1119,
  }

  public enum AttrActiveReason {
    None = 0,
    /// <summary>
    /// 职业进阶
    /// </summary>
    CareerRank = 1101,
    /// <summary>
    /// 组队援助值
    /// </summary>
    Aid = 1102,
    /// <summary>
    /// 组队队长积分
    /// </summary>
    Captain = 1103,
    /// <summary>
    /// GM添加玩家积分
    /// </summary>
    GmaddPoint = 1104,
    /// <summary>
    /// 作废
    /// </summary>
    CompensationExpRefresh = 1105,
    /// <summary>
    /// 自动购买血蓝池
    /// </summary>
    AutoBuyHpMpPool = 1106,
    /// <summary>
    /// 经验找回领取
    /// </summary>
    GetCompensationExp = 1107,
    /// <summary>
    /// GMT修改经验值
    /// </summary>
    Gmtexp = 1108,
    /// <summary>
    /// 新增人物加点方案
    /// </summary>
    AddPointScheme = 1109,
  }

  #endregion

  #region Messages
  /// <summary>
  ///玩家的一些加点属性信息
  /// </summary>
  public sealed class DtoBaseAttr : pb::IMessage {
    private static readonly pb::MessageParser<DtoBaseAttr> _parser = new pb::MessageParser<DtoBaseAttr>(() => new DtoBaseAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DtoBaseAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "surplusPoint" field.</summary>
    public const int SurplusPointFieldNumber = 1;
    private int surplusPoint_;
    /// <summary>
    /// 未分配的属性点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusPoint {
      get { return surplusPoint_; }
      set {
        surplusPoint_ = value;
      }
    }

    /// <summary>Field number for the "vitAssign" field.</summary>
    public const int VitAssignFieldNumber = 2;
    private int vitAssign_;
    /// <summary>
    /// 已分配的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VitAssign {
      get { return vitAssign_; }
      set {
        vitAssign_ = value;
      }
    }

    /// <summary>Field number for the "snhAssign" field.</summary>
    public const int SnhAssignFieldNumber = 3;
    private int snhAssign_;
    /// <summary>
    /// 已分配的力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SnhAssign {
      get { return snhAssign_; }
      set {
        snhAssign_ = value;
      }
    }

    /// <summary>Field number for the "intenAssign" field.</summary>
    public const int IntenAssignFieldNumber = 4;
    private int intenAssign_;
    /// <summary>
    /// 已分配的强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntenAssign {
      get { return intenAssign_; }
      set {
        intenAssign_ = value;
      }
    }

    /// <summary>Field number for the "speedAssign" field.</summary>
    public const int SpeedAssignFieldNumber = 5;
    private int speedAssign_;
    /// <summary>
    /// 已分配的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedAssign {
      get { return speedAssign_; }
      set {
        speedAssign_ = value;
      }
    }

    /// <summary>Field number for the "magicAssign" field.</summary>
    public const int MagicAssignFieldNumber = 6;
    private int magicAssign_;
    /// <summary>
    /// 已分配的魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicAssign {
      get { return magicAssign_; }
      set {
        magicAssign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SurplusPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SurplusPoint);
      }
      if (VitAssign != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VitAssign);
      }
      if (SnhAssign != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SnhAssign);
      }
      if (IntenAssign != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IntenAssign);
      }
      if (SpeedAssign != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpeedAssign);
      }
      if (MagicAssign != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MagicAssign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SurplusPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusPoint);
      }
      if (VitAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VitAssign);
      }
      if (SnhAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SnhAssign);
      }
      if (IntenAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntenAssign);
      }
      if (SpeedAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedAssign);
      }
      if (MagicAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicAssign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SurplusPoint = input.ReadInt32();
            break;
          }
          case 16: {
            VitAssign = input.ReadInt32();
            break;
          }
          case 24: {
            SnhAssign = input.ReadInt32();
            break;
          }
          case 32: {
            IntenAssign = input.ReadInt32();
            break;
          }
          case 40: {
            SpeedAssign = input.ReadInt32();
            break;
          }
          case 48: {
            MagicAssign = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色属性
  /// </summary>
  public sealed class DtoPkAttr : pb::IMessage {
    private static readonly pb::MessageParser<DtoPkAttr> _parser = new pb::MessageParser<DtoPkAttr>(() => new DtoPkAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DtoPkAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.DtoPkAttr.Types.AttrPair> _repeated_attr_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.DtoPkAttr.Types.AttrPair.Parser);
    private readonly pbc::RepeatedField<global::Packet.DtoPkAttr.Types.AttrPair> attr_ = new pbc::RepeatedField<global::Packet.DtoPkAttr.Types.AttrPair>();
    /// <summary>
    ///属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DtoPkAttr.Types.AttrPair> Attr {
      get { return attr_; }
    }

    /// <summary>Field number for the "curHp" field.</summary>
    public const int CurHpFieldNumber = 2;
    private long curHp_;
    /// <summary>
    ///当前生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "curMp" field.</summary>
    public const int CurMpFieldNumber = 3;
    private long curMp_;
    /// <summary>
    ///当前魔力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attr_.WriteTo(output, _repeated_attr_codec);
      if (CurHp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurHp);
      }
      if (CurMp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attr_.CalculateSize(_repeated_attr_codec);
      if (CurHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHp);
      }
      if (CurMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attr_.AddEntriesFrom(input, _repeated_attr_codec);
            break;
          }
          case 16: {
            CurHp = input.ReadInt64();
            break;
          }
          case 24: {
            CurMp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DtoPkAttr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AttrPair : pb::IMessage {
        private static readonly pb::MessageParser<AttrPair> _parser = new pb::MessageParser<AttrPair>(() => new AttrPair());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttrPair> Parser { get { return _parser; } }

        /// <summary>Field number for the "attrId" field.</summary>
        public const int AttrIdFieldNumber = 1;
        private uint attrId_;
        /// <summary>
        ///属性id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrId {
          get { return attrId_; }
          set {
            attrId_ = value;
          }
        }

        /// <summary>Field number for the "attrValue" field.</summary>
        public const int AttrValueFieldNumber = 2;
        private long attrValue_;
        /// <summary>
        ///属性值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AttrValue {
          get { return attrValue_; }
          set {
            attrValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AttrId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AttrId);
          }
          if (AttrValue != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(AttrValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AttrId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
          }
          if (AttrValue != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttrValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AttrId = input.ReadUInt32();
                break;
              }
              case 16: {
                AttrValue = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///玩家属性通知
  /// </summary>
  public sealed class CmdAttrAttrNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAttrNtf> _parser = new pb::MessageParser<CmdAttrAttrNtf>(() => new CmdAttrAttrNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAttrNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttr" field.</summary>
    public const int BaseAttrFieldNumber = 1;
    private global::Packet.DtoBaseAttr baseAttr_;
    /// <summary>
    ///一级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoBaseAttr BaseAttr {
      get { return baseAttr_; }
      set {
        baseAttr_ = value;
      }
    }

    /// <summary>Field number for the "pkAttr" field.</summary>
    public const int PkAttrFieldNumber = 2;
    private global::Packet.DtoPkAttr pkAttr_;
    /// <summary>
    ///二级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoPkAttr PkAttr {
      get { return pkAttr_; }
      set {
        pkAttr_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private uint power_;
    /// <summary>
    ///总评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "rolePower" field.</summary>
    public const int RolePowerFieldNumber = 4;
    private uint rolePower_;
    /// <summary>
    ///人物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RolePower {
      get { return rolePower_; }
      set {
        rolePower_ = value;
      }
    }

    /// <summary>Field number for the "hpPool" field.</summary>
    public const int HpPoolFieldNumber = 5;
    private ulong hpPool_;
    /// <summary>
    ///生命储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HpPool {
      get { return hpPool_; }
      set {
        hpPool_ = value;
      }
    }

    /// <summary>Field number for the "mpPool" field.</summary>
    public const int MpPoolFieldNumber = 6;
    private ulong mpPool_;
    /// <summary>
    ///魔法储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MpPool {
      get { return mpPool_; }
      set {
        mpPool_ = value;
      }
    }

    /// <summary>Field number for the "autoHpPool" field.</summary>
    public const int AutoHpPoolFieldNumber = 7;
    private bool autoHpPool_;
    /// <summary>
    ///自动补充生命储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoHpPool {
      get { return autoHpPool_; }
      set {
        autoHpPool_ = value;
      }
    }

    /// <summary>Field number for the "autoMpPool" field.</summary>
    public const int AutoMpPoolFieldNumber = 8;
    private bool autoMpPool_;
    /// <summary>
    ///自动补充魔法储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoMpPool {
      get { return autoMpPool_; }
      set {
        autoMpPool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAttr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAttr);
      }
      if (pkAttr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PkAttr);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Power);
      }
      if (RolePower != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RolePower);
      }
      if (HpPool != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HpPool);
      }
      if (MpPool != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MpPool);
      }
      if (AutoHpPool != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoHpPool);
      }
      if (AutoMpPool != false) {
        output.WriteRawTag(64);
        output.WriteBool(AutoMpPool);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAttr);
      }
      if (pkAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PkAttr);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (RolePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RolePower);
      }
      if (HpPool != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HpPool);
      }
      if (MpPool != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MpPool);
      }
      if (AutoHpPool != false) {
        size += 1 + 1;
      }
      if (AutoMpPool != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAttr_ == null) {
              baseAttr_ = new global::Packet.DtoBaseAttr();
            }
            input.ReadMessage(baseAttr_);
            break;
          }
          case 18: {
            if (pkAttr_ == null) {
              pkAttr_ = new global::Packet.DtoPkAttr();
            }
            input.ReadMessage(pkAttr_);
            break;
          }
          case 24: {
            Power = input.ReadUInt32();
            break;
          }
          case 32: {
            RolePower = input.ReadUInt32();
            break;
          }
          case 40: {
            HpPool = input.ReadUInt64();
            break;
          }
          case 48: {
            MpPool = input.ReadUInt64();
            break;
          }
          case 56: {
            AutoHpPool = input.ReadBool();
            break;
          }
          case 64: {
            AutoMpPool = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家血量更新
  /// </summary>
  public sealed class CmdAttrRoleHpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRoleHpNtf> _parser = new pb::MessageParser<CmdAttrRoleHpNtf>(() => new CmdAttrRoleHpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRoleHpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "curHp" field.</summary>
    public const int CurHpFieldNumber = 1;
    private long curHp_;
    /// <summary>
    ///当前生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 2;
    private long maxHp_;
    /// <summary>
    ///最大生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurHp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurHp);
      }
      if (MaxHp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxHp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHp);
      }
      if (MaxHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurHp = input.ReadInt64();
            break;
          }
          case 16: {
            MaxHp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家魔力更新
  /// </summary>
  public sealed class CmdAttrRoleMpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRoleMpNtf> _parser = new pb::MessageParser<CmdAttrRoleMpNtf>(() => new CmdAttrRoleMpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRoleMpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "curMp" field.</summary>
    public const int CurMpFieldNumber = 1;
    private long curMp_;
    /// <summary>
    ///当前魔力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    /// <summary>Field number for the "maxMp" field.</summary>
    public const int MaxMpFieldNumber = 2;
    private long maxMp_;
    /// <summary>
    ///最大魔力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurMp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurMp);
      }
      if (MaxMp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxMp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMp);
      }
      if (MaxMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxMp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurMp = input.ReadInt64();
            break;
          }
          case 16: {
            MaxMp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家血蓝更新
  /// </summary>
  public sealed class CmdAttrRoleHpMpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRoleHpMpNtf> _parser = new pb::MessageParser<CmdAttrRoleHpMpNtf>(() => new CmdAttrRoleHpMpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRoleHpMpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "curHp" field.</summary>
    public const int CurHpFieldNumber = 1;
    private long curHp_;
    /// <summary>
    ///当前生命
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "curMp" field.</summary>
    public const int CurMpFieldNumber = 2;
    private long curMp_;
    /// <summary>
    ///当前魔力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurHp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurHp);
      }
      if (CurMp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurMp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHp);
      }
      if (CurMp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurHp = input.ReadInt64();
            break;
          }
          case 16: {
            CurMp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用血蓝道具剩余cd时间
  /// </summary>
  public sealed class CmdAttrHpMpItemCDNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrHpMpItemCDNtf> _parser = new pb::MessageParser<CmdAttrHpMpItemCDNtf>(() => new CmdAttrHpMpItemCDNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrHpMpItemCDNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 1;
    private uint cd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求分配属性点
  /// </summary>
  public sealed class CmdAttrAllocPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAllocPointReq> _parser = new pb::MessageParser<CmdAttrAllocPointReq>(() => new CmdAttrAllocPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAllocPointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "vit" field.</summary>
    public const int VitFieldNumber = 1;
    private int vit_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vit {
      get { return vit_; }
      set {
        vit_ = value;
      }
    }

    /// <summary>Field number for the "snh" field.</summary>
    public const int SnhFieldNumber = 2;
    private int snh_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snh {
      get { return snh_; }
      set {
        snh_ = value;
      }
    }

    /// <summary>Field number for the "inten" field.</summary>
    public const int IntenFieldNumber = 3;
    private int inten_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inten {
      get { return inten_; }
      set {
        inten_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 5;
    private int magic_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vit);
      }
      if (Snh != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Snh);
      }
      if (Inten != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Inten);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Magic != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Magic);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
      }
      if (Snh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snh);
      }
      if (Inten != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inten);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Magic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magic);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Vit = input.ReadInt32();
            break;
          }
          case 16: {
            Snh = input.ReadInt32();
            break;
          }
          case 24: {
            Inten = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Magic = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrAllocPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAllocPointRes> _parser = new pb::MessageParser<CmdAttrAllocPointRes>(() => new CmdAttrAllocPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAllocPointRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求获取预设属性点
  /// </summary>
  public sealed class CmdAttrGetBeforePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetBeforePointReq> _parser = new pb::MessageParser<CmdAttrGetBeforePointReq>(() => new CmdAttrGetBeforePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetBeforePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获取预设属性点回复
  /// </summary>
  public sealed class CmdAttrGetBeforePointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetBeforePointRes> _parser = new pb::MessageParser<CmdAttrGetBeforePointRes>(() => new CmdAttrGetBeforePointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetBeforePointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "vit" field.</summary>
    public const int VitFieldNumber = 1;
    private int vit_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vit {
      get { return vit_; }
      set {
        vit_ = value;
      }
    }

    /// <summary>Field number for the "snh" field.</summary>
    public const int SnhFieldNumber = 2;
    private int snh_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snh {
      get { return snh_; }
      set {
        snh_ = value;
      }
    }

    /// <summary>Field number for the "inten" field.</summary>
    public const int IntenFieldNumber = 3;
    private int inten_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inten {
      get { return inten_; }
      set {
        inten_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 5;
    private int magic_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vit);
      }
      if (Snh != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Snh);
      }
      if (Inten != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Inten);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Magic != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Magic);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
      }
      if (Snh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snh);
      }
      if (Inten != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inten);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Magic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magic);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Vit = input.ReadInt32();
            break;
          }
          case 16: {
            Snh = input.ReadInt32();
            break;
          }
          case 24: {
            Inten = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Magic = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求设置预设属性点
  /// </summary>
  public sealed class CmdAttrSetBeforePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSetBeforePointReq> _parser = new pb::MessageParser<CmdAttrSetBeforePointReq>(() => new CmdAttrSetBeforePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSetBeforePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "vit" field.</summary>
    public const int VitFieldNumber = 1;
    private int vit_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vit {
      get { return vit_; }
      set {
        vit_ = value;
      }
    }

    /// <summary>Field number for the "snh" field.</summary>
    public const int SnhFieldNumber = 2;
    private int snh_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snh {
      get { return snh_; }
      set {
        snh_ = value;
      }
    }

    /// <summary>Field number for the "inten" field.</summary>
    public const int IntenFieldNumber = 3;
    private int inten_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inten {
      get { return inten_; }
      set {
        inten_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 5;
    private int magic_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vit);
      }
      if (Snh != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Snh);
      }
      if (Inten != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Inten);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Magic != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Magic);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
      }
      if (Snh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snh);
      }
      if (Inten != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inten);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Magic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magic);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Vit = input.ReadInt32();
            break;
          }
          case 16: {
            Snh = input.ReadInt32();
            break;
          }
          case 24: {
            Inten = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Magic = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求设置预设属性点回复
  /// </summary>
  public sealed class CmdAttrSetBeforePointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSetBeforePointRes> _parser = new pb::MessageParser<CmdAttrSetBeforePointRes>(() => new CmdAttrSetBeforePointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSetBeforePointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "vit" field.</summary>
    public const int VitFieldNumber = 1;
    private int vit_;
    /// <summary>
    /// 体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vit {
      get { return vit_; }
      set {
        vit_ = value;
      }
    }

    /// <summary>Field number for the "snh" field.</summary>
    public const int SnhFieldNumber = 2;
    private int snh_;
    /// <summary>
    /// 力量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snh {
      get { return snh_; }
      set {
        snh_ = value;
      }
    }

    /// <summary>Field number for the "inten" field.</summary>
    public const int IntenFieldNumber = 3;
    private int inten_;
    /// <summary>
    /// 强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inten {
      get { return inten_; }
      set {
        inten_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private int speed_;
    /// <summary>
    /// 速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "magic" field.</summary>
    public const int MagicFieldNumber = 5;
    private int magic_;
    /// <summary>
    /// 魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vit);
      }
      if (Snh != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Snh);
      }
      if (Inten != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Inten);
      }
      if (Speed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Speed);
      }
      if (Magic != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Magic);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
      }
      if (Snh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snh);
      }
      if (Inten != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inten);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (Magic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Magic);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Vit = input.ReadInt32();
            break;
          }
          case 16: {
            Snh = input.ReadInt32();
            break;
          }
          case 24: {
            Inten = input.ReadInt32();
            break;
          }
          case 32: {
            Speed = input.ReadInt32();
            break;
          }
          case 40: {
            Magic = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrAddExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAddExpNtf> _parser = new pb::MessageParser<CmdAttrAddExpNtf>(() => new CmdAttrAddExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAddExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///不等于0的时候才有效 当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private ulong exp_;
    /// <summary>
    ///本次升级后剩余的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "extraExp" field.</summary>
    public const int ExtraExpFieldNumber = 8;
    private ulong extraExp_;
    /// <summary>
    ///gmt操作产生的额外经验值(显示要为负的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExtraExp {
      get { return extraExp_; }
      set {
        extraExp_ = value;
      }
    }

    /// <summary>Field number for the "expMultiple" field.</summary>
    public const int ExpMultipleFieldNumber = 3;
    private ulong expMultiple_;
    /// <summary>
    ///经验倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpMultiple {
      get { return expMultiple_; }
      set {
        expMultiple_ = value;
      }
    }

    /// <summary>Field number for the "addExp" field.</summary>
    public const int AddExpFieldNumber = 4;
    private ulong addExp_;
    /// <summary>
    ///本次操作增加的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddExp {
      get { return addExp_; }
      set {
        addExp_ = value;
      }
    }

    /// <summary>Field number for the "compensationExp" field.</summary>
    public const int CompensationExpFieldNumber = 5;
    private ulong compensationExp_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CompensationExp {
      get { return compensationExp_; }
      set {
        compensationExp_ = value;
      }
    }

    /// <summary>Field number for the "compensationexpAdd" field.</summary>
    public const int CompensationexpAddFieldNumber = 6;
    private ulong compensationexpAdd_;
    /// <summary>
    ///作废
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CompensationexpAdd {
      get { return compensationexpAdd_; }
      set {
        compensationexpAdd_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 7;
    private uint reason_;
    /// <summary>
    ///加经验来源 用的时候由后端告知哪个reason需要处理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
      if (ExpMultiple != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpMultiple);
      }
      if (AddExp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AddExp);
      }
      if (CompensationExp != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(CompensationExp);
      }
      if (CompensationexpAdd != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CompensationexpAdd);
      }
      if (Reason != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Reason);
      }
      if (ExtraExp != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ExtraExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (ExtraExp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraExp);
      }
      if (ExpMultiple != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpMultiple);
      }
      if (AddExp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddExp);
      }
      if (CompensationExp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompensationExp);
      }
      if (CompensationexpAdd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompensationexpAdd);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpMultiple = input.ReadUInt64();
            break;
          }
          case 32: {
            AddExp = input.ReadUInt64();
            break;
          }
          case 40: {
            CompensationExp = input.ReadUInt64();
            break;
          }
          case 48: {
            CompensationexpAdd = input.ReadUInt64();
            break;
          }
          case 56: {
            Reason = input.ReadUInt32();
            break;
          }
          case 64: {
            ExtraExp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrGMTExtraExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGMTExtraExpNtf> _parser = new pb::MessageParser<CmdAttrGMTExtraExpNtf>(() => new CmdAttrGMTExtraExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGMTExtraExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "extraExp" field.</summary>
    public const int ExtraExpFieldNumber = 1;
    private ulong extraExp_;
    /// <summary>
    ///gmt操作产生的额外经验值(显示要为负的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExtraExp {
      get { return extraExp_; }
      set {
        extraExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExtraExp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ExtraExp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExtraExp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraExp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExtraExp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrUpdateExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrUpdateExpNtf> _parser = new pb::MessageParser<CmdAttrUpdateExpNtf>(() => new CmdAttrUpdateExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrUpdateExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private ulong exp_;
    /// <summary>
    ///本次角色的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrUpdatePoolNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrUpdatePoolNtf> _parser = new pb::MessageParser<CmdAttrUpdatePoolNtf>(() => new CmdAttrUpdatePoolNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrUpdatePoolNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "hpPool" field.</summary>
    public const int HpPoolFieldNumber = 1;
    private ulong hpPool_;
    /// <summary>
    ///生命储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HpPool {
      get { return hpPool_; }
      set {
        hpPool_ = value;
      }
    }

    /// <summary>Field number for the "mpPool" field.</summary>
    public const int MpPoolFieldNumber = 2;
    private ulong mpPool_;
    /// <summary>
    ///魔法储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MpPool {
      get { return mpPool_; }
      set {
        mpPool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HpPool != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HpPool);
      }
      if (MpPool != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MpPool);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HpPool != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HpPool);
      }
      if (MpPool != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MpPool);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HpPool = input.ReadUInt64();
            break;
          }
          case 16: {
            MpPool = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrPowerNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrPowerNtf> _parser = new pb::MessageParser<CmdAttrPowerNtf>(() => new CmdAttrPowerNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrPowerNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private uint power_;
    /// <summary>
    ///总评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "rolePower" field.</summary>
    public const int RolePowerFieldNumber = 2;
    private uint rolePower_;
    /// <summary>
    ///人物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RolePower {
      get { return rolePower_; }
      set {
        rolePower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Power);
      }
      if (RolePower != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RolePower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (RolePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RolePower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Power = input.ReadUInt32();
            break;
          }
          case 16: {
            RolePower = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获取今日获得援助值、队长积分
  /// </summary>
  public sealed class CmdAttrGetDailyPointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetDailyPointReq> _parser = new pb::MessageParser<CmdAttrGetDailyPointReq>(() => new CmdAttrGetDailyPointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetDailyPointReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///请求获取今日获得援助值、队长积分回复
  /// </summary>
  public sealed class CmdAttrGetDailyPointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetDailyPointRes> _parser = new pb::MessageParser<CmdAttrGetDailyPointRes>(() => new CmdAttrGetDailyPointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetDailyPointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "aidPoint" field.</summary>
    public const int AidPointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> _repeated_aidPoint_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> aidPoint_ = new pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo>();
    /// <summary>
    ///援助值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> AidPoint {
      get { return aidPoint_; }
    }

    /// <summary>Field number for the "captainPoint" field.</summary>
    public const int CaptainPointFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> _repeated_captainPoint_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> captainPoint_ = new pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo>();
    /// <summary>
    ///队长积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdAttrGetDailyPointRes.Types.PointInfo> CaptainPoint {
      get { return captainPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aidPoint_.WriteTo(output, _repeated_aidPoint_codec);
      captainPoint_.WriteTo(output, _repeated_captainPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aidPoint_.CalculateSize(_repeated_aidPoint_codec);
      size += captainPoint_.CalculateSize(_repeated_captainPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            aidPoint_.AddEntriesFrom(input, _repeated_aidPoint_codec);
            break;
          }
          case 18: {
            captainPoint_.AddEntriesFrom(input, _repeated_captainPoint_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdAttrGetDailyPointRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class PointInfo : pb::IMessage {
        private static readonly pb::MessageParser<PointInfo> _parser = new pb::MessageParser<PointInfo>(() => new PointInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PointInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private uint value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Value);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Value = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///特权buff
  /// </summary>
  public sealed class PrivilegeBuff : pb::IMessage {
    private static readonly pb::MessageParser<PrivilegeBuff> _parser = new pb::MessageParser<PrivilegeBuff>(() => new PrivilegeBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivilegeBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "totalTime" field.</summary>
    public const int TotalTimeFieldNumber = 2;
    private uint totalTime_;
    /// <summary>
    ///总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private uint expireTime_;
    /// <summary>
    ///失效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_params_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> params_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalTime);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExpireTime);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTime);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTime);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalTime = input.ReadUInt32();
            break;
          }
          case 24: {
            ExpireTime = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrPrivilegeBuffNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrPrivilegeBuffNtf> _parser = new pb::MessageParser<CmdAttrPrivilegeBuffNtf>(() => new CmdAttrPrivilegeBuffNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrPrivilegeBuffNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "privilegeBuffs" field.</summary>
    public const int PrivilegeBuffsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PrivilegeBuff> _repeated_privilegeBuffs_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PrivilegeBuff.Parser);
    private readonly pbc::RepeatedField<global::Packet.PrivilegeBuff> privilegeBuffs_ = new pbc::RepeatedField<global::Packet.PrivilegeBuff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PrivilegeBuff> PrivilegeBuffs {
      get { return privilegeBuffs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      privilegeBuffs_.WriteTo(output, _repeated_privilegeBuffs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += privilegeBuffs_.CalculateSize(_repeated_privilegeBuffs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            privilegeBuffs_.AddEntriesFrom(input, _repeated_privilegeBuffs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrPrivilegeBuffUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrPrivilegeBuffUpdateNtf> _parser = new pb::MessageParser<CmdAttrPrivilegeBuffUpdateNtf>(() => new CmdAttrPrivilegeBuffUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrPrivilegeBuffUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "privilegeBuff" field.</summary>
    public const int PrivilegeBuffFieldNumber = 2;
    private global::Packet.PrivilegeBuff privilegeBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PrivilegeBuff PrivilegeBuff {
      get { return privilegeBuff_; }
      set {
        privilegeBuff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
      if (privilegeBuff_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrivilegeBuff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      if (privilegeBuff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivilegeBuff);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
          case 18: {
            if (privilegeBuff_ == null) {
              privilegeBuff_ = new global::Packet.PrivilegeBuff();
            }
            input.ReadMessage(privilegeBuff_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdAttrPrivilegeBuffUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum Op {
        Add = 0,
        Remove = 1,
        Update = 2,
      }

    }
    #endregion

  }

  public sealed class CmdAttrDelPrivilegeBuffReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrDelPrivilegeBuffReq> _parser = new pb::MessageParser<CmdAttrDelPrivilegeBuffReq>(() => new CmdAttrDelPrivilegeBuffReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrDelPrivilegeBuffReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private uint buffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 2;
    private bool force_;
    /// <summary>
    /// 不检查剩余时间强制删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuffId);
      }
      if (Force != false) {
        output.WriteRawTag(16);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffId);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffId = input.ReadUInt32();
            break;
          }
          case 16: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrRePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRePointReq> _parser = new pb::MessageParser<CmdAttrRePointReq>(() => new CmdAttrRePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///使用的道具id（低等级免费洗点填0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 作废
  /// </summary>
  public sealed class CmdAttrCompensationExpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrCompensationExpNtf> _parser = new pb::MessageParser<CmdAttrCompensationExpNtf>(() => new CmdAttrCompensationExpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrCompensationExpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private ulong exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrTutorInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrTutorInfoReq> _parser = new pb::MessageParser<CmdAttrTutorInfoReq>(() => new CmdAttrTutorInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrTutorInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdAttrTutorInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrTutorInfoRes> _parser = new pb::MessageParser<CmdAttrTutorInfoRes>(() => new CmdAttrTutorInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrTutorInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private ulong exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置是否自动购买血蓝池
  /// </summary>
  public sealed class CmdAttrSetAutoHpMpPoolReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSetAutoHpMpPoolReq> _parser = new pb::MessageParser<CmdAttrSetAutoHpMpPoolReq>(() => new CmdAttrSetAutoHpMpPoolReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSetAutoHpMpPoolReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoHpPool" field.</summary>
    public const int AutoHpPoolFieldNumber = 1;
    private bool autoHpPool_;
    /// <summary>
    ///自动补充生命储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoHpPool {
      get { return autoHpPool_; }
      set {
        autoHpPool_ = value;
      }
    }

    /// <summary>Field number for the "autoMpPool" field.</summary>
    public const int AutoMpPoolFieldNumber = 2;
    private bool autoMpPool_;
    /// <summary>
    ///自动补充魔法储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoMpPool {
      get { return autoMpPool_; }
      set {
        autoMpPool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoHpPool != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoHpPool);
      }
      if (AutoMpPool != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoMpPool);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoHpPool != false) {
        size += 1 + 1;
      }
      if (AutoMpPool != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoHpPool = input.ReadBool();
            break;
          }
          case 16: {
            AutoMpPool = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrSetAutoHpMpPoolRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSetAutoHpMpPoolRes> _parser = new pb::MessageParser<CmdAttrSetAutoHpMpPoolRes>(() => new CmdAttrSetAutoHpMpPoolRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSetAutoHpMpPoolRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "autoHpPool" field.</summary>
    public const int AutoHpPoolFieldNumber = 1;
    private bool autoHpPool_;
    /// <summary>
    ///自动补充生命储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoHpPool {
      get { return autoHpPool_; }
      set {
        autoHpPool_ = value;
      }
    }

    /// <summary>Field number for the "autoMpPool" field.</summary>
    public const int AutoMpPoolFieldNumber = 2;
    private bool autoMpPool_;
    /// <summary>
    ///自动补充魔法储备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoMpPool {
      get { return autoMpPool_; }
      set {
        autoMpPool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoHpPool != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoHpPool);
      }
      if (AutoMpPool != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoMpPool);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoHpPool != false) {
        size += 1 + 1;
      }
      if (AutoMpPool != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoHpPool = input.ReadBool();
            break;
          }
          case 16: {
            AutoMpPool = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 经验补偿
  /// </summary>
  public sealed class CompensationExp : pb::IMessage {
    private static readonly pb::MessageParser<CompensationExp> _parser = new pb::MessageParser<CompensationExp>(() => new CompensationExp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompensationExp> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 表格id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    /// 依表中Type解释为经验值或经验倍率万分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrCompensationExpNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrCompensationExpNty> _parser = new pb::MessageParser<CmdAttrCompensationExpNty>(() => new CmdAttrCompensationExpNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrCompensationExpNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CompensationExp> _repeated_total_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CompensationExp.Parser);
    private readonly pbc::RepeatedField<global::Packet.CompensationExp> total_ = new pbc::RepeatedField<global::Packet.CompensationExp>();
    /// <summary>
    /// 可补偿列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CompensationExp> Total {
      get { return total_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      total_.WriteTo(output, _repeated_total_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += total_.CalculateSize(_repeated_total_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            total_.AddEntriesFrom(input, _repeated_total_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrGetCompensationExpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetCompensationExpReq> _parser = new pb::MessageParser<CmdAttrGetCompensationExpReq>(() => new CmdAttrGetCompensationExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetCompensationExpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 表格id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrRemoveCompensationNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRemoveCompensationNty> _parser = new pb::MessageParser<CmdAttrRemoveCompensationNty>(() => new CmdAttrRemoveCompensationNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRemoveCompensationNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 表格id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取人物加点方案
  /// </summary>
  public sealed class CmdAttrGetPointSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetPointSchemeReq> _parser = new pb::MessageParser<CmdAttrGetPointSchemeReq>(() => new CmdAttrGetPointSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetPointSchemeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdAttrGetPointSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrGetPointSchemeRes> _parser = new pb::MessageParser<CmdAttrGetPointSchemeRes>(() => new CmdAttrGetPointSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrGetPointSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttrList" field.</summary>
    public const int BaseAttrListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.DtoBaseAttr> _repeated_baseAttrList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.DtoBaseAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.DtoBaseAttr> baseAttrList_ = new pbc::RepeatedField<global::Packet.DtoBaseAttr>();
    /// <summary>
    ///一级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DtoBaseAttr> BaseAttrList {
      get { return baseAttrList_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_name_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> name_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///方案名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Name {
      get { return name_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///当前使用方案(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "pkAttrList" field.</summary>
    public const int PkAttrListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.DtoPkAttr> _repeated_pkAttrList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.DtoPkAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.DtoPkAttr> pkAttrList_ = new pbc::RepeatedField<global::Packet.DtoPkAttr>();
    /// <summary>
    ///二级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DtoPkAttr> PkAttrList {
      get { return pkAttrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseAttrList_.WriteTo(output, _repeated_baseAttrList_codec);
      name_.WriteTo(output, _repeated_name_codec);
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      pkAttrList_.WriteTo(output, _repeated_pkAttrList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseAttrList_.CalculateSize(_repeated_baseAttrList_codec);
      size += name_.CalculateSize(_repeated_name_codec);
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      size += pkAttrList_.CalculateSize(_repeated_pkAttrList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baseAttrList_.AddEntriesFrom(input, _repeated_baseAttrList_codec);
            break;
          }
          case 18: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
          case 34: {
            pkAttrList_.AddEntriesFrom(input, _repeated_pkAttrList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新增人物加点方案
  /// </summary>
  public sealed class CmdAttrAddPointSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAddPointSchemeReq> _parser = new pb::MessageParser<CmdAttrAddPointSchemeReq>(() => new CmdAttrAddPointSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAddPointSchemeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdAttrAddPointSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrAddPointSchemeRes> _parser = new pb::MessageParser<CmdAttrAddPointSchemeRes>(() => new CmdAttrAddPointSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrAddPointSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttrList" field.</summary>
    public const int BaseAttrListFieldNumber = 1;
    private global::Packet.DtoBaseAttr baseAttrList_;
    /// <summary>
    ///一级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoBaseAttr BaseAttrList {
      get { return baseAttrList_; }
      set {
        baseAttrList_ = value;
      }
    }

    /// <summary>Field number for the "pkAttrList" field.</summary>
    public const int PkAttrListFieldNumber = 2;
    private global::Packet.DtoPkAttr pkAttrList_;
    /// <summary>
    ///二级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoPkAttr PkAttrList {
      get { return pkAttrList_; }
      set {
        pkAttrList_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///方案名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAttrList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAttrList);
      }
      if (pkAttrList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PkAttrList);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAttrList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAttrList);
      }
      if (pkAttrList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PkAttrList);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAttrList_ == null) {
              baseAttrList_ = new global::Packet.DtoBaseAttr();
            }
            input.ReadMessage(baseAttrList_);
            break;
          }
          case 18: {
            if (pkAttrList_ == null) {
              pkAttrList_ = new global::Packet.DtoPkAttr();
            }
            input.ReadMessage(pkAttrList_);
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///切换人物加点方案
  /// </summary>
  public sealed class CmdAttrSwitchPointSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSwitchPointSchemeReq> _parser = new pb::MessageParser<CmdAttrSwitchPointSchemeReq>(() => new CmdAttrSwitchPointSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSwitchPointSchemeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrSwitchPointSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSwitchPointSchemeRes> _parser = new pb::MessageParser<CmdAttrSwitchPointSchemeRes>(() => new CmdAttrSwitchPointSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSwitchPointSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///人物加点方案改名
  /// </summary>
  public sealed class CmdAttrRenamePointSchemeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRenamePointSchemeReq> _parser = new pb::MessageParser<CmdAttrRenamePointSchemeReq>(() => new CmdAttrRenamePointSchemeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRenamePointSchemeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrRenamePointSchemeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrRenamePointSchemeRes> _parser = new pb::MessageParser<CmdAttrRenamePointSchemeRes>(() => new CmdAttrRenamePointSchemeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrRenamePointSchemeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAttrSchemeUpdateAttrNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdAttrSchemeUpdateAttrNtf> _parser = new pb::MessageParser<CmdAttrSchemeUpdateAttrNtf>(() => new CmdAttrSchemeUpdateAttrNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAttrSchemeUpdateAttrNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttrList" field.</summary>
    public const int BaseAttrListFieldNumber = 1;
    private global::Packet.DtoBaseAttr baseAttrList_;
    /// <summary>
    ///一级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoBaseAttr BaseAttrList {
      get { return baseAttrList_; }
      set {
        baseAttrList_ = value;
      }
    }

    /// <summary>Field number for the "pkAttrList" field.</summary>
    public const int PkAttrListFieldNumber = 2;
    private global::Packet.DtoPkAttr pkAttrList_;
    /// <summary>
    ///二级属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DtoPkAttr PkAttrList {
      get { return pkAttrList_; }
      set {
        pkAttrList_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///方案索引(从0开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseAttrList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseAttrList);
      }
      if (pkAttrList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PkAttrList);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseAttrList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAttrList);
      }
      if (pkAttrList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PkAttrList);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseAttrList_ == null) {
              baseAttrList_ = new global::Packet.DtoBaseAttr();
            }
            input.ReadMessage(baseAttrList_);
            break;
          }
          case 18: {
            if (pkAttrList_ == null) {
              pkAttrList_ = new global::Packet.DtoPkAttr();
            }
            input.ReadMessage(pkAttrList_);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
