// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: headframe.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// headframe  5500+
  /// </summary>
  public enum CmdHeadFrame {
    CcmdHeadFrameNone = 0,
    /// <summary>
    ///客户端设置头相框
    /// </summary>
    SetReq = 5501,
    /// <summary>
    ///客户端设置头相框返回
    /// </summary>
    SetNtf = 5502,
    /// <summary>
    ///客户端请求头相框所有信息
    /// </summary>
    AllInfoReq = 5503,
    /// <summary>
    ///头相框所有信息返回
    /// </summary>
    DataNtf = 5504,
    /// <summary>
    ///新获得头相框
    /// </summary>
    AddNtf = 5505,
    /// <summary>
    ///过期请求
    /// </summary>
    ExpiredReq = 5506,
    /// <summary>
    ///过期头相框
    /// </summary>
    ExpiredNtf = 5507,
  }

  /// <summary>
  /// 头像框类型
  /// </summary>
  public enum HeadFrameType {
    /// <summary>
    ///无
    /// </summary>
    None = 0,
    /// <summary>
    ///头像
    /// </summary>
    Head = 1,
    /// <summary>
    ///头像框
    /// </summary>
    HeadFrame = 2,
    /// <summary>
    ///聊天框
    /// </summary>
    ChatFrame = 3,
    /// <summary>
    ///聊天背景
    /// </summary>
    ChatBack = 4,
    /// <summary>
    ///聊天文字
    /// </summary>
    ChatWord = 5,
    /// <summary>
    ///队伍图标
    /// </summary>
    TeamLogo = 6,
  }

  public enum ErrorHeadFrame {
    None = 0,
    /// <summary>
    ///配置不存在
    /// </summary>
    CsvnotFound = 5501,
    /// <summary>
    ///未获得
    /// </summary>
    NotExsit = 5502,
    /// <summary>
    ///头相框类型错误
    /// </summary>
    ErrorType = 5503,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 头相框请求
  /// </summary>
  public sealed class CmdHeadFrameAllInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameAllInfoReq> _parser = new pb::MessageParser<CmdHeadFrameAllInfoReq>(() => new CmdHeadFrameAllInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameAllInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdHeadFrameExpiredReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameExpiredReq> _parser = new pb::MessageParser<CmdHeadFrameExpiredReq>(() => new CmdHeadFrameExpiredReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameExpiredReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class PictureFrameMap : pb::IMessage {
    private static readonly pb::MessageParser<PictureFrameMap> _parser = new pb::MessageParser<PictureFrameMap>(() => new PictureFrameMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PictureFrameMap> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameType" field.</summary>
    public const int FrameTypeFieldNumber = 1;
    private uint frameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameType {
      get { return frameType_; }
      set {
        frameType_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PictureFrameMap.Types.FraInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PictureFrameMap.Types.FraInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PictureFrameMap.Types.FraInfo> info_ = new pbc::RepeatedField<global::Packet.PictureFrameMap.Types.FraInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PictureFrameMap.Types.FraInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameType);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameType);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameType = input.ReadUInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PictureFrameMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class FraInfo : pb::IMessage {
        private static readonly pb::MessageParser<FraInfo> _parser = new pb::MessageParser<FraInfo>(() => new FraInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FraInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "frameId" field.</summary>
        public const int FrameIdFieldNumber = 1;
        private uint frameId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FrameId {
          get { return frameId_; }
          set {
            frameId_ = value;
          }
        }

        /// <summary>Field number for the "endTick" field.</summary>
        public const int EndTickFieldNumber = 2;
        private uint endTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EndTick {
          get { return endTick_; }
          set {
            endTick_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrameId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FrameId);
          }
          if (EndTick != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(EndTick);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrameId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
          }
          if (EndTick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTick);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FrameId = input.ReadUInt32();
                break;
              }
              case 16: {
                EndTick = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 头相框请求返回
  /// </summary>
  public sealed class CmdHeadFrameDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameDataNtf> _parser = new pb::MessageParser<CmdHeadFrameDataNtf>(() => new CmdHeadFrameDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "headPhoto" field.</summary>
    public const int HeadPhotoFieldNumber = 1;
    private uint headPhoto_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadPhoto {
      get { return headPhoto_; }
      set {
        headPhoto_ = value;
      }
    }

    /// <summary>Field number for the "headFrame" field.</summary>
    public const int HeadFrameFieldNumber = 2;
    private uint headFrame_;
    /// <summary>
    ///头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrame {
      get { return headFrame_; }
      set {
        headFrame_ = value;
      }
    }

    /// <summary>Field number for the "chatFrame" field.</summary>
    public const int ChatFrameFieldNumber = 3;
    private uint chatFrame_;
    /// <summary>
    ///聊天框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatFrame {
      get { return chatFrame_; }
      set {
        chatFrame_ = value;
      }
    }

    /// <summary>Field number for the "chatBack" field.</summary>
    public const int ChatBackFieldNumber = 4;
    private uint chatBack_;
    /// <summary>
    ///聊天背景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatBack {
      get { return chatBack_; }
      set {
        chatBack_ = value;
      }
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 5;
    private uint chatText_;
    /// <summary>
    ///聊天文字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatText {
      get { return chatText_; }
      set {
        chatText_ = value;
      }
    }

    /// <summary>Field number for the "teamLogo" field.</summary>
    public const int TeamLogoFieldNumber = 6;
    private uint teamLogo_;
    /// <summary>
    ///队伍图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamLogo {
      get { return teamLogo_; }
      set {
        teamLogo_ = value;
      }
    }

    /// <summary>Field number for the "frameMap" field.</summary>
    public const int FrameMapFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.PictureFrameMap> _repeated_frameMap_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.PictureFrameMap.Parser);
    private readonly pbc::RepeatedField<global::Packet.PictureFrameMap> frameMap_ = new pbc::RepeatedField<global::Packet.PictureFrameMap>();
    /// <summary>
    ///以激活的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PictureFrameMap> FrameMap {
      get { return frameMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadPhoto != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeadPhoto);
      }
      if (HeadFrame != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeadFrame);
      }
      if (ChatFrame != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChatFrame);
      }
      if (ChatBack != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ChatBack);
      }
      if (ChatText != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChatText);
      }
      if (TeamLogo != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TeamLogo);
      }
      frameMap_.WriteTo(output, _repeated_frameMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadPhoto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadPhoto);
      }
      if (HeadFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrame);
      }
      if (ChatFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatFrame);
      }
      if (ChatBack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatBack);
      }
      if (ChatText != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatText);
      }
      if (TeamLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamLogo);
      }
      size += frameMap_.CalculateSize(_repeated_frameMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadPhoto = input.ReadUInt32();
            break;
          }
          case 16: {
            HeadFrame = input.ReadUInt32();
            break;
          }
          case 24: {
            ChatFrame = input.ReadUInt32();
            break;
          }
          case 32: {
            ChatBack = input.ReadUInt32();
            break;
          }
          case 40: {
            ChatText = input.ReadUInt32();
            break;
          }
          case 48: {
            TeamLogo = input.ReadUInt32();
            break;
          }
          case 58: {
            frameMap_.AddEntriesFrom(input, _repeated_frameMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHeadFrameSetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameSetReq> _parser = new pb::MessageParser<CmdHeadFrameSetReq>(() => new CmdHeadFrameSetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameSetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameType" field.</summary>
    public const int FrameTypeFieldNumber = 1;
    private uint frameType_;
    /// <summary>
    ///frameType 参考 HeadFrameType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameType {
      get { return frameType_; }
      set {
        frameType_ = value;
      }
    }

    /// <summary>Field number for the "frameId" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private uint frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameType);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameType);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameType = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdHeadFrameSetNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameSetNtf> _parser = new pb::MessageParser<CmdHeadFrameSetNtf>(() => new CmdHeadFrameSetNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameSetNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameType" field.</summary>
    public const int FrameTypeFieldNumber = 1;
    private uint frameType_;
    /// <summary>
    ///frameType 参考 HeadFrameType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameType {
      get { return frameType_; }
      set {
        frameType_ = value;
      }
    }

    /// <summary>Field number for the "frameId" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private uint frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameType);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameType);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameType = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 头相获得
  /// </summary>
  public sealed class CmdHeadFrameAddNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameAddNtf> _parser = new pb::MessageParser<CmdHeadFrameAddNtf>(() => new CmdHeadFrameAddNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameAddNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameMap" field.</summary>
    public const int FrameMapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PictureFrameMap> _repeated_frameMap_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PictureFrameMap.Parser);
    private readonly pbc::RepeatedField<global::Packet.PictureFrameMap> frameMap_ = new pbc::RepeatedField<global::Packet.PictureFrameMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PictureFrameMap> FrameMap {
      get { return frameMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frameMap_.WriteTo(output, _repeated_frameMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frameMap_.CalculateSize(_repeated_frameMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frameMap_.AddEntriesFrom(input, _repeated_frameMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 头相过期
  /// </summary>
  public sealed class CmdHeadFrameExpiredNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdHeadFrameExpiredNtf> _parser = new pb::MessageParser<CmdHeadFrameExpiredNtf>(() => new CmdHeadFrameExpiredNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdHeadFrameExpiredNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameMap" field.</summary>
    public const int FrameMapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PictureFrameMap> _repeated_frameMap_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PictureFrameMap.Parser);
    private readonly pbc::RepeatedField<global::Packet.PictureFrameMap> frameMap_ = new pbc::RepeatedField<global::Packet.PictureFrameMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PictureFrameMap> FrameMap {
      get { return frameMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frameMap_.WriteTo(output, _repeated_frameMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frameMap_.CalculateSize(_repeated_frameMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frameMap_.AddEntriesFrom(input, _repeated_frameMap_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
