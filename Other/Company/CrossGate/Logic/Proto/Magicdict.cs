// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: magicdict.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdMagicDict {
    None = 0,
    GuideCompleteReq = 2401,
    GuideCompleteRes = 2402,
    QueryAllCompleteGuideReq = 2408,
    QueryAllCompleteGuideRes = 2409,
    /// <summary>
    ///领取章节奖励请求
    /// </summary>
    GetChapterAwardReq = 2410,
    /// <summary>
    ///领取章节奖励请求返回
    /// </summary>
    GetChapterAwardRes = 2411,
    /// <summary>
    ///领取章节子系统任务奖励请求
    /// </summary>
    GetSysTaskAwardReq = 2412,
    /// <summary>
    ///领取章节子系统任务奖励请求返回
    /// </summary>
    GetSysTaskAwardRes = 2413,
    /// <summary>
    ///点击章节子系统请求
    /// </summary>
    ClickChapterSysReq = 2414,
    /// <summary>
    ///点击章节子系统请求返回
    /// </summary>
    ClickChapterSysRes = 2415,
    /// <summary>
    ///特定事件完成请求(可以更新该事件进度)
    /// </summary>
    EventCondCompleteReq = 2416,
    /// <summary>
    ///特定事件完成请求返回
    /// </summary>
    EventCondCompleteRes = 2417,
    /// <summary>
    ///通知章节奖励可领取
    /// </summary>
    ChapterAwardNtf = 2430,
    /// <summary>
    ///通知章节内系统任务奖励领取(也就是任务完成)
    /// </summary>
    SysTaskAwardAwardNtf = 2431,
    /// <summary>
    ///通知任务进度
    /// </summary>
    SysTaskProcessNtf = 2432,
    /// <summary>
    ///通知子系统进度
    /// </summary>
    SysProcessNtf = 2433,
    /// <summary>
    ///通知章节进度
    /// </summary>
    ChapterProcessNtf = 2434,
    /// <summary>
    ///通知章节和子系统及任务信息
    /// </summary>
    ChapterSysTaskInfoNtf = 2435,
    /// <summary>
    ///点击进入教学关
    /// </summary>
    ClickTeachingReq = 2436,
    /// <summary>
    ///通知教学关进度
    /// </summary>
    TeachingProcessNtf = 2437,
  }

  public enum MagicDictActiveReason {
    None = 0,
    /// <summary>
    ///完成章节
    /// </summary>
    CompleteGuide = 2401,
    /// <summary>
    ///-------------------------------------------
    /// </summary>
    GiveChapterAward = 2420,
    /// <summary>
    ///领取任务奖励
    /// </summary>
    GiveSysTaskAward = 2421,
  }

  public enum ErrorMagicDict {
    None = 0,
    /// <summary>
    /// 引导条件职业检查失败
    /// </summary>
    CareerError = 2401,
    /// <summary>
    /// 引导条件检查失败
    /// </summary>
    ConditionError = 2402,
    /// <summary>
    /// 引导条件等级检查失败
    /// </summary>
    LevelError = 2403,
    /// <summary>
    /// 引导条件任务检查失败
    /// </summary>
    TaskError = 2404,
    /// <summary>
    /// 已完成过该引导
    /// </summary>
    Completed = 2405,
    /// <summary>
    ///--------------------------------------------------
    /// </summary>
    GiveAward = 2420,
    /// <summary>
    ///没有此章节
    /// </summary>
    NoChapter = 2421,
    /// <summary>
    ///章节未开启
    /// </summary>
    NoOpenChapter = 2422,
    /// <summary>
    ///章节奖励已被领取
    /// </summary>
    GiveAwarded = 2423,
    /// <summary>
    ///章节进度未完成
    /// </summary>
    ChapterProcess = 2424,
    /// <summary>
    ///没有此任务
    /// </summary>
    NoSysTask = 2425,
    /// <summary>
    ///没有此强制引导
    /// </summary>
    NoGuid = 2426,
    /// <summary>
    ///当前任务进度不满足条件
    /// </summary>
    SysTaskProcess = 2427,
    /// <summary>
    ///没有此子系统
    /// </summary>
    NoSys = 2428,
    /// <summary>
    ///没有引导表错误
    /// </summary>
    CsvguidNull = 2429,
    /// <summary>
    ///设置进度失败
    /// </summary>
    SetProcess = 2430,
    /// <summary>
    ///功能未开启
    /// </summary>
    FunctionOpen = 2431,
    /// <summary>
    ///没有此事件
    /// </summary>
    EventType = 2432,
    /// <summary>
    ///条件不满足
    /// </summary>
    EventCond = 2433,
    /// <summary>
    ///满足事件提交的任务数量异常
    /// </summary>
    MeetEventTaskTooMuch = 2434,
    /// <summary>
    ///表参数配置错误
    /// </summary>
    EventParam = 2435,
  }

  /// <summary>
  ///
  ///0-无条件
  ///2-接取任务
  ///3-点击任务
  ///4-完成任务
  ///5-进入副本
  ///6-完成副本
  ///7-怪物死亡
  /// </summary>
  public enum GuideConditionEnum {
    None = 0,
    /// <summary>
    /// 服务器会检测
    /// </summary>
    AcceptedQuestion = 2,
    /// <summary>
    /// 服务器会检测
    /// </summary>
    CompletedQuestion = 4,
    /// <summary>
    /// 服务器暂时不会检测
    /// </summary>
    IntoDungeons = 5,
    /// <summary>
    /// 服务器暂时不会检测
    /// </summary>
    ExitDungeons = 6,
    /// <summary>
    /// 服务器暂时不会检测
    /// </summary>
    MonsterDead = 7,
  }

  #endregion

  #region Messages
  public sealed class CmdMagicDictGuideCompleteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGuideCompleteReq> _parser = new pb::MessageParser<CmdMagicDictGuideCompleteReq>(() => new CmdMagicDictGuideCompleteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGuideCompleteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guideGroupID" field.</summary>
    public const int GuideGroupIDFieldNumber = 1;
    private uint guideGroupID_;
    /// <summary>
    /// 完成的指引组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuideGroupID {
      get { return guideGroupID_; }
      set {
        guideGroupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideGroupID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuideGroupID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuideGroupID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideGroupID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_GuideCompleteRes
  /// </summary>
  public sealed class CmdMagicDictGuideCompleteRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGuideCompleteRes> _parser = new pb::MessageParser<CmdMagicDictGuideCompleteRes>(() => new CmdMagicDictGuideCompleteRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGuideCompleteRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guideGroupID" field.</summary>
    public const int GuideGroupIDFieldNumber = 1;
    private uint guideGroupID_;
    /// <summary>
    /// 完成的指引组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuideGroupID {
      get { return guideGroupID_; }
      set {
        guideGroupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideGroupID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GuideGroupID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuideGroupID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideGroupID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_QueryAllCompleteGuideReq = 2408;
  /// </summary>
  public sealed class CmdMagicDictQueryAllCompleteGuideReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictQueryAllCompleteGuideReq> _parser = new pb::MessageParser<CmdMagicDictQueryAllCompleteGuideReq>(() => new CmdMagicDictQueryAllCompleteGuideReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictQueryAllCompleteGuideReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_QueryAllCompleteGuideRes = 2409;
  /// </summary>
  public sealed class CmdMagicDictQueryAllCompleteGuideRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictQueryAllCompleteGuideRes> _parser = new pb::MessageParser<CmdMagicDictQueryAllCompleteGuideRes>(() => new CmdMagicDictQueryAllCompleteGuideRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictQueryAllCompleteGuideRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "guideGroupID" field.</summary>
    public const int GuideGroupIDFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_guideGroupID_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> guideGroupID_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GuideGroupID {
      get { return guideGroupID_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guideGroupID_.WriteTo(output, _repeated_guideGroupID_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guideGroupID_.CalculateSize(_repeated_guideGroupID_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            guideGroupID_.AddEntriesFrom(input, _repeated_guideGroupID_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///章节信息
  /// </summary>
  public sealed class Chapter : pb::IMessage {
    private static readonly pb::MessageParser<Chapter> _parser = new pb::MessageParser<Chapter>(() => new Chapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapter> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "awarded" field.</summary>
    public const int AwardedFieldNumber = 3;
    private bool awarded_;
    /// <summary>
    ///是否领取过奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Awarded {
      get { return awarded_; }
      set {
        awarded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
      if (Awarded != false) {
        output.WriteRawTag(24);
        output.WriteBool(Awarded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      if (Awarded != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
          case 24: {
            Awarded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///子系统信息
  /// </summary>
  public sealed class ChapterSys : pb::IMessage {
    private static readonly pb::MessageParser<ChapterSys> _parser = new pb::MessageParser<ChapterSys>(() => new ChapterSys());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChapterSys> Parser { get { return _parser; } }

    /// <summary>Field number for the "sysId" field.</summary>
    public const int SysIdFieldNumber = 1;
    private uint sysId_;
    /// <summary>
    ///系统id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysId {
      get { return sysId_; }
      set {
        sysId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///本系统完成度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "clicked" field.</summary>
    public const int ClickedFieldNumber = 3;
    private bool clicked_;
    /// <summary>
    ///是否被点击过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clicked {
      get { return clicked_; }
      set {
        clicked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SysId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SysId);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
      if (Clicked != false) {
        output.WriteRawTag(24);
        output.WriteBool(Clicked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SysId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysId);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      if (Clicked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SysId = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
          case 24: {
            Clicked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///子系统任务信息
  /// </summary>
  public sealed class SysTask : pb::IMessage {
    private static readonly pb::MessageParser<SysTask> _parser = new pb::MessageParser<SysTask>(() => new SysTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "awarded" field.</summary>
    public const int AwardedFieldNumber = 3;
    private bool awarded_;
    /// <summary>
    ///是否被领取过奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Awarded {
      get { return awarded_; }
      set {
        awarded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
      if (Awarded != false) {
        output.WriteRawTag(24);
        output.WriteBool(Awarded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      if (Awarded != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
          case 24: {
            Awarded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///教学关任务
  /// </summary>
  public sealed class Teaching : pb::IMessage {
    private static readonly pb::MessageParser<Teaching> _parser = new pb::MessageParser<Teaching>(() => new Teaching());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Teaching> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///教学id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///完成度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_GetChapterAwardReq = 2410;  //领取章节奖励请求
  /// </summary>
  public sealed class CmdMagicDictGetChapterAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGetChapterAwardReq> _parser = new pb::MessageParser<CmdMagicDictGetChapterAwardReq>(() => new CmdMagicDictGetChapterAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGetChapterAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_GetChapterAwardRes = 2411;  //领取章节奖励请求返回
  /// </summary>
  public sealed class CmdMagicDictGetChapterAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGetChapterAwardRes> _parser = new pb::MessageParser<CmdMagicDictGetChapterAwardRes>(() => new CmdMagicDictGetChapterAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGetChapterAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_GetSysTaskAwardReq = 2412;     //领取章节子系统任务奖励请求
  /// </summary>
  public sealed class CmdMagicDictGetSysTaskAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGetSysTaskAwardReq> _parser = new pb::MessageParser<CmdMagicDictGetSysTaskAwardReq>(() => new CmdMagicDictGetSysTaskAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGetSysTaskAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_GetSysTaskAwardRes = 2413;     //领取章节子系统任务奖励请求返回
  /// </summary>
  public sealed class CmdMagicDictGetSysTaskAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictGetSysTaskAwardRes> _parser = new pb::MessageParser<CmdMagicDictGetSysTaskAwardRes>(() => new CmdMagicDictGetSysTaskAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictGetSysTaskAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_ClickChapterSysReq = 2414;     //点击章节子系统请求
  /// </summary>
  public sealed class CmdMagicDictClickChapterSysReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictClickChapterSysReq> _parser = new pb::MessageParser<CmdMagicDictClickChapterSysReq>(() => new CmdMagicDictClickChapterSysReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictClickChapterSysReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterSysId" field.</summary>
    public const int ChapterSysIdFieldNumber = 1;
    private uint chapterSysId_;
    /// <summary>
    ///章节子系统id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterSysId {
      get { return chapterSysId_; }
      set {
        chapterSysId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterSysId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterSysId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterSysId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterSysId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterSysId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_ClickChapterSysRes = 2415;     //点击章节子系统请求请求返回
  /// </summary>
  public sealed class CmdMagicDictClickChapterSysRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictClickChapterSysRes> _parser = new pb::MessageParser<CmdMagicDictClickChapterSysRes>(() => new CmdMagicDictClickChapterSysRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictClickChapterSysRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "sysId" field.</summary>
    public const int SysIdFieldNumber = 2;
    private uint sysId_;
    /// <summary>
    ///章节子系统id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysId {
      get { return sysId_; }
      set {
        sysId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
      if (SysId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SysId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      if (SysId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
          case 16: {
            SysId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_EventCondCompleteReq = 2416;       //特定事件完成请求(可以更新该事件进度)
  /// </summary>
  public sealed class CmdMagicDictEventCondCompleteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictEventCondCompleteReq> _parser = new pb::MessageParser<CmdMagicDictEventCondCompleteReq>(() => new CmdMagicDictEventCondCompleteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictEventCondCompleteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private uint eventType_;
    /// <summary>
    ///事件对应类型(表中有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "taskIdList" field.</summary>
    public const int TaskIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdMagicDictEventCondCompleteReq.Types.ClientTask> _repeated_taskIdList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdMagicDictEventCondCompleteReq.Types.ClientTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdMagicDictEventCondCompleteReq.Types.ClientTask> taskIdList_ = new pbc::RepeatedField<global::Packet.CmdMagicDictEventCondCompleteReq.Types.ClientTask>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdMagicDictEventCondCompleteReq.Types.ClientTask> TaskIdList {
      get { return taskIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EventType);
      }
      taskIdList_.WriteTo(output, _repeated_taskIdList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
      }
      size += taskIdList_.CalculateSize(_repeated_taskIdList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventType = input.ReadUInt32();
            break;
          }
          case 18: {
            taskIdList_.AddEntriesFrom(input, _repeated_taskIdList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdMagicDictEventCondCompleteReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      /// <summary>
      ///客户端task
      /// </summary>
      public sealed class ClientTask : pb::IMessage {
        private static readonly pb::MessageParser<ClientTask> _parser = new pb::MessageParser<ClientTask>(() => new ClientTask());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientTask> Parser { get { return _parser; } }

        /// <summary>Field number for the "taskId" field.</summary>
        public const int TaskIdFieldNumber = 1;
        private uint taskId_;
        /// <summary>
        ///任务id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TaskId {
          get { return taskId_; }
          set {
            taskId_ = value;
          }
        }

        /// <summary>Field number for the "process" field.</summary>
        public const int ProcessFieldNumber = 2;
        private uint process_;
        /// <summary>
        ///任务进度
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Process {
          get { return process_; }
          set {
            process_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TaskId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(TaskId);
          }
          if (Process != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Process);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TaskId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
          }
          if (Process != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TaskId = input.ReadUInt32();
                break;
              }
              case 16: {
                Process = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// CmdMagicDict_EventCondCompleteRes = 2417;       //特定事件完成请求返回
  /// </summary>
  public sealed class CmdMagicDictEventCondCompleteRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictEventCondCompleteRes> _parser = new pb::MessageParser<CmdMagicDictEventCondCompleteRes>(() => new CmdMagicDictEventCondCompleteRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictEventCondCompleteRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_ChapterAwardNtf = 2430;      //通知章节奖励可领取
  /// </summary>
  public sealed class CmdMagicDictChapterAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictChapterAwardNtf> _parser = new pb::MessageParser<CmdMagicDictChapterAwardNtf>(() => new CmdMagicDictChapterAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictChapterAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_SysTaskAwardAwardNtf = 2431;   //通知章节内系统任务奖励领取
  /// </summary>
  public sealed class CmdMagicDictSysTaskAwardAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictSysTaskAwardAwardNtf> _parser = new pb::MessageParser<CmdMagicDictSysTaskAwardAwardNtf>(() => new CmdMagicDictSysTaskAwardAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictSysTaskAwardAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_SysTaskProcessNtf = 2432;      //通知任务进度
  /// </summary>
  public sealed class CmdMagicDictSysTaskProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictSysTaskProcessNtf> _parser = new pb::MessageParser<CmdMagicDictSysTaskProcessNtf>(() => new CmdMagicDictSysTaskProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictSysTaskProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskProcess" field.</summary>
    public const int TaskProcessFieldNumber = 2;
    private uint taskProcess_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskProcess {
      get { return taskProcess_; }
      set {
        taskProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (TaskProcess != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (TaskProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskProcess = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_SysProcessNtf = 2433;          //通知子系统进度
  /// </summary>
  public sealed class CmdMagicDictSysProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictSysProcessNtf> _parser = new pb::MessageParser<CmdMagicDictSysProcessNtf>(() => new CmdMagicDictSysProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictSysProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "sysId" field.</summary>
    public const int SysIdFieldNumber = 2;
    private uint sysId_;
    /// <summary>
    ///子系统id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysId {
      get { return sysId_; }
      set {
        sysId_ = value;
      }
    }

    /// <summary>Field number for the "sysProcess" field.</summary>
    public const int SysProcessFieldNumber = 3;
    private uint sysProcess_;
    /// <summary>
    ///子系统进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SysProcess {
      get { return sysProcess_; }
      set {
        sysProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
      if (SysId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SysId);
      }
      if (SysProcess != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SysProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      if (SysId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysId);
      }
      if (SysProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SysProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
          case 16: {
            SysId = input.ReadUInt32();
            break;
          }
          case 24: {
            SysProcess = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_ChapterProcessNtf = 2434;      //通知章节进度
  /// </summary>
  public sealed class CmdMagicDictChapterProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictChapterProcessNtf> _parser = new pb::MessageParser<CmdMagicDictChapterProcessNtf>(() => new CmdMagicDictChapterProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictChapterProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private uint chapterId_;
    /// <summary>
    ///章节Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "chapterProcess" field.</summary>
    public const int ChapterProcessFieldNumber = 2;
    private uint chapterProcess_;
    /// <summary>
    ///章节进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChapterProcess {
      get { return chapterProcess_; }
      set {
        chapterProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChapterId);
      }
      if (ChapterProcess != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChapterProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterId);
      }
      if (ChapterProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChapterProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadUInt32();
            break;
          }
          case 16: {
            ChapterProcess = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdMagicDict_ChapterSysTaskInfoNtf = 2433;   //通知章节和子系统及任务信息
  /// </summary>
  public sealed class CmdMagicDictChapterSysTaskInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictChapterSysTaskInfoNtf> _parser = new pb::MessageParser<CmdMagicDictChapterSysTaskInfoNtf>(() => new CmdMagicDictChapterSysTaskInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictChapterSysTaskInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapterList" field.</summary>
    public const int ChapterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Chapter> _repeated_chapterList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Chapter.Parser);
    private readonly pbc::RepeatedField<global::Packet.Chapter> chapterList_ = new pbc::RepeatedField<global::Packet.Chapter>();
    /// <summary>
    ///章节列表信息(所有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Chapter> ChapterList {
      get { return chapterList_; }
    }

    /// <summary>Field number for the "sysList" field.</summary>
    public const int SysListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ChapterSys> _repeated_sysList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ChapterSys.Parser);
    private readonly pbc::RepeatedField<global::Packet.ChapterSys> sysList_ = new pbc::RepeatedField<global::Packet.ChapterSys>();
    /// <summary>
    ///子系统列表信息(所有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ChapterSys> SysList {
      get { return sysList_; }
    }

    /// <summary>Field number for the "sysTaskList" field.</summary>
    public const int SysTaskListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.SysTask> _repeated_sysTaskList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.SysTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.SysTask> sysTaskList_ = new pbc::RepeatedField<global::Packet.SysTask>();
    /// <summary>
    ///子系统任务信息(所有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SysTask> SysTaskList {
      get { return sysTaskList_; }
    }

    /// <summary>Field number for the "teachList" field.</summary>
    public const int TeachListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.Teaching> _repeated_teachList_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.Teaching.Parser);
    private readonly pbc::RepeatedField<global::Packet.Teaching> teachList_ = new pbc::RepeatedField<global::Packet.Teaching>();
    /// <summary>
    ///教学关任务信息(所有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Teaching> TeachList {
      get { return teachList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chapterList_.WriteTo(output, _repeated_chapterList_codec);
      sysList_.WriteTo(output, _repeated_sysList_codec);
      sysTaskList_.WriteTo(output, _repeated_sysTaskList_codec);
      teachList_.WriteTo(output, _repeated_teachList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chapterList_.CalculateSize(_repeated_chapterList_codec);
      size += sysList_.CalculateSize(_repeated_sysList_codec);
      size += sysTaskList_.CalculateSize(_repeated_sysTaskList_codec);
      size += teachList_.CalculateSize(_repeated_teachList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chapterList_.AddEntriesFrom(input, _repeated_chapterList_codec);
            break;
          }
          case 18: {
            sysList_.AddEntriesFrom(input, _repeated_sysList_codec);
            break;
          }
          case 26: {
            sysTaskList_.AddEntriesFrom(input, _repeated_sysTaskList_codec);
            break;
          }
          case 34: {
            teachList_.AddEntriesFrom(input, _repeated_teachList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMagicDictClickTeachingReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictClickTeachingReq> _parser = new pb::MessageParser<CmdMagicDictClickTeachingReq>(() => new CmdMagicDictClickTeachingReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictClickTeachingReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teachId" field.</summary>
    public const int TeachIdFieldNumber = 1;
    private uint teachId_;
    /// <summary>
    ///教学id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeachId {
      get { return teachId_; }
      set {
        teachId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeachId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeachId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeachId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeachId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知教学关进度
  /// </summary>
  public sealed class CmdMagicDictTeachingProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMagicDictTeachingProcessNtf> _parser = new pb::MessageParser<CmdMagicDictTeachingProcessNtf>(() => new CmdMagicDictTeachingProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMagicDictTeachingProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "teachId" field.</summary>
    public const int TeachIdFieldNumber = 1;
    private uint teachId_;
    /// <summary>
    ///教学id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeachId {
      get { return teachId_; }
      set {
        teachId_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private uint process_;
    /// <summary>
    ///教学进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeachId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeachId);
      }
      if (Process != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Process);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeachId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachId);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeachId = input.ReadUInt32();
            break;
          }
          case 16: {
            Process = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
