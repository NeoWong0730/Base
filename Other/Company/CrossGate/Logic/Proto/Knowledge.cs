// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: knowledge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 3500+
  /// </summary>
  public enum CmdKnowledge {
    None = 0,
    /// <summary>
    ///已经激活的列表通知 登录就发吧 担心影响界面ui
    /// </summary>
    ListNtf = 3500,
    /// <summary>
    ///单个激活更新
    /// </summary>
    OneActiveNtf = 3501,
    /// <summary>
    /// 领取奖励
    /// </summary>
    TakeAwardReq = 3502,
    /// <summary>
    /// 领取奖励返回
    /// </summary>
    TakeAwardRes = 3503,
    /// <summary>
    /// 点击取消小知识的新激活icon
    /// </summary>
    ClearNewReq = 3504,
  }

  public enum ErrorKnowledge {
    None = 0,
    /// <summary>
    ///该小知识已激活
    /// </summary>
    Activated = 3501,
    /// <summary>
    ///请求小知识类型错误，表中未找到该类型
    /// </summary>
    HintType = 3502,
    /// <summary>
    ///奖励已领取完
    /// </summary>
    NoneAward = 3503,
    /// <summary>
    ///奖励领取条件不足
    /// </summary>
    AwardCondition = 3504,
  }

  public enum KnowledgeActiveReason {
    None = 0,
    /// <summary>
    ///激活小知识获取
    /// </summary>
    Active = 3501,
    /// <summary>
    ///领取小知识阶段奖励
    /// </summary>
    TakeAward = 3502,
  }

  #endregion

  #region Messages
  public sealed class KnowledgeComment : pb::IMessage {
    private static readonly pb::MessageParser<KnowledgeComment> _parser = new pb::MessageParser<KnowledgeComment>(() => new KnowledgeComment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KnowledgeComment> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///小知识类型，参考阶段奖励表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "activeList" field.</summary>
    public const int ActiveListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_activeList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> activeList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已解锁条目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ActiveList {
      get { return activeList_; }
    }

    /// <summary>Field number for the "awardtake" field.</summary>
    public const int AwardtakeFieldNumber = 3;
    private uint awardtake_;
    /// <summary>
    ///奖励已领取阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Awardtake {
      get { return awardtake_; }
      set {
        awardtake_ = value;
      }
    }

    /// <summary>Field number for the "showNewList" field.</summary>
    public const int ShowNewListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_showNewList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> showNewList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///需要显示新激活的小知识id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ShowNewList {
      get { return showNewList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      activeList_.WriteTo(output, _repeated_activeList_codec);
      if (Awardtake != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Awardtake);
      }
      showNewList_.WriteTo(output, _repeated_showNewList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += activeList_.CalculateSize(_repeated_activeList_codec);
      if (Awardtake != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Awardtake);
      }
      size += showNewList_.CalculateSize(_repeated_showNewList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            activeList_.AddEntriesFrom(input, _repeated_activeList_codec);
            break;
          }
          case 24: {
            Awardtake = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            showNewList_.AddEntriesFrom(input, _repeated_showNewList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdKnowledgeListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdKnowledgeListNtf> _parser = new pb::MessageParser<CmdKnowledgeListNtf>(() => new CmdKnowledgeListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdKnowledgeListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "Knowledgelist" field.</summary>
    public const int KnowledgelistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.KnowledgeComment> _repeated_knowledgelist_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.KnowledgeComment.Parser);
    private readonly pbc::RepeatedField<global::Packet.KnowledgeComment> knowledgelist_ = new pbc::RepeatedField<global::Packet.KnowledgeComment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.KnowledgeComment> Knowledgelist {
      get { return knowledgelist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      knowledgelist_.WriteTo(output, _repeated_knowledgelist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += knowledgelist_.CalculateSize(_repeated_knowledgelist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            knowledgelist_.AddEntriesFrom(input, _repeated_knowledgelist_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdKnowledgeOneActiveNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdKnowledgeOneActiveNtf> _parser = new pb::MessageParser<CmdKnowledgeOneActiveNtf>(() => new CmdKnowledgeOneActiveNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdKnowledgeOneActiveNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///小知识类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///已解锁条目Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdKnowledgeTakeAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdKnowledgeTakeAwardReq> _parser = new pb::MessageParser<CmdKnowledgeTakeAwardReq>(() => new CmdKnowledgeTakeAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdKnowledgeTakeAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///要领取奖励的小知识类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdKnowledgeTakeAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdKnowledgeTakeAwardRes> _parser = new pb::MessageParser<CmdKnowledgeTakeAwardRes>(() => new CmdKnowledgeTakeAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdKnowledgeTakeAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///要领取奖励的小知识类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "awardtake" field.</summary>
    public const int AwardtakeFieldNumber = 2;
    private uint awardtake_;
    /// <summary>
    ///奖励已领取阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Awardtake {
      get { return awardtake_; }
      set {
        awardtake_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Awardtake != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Awardtake);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Awardtake != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Awardtake);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Awardtake = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 点击取消小知识的新激活icon
  /// </summary>
  public sealed class CmdKnowledgeClearNewReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdKnowledgeClearNewReq> _parser = new pb::MessageParser<CmdKnowledgeClearNewReq>(() => new CmdKnowledgeClearNewReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdKnowledgeClearNewReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///小知识类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///小知识Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
