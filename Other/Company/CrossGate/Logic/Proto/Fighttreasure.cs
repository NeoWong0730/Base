// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fighttreasure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///8000 +
  /// </summary>
  public enum CmdFightTreasure {
    None = 0,
    /// <summary>
    ///请求数据
    /// </summary>
    DataReq = 8000,
    /// <summary>
    ///请求数据返回
    /// </summary>
    DataRes = 8001,
    /// <summary>
    ///活动报名
    /// </summary>
    ApplyActivityReq = 8002,
    /// <summary>
    ///活动报名
    /// </summary>
    ApplyActivityRes = 8003,
    /// <summary>
    ///活动报名总人数
    /// </summary>
    ApplyTotalNumNtf = 8010,
    /// <summary>
    ///夺宝活动信息通知(进入游戏时发送)
    /// </summary>
    DataNtf = 8011,
  }

  public enum ErrorFightTreasure {
    None = 0,
    /// <summary>
    ///活动表数据配置错误
    /// </summary>
    Csv = 8000,
    /// <summary>
    ///活动已紧急关闭
    /// </summary>
    ActivityClosed = 8001,
    /// <summary>
    ///本轮活动已过期
    /// </summary>
    RoundExpire = 8002,
    /// <summary>
    ///本轮活动已报名
    /// </summary>
    RoundApplied = 8003,
    /// <summary>
    ///玩家不在线
    /// </summary>
    RoleNotOnline = 8004,
    /// <summary>
    ///报名扣钱失败
    /// </summary>
    ApplyCostCoin = 8005,
    /// <summary>
    ///功能未开启
    /// </summary>
    Function = 8006,
  }

  public enum FightTreasureActiveReason {
    None = 0,
    /// <summary>
    ///参数夺宝活动扣除
    /// </summary>
    CostCoin = 8001,
    /// <summary>
    ///未中奖返回
    /// </summary>
    ReturnCoin = 8002,
  }

  /// <summary>
  ///报名状态
  /// </summary>
  public enum FightTreasureApplyType {
    /// <summary>
    ///未报名
    /// </summary>
    No = 0,
    /// <summary>
    ///已报名
    /// </summary>
    Haved = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///玩家报名信息
  /// </summary>
  public sealed class FightTreasureApplyInfo : pb::IMessage {
    private static readonly pb::MessageParser<FightTreasureApplyInfo> _parser = new pb::MessageParser<FightTreasureApplyInfo>(() => new FightTreasureApplyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightTreasureApplyInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private uint activityType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private uint round_;
    /// <summary>
    ///活动周期内报名的轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "apply" field.</summary>
    public const int ApplyFieldNumber = 4;
    private uint apply_;
    /// <summary>
    ///是否报名 FightTreasureApplyType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Apply {
      get { return apply_; }
      set {
        apply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityType);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
      if (Round != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Round);
      }
      if (Apply != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Apply);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityType);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (Apply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Apply);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityType = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 24: {
            Round = input.ReadUInt32();
            break;
          }
          case 32: {
            Apply = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单轮活动信息
  /// </summary>
  public sealed class FightTreasureActivityRound : pb::IMessage {
    private static readonly pb::MessageParser<FightTreasureActivityRound> _parser = new pb::MessageParser<FightTreasureActivityRound>(() => new FightTreasureActivityRound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightTreasureActivityRound> Parser { get { return _parser; } }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private uint round_;
    /// <summary>
    ///活动轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "applyNum" field.</summary>
    public const int ApplyNumFieldNumber = 2;
    private uint applyNum_;
    /// <summary>
    ///报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyNum {
      get { return applyNum_; }
      set {
        applyNum_ = value;
      }
    }

    /// <summary>Field number for the "roleNames" field.</summary>
    public const int RoleNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_roleNames_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> roleNames_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///幸运儿名单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RoleNames {
      get { return roleNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Round);
      }
      if (ApplyNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplyNum);
      }
      roleNames_.WriteTo(output, _repeated_roleNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (ApplyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyNum);
      }
      size += roleNames_.CalculateSize(_repeated_roleNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Round = input.ReadUInt32();
            break;
          }
          case 16: {
            ApplyNum = input.ReadUInt32();
            break;
          }
          case 26: {
            roleNames_.AddEntriesFrom(input, _repeated_roleNames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///夺宝活动所有信息(一个活动周期)
  /// </summary>
  public sealed class FightTreasureActivity : pb::IMessage {
    private static readonly pb::MessageParser<FightTreasureActivity> _parser = new pb::MessageParser<FightTreasureActivity>(() => new FightTreasureActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightTreasureActivity> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "activityRounds" field.</summary>
    public const int ActivityRoundsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.FightTreasureActivityRound> _repeated_activityRounds_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.FightTreasureActivityRound.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightTreasureActivityRound> activityRounds_ = new pbc::RepeatedField<global::Packet.FightTreasureActivityRound>();
    /// <summary>
    ///多轮活动数据(已存在的报名轮次信息)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightTreasureActivityRound> ActivityRounds {
      get { return activityRounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      activityRounds_.WriteTo(output, _repeated_activityRounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += activityRounds_.CalculateSize(_repeated_activityRounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 18: {
            activityRounds_.AddEntriesFrom(input, _repeated_activityRounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_DataReq   = 8000; //请求数据
  /// </summary>
  public sealed class CmdFightTreasureDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureDataReq> _parser = new pb::MessageParser<CmdFightTreasureDataReq>(() => new CmdFightTreasureDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "beforeRounds" field.</summary>
    public const int BeforeRoundsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_beforeRounds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> beforeRounds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///当前轮次的前几轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BeforeRounds {
      get { return beforeRounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      beforeRounds_.WriteTo(output, _repeated_beforeRounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += beforeRounds_.CalculateSize(_repeated_beforeRounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            beforeRounds_.AddEntriesFrom(input, _repeated_beforeRounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_DataRes   = 8001; //请求数据
  /// </summary>
  public sealed class CmdFightTreasureDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureDataRes> _parser = new pb::MessageParser<CmdFightTreasureDataRes>(() => new CmdFightTreasureDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "activityRound" field.</summary>
    public const int ActivityRoundFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.FightTreasureActivityRound> _repeated_activityRound_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.FightTreasureActivityRound.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightTreasureActivityRound> activityRound_ = new pbc::RepeatedField<global::Packet.FightTreasureActivityRound>();
    /// <summary>
    ///前一轮和当前轮次活动信息 第一个是前一轮 第二个是当前轮
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightTreasureActivityRound> ActivityRound {
      get { return activityRound_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      activityRound_.WriteTo(output, _repeated_activityRound_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      size += activityRound_.CalculateSize(_repeated_activityRound_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 18: {
            activityRound_.AddEntriesFrom(input, _repeated_activityRound_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_ApplyActivityReq   = 8002; //活动报名
  /// </summary>
  public sealed class CmdFightTreasureApplyActivityReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureApplyActivityReq> _parser = new pb::MessageParser<CmdFightTreasureApplyActivityReq>(() => new CmdFightTreasureApplyActivityReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureApplyActivityReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private uint round_;
    /// <summary>
    ///活动周期内报名的轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Round);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Round = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_ApplyActivityRes   = 8003; //活动报名
  /// </summary>
  public sealed class CmdFightTreasureApplyActivityRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureApplyActivityRes> _parser = new pb::MessageParser<CmdFightTreasureApplyActivityRes>(() => new CmdFightTreasureApplyActivityRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureApplyActivityRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private uint round_;
    /// <summary>
    ///活动周期内报名的轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "applyNum" field.</summary>
    public const int ApplyNumFieldNumber = 3;
    private uint applyNum_;
    /// <summary>
    ///本轮次报名人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyNum {
      get { return applyNum_; }
      set {
        applyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Round);
      }
      if (ApplyNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ApplyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (ApplyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            Round = input.ReadUInt32();
            break;
          }
          case 24: {
            ApplyNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_ApplyTotalNumNtf   = 8010; //活动报名总人数
  /// </summary>
  public sealed class CmdFightTreasureApplyTotalNumNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureApplyTotalNumNtf> _parser = new pb::MessageParser<CmdFightTreasureApplyTotalNumNtf>(() => new CmdFightTreasureApplyTotalNumNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureApplyTotalNumNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private uint activityId_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "applyNum" field.</summary>
    public const int ApplyNumFieldNumber = 2;
    private uint applyNum_;
    /// <summary>
    ///报名总人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyNum {
      get { return applyNum_; }
      set {
        applyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActivityId);
      }
      if (ApplyNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ApplyNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (ApplyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 16: {
            ApplyNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdFightTreasure_DataNtf   = 8011; //夺宝活动信息通知(进入游戏时发送)
  /// </summary>
  public sealed class CmdFightTreasureDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdFightTreasureDataNtf> _parser = new pb::MessageParser<CmdFightTreasureDataNtf>(() => new CmdFightTreasureDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdFightTreasureDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "lastLoginTime" field.</summary>
    public const int LastLoginTimeFieldNumber = 1;
    private uint lastLoginTime_;
    /// <summary>
    ///上一次登录时间 用于红点提示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = value;
      }
    }

    /// <summary>Field number for the "selfApplyInfo" field.</summary>
    public const int SelfApplyInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.FightTreasureApplyInfo> _repeated_selfApplyInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.FightTreasureApplyInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightTreasureApplyInfo> selfApplyInfo_ = new pbc::RepeatedField<global::Packet.FightTreasureApplyInfo>();
    /// <summary>
    ///玩家报名信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightTreasureApplyInfo> SelfApplyInfo {
      get { return selfApplyInfo_; }
    }

    /// <summary>Field number for the "activities" field.</summary>
    public const int ActivitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.FightTreasureActivity> _repeated_activities_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.FightTreasureActivity.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightTreasureActivity> activities_ = new pbc::RepeatedField<global::Packet.FightTreasureActivity>();
    /// <summary>
    ///夺宝活动信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightTreasureActivity> Activities {
      get { return activities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastLoginTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastLoginTime);
      }
      selfApplyInfo_.WriteTo(output, _repeated_selfApplyInfo_codec);
      activities_.WriteTo(output, _repeated_activities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastLoginTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastLoginTime);
      }
      size += selfApplyInfo_.CalculateSize(_repeated_selfApplyInfo_codec);
      size += activities_.CalculateSize(_repeated_activities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastLoginTime = input.ReadUInt32();
            break;
          }
          case 18: {
            selfApplyInfo_.AddEntriesFrom(input, _repeated_selfApplyInfo_codec);
            break;
          }
          case 26: {
            activities_.AddEntriesFrom(input, _repeated_activities_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
