// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildboss.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdGuildBoss {
    None = 0,
    /// <summary>
    ///主界面上的简略信息 幸运宠物、幸运伙伴那个界面 
    /// </summary>
    SimpleInfoReq = 6612,
    /// <summary>
    ///这个是上条协议的返回 不会主动下发了
    /// </summary>
    SimpleInfoNtf = 6600,
    /// <summary>
    ///玩家点参加 请求
    /// </summary>
    InfoReq = 6601,
    /// <summary>
    ///上条协议返回
    /// </summary>
    InfoRes = 6602,
    /// <summary>
    ///公共频道定时请求 只有界面打开状态才定时请求 可以暂定3秒请求一次
    /// </summary>
    WorldAttackInfoReq = 6603,
    WorldAttackInfoRes = 6604,
    /// <summary>
    ///界面打开状态下 定时请求 暂定10秒请求一次
    /// </summary>
    RankInfoReq = 6605,
    RankInfoRes = 6606,
    /// <summary>
    ///我自己被别人打败的时候主动更新给客户端 此消息更新自己积分 战盟积分等 客户端主动更新自己动态信息
    /// </summary>
    SelfAttackInfoNtf = 6607,
    /// <summary>
    ///玩家打开挑战列表
    /// </summary>
    GetRoleListReq = 6608,
    /// <summary>
    ///玩家可挑战列表
    /// </summary>
    GetRoleListRes = 6609,
    /// <summary>
    ///挑战请求 包括挑战boss 和 人
    /// </summary>
    AttackReq = 6610,
    /// <summary>
    ///挑战成功结束发这条协议告诉客户端挑战结果 积分变化等 客户端主动更新自己动态信息 这条协议会当作结算面板发放
    /// </summary>
    AttackEndNtf = 6611,
    /// <summary>
    ///挑战cd  加个挑战返回的协议吧 更新挑战cd
    /// </summary>
    AttackRes = 6613,
    /// <summary>
    ///传送服务器来做吧，方便以后做负载
    /// </summary>
    AttendReq = 6680,
    EndNtf = 6614,
  }

  public enum ErrorGuildBoss {
    None = 0,
    /// <summary>
    ///玩家攻击cd
    /// </summary>
    SelfAttackCd = 6600,
    /// <summary>
    ///目标被挑战cd
    /// </summary>
    TargetBeAttackCd = 6601,
    /// <summary>
    ///挑战目标没找到 异常情
    /// </summary>
    TargetNotFound = 6602,
    NotOpenTime = 6603,
    InfoNotFound = 6604,
    /// <summary>
    ///系统的错误了 内存不够了
    /// </summary>
    AllocFailed = 6617,
    /// <summary>
    ///按理说不会出现，在点攻击的一刻切了进程，scenesvr没找到玩家
    /// </summary>
    RoleNone = 6618,
    /// <summary>
    ///不应该啊没找到玩家的镜像数据，这个可以后期优化成策划给配个机器人打
    /// </summary>
    DefRoleFightDataNone = 6619,
    /// <summary>
    ///redis可能连不上了
    /// </summary>
    RedisNone = 6620,
    /// <summary>
    ///redis没有取到玩家
    /// </summary>
    RedisGetRoleNone = 6621,
    /// <summary>
    ///组队不能进入
    /// </summary>
    InTeam = 6622,
    /// <summary>
    ///玩家不在地图 异常
    /// </summary>
    NotInMap = 6623,
    /// <summary>
    ///战斗类型没找到
    /// </summary>
    BattleTypeNotFound = 6624,
    /// <summary>
    ///玩家快照反序列化失败
    /// </summary>
    RoleSnapParse = 6625,
    /// <summary>
    ///不知道原因就是战斗系统返回的battleid==0
    /// </summary>
    IntoBattle = 6626,
    /// <summary>
    ///同一个家族不能互相抢夺
    /// </summary>
    SameGuild = 6627,
  }

  public enum GuildBossState {
    /// <summary>
    ///没开启阶段
    /// </summary>
    UnOpen0 = 0,
    /// <summary>
    ///开启阶段
    /// </summary>
    Open1 = 1,
    /// <summary>
    ///结算阶段
    /// </summary>
    Result2 = 2,
  }

  #endregion

  #region Messages
  public sealed class CmdRankRole : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankRole> _parser = new pb::MessageParser<CmdRankRole>(() => new CmdRankRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "occ" field.</summary>
    public const int OccFieldNumber = 1;
    private uint occ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Occ {
      get { return occ_; }
      set {
        occ_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 5;
    private uint rank_;
    /// <summary>
    ///1,2,3,4,5,6 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 7;
    private uint power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 8;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "protectEnd" field.</summary>
    public const int ProtectEndFieldNumber = 9;
    private uint protectEnd_;
    /// <summary>
    ///cd保护时间 排行榜不要就不发这个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProtectEnd {
      get { return protectEnd_; }
      set {
        protectEnd_ = value;
      }
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 10;
    private uint hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    /// <summary>Field number for the "headframe" field.</summary>
    public const int HeadframeFieldNumber = 11;
    private uint headframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Headframe {
      get { return headframe_; }
      set {
        headframe_ = value;
      }
    }

    /// <summary>Field number for the "headPhoto" field.</summary>
    public const int HeadPhotoFieldNumber = 12;
    private uint headPhoto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadPhoto {
      get { return headPhoto_; }
      set {
        headPhoto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Occ != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Occ);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleName);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (Power != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Power);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(RoleId);
      }
      if (ProtectEnd != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ProtectEnd);
      }
      if (Hero != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Hero);
      }
      if (Headframe != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Headframe);
      }
      if (HeadPhoto != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HeadPhoto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Occ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Occ);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ProtectEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtectEnd);
      }
      if (Hero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hero);
      }
      if (Headframe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Headframe);
      }
      if (HeadPhoto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadPhoto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Occ = input.ReadUInt32();
            break;
          }
          case 18: {
            RoleName = input.ReadBytes();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
          case 40: {
            Rank = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            Power = input.ReadUInt32();
            break;
          }
          case 64: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 72: {
            ProtectEnd = input.ReadUInt32();
            break;
          }
          case 80: {
            Hero = input.ReadUInt32();
            break;
          }
          case 88: {
            Headframe = input.ReadUInt32();
            break;
          }
          case 96: {
            HeadPhoto = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossSimpleInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossSimpleInfoReq> _parser = new pb::MessageParser<CmdGuildBossSimpleInfoReq>(() => new CmdGuildBossSimpleInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossSimpleInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdRankGuild : pb::IMessage {
    private static readonly pb::MessageParser<CmdRankGuild> _parser = new pb::MessageParser<CmdRankGuild>(() => new CmdRankGuild());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdRankGuild> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 2;
    private pb::ByteString leaderName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attendNum" field.</summary>
    public const int AttendNumFieldNumber = 3;
    private uint attendNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttendNum {
      get { return attendNum_; }
      set {
        attendNum_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GuildName);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(LeaderName);
      }
      if (AttendNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttendNum);
      }
      if (Score != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeaderName);
      }
      if (AttendNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttendNum);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GuildName = input.ReadBytes();
            break;
          }
          case 18: {
            LeaderName = input.ReadBytes();
            break;
          }
          case 24: {
            AttendNum = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AttackInfo : pb::IMessage {
    private static readonly pb::MessageParser<AttackInfo> _parser = new pb::MessageParser<AttackInfo>(() => new AttackInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "attackerName" field.</summary>
    public const int AttackerNameFieldNumber = 1;
    private pb::ByteString attackerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defenderName" field.</summary>
    public const int DefenderNameFieldNumber = 2;
    private pb::ByteString defenderName_ = pb::ByteString.Empty;
    /// <summary>
    ///对于个人挑战来说 该字段空代表挑战boss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DefenderName {
      get { return defenderName_; }
      set {
        defenderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AttackerName);
      }
      if (DefenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(DefenderName);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AttackerName);
      }
      if (DefenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DefenderName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AttackerName = input.ReadBytes();
            break;
          }
          case 18: {
            DefenderName = input.ReadBytes();
            break;
          }
          case 24: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossSimpleInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossSimpleInfoNtf> _parser = new pb::MessageParser<CmdGuildBossSimpleInfoNtf>(() => new CmdGuildBossSimpleInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossSimpleInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "luckypartener" field.</summary>
    public const int LuckypartenerFieldNumber = 1;
    private uint luckypartener_;
    /// <summary>
    ///幸运伙伴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Luckypartener {
      get { return luckypartener_; }
      set {
        luckypartener_ = value;
      }
    }

    /// <summary>Field number for the "luckypet" field.</summary>
    public const int LuckypetFieldNumber = 2;
    private uint luckypet_;
    /// <summary>
    ///幸运宠物种族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Luckypet {
      get { return luckypet_; }
      set {
        luckypet_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "nextTime" field.</summary>
    public const int NextTimeFieldNumber = 4;
    private uint nextTime_;
    /// <summary>
    ///下个时间 客户端也可以算出来，服务器下发吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextTime {
      get { return nextTime_; }
      set {
        nextTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Luckypartener != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Luckypartener);
      }
      if (Luckypet != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Luckypet);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (NextTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NextTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Luckypartener != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Luckypartener);
      }
      if (Luckypet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Luckypet);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (NextTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Luckypartener = input.ReadUInt32();
            break;
          }
          case 16: {
            Luckypet = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
          case 32: {
            NextTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossInfoReq> _parser = new pb::MessageParser<CmdGuildBossInfoReq>(() => new CmdGuildBossInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBossInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossInfoRes> _parser = new pb::MessageParser<CmdGuildBossInfoRes>(() => new CmdGuildBossInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankRoles" field.</summary>
    public const int RankRolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdRankRole> _repeated_rankRoles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdRankRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdRankRole> rankRoles_ = new pbc::RepeatedField<global::Packet.CmdRankRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdRankRole> RankRoles {
      get { return rankRoles_; }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 3;
    private uint myRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "myScore" field.</summary>
    public const int MyScoreFieldNumber = 4;
    private uint myScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyScore {
      get { return myScore_; }
      set {
        myScore_ = value;
      }
    }

    /// <summary>Field number for the "myGuildRank" field.</summary>
    public const int MyGuildRankFieldNumber = 5;
    private uint myGuildRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyGuildRank {
      get { return myGuildRank_; }
      set {
        myGuildRank_ = value;
      }
    }

    /// <summary>Field number for the "myGuildScore" field.</summary>
    public const int MyGuildScoreFieldNumber = 6;
    private uint myGuildScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyGuildScore {
      get { return myGuildScore_; }
      set {
        myGuildScore_ = value;
      }
    }

    /// <summary>Field number for the "myGuildAttendNum" field.</summary>
    public const int MyGuildAttendNumFieldNumber = 7;
    private uint myGuildAttendNum_;
    /// <summary>
    ///我的工会参与人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MyGuildAttendNum {
      get { return myGuildAttendNum_; }
      set {
        myGuildAttendNum_ = value;
      }
    }

    /// <summary>Field number for the "worldChannel" field.</summary>
    public const int WorldChannelFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.AttackInfo> _repeated_worldChannel_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.AttackInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttackInfo> worldChannel_ = new pbc::RepeatedField<global::Packet.AttackInfo>();
    /// <summary>
    ///公共挑战信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttackInfo> WorldChannel {
      get { return worldChannel_; }
    }

    /// <summary>Field number for the "bossCreateTime" field.</summary>
    public const int BossCreateTimeFieldNumber = 10;
    private uint bossCreateTime_;
    /// <summary>
    ///个人挑战信息  这个看起来没有
    ///repeated AttackInfo selfChannel = 9;
    ///boss创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BossCreateTime {
      get { return bossCreateTime_; }
      set {
        bossCreateTime_ = value;
      }
    }

    /// <summary>Field number for the "attackBossCdEnd" field.</summary>
    public const int AttackBossCdEndFieldNumber = 11;
    private uint attackBossCdEnd_;
    /// <summary>
    ///打boss cd 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackBossCdEnd {
      get { return attackBossCdEnd_; }
      set {
        attackBossCdEnd_ = value;
      }
    }

    /// <summary>Field number for the "attackRoleCdEnd" field.</summary>
    public const int AttackRoleCdEndFieldNumber = 12;
    private uint attackRoleCdEnd_;
    /// <summary>
    ///抢夺积分cd 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackRoleCdEnd {
      get { return attackRoleCdEnd_; }
      set {
        attackRoleCdEnd_ = value;
      }
    }

    /// <summary>Field number for the "mythird" field.</summary>
    public const int MythirdFieldNumber = 13;
    private uint mythird_;
    /// <summary>
    ///我得分组 由于分组是打的那一刻确定得 客户端不要算了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mythird {
      get { return mythird_; }
      set {
        mythird_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankRoles_.WriteTo(output, _repeated_rankRoles_codec);
      if (MyRank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MyRank);
      }
      if (MyScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MyScore);
      }
      if (MyGuildRank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MyGuildRank);
      }
      if (MyGuildScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MyGuildScore);
      }
      if (MyGuildAttendNum != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MyGuildAttendNum);
      }
      worldChannel_.WriteTo(output, _repeated_worldChannel_codec);
      if (BossCreateTime != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(BossCreateTime);
      }
      if (AttackBossCdEnd != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(AttackBossCdEnd);
      }
      if (AttackRoleCdEnd != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AttackRoleCdEnd);
      }
      if (Mythird != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Mythird);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankRoles_.CalculateSize(_repeated_rankRoles_codec);
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyRank);
      }
      if (MyScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyScore);
      }
      if (MyGuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyGuildRank);
      }
      if (MyGuildScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyGuildScore);
      }
      if (MyGuildAttendNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyGuildAttendNum);
      }
      size += worldChannel_.CalculateSize(_repeated_worldChannel_codec);
      if (BossCreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossCreateTime);
      }
      if (AttackBossCdEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackBossCdEnd);
      }
      if (AttackRoleCdEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackRoleCdEnd);
      }
      if (Mythird != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mythird);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rankRoles_.AddEntriesFrom(input, _repeated_rankRoles_codec);
            break;
          }
          case 24: {
            MyRank = input.ReadUInt32();
            break;
          }
          case 32: {
            MyScore = input.ReadUInt32();
            break;
          }
          case 40: {
            MyGuildRank = input.ReadUInt32();
            break;
          }
          case 48: {
            MyGuildScore = input.ReadUInt32();
            break;
          }
          case 56: {
            MyGuildAttendNum = input.ReadUInt32();
            break;
          }
          case 66: {
            worldChannel_.AddEntriesFrom(input, _repeated_worldChannel_codec);
            break;
          }
          case 80: {
            BossCreateTime = input.ReadUInt32();
            break;
          }
          case 88: {
            AttackBossCdEnd = input.ReadUInt32();
            break;
          }
          case 96: {
            AttackRoleCdEnd = input.ReadUInt32();
            break;
          }
          case 104: {
            Mythird = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossWorldAttackInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossWorldAttackInfoReq> _parser = new pb::MessageParser<CmdGuildBossWorldAttackInfoReq>(() => new CmdGuildBossWorldAttackInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossWorldAttackInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBossWorldAttackInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossWorldAttackInfoRes> _parser = new pb::MessageParser<CmdGuildBossWorldAttackInfoRes>(() => new CmdGuildBossWorldAttackInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossWorldAttackInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.AttackInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.AttackInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttackInfo> infos_ = new pbc::RepeatedField<global::Packet.AttackInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttackInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossRankInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossRankInfoReq> _parser = new pb::MessageParser<CmdGuildBossRankInfoReq>(() => new CmdGuildBossRankInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossRankInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1 个人排行 2帮会排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossRankInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossRankInfoRes> _parser = new pb::MessageParser<CmdGuildBossRankInfoRes>(() => new CmdGuildBossRankInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossRankInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///1 个人排行 2帮会排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "rankRoles" field.</summary>
    public const int RankRolesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdRankRole> _repeated_rankRoles_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdRankRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdRankRole> rankRoles_ = new pbc::RepeatedField<global::Packet.CmdRankRole>();
    /// <summary>
    ///个人排行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdRankRole> RankRoles {
      get { return rankRoles_; }
    }

    /// <summary>Field number for the "rankGuilds" field.</summary>
    public const int RankGuildsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.CmdRankGuild> _repeated_rankGuilds_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.CmdRankGuild.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdRankGuild> rankGuilds_ = new pbc::RepeatedField<global::Packet.CmdRankGuild>();
    /// <summary>
    ///帮会排行 按顺序发的1、2、3、4、5、6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdRankGuild> RankGuilds {
      get { return rankGuilds_; }
    }

    /// <summary>Field number for the "guildScore" field.</summary>
    public const int GuildScoreFieldNumber = 4;
    private uint guildScore_;
    /// <summary>
    ///当自己有帮会时 更新自己帮会的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildScore {
      get { return guildScore_; }
      set {
        guildScore_ = value;
      }
    }

    /// <summary>Field number for the "guildRank" field.</summary>
    public const int GuildRankFieldNumber = 5;
    private uint guildRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildRank {
      get { return guildRank_; }
      set {
        guildRank_ = value;
      }
    }

    /// <summary>Field number for the "attendNum" field.</summary>
    public const int AttendNumFieldNumber = 6;
    private uint attendNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttendNum {
      get { return attendNum_; }
      set {
        attendNum_ = value;
      }
    }

    /// <summary>Field number for the "myrank" field.</summary>
    public const int MyrankFieldNumber = 7;
    private uint myrank_;
    /// <summary>
    ///我自己的排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Myrank {
      get { return myrank_; }
      set {
        myrank_ = value;
      }
    }

    /// <summary>Field number for the "myscore" field.</summary>
    public const int MyscoreFieldNumber = 8;
    private uint myscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Myscore {
      get { return myscore_; }
      set {
        myscore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      rankRoles_.WriteTo(output, _repeated_rankRoles_codec);
      rankGuilds_.WriteTo(output, _repeated_rankGuilds_codec);
      if (GuildScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildScore);
      }
      if (GuildRank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildRank);
      }
      if (AttendNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AttendNum);
      }
      if (Myrank != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Myrank);
      }
      if (Myscore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Myscore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += rankRoles_.CalculateSize(_repeated_rankRoles_codec);
      size += rankGuilds_.CalculateSize(_repeated_rankGuilds_codec);
      if (GuildScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildScore);
      }
      if (GuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildRank);
      }
      if (AttendNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttendNum);
      }
      if (Myrank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Myrank);
      }
      if (Myscore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Myscore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            rankRoles_.AddEntriesFrom(input, _repeated_rankRoles_codec);
            break;
          }
          case 26: {
            rankGuilds_.AddEntriesFrom(input, _repeated_rankGuilds_codec);
            break;
          }
          case 32: {
            GuildScore = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildRank = input.ReadUInt32();
            break;
          }
          case 48: {
            AttendNum = input.ReadUInt32();
            break;
          }
          case 56: {
            Myrank = input.ReadUInt32();
            break;
          }
          case 64: {
            Myscore = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossSelfAttackInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossSelfAttackInfoNtf> _parser = new pb::MessageParser<CmdGuildBossSelfAttackInfoNtf>(() => new CmdGuildBossSelfAttackInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossSelfAttackInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "attackerName" field.</summary>
    public const int AttackerNameFieldNumber = 1;
    private pb::ByteString attackerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///被打完之后我的积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///被打完之后我的排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "guildScore" field.</summary>
    public const int GuildScoreFieldNumber = 4;
    private uint guildScore_;
    /// <summary>
    ///被打完之后 战盟积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildScore {
      get { return guildScore_; }
      set {
        guildScore_ = value;
      }
    }

    /// <summary>Field number for the "guildRank" field.</summary>
    public const int GuildRankFieldNumber = 5;
    private uint guildRank_;
    /// <summary>
    ///被打完之后战盟排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildRank {
      get { return guildRank_; }
      set {
        guildRank_ = value;
      }
    }

    /// <summary>Field number for the "lostScore" field.</summary>
    public const int LostScoreFieldNumber = 6;
    private uint lostScore_;
    /// <summary>
    ///这次被打我失去得积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LostScore {
      get { return lostScore_; }
      set {
        lostScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AttackerName);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (GuildScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildScore);
      }
      if (GuildRank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildRank);
      }
      if (LostScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LostScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AttackerName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (GuildScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildScore);
      }
      if (GuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildRank);
      }
      if (LostScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LostScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AttackerName = input.ReadBytes();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildScore = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildRank = input.ReadUInt32();
            break;
          }
          case 48: {
            LostScore = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossGetRoleListReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossGetRoleListReq> _parser = new pb::MessageParser<CmdGuildBossGetRoleListReq>(() => new CmdGuildBossGetRoleListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossGetRoleListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdGuildBossGetRoleListRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossGetRoleListRes> _parser = new pb::MessageParser<CmdGuildBossGetRoleListRes>(() => new CmdGuildBossGetRoleListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossGetRoleListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdRankRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdRankRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdRankRole> roles_ = new pbc::RepeatedField<global::Packet.CmdRankRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdRankRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossAttackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossAttackReq> _parser = new pb::MessageParser<CmdGuildBossAttackReq>(() => new CmdGuildBossAttackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossAttackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///0代表打boss 非0就是要挑战得玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossAttackRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossAttackRes> _parser = new pb::MessageParser<CmdGuildBossAttackRes>(() => new CmdGuildBossAttackRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossAttackRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///0代表打boss 非0就是要挑战得玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "attackCd" field.</summary>
    public const int AttackCdFieldNumber = 2;
    private uint attackCd_;
    /// <summary>
    ///根据上边的字段客户端设置 attackrolecd 还是attackbosscd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackCd {
      get { return attackCd_; }
      set {
        attackCd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (AttackCd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AttackCd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (AttackCd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackCd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            AttackCd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossAttackEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossAttackEndNtf> _parser = new pb::MessageParser<CmdGuildBossAttackEndNtf>(() => new CmdGuildBossAttackEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossAttackEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "attackerName" field.</summary>
    public const int AttackerNameFieldNumber = 1;
    private pb::ByteString attackerName_ = pb::ByteString.Empty;
    /// <summary>
    ///被攻击的人的名字 如果是boss 此字段空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AttackerName {
      get { return attackerName_; }
      set {
        attackerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///打完之后我的积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///打完之后我的排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "guildScore" field.</summary>
    public const int GuildScoreFieldNumber = 4;
    private uint guildScore_;
    /// <summary>
    ///打完之后 战盟积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildScore {
      get { return guildScore_; }
      set {
        guildScore_ = value;
      }
    }

    /// <summary>Field number for the "guildRank" field.</summary>
    public const int GuildRankFieldNumber = 5;
    private uint guildRank_;
    /// <summary>
    ///打完之后战盟排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildRank {
      get { return guildRank_; }
      set {
        guildRank_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 7;
    private uint ret_;
    /// <summary>
    ///成功或者失败 打boss没有失败 0:打boss 打人有成功失败 1:成功 2:失败   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "addScore" field.</summary>
    public const int AddScoreFieldNumber = 8;
    private uint addScore_;
    /// <summary>
    ///本次获得积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddScore {
      get { return addScore_; }
      set {
        addScore_ = value;
      }
    }

    /// <summary>Field number for the "dmg" field.</summary>
    public const int DmgFieldNumber = 9;
    private uint dmg_;
    /// <summary>
    ///对boss造成伤害 没办法在战斗协议发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dmg {
      get { return dmg_; }
      set {
        dmg_ = value;
      }
    }

    /// <summary>Field number for the "targetroleid" field.</summary>
    public const int TargetroleidFieldNumber = 10;
    private ulong targetroleid_;
    /// <summary>
    ///0 打的boss 非0 就是被打的玩家id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetroleid {
      get { return targetroleid_; }
      set {
        targetroleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AttackerName);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (GuildScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildScore);
      }
      if (GuildRank != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(GuildRank);
      }
      if (Ret != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Ret);
      }
      if (AddScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(AddScore);
      }
      if (Dmg != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Dmg);
      }
      if (Targetroleid != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Targetroleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AttackerName);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (GuildScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildScore);
      }
      if (GuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildRank);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (AddScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddScore);
      }
      if (Dmg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dmg);
      }
      if (Targetroleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetroleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AttackerName = input.ReadBytes();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildScore = input.ReadUInt32();
            break;
          }
          case 40: {
            GuildRank = input.ReadUInt32();
            break;
          }
          case 56: {
            Ret = input.ReadUInt32();
            break;
          }
          case 64: {
            AddScore = input.ReadUInt32();
            break;
          }
          case 72: {
            Dmg = input.ReadUInt32();
            break;
          }
          case 80: {
            Targetroleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossAwardItem : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossAwardItem> _parser = new pb::MessageParser<CmdGuildBossAwardItem>(() => new CmdGuildBossAwardItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossAwardItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private uint itemNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端弹框用 把参数发给客户端
  /// </summary>
  public sealed class CmdGuildBossEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossEndNtf> _parser = new pb::MessageParser<CmdGuildBossEndNtf>(() => new CmdGuildBossEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "delayTime" field.</summary>
    public const int DelayTimeFieldNumber = 1;
    private uint delayTime_;
    /// <summary>
    /// delay时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DelayTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DelayTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DelayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DelayTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DelayTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossLastTimeRewardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossLastTimeRewardNtf> _parser = new pb::MessageParser<CmdGuildBossLastTimeRewardNtf>(() => new CmdGuildBossLastTimeRewardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossLastTimeRewardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "guildRank" field.</summary>
    public const int GuildRankFieldNumber = 3;
    private uint guildRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildRank {
      get { return guildRank_; }
      set {
        guildRank_ = value;
      }
    }

    /// <summary>Field number for the "guildScore" field.</summary>
    public const int GuildScoreFieldNumber = 4;
    private uint guildScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildScore {
      get { return guildScore_; }
      set {
        guildScore_ = value;
      }
    }

    /// <summary>Field number for the "myAward" field.</summary>
    public const int MyAwardFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.CmdGuildBossAwardItem> _repeated_myAward_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.CmdGuildBossAwardItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGuildBossAwardItem> myAward_ = new pbc::RepeatedField<global::Packet.CmdGuildBossAwardItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGuildBossAwardItem> MyAward {
      get { return myAward_; }
    }

    /// <summary>Field number for the "guildAward" field.</summary>
    public const int GuildAwardFieldNumber = 6;
    private global::Packet.CmdGuildBossAwardItem guildAward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdGuildBossAwardItem GuildAward {
      get { return guildAward_; }
      set {
        guildAward_ = value;
      }
    }

    /// <summary>Field number for the "guildCountribution" field.</summary>
    public const int GuildCountributionFieldNumber = 7;
    private uint guildCountribution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GuildCountribution {
      get { return guildCountribution_; }
      set {
        guildCountribution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (GuildRank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GuildRank);
      }
      if (GuildScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GuildScore);
      }
      myAward_.WriteTo(output, _repeated_myAward_codec);
      if (guildAward_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GuildAward);
      }
      if (GuildCountribution != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GuildCountribution);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (GuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildRank);
      }
      if (GuildScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildScore);
      }
      size += myAward_.CalculateSize(_repeated_myAward_codec);
      if (guildAward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildAward);
      }
      if (GuildCountribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GuildCountribution);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildRank = input.ReadUInt32();
            break;
          }
          case 32: {
            GuildScore = input.ReadUInt32();
            break;
          }
          case 42: {
            myAward_.AddEntriesFrom(input, _repeated_myAward_codec);
            break;
          }
          case 50: {
            if (guildAward_ == null) {
              guildAward_ = new global::Packet.CmdGuildBossAwardItem();
            }
            input.ReadMessage(guildAward_);
            break;
          }
          case 56: {
            GuildCountribution = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGuildBossAttendReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGuildBossAttendReq> _parser = new pb::MessageParser<CmdGuildBossAttendReq>(() => new CmdGuildBossAttendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGuildBossAttendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
