// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: terrorseries.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///3900+
  /// </summary>
  public enum CmdTerrorSeries {
    None = 0,
    /// <summary>
    ///接受日常任务
    /// </summary>
    AcceptDailyTaskReq = 3901,
    /// <summary>
    ///日常任务状态更新(接取，完成任务时更新)
    /// </summary>
    DailyTaskUpdateNtf = 3902,
    /// <summary>
    ///队长放弃日常任务
    /// </summary>
    GiveUpDailyTaskReq = 3903,
    /// <summary>
    ///日常任务全部完成通知
    /// </summary>
    DailyTaskCompleteNtf = 3904,
    /// <summary>
    ///队长查询所有玩家的特殊道具信息
    /// </summary>
    QueryMemItemReq = 3905,
    QueryMemItemRes = 3906,
    /// <summary>
    ///更新每周已获取奖励次数
    /// </summary>
    UpdateInsAwardTimesNtf = 3907,
  }

  public enum ErrorTerrorSeries {
    None = 0,
    /// <summary>
    ///表格未找到
    /// </summary>
    CsvnotFound = 3901,
    /// <summary>
    ///必须从第一关开始
    /// </summary>
    OnlyStartAtFirst = 3902,
    /// <summary>
    ///必须通关日常任务
    /// </summary>
    DailyTaskNotComplete = 3903,
    /// <summary>
    ///等级不符合要求
    /// </summary>
    LvNotMatch = 3904,
    AlreadyAcceptDailyTask = 3905,
    NotAccpetDailyTask = 3906,
    /// <summary>
    ///非队长不能操作日常任务
    /// </summary>
    NotLeaderCannotOperator = 3907,
    /// <summary>
    ///有队员暂离不能接取日常任务
    /// </summary>
    MemTmpLeaveCannotAccept = 3908,
    /// <summary>
    ///队伍人数不够够不能接任务
    /// </summary>
    CannotAcceptMemNotEnough = 3909,
  }

  public enum TerrorSeriresActiveReason {
    None = 0,
    /// <summary>
    ///完成日常任务
    /// </summary>
    DailyTaskFinish = 3901,
    /// <summary>
    ///日常任务全完成奖励
    /// </summary>
    DailyTaskAllFinish = 3902,
  }

  #endregion

  #region Messages
  public sealed class CmdTerrorSeriesAcceptDailyTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesAcceptDailyTaskReq> _parser = new pb::MessageParser<CmdTerrorSeriesAcceptDailyTaskReq>(() => new CmdTerrorSeriesAcceptDailyTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesAcceptDailyTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private uint line_;
    /// <summary>
    ///范围 0-2，对应三条线路
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Line != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Line);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Line = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTerrorSeriesDailyTaskUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesDailyTaskUpdateNtf> _parser = new pb::MessageParser<CmdTerrorSeriesDailyTaskUpdateNtf>(() => new CmdTerrorSeriesDailyTaskUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesDailyTaskUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "dailyTask" field.</summary>
    public const int DailyTaskFieldNumber = 1;
    private global::Packet.TerrorDailyTask dailyTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TerrorDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    /// <summary>Field number for the "unlock" field.</summary>
    public const int UnlockFieldNumber = 2;
    private global::Packet.CmdTerrorSeriesDailyTaskUpdateNtf.Types.Unlock unlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdTerrorSeriesDailyTaskUpdateNtf.Types.Unlock Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 3;
    private uint playType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyTask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyTask);
      }
      if (unlock_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Unlock);
      }
      if (PlayType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PlayType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      if (unlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unlock);
      }
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::Packet.TerrorDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
          case 18: {
            if (unlock_ == null) {
              unlock_ = new global::Packet.CmdTerrorSeriesDailyTaskUpdateNtf.Types.Unlock();
            }
            input.ReadMessage(unlock_);
            break;
          }
          case 24: {
            PlayType = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTerrorSeriesDailyTaskUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Unlock : pb::IMessage {
        private static readonly pb::MessageParser<Unlock> _parser = new pb::MessageParser<Unlock>(() => new Unlock());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unlock> Parser { get { return _parser; } }

        /// <summary>Field number for the "instanceId" field.</summary>
        public const int InstanceIdFieldNumber = 1;
        private uint instanceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InstanceId {
          get { return instanceId_; }
          set {
            instanceId_ = value;
          }
        }

        /// <summary>Field number for the "achieveIdx" field.</summary>
        public const int AchieveIdxFieldNumber = 2;
        private uint achieveIdx_;
        /// <summary>
        ///表示完成了某关(0-4)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AchieveIdx {
          get { return achieveIdx_; }
          set {
            achieveIdx_ = value;
          }
        }

        /// <summary>Field number for the "unlock" field.</summary>
        public const int Unlock_FieldNumber = 3;
        private bool unlock_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Unlock_ {
          get { return unlock_; }
          set {
            unlock_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InstanceId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InstanceId);
          }
          if (AchieveIdx != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AchieveIdx);
          }
          if (Unlock_ != false) {
            output.WriteRawTag(24);
            output.WriteBool(Unlock_);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InstanceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
          }
          if (AchieveIdx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AchieveIdx);
          }
          if (Unlock_ != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InstanceId = input.ReadUInt32();
                break;
              }
              case 16: {
                AchieveIdx = input.ReadUInt32();
                break;
              }
              case 24: {
                Unlock_ = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTerrorSeriesGiveUpDailyTaskReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesGiveUpDailyTaskReq> _parser = new pb::MessageParser<CmdTerrorSeriesGiveUpDailyTaskReq>(() => new CmdTerrorSeriesGiveUpDailyTaskReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesGiveUpDailyTaskReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///投票界面展示的相关信息
  /// </summary>
  public sealed class TerrorSeriesMemItems : pb::IMessage {
    private static readonly pb::MessageParser<TerrorSeriesMemItems> _parser = new pb::MessageParser<TerrorSeriesMemItems>(() => new TerrorSeriesMemItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrorSeriesMemItems> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private uint instanceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TerrorSeriesMemItems.Types.Mem> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TerrorSeriesMemItems.Types.Mem.Parser);
    private readonly pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.Mem> mems_ = new pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.Mem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.Mem> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceID);
      }
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceID);
      }
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceID = input.ReadUInt32();
            break;
          }
          case 18: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TerrorSeriesMemItems message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class SpecialItem : pb::IMessage {
        private static readonly pb::MessageParser<SpecialItem> _parser = new pb::MessageParser<SpecialItem>(() => new SpecialItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpecialItem> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Mem : pb::IMessage {
        private static readonly pb::MessageParser<Mem> _parser = new pb::MessageParser<Mem>(() => new Mem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mem> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Packet.TerrorSeriesMemItems.Types.SpecialItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::Packet.TerrorSeriesMemItems.Types.SpecialItem.Parser);
        private readonly pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.SpecialItem> items_ = new pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.SpecialItem>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.TerrorSeriesMemItems.Types.SpecialItem> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///服务器使用，投票相关信息
  /// </summary>
  public sealed class TerrorSeriesVoteData : pb::IMessage {
    private static readonly pb::MessageParser<TerrorSeriesVoteData> _parser = new pb::MessageParser<TerrorSeriesVoteData>(() => new TerrorSeriesVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrorSeriesVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTerrorSeriesQueryMemItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesQueryMemItemReq> _parser = new pb::MessageParser<CmdTerrorSeriesQueryMemItemReq>(() => new CmdTerrorSeriesQueryMemItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesQueryMemItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTerrorSeriesQueryMemItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesQueryMemItemRes> _parser = new pb::MessageParser<CmdTerrorSeriesQueryMemItemRes>(() => new CmdTerrorSeriesQueryMemItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesQueryMemItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TerrorSeriesMemItems data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TerrorSeriesMemItems Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TerrorSeriesMemItems();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///恐怖旅团副本数据
  /// </summary>
  public sealed class TerrorInsData : pb::IMessage {
    private static readonly pb::MessageParser<TerrorInsData> _parser = new pb::MessageParser<TerrorInsData>(() => new TerrorInsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrorInsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "playType" field.</summary>
    public const int PlayTypeFieldNumber = 1;
    private uint playType_;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayType {
      get { return playType_; }
      set {
        playType_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.TerrorInsEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.TerrorInsEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.TerrorInsEntry> entries_ = new pbc::RepeatedField<global::Packet.TerrorInsEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TerrorInsEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "terrorDailyTask" field.</summary>
    public const int TerrorDailyTaskFieldNumber = 3;
    private global::Packet.TerrorDailyTask terrorDailyTask_;
    /// <summary>
    ///日常任务接取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TerrorDailyTask TerrorDailyTask {
      get { return terrorDailyTask_; }
      set {
        terrorDailyTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayType);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (terrorDailyTask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TerrorDailyTask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (terrorDailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TerrorDailyTask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayType = input.ReadUInt32();
            break;
          }
          case 18: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 26: {
            if (terrorDailyTask_ == null) {
              terrorDailyTask_ = new global::Packet.TerrorDailyTask();
            }
            input.ReadMessage(terrorDailyTask_);
            break;
          }
        }
      }
    }

  }

  public sealed class TerrorDailyTask : pb::IMessage {
    private static readonly pb::MessageParser<TerrorDailyTask> _parser = new pb::MessageParser<TerrorDailyTask>(() => new TerrorDailyTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrorDailyTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    /// <summary>
    ///日常任务选择的副本(0=未选择,此时下面字段无效)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 2;
    private uint line_;
    /// <summary>
    ///选择的线(0-2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///当前正在进行第几关(0-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (Line != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Line);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            Line = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单副本
  /// </summary>
  public sealed class TerrorInsEntry : pb::IMessage {
    private static readonly pb::MessageParser<TerrorInsEntry> _parser = new pb::MessageParser<TerrorInsEntry>(() => new TerrorInsEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerrorInsEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "achieves" field.</summary>
    public const int AchievesFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_achieves_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> achieves_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///日常节点完成记录，每个节点最多完成一次，size&lt;=5, 值为关卡索引，范围：0-4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Achieves {
      get { return achieves_; }
    }

    /// <summary>Field number for the "insUnlock" field.</summary>
    public const int InsUnlockFieldNumber = 3;
    private bool insUnlock_;
    /// <summary>
    ///该副本是否解锁 不重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InsUnlock {
      get { return insUnlock_; }
      set {
        insUnlock_ = value;
      }
    }

    /// <summary>Field number for the "awardStageTimes" field.</summary>
    public const int AwardStageTimesFieldNumber = 4;
    private uint awardStageTimes_;
    /// <summary>
    ///每周获取完奖励的关卡个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardStageTimes {
      get { return awardStageTimes_; }
      set {
        awardStageTimes_ = value;
      }
    }

    /// <summary>Field number for the "lastAwardStageTime" field.</summary>
    public const int LastAwardStageTimeFieldNumber = 5;
    private uint lastAwardStageTime_;
    /// <summary>
    ///数据时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastAwardStageTime {
      get { return lastAwardStageTime_; }
      set {
        lastAwardStageTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      achieves_.WriteTo(output, _repeated_achieves_codec);
      if (InsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(InsUnlock);
      }
      if (AwardStageTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AwardStageTimes);
      }
      if (LastAwardStageTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastAwardStageTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      size += achieves_.CalculateSize(_repeated_achieves_codec);
      if (InsUnlock != false) {
        size += 1 + 1;
      }
      if (AwardStageTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardStageTimes);
      }
      if (LastAwardStageTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastAwardStageTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            achieves_.AddEntriesFrom(input, _repeated_achieves_codec);
            break;
          }
          case 24: {
            InsUnlock = input.ReadBool();
            break;
          }
          case 32: {
            AwardStageTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            LastAwardStageTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTerrorSeriesDailyTaskCompleteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesDailyTaskCompleteNtf> _parser = new pb::MessageParser<CmdTerrorSeriesDailyTaskCompleteNtf>(() => new CmdTerrorSeriesDailyTaskCompleteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesDailyTaskCompleteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdTerrorSeriesDailyTaskCompleteNtf.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdTerrorSeriesDailyTaskCompleteNtf.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdTerrorSeriesDailyTaskCompleteNtf.Types.Item> items_ = new pbc::RepeatedField<global::Packet.CmdTerrorSeriesDailyTaskCompleteNtf.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdTerrorSeriesDailyTaskCompleteNtf.Types.Item> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "unlockInstanceId" field.</summary>
    public const int UnlockInstanceIdFieldNumber = 2;
    private uint unlockInstanceId_;
    /// <summary>
    ///解锁周常副本，=0无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockInstanceId {
      get { return unlockInstanceId_; }
      set {
        unlockInstanceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (UnlockInstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockInstanceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (UnlockInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockInstanceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            UnlockInstanceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdTerrorSeriesDailyTaskCompleteNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdTerrorSeriesUpdateInsAwardTimesNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTerrorSeriesUpdateInsAwardTimesNtf> _parser = new pb::MessageParser<CmdTerrorSeriesUpdateInsAwardTimesNtf>(() => new CmdTerrorSeriesUpdateInsAwardTimesNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTerrorSeriesUpdateInsAwardTimesNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "awardStageTimes" field.</summary>
    public const int AwardStageTimesFieldNumber = 4;
    private uint awardStageTimes_;
    /// <summary>
    ///每周获取完奖励的关卡个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardStageTimes {
      get { return awardStageTimes_; }
      set {
        awardStageTimes_ = value;
      }
    }

    /// <summary>Field number for the "lastAwardStageTime" field.</summary>
    public const int LastAwardStageTimeFieldNumber = 5;
    private uint lastAwardStageTime_;
    /// <summary>
    ///数据时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastAwardStageTime {
      get { return lastAwardStageTime_; }
      set {
        lastAwardStageTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (AwardStageTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AwardStageTimes);
      }
      if (LastAwardStageTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LastAwardStageTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (AwardStageTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardStageTimes);
      }
      if (LastAwardStageTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastAwardStageTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 32: {
            AwardStageTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            LastAwardStageTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
