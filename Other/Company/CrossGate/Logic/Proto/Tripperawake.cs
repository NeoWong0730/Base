// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripperawake.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///6100+
  /// </summary>
  public enum CmdTripperAwake {
    None = 0,
    /// <summary>
    /// 上线推送数据
    /// </summary>
    DataNtf = 6101,
    /// <summary>
    /// 更新数据
    /// </summary>
    UpdateNtf = 6102,
    /// <summary>
    /// 请求觉醒
    /// </summary>
    AwakeReq = 6103,
    /// <summary>
    /// 觉醒成功返回
    /// </summary>
    AwakeRes = 6104,
    /// <summary>
    /// 请求升级印记
    /// </summary>
    UpdateRuneReq = 6105,
    /// <summary>
    /// 印记升级返回
    /// </summary>
    UpdateRuneRes = 6106,
  }

  public enum ErrorTripperAwake {
    None = 0,
    /// <summary>
    /// 没有完成所有任务
    /// </summary>
    NotAllTaskFinished = 6101,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 6102,
    /// <summary>
    /// 已是最大等级
    /// </summary>
    IsMaxLevel = 6103,
    /// <summary>
    /// 功能未开启
    /// </summary>
    FunctionNotOpen = 6104,
  }

  public enum TripperAwakeActiveReason {
    None = 0,
    /// <summary>
    /// 觉醒奖励
    /// </summary>
    Awake = 6101,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 旅人觉醒任务
  /// </summary>
  public sealed class TripperAwakeTask : pb::IMessage {
    private static readonly pb::MessageParser<TripperAwakeTask> _parser = new pb::MessageParser<TripperAwakeTask>(() => new TripperAwakeTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TripperAwakeTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 2;
    private bool finished_;
    /// <summary>
    /// 是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Finished != false) {
        output.WriteRawTag(16);
        output.WriteBool(Finished);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Finished != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Finished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 旅人觉醒任务列表
  /// </summary>
  public sealed class TripperAwakeTaskList : pb::IMessage {
    private static readonly pb::MessageParser<TripperAwakeTaskList> _parser = new pb::MessageParser<TripperAwakeTaskList>(() => new TripperAwakeTaskList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TripperAwakeTaskList> Parser { get { return _parser; } }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TripperAwakeTask> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TripperAwakeTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.TripperAwakeTask> tasks_ = new pbc::RepeatedField<global::Packet.TripperAwakeTask>();
    /// <summary>
    /// 任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TripperAwakeTask> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 旅人觉醒
  /// </summary>
  public sealed class TripperAwake : pb::IMessage {
    private static readonly pb::MessageParser<TripperAwake> _parser = new pb::MessageParser<TripperAwake>(() => new TripperAwake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TripperAwake> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "tasklist" field.</summary>
    public const int TasklistFieldNumber = 2;
    private global::Packet.TripperAwakeTaskList tasklist_;
    /// <summary>
    /// 任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TripperAwakeTaskList Tasklist {
      get { return tasklist_; }
      set {
        tasklist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (tasklist_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tasklist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (tasklist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tasklist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 18: {
            if (tasklist_ == null) {
              tasklist_ = new global::Packet.TripperAwakeTaskList();
            }
            input.ReadMessage(tasklist_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 觉醒印记
  /// </summary>
  public sealed class AwakeRune : pb::IMessage {
    private static readonly pb::MessageParser<AwakeRune> _parser = new pb::MessageParser<AwakeRune>(() => new AwakeRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwakeRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 1;
    private uint levelid_;
    /// <summary>
    /// 等级表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Levelid {
      get { return levelid_; }
      set {
        levelid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Levelid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Levelid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Levelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Levelid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Levelid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 觉醒印记列表
  /// </summary>
  public sealed class AwakeRuneList : pb::IMessage {
    private static readonly pb::MessageParser<AwakeRuneList> _parser = new pb::MessageParser<AwakeRuneList>(() => new AwakeRuneList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwakeRuneList> Parser { get { return _parser; } }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.AwakeRune> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.AwakeRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.AwakeRune> runes_ = new pbc::RepeatedField<global::Packet.AwakeRune>();
    /// <summary>
    /// 印记数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AwakeRune> Runes {
      get { return runes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runes_.WriteTo(output, _repeated_runes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runes_.CalculateSize(_repeated_runes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTripperAwakeDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeDataNtf> _parser = new pb::MessageParser<CmdTripperAwakeDataNtf>(() => new CmdTripperAwakeDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TripperAwake data_;
    /// <summary>
    /// 旅人觉醒数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TripperAwake Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "runelist" field.</summary>
    public const int RunelistFieldNumber = 2;
    private global::Packet.AwakeRuneList runelist_;
    /// <summary>
    /// 觉醒印记列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.AwakeRuneList Runelist {
      get { return runelist_; }
      set {
        runelist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (runelist_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Runelist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (runelist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Runelist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TripperAwake();
            }
            input.ReadMessage(data_);
            break;
          }
          case 18: {
            if (runelist_ == null) {
              runelist_ = new global::Packet.AwakeRuneList();
            }
            input.ReadMessage(runelist_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTripperAwakeUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeUpdateNtf> _parser = new pb::MessageParser<CmdTripperAwakeUpdateNtf>(() => new CmdTripperAwakeUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Packet.TripperAwakeTask task_;
    /// <summary>
    /// 任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TripperAwakeTask Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::Packet.TripperAwakeTask();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///nothing
  /// </summary>
  public sealed class CmdTripperAwakeAwakeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeAwakeReq> _parser = new pb::MessageParser<CmdTripperAwakeAwakeReq>(() => new CmdTripperAwakeAwakeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeAwakeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTripperAwakeAwakeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeAwakeRes> _parser = new pb::MessageParser<CmdTripperAwakeAwakeRes>(() => new CmdTripperAwakeAwakeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeAwakeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.TripperAwake data_;
    /// <summary>
    /// 旅人觉醒数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TripperAwake Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.TripperAwake();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTripperAwakeUpdateRuneReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeUpdateRuneReq> _parser = new pb::MessageParser<CmdTripperAwakeUpdateRuneReq>(() => new CmdTripperAwakeUpdateRuneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeUpdateRuneReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private uint nodeid_;
    /// <summary>
    /// 节点表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = value;
      }
    }

    /// <summary>Field number for the "costtype" field.</summary>
    public const int CosttypeFieldNumber = 2;
    private uint costtype_;
    /// <summary>
    /// 消耗类型(0道具升级 1银币升级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Costtype {
      get { return costtype_; }
      set {
        costtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nodeid);
      }
      if (Costtype != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Costtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nodeid);
      }
      if (Costtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Costtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nodeid = input.ReadUInt32();
            break;
          }
          case 16: {
            Costtype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTripperAwakeUpdateRuneRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTripperAwakeUpdateRuneRes> _parser = new pb::MessageParser<CmdTripperAwakeUpdateRuneRes>(() => new CmdTripperAwakeUpdateRuneRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTripperAwakeUpdateRuneRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 1;
    private uint levelid_;
    /// <summary>
    /// 等级表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Levelid {
      get { return levelid_; }
      set {
        levelid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Levelid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Levelid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Levelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Levelid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Levelid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
