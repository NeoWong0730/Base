// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ttdanlv.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///段位天梯竞技场模块 协议号8700开始
  /// </summary>
  public enum CmdTTDanLv {
    None = 0,
    /// <summary>
    ///队长请求打开天梯主界面(队长且有成员都满足请求条件时)
    /// </summary>
    LeaderOpenMainPanelReq = 8728,
    /// <summary>
    ///返回给队伍有效成员
    /// </summary>
    LeaderOpenMainPanelRes = 8729,
    /// <summary>
    ///获取竞技场基础信息
    /// </summary>
    InfoReq = 8730,
    /// <summary>
    ///获取竞技场基础信息
    /// </summary>
    InfoRes = 8731,
    /// <summary>
    ///通知上赛季是否有宝箱
    /// </summary>
    ShowBoxNtf = 8732,
    /// <summary>
    ///获取上赛季宝箱奖励
    /// </summary>
    BoxAwardReq = 8733,
    /// <summary>
    ///宝箱奖励
    /// </summary>
    BoxAwardRes = 8734,
    /// <summary>
    ///战斗结束退送(星级、段位变化，奖励等)
    /// </summary>
    FightEndNtf = 8735,
    /// <summary>
    ///请求队伍成员信息
    /// </summary>
    TeamMemberInfoReq = 8736,
    /// <summary>
    ///返回队伍成员信息
    /// </summary>
    TeamMemberInfoRes = 8737,
    /// <summary>
    ///请求一键领取任务奖励
    /// </summary>
    FastGetTaskAwardReq = 8738,
    /// <summary>
    ///返回一键领取任务奖励
    /// </summary>
    FastGetTaskAwardRes = 8739,
    /// <summary>
    ///请求领取任务奖励
    /// </summary>
    GetTaskAwardReq = 8740,
    /// <summary>
    ///返回领取任务奖励
    /// </summary>
    GetTaskAwardRes = 8741,
  }

  public enum ErrorTTDanLv {
    None = 0,
    /// <summary>
    ///活动暂未开启
    /// </summary>
    NotStart = 8701,
    /// <summary>
    ///不在当前活动时间
    /// </summary>
    NotInTime = 8702,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 8703,
    /// <summary>
    ///段位不达标
    /// </summary>
    DanNotEnough = 8706,
    /// <summary>
    ///奖励已领取
    /// </summary>
    AlreadyGetAward = 8707,
    /// <summary>
    ///角色与伙伴的“治疗+咒术”总和不得超过3个
    /// </summary>
    CareerNumErr = 8708,
    /// <summary>
    ///winNum错误
    /// </summary>
    WinNumErr = 8709,
    /// <summary>
    ///次数不足
    /// </summary>
    WinNumNotEnough = 8710,
    /// <summary>
    ///发奖失败
    /// </summary>
    SendAwardErr = 8711,
    /// <summary>
    ///战斗中，不可参加该活动
    /// </summary>
    InFightErr = 8712,
    /// <summary>
    ///组队不可参加该活动
    /// </summary>
    InTeamErr = 8713,
    /// <summary>
    ///功能未开启
    /// </summary>
    FuncNotOpen = 8714,
    /// <summary>
    ///在副本中，不可参加
    /// </summary>
    InInsErr = 8715,
    /// <summary>
    ///已在匹配战斗中
    /// </summary>
    InMatchFight = 8716,
    /// <summary>
    ///错误的赛季id
    /// </summary>
    ErrAreaId = 8717,
    /// <summary>
    ///没有上赛季奖励可领取
    /// </summary>
    NoBoxAward = 8718,
    /// <summary>
    ///超过当日胜场奖励次数
    /// </summary>
    MaxFightWinReward = 8719,
    /// <summary>
    ///不能获取系统当前赛季
    /// </summary>
    CanNotFindSysSeason = 8729,
    /// <summary>
    ///未知任务
    /// </summary>
    UnknowTask = 8730,
    /// <summary>
    ///不能领取任务奖励
    /// </summary>
    CanNotGetTaskReward = 8731,
    /// <summary>
    ///任务奖励Id错误
    /// </summary>
    TaskRewardIdError = 8732,
    /// <summary>
    ///未知任务类型
    /// </summary>
    UnknowTaskType = 8733,
    /// <summary>
    ///队伍必须满员
    /// </summary>
    TeamMustFull = 8734,
  }

  public enum TTDanLvItemReason {
    None = 0,
    /// <summary>
    ///任务奖励
    /// </summary>
    TaskAward = 8702,
    /// <summary>
    ///赛季奖励
    /// </summary>
    SeasonAward = 8703,
    /// <summary>
    ///战斗奖励
    /// </summary>
    FightAward = 8704,
  }

  public enum TTDanLvTaskStatus {
    None = 0,
    NotGet = 1,
    Got = 2,
  }

  public enum TTDanLvTaskType {
    None = 0,
    _1 = 1,
    _2 = 2,
  }

  #endregion

  #region Messages
  public sealed class TTDanLvTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvTeamMember> _parser = new pb::MessageParser<TTDanLvTeamMember>(() => new TTDanLvTeamMember());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvTeamMember> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvLeaderOpenMainPanelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelReq> _parser = new pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelReq>(() => new CmdTTDanLvLeaderOpenMainPanelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvLeaderOpenMainPanelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelRes> _parser = new pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelRes>(() => new CmdTTDanLvLeaderOpenMainPanelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvLeaderOpenMainPanelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvInfoReq> _parser = new pb::MessageParser<CmdTTDanLvInfoReq>(() => new CmdTTDanLvInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class TTDanLvSeason : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvSeason> _parser = new pb::MessageParser<TTDanLvSeason>(() => new TTDanLvSeason());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvSeason> Parser { get { return _parser; } }

    /// <summary>Field number for the "seasonId" field.</summary>
    public const int SeasonIdFieldNumber = 1;
    private uint seasonId_;
    /// <summary>
    ///赛季Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///赛季开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///赛季结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeasonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeasonId);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonId);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeasonId = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvDay : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvDay> _parser = new pb::MessageParser<TTDanLvDay>(() => new TTDanLvDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private uint startTime_;
    /// <summary>
    ///场次开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private uint endTime_;
    /// <summary>
    ///场次结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvRoleBase : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvRoleBase> _parser = new pb::MessageParser<TTDanLvRoleBase>(() => new TTDanLvRoleBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvRoleBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    ///排行名次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvRoleTotal : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvRoleTotal> _parser = new pb::MessageParser<TTDanLvRoleTotal>(() => new TTDanLvRoleTotal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvRoleTotal> Parser { get { return _parser; } }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 1;
    private uint join_;
    /// <summary>
    ///赛季参加次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 2;
    private uint win_;
    /// <summary>
    ///赛季胜场次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "continueWin" field.</summary>
    public const int ContinueWinFieldNumber = 3;
    private uint continueWin_;
    /// <summary>
    ///赛季最大连胜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinueWin {
      get { return continueWin_; }
      set {
        continueWin_ = value;
      }
    }

    /// <summary>Field number for the "continueFail" field.</summary>
    public const int ContinueFailFieldNumber = 4;
    private uint continueFail_;
    /// <summary>
    ///赛季最大连败次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinueFail {
      get { return continueFail_; }
      set {
        continueFail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Join != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Join);
      }
      if (Win != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Win);
      }
      if (ContinueWin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContinueWin);
      }
      if (ContinueFail != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ContinueFail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (ContinueWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinueWin);
      }
      if (ContinueFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinueFail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Join = input.ReadUInt32();
            break;
          }
          case 16: {
            Win = input.ReadUInt32();
            break;
          }
          case 24: {
            ContinueWin = input.ReadUInt32();
            break;
          }
          case 32: {
            ContinueFail = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvRoleDay : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvRoleDay> _parser = new pb::MessageParser<TTDanLvRoleDay>(() => new TTDanLvRoleDay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvRoleDay> Parser { get { return _parser; } }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 1;
    private uint join_;
    /// <summary>
    ///场次参加次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Join {
      get { return join_; }
      set {
        join_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 2;
    private uint win_;
    /// <summary>
    ///场次胜场次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "continueWin" field.</summary>
    public const int ContinueWinFieldNumber = 3;
    private uint continueWin_;
    /// <summary>
    ///场次最大连胜次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinueWin {
      get { return continueWin_; }
      set {
        continueWin_ = value;
      }
    }

    /// <summary>Field number for the "continueFail" field.</summary>
    public const int ContinueFailFieldNumber = 4;
    private uint continueFail_;
    /// <summary>
    ///场次最大连败次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinueFail {
      get { return continueFail_; }
      set {
        continueFail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Join != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Join);
      }
      if (Win != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Win);
      }
      if (ContinueWin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ContinueWin);
      }
      if (ContinueFail != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ContinueFail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Join != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Join);
      }
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Win);
      }
      if (ContinueWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinueWin);
      }
      if (ContinueFail != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinueFail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Join = input.ReadUInt32();
            break;
          }
          case 16: {
            Win = input.ReadUInt32();
            break;
          }
          case 24: {
            ContinueWin = input.ReadUInt32();
            break;
          }
          case 32: {
            ContinueFail = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvRoleSeason : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvRoleSeason> _parser = new pb::MessageParser<TTDanLvRoleSeason>(() => new TTDanLvRoleSeason());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvRoleSeason> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.TTDanLvRoleBase base_;
    /// <summary>
    ///基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private global::Packet.TTDanLvRoleTotal total_;
    /// <summary>
    ///赛季汇总
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleTotal Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "today" field.</summary>
    public const int TodayFieldNumber = 3;
    private global::Packet.TTDanLvRoleDay today_;
    /// <summary>
    ///场次汇总
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleDay Today {
      get { return today_; }
      set {
        today_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (total_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Total);
      }
      if (today_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Today);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (total_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Total);
      }
      if (today_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Today);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.TTDanLvRoleBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (total_ == null) {
              total_ = new global::Packet.TTDanLvRoleTotal();
            }
            input.ReadMessage(total_);
            break;
          }
          case 26: {
            if (today_ == null) {
              today_ = new global::Packet.TTDanLvRoleDay();
            }
            input.ReadMessage(today_);
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvTask : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvTask> _parser = new pb::MessageParser<TTDanLvTask>(() => new TTDanLvTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private uint progress_;
    /// <summary>
    ///进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private uint status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Progress);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Progress = input.ReadUInt32();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TTDanLvTaskList : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvTaskList> _parser = new pb::MessageParser<TTDanLvTaskList>(() => new TTDanLvTaskList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvTaskList> Parser { get { return _parser; } }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TTDanLvTask> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TTDanLvTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.TTDanLvTask> tasks_ = new pbc::RepeatedField<global::Packet.TTDanLvTask>();
    /// <summary>
    ///任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TTDanLvTask> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvInfoRes> _parser = new pb::MessageParser<CmdTTDanLvInfoRes>(() => new CmdTTDanLvInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 1;
    private global::Packet.TTDanLvSeason season_;
    /// <summary>
    ///赛季信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvSeason Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    /// <summary>Field number for the "dayDanLv" field.</summary>
    public const int DayDanLvFieldNumber = 2;
    private global::Packet.TTDanLvDay dayDanLv_;
    /// <summary>
    ///段位赛场次信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvDay DayDanLv {
      get { return dayDanLv_; }
      set {
        dayDanLv_ = value;
      }
    }

    /// <summary>Field number for the "dayLeisure" field.</summary>
    public const int DayLeisureFieldNumber = 3;
    private global::Packet.TTDanLvDay dayLeisure_;
    /// <summary>
    ///休闲赛场次信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvDay DayLeisure {
      get { return dayLeisure_; }
      set {
        dayLeisure_ = value;
      }
    }

    /// <summary>Field number for the "roleInfo" field.</summary>
    public const int RoleInfoFieldNumber = 4;
    private global::Packet.TTDanLvRoleSeason roleInfo_;
    /// <summary>
    ///角色赛季信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleSeason RoleInfo {
      get { return roleInfo_; }
      set {
        roleInfo_ = value;
      }
    }

    /// <summary>Field number for the "isBox" field.</summary>
    public const int IsBoxFieldNumber = 5;
    private bool isBox_;
    /// <summary>
    ///是否有box
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBox {
      get { return isBox_; }
      set {
        isBox_ = value;
      }
    }

    /// <summary>Field number for the "task1" field.</summary>
    public const int Task1FieldNumber = 6;
    private global::Packet.TTDanLvTaskList task1_;
    /// <summary>
    ///一类任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvTaskList Task1 {
      get { return task1_; }
      set {
        task1_ = value;
      }
    }

    /// <summary>Field number for the "task2" field.</summary>
    public const int Task2FieldNumber = 7;
    private global::Packet.TTDanLvTaskList task2_;
    /// <summary>
    ///二类任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvTaskList Task2 {
      get { return task2_; }
      set {
        task2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (season_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Season);
      }
      if (dayDanLv_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DayDanLv);
      }
      if (dayLeisure_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DayLeisure);
      }
      if (roleInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleInfo);
      }
      if (IsBox != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsBox);
      }
      if (task1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Task1);
      }
      if (task2_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Task2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (season_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Season);
      }
      if (dayDanLv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DayDanLv);
      }
      if (dayLeisure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DayLeisure);
      }
      if (roleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleInfo);
      }
      if (IsBox != false) {
        size += 1 + 1;
      }
      if (task1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task1);
      }
      if (task2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (season_ == null) {
              season_ = new global::Packet.TTDanLvSeason();
            }
            input.ReadMessage(season_);
            break;
          }
          case 18: {
            if (dayDanLv_ == null) {
              dayDanLv_ = new global::Packet.TTDanLvDay();
            }
            input.ReadMessage(dayDanLv_);
            break;
          }
          case 26: {
            if (dayLeisure_ == null) {
              dayLeisure_ = new global::Packet.TTDanLvDay();
            }
            input.ReadMessage(dayLeisure_);
            break;
          }
          case 34: {
            if (roleInfo_ == null) {
              roleInfo_ = new global::Packet.TTDanLvRoleSeason();
            }
            input.ReadMessage(roleInfo_);
            break;
          }
          case 40: {
            IsBox = input.ReadBool();
            break;
          }
          case 50: {
            if (task1_ == null) {
              task1_ = new global::Packet.TTDanLvTaskList();
            }
            input.ReadMessage(task1_);
            break;
          }
          case 58: {
            if (task2_ == null) {
              task2_ = new global::Packet.TTDanLvTaskList();
            }
            input.ReadMessage(task2_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvShowBoxNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvShowBoxNtf> _parser = new pb::MessageParser<CmdTTDanLvShowBoxNtf>(() => new CmdTTDanLvShowBoxNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvShowBoxNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvBoxAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvBoxAwardReq> _parser = new pb::MessageParser<CmdTTDanLvBoxAwardReq>(() => new CmdTTDanLvBoxAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvBoxAwardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class TTDanLvAward : pb::IMessage {
    private static readonly pb::MessageParser<TTDanLvAward> _parser = new pb::MessageParser<TTDanLvAward>(() => new TTDanLvAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TTDanLvAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///奖励Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private uint itemNum_;
    /// <summary>
    ///奖励数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvBoxAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvBoxAwardRes> _parser = new pb::MessageParser<CmdTTDanLvBoxAwardRes>(() => new CmdTTDanLvBoxAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvBoxAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "seasonId" field.</summary>
    public const int SeasonIdFieldNumber = 1;
    private uint seasonId_;
    /// <summary>
    ///赛季信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///赛季分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.TTDanLvAward> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.TTDanLvAward.Parser);
    private readonly pbc::RepeatedField<global::Packet.TTDanLvAward> awards_ = new pbc::RepeatedField<global::Packet.TTDanLvAward>();
    /// <summary>
    ///赛季奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TTDanLvAward> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeasonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeasonId);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeasonId = input.ReadUInt32();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvFightEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvFightEndNtf> _parser = new pb::MessageParser<CmdTTDanLvFightEndNtf>(() => new CmdTTDanLvFightEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvFightEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 1;
    private bool isWin_;
    /// <summary>
    ///战斗结果(true赢)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///战斗后分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TTDanLvAward> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TTDanLvAward.Parser);
    private readonly pbc::RepeatedField<global::Packet.TTDanLvAward> awards_ = new pbc::RepeatedField<global::Packet.TTDanLvAward>();
    /// <summary>
    ///战斗奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TTDanLvAward> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 5;
    private global::Packet.TTDanLvRoleTotal total_;
    /// <summary>
    ///赛季汇总
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleTotal Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "today" field.</summary>
    public const int TodayFieldNumber = 6;
    private global::Packet.TTDanLvRoleDay today_;
    /// <summary>
    ///场次汇总
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TTDanLvRoleDay Today {
      get { return today_; }
      set {
        today_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWin != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsWin);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (total_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Total);
      }
      if (today_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Today);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (total_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Total);
      }
      if (today_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Today);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsWin = input.ReadBool();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 34: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 42: {
            if (total_ == null) {
              total_ = new global::Packet.TTDanLvRoleTotal();
            }
            input.ReadMessage(total_);
            break;
          }
          case 50: {
            if (today_ == null) {
              today_ = new global::Packet.TTDanLvRoleDay();
            }
            input.ReadMessage(today_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdTTDanLvTeamMemberInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvTeamMemberInfoReq> _parser = new pb::MessageParser<CmdTTDanLvTeamMemberInfoReq>(() => new CmdTTDanLvTeamMemberInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvTeamMemberInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdTTDanLvTeamMemberInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvTeamMemberInfoRes> _parser = new pb::MessageParser<CmdTTDanLvTeamMemberInfoRes>(() => new CmdTTDanLvTeamMemberInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvTeamMemberInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.TTDanLvTeamMember> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.TTDanLvTeamMember.Parser);
    private readonly pbc::RepeatedField<global::Packet.TTDanLvTeamMember> members_ = new pbc::RepeatedField<global::Packet.TTDanLvTeamMember>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TTDanLvTeamMember> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvFastGetTaskAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvFastGetTaskAwardReq> _parser = new pb::MessageParser<CmdTTDanLvFastGetTaskAwardReq>(() => new CmdTTDanLvFastGetTaskAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvFastGetTaskAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private uint taskType_;
    /// <summary>
    ///任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvFastGetTaskAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvFastGetTaskAwardRes> _parser = new pb::MessageParser<CmdTTDanLvFastGetTaskAwardRes>(() => new CmdTTDanLvFastGetTaskAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvFastGetTaskAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskIds" field.</summary>
    public const int TaskIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_taskIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> taskIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///任务Id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TaskIds {
      get { return taskIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskIds_.WriteTo(output, _repeated_taskIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskIds_.CalculateSize(_repeated_taskIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            taskIds_.AddEntriesFrom(input, _repeated_taskIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvGetTaskAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvGetTaskAwardReq> _parser = new pb::MessageParser<CmdTTDanLvGetTaskAwardReq>(() => new CmdTTDanLvGetTaskAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvGetTaskAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdTTDanLvGetTaskAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdTTDanLvGetTaskAwardRes> _parser = new pb::MessageParser<CmdTTDanLvGetTaskAwardRes>(() => new CmdTTDanLvGetTaskAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdTTDanLvGetTaskAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///任务Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
