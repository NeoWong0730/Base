// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cook.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///4800
  /// </summary>
  public enum CmdCook {
    None = 0,
    /// <summary>
    ///上线数据通知
    /// </summary>
    DataNtf = 4801,
    /// <summary>
    ///积分更新
    /// </summary>
    ScoreUpdateNtf = 4802,
    /// <summary>
    ///领取某条目奖励
    /// </summary>
    GetRewardReq = 4803,
    GetRewardRes = 4804,
    /// <summary>
    ///开界面请求图册数据  (#109610修改完成后废弃）
    /// </summary>
    BookDataReq = 4805,
    /// <summary>
    /// (#109610修改完成后需废弃）
    /// </summary>
    BookDataRes = 4806,
    /// <summary>
    ///收集食谱或料理
    /// </summary>
    CollectReq = 4807,
    CollectRes = 4808,
    /// <summary>
    ///准备烹饪
    /// </summary>
    PrepareReq = 4809,
    /// <summary>
    ///多人开始投票通知
    /// </summary>
    PrepareNtf = 4827,
    /// <summary>
    ///通知队长和队员烹饪确认
    /// </summary>
    PrepareConfirmNtf = 4810,
    /// <summary>
    ///队员回复确认取消
    /// </summary>
    PrepareConfirmOpReq = 4811,
    /// <summary>
    ///换位
    /// </summary>
    ExchangeReq = 4812,
    /// <summary>
    ///队员收到换位请求
    /// </summary>
    ExchangeConfirmNtf = 4813,
    /// <summary>
    ///换位确认
    /// </summary>
    ExchangeOpReq = 4814,
    /// <summary>
    ///换位被拒绝
    /// </summary>
    ExchangeRefuseNtf = 4830,
    /// <summary>
    ///换位成功通知
    /// </summary>
    ExchangeNtf = 4815,
    /// <summary>
    ///多人模式，选择料理
    /// </summary>
    SelectReq = 4816,
    SelectNtf = 4817,
    /// <summary>
    ///烹饪按钮
    /// </summary>
    CookReq = 4818,
    CookNtf = 4819,
    /// <summary>
    ///开始烹饪
    /// </summary>
    FireOnReq = 4820,
    FireOnNtf = 4821,
    /// <summary>
    ///起锅
    /// </summary>
    FireOffReq = 4822,
    FireOffNtf = 4823,
    /// <summary>
    ///取消烹饪
    /// </summary>
    CancelReq = 4824,
    CancelNtf = 4825,
    /// <summary>
    ///烹饪结束通知
    /// </summary>
    CookEndNtf = 4826,
    /// <summary>
    ///烹饪结束后返回准备界面
    /// </summary>
    ReturnPrepareReq = 4828,
    ReturnPrepareNtf = 4829,
    /// <summary>
    ///玩家当前使用的料理
    /// </summary>
    UseingFoodNtf = 4831,
    /// <summary>
    ///使用变大料理通知(角色视野列表广播)
    /// </summary>
    UseFoodStateNtf = 4832,
    /// <summary>
    ///使用料理结束
    /// </summary>
    UseFoodEndReq = 4833,
    /// <summary>
    ///关注料理
    /// </summary>
    WatchReq = 4834,
    WatchRes = 4835,
  }

  public enum ErrorCook {
    None = 0,
    /// <summary>
    ///烹饪相关表格未找到
    /// </summary>
    CsvnotFound = 4801,
    /// <summary>
    ///积分不足
    /// </summary>
    ScoreNotEnough = 4802,
    /// <summary>
    ///已领取该积分奖励
    /// </summary>
    HasReceived = 4803,
    /// <summary>
    ///上交材料错误
    /// </summary>
    SubmitNotMatch = 4804,
    /// <summary>
    ///材料已上交过，不能重复上交
    /// </summary>
    SubmitAlready = 4805,
    /// <summary>
    ///人数不足，不能烹饪
    /// </summary>
    MemNotEnough = 4806,
    /// <summary>
    ///不合法操作，可能信息已过期
    /// </summary>
    InvalidOp = 4807,
    /// <summary>
    ///对方正在换位中，请稍后
    /// </summary>
    Exchanging = 4808,
    /// <summary>
    ///队员不能主动烹饪
    /// </summary>
    MemCannotCook = 4809,
    /// <summary>
    ///没有食谱不能开始食谱烹饪
    /// </summary>
    NoBookCannotCook = 4810,
    /// <summary>
    ///烹饪等级不够
    /// </summary>
    CookLvNotSupport = 4811,
    /// <summary>
    ///正在进行烹饪
    /// </summary>
    IsCooking = 4812,
  }

  public enum CookActiveReason {
    None = 0,
    /// <summary>
    ///图册积分奖励
    /// </summary>
    GetBookReward = 4801,
    /// <summary>
    ///上交食谱
    /// </summary>
    SubmitCookBook = 4802,
    /// <summary>
    ///上交食谱
    /// </summary>
    SubmitFood = 4803,
    /// <summary>
    ///烹饪
    /// </summary>
    Cook = 4804,
  }

  /// <summary>
  ///烹饪类型
  /// </summary>
  public enum CookType {
    None = 0,
    Single = 1,
    TwoStage = 2,
    /// <summary>
    ///多人料理
    /// </summary>
    Multi = 3,
  }

  /// <summary>
  ///厨具类型
  /// </summary>
  public enum CookTool {
    None = 0,
    /// <summary>
    ///案板
    /// </summary>
    ChoppingBoard = 1,
    /// <summary>
    ///炒锅
    /// </summary>
    FryPan = 2,
    /// <summary>
    ///砂锅
    /// </summary>
    Casserole = 3,
    /// <summary>
    ///烤炉
    /// </summary>
    Oven = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///食材相关
  /// </summary>
  public sealed class CookFood : pb::IMessage {
    private static readonly pb::MessageParser<CookFood> _parser = new pb::MessageParser<CookFood>(() => new CookFood());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CookFood> Parser { get { return _parser; } }

    /// <summary>Field number for the "foodId" field.</summary>
    public const int FoodIdFieldNumber = 1;
    private uint foodId_;
    /// <summary>
    ///食材道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FoodId {
      get { return foodId_; }
      set {
        foodId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FoodId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FoodId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FoodId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///阶段
  /// </summary>
  public sealed class CookStage : pb::IMessage {
    private static readonly pb::MessageParser<CookStage> _parser = new pb::MessageParser<CookStage>(() => new CookStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CookStage> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "toolId" field.</summary>
    public const int ToolIdFieldNumber = 2;
    private uint toolId_;
    /// <summary>
    ///厨具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToolId {
      get { return toolId_; }
      set {
        toolId_ = value;
      }
    }

    /// <summary>Field number for the "foods" field.</summary>
    public const int FoodsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.CookFood> _repeated_foods_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.CookFood.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookFood> foods_ = new pbc::RepeatedField<global::Packet.CookFood>();
    /// <summary>
    ///食材
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookFood> Foods {
      get { return foods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (ToolId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToolId);
      }
      foods_.WriteTo(output, _repeated_foods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ToolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToolId);
      }
      size += foods_.CalculateSize(_repeated_foods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ToolId = input.ReadUInt32();
            break;
          }
          case 26: {
            foods_.AddEntriesFrom(input, _repeated_foods_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookDataNtf> _parser = new pb::MessageParser<CmdCookDataNtf>(() => new CmdCookDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    /// <summary>
    ///积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "receiveRewardIds" field.</summary>
    public const int ReceiveRewardIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_receiveRewardIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> receiveRewardIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已领取的奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ReceiveRewardIds {
      get { return receiveRewardIds_; }
    }

    /// <summary>Field number for the "lastCookId" field.</summary>
    public const int LastCookIdFieldNumber = 3;
    private uint lastCookId_;
    /// <summary>
    ///最近制作的食谱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastCookId {
      get { return lastCookId_; }
      set {
        lastCookId_ = value;
      }
    }

    /// <summary>Field number for the "lastMultiCookId" field.</summary>
    public const int LastMultiCookIdFieldNumber = 4;
    private uint lastMultiCookId_;
    /// <summary>
    ///最近多人制作的食谱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastMultiCookId {
      get { return lastMultiCookId_; }
      set {
        lastMultiCookId_ = value;
      }
    }

    /// <summary>Field number for the "watchCookIds" field.</summary>
    public const int WatchCookIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_watchCookIds_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> watchCookIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///关注的食谱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> WatchCookIds {
      get { return watchCookIds_; }
    }

    /// <summary>Field number for the "bookItems" field.</summary>
    public const int BookItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.CookBookItem> _repeated_bookItems_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.CookBookItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookBookItem> bookItems_ = new pbc::RepeatedField<global::Packet.CookBookItem>();
    /// <summary>
    ///所有已解锁的图册数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookBookItem> BookItems {
      get { return bookItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
      receiveRewardIds_.WriteTo(output, _repeated_receiveRewardIds_codec);
      if (LastCookId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastCookId);
      }
      if (LastMultiCookId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastMultiCookId);
      }
      watchCookIds_.WriteTo(output, _repeated_watchCookIds_codec);
      bookItems_.WriteTo(output, _repeated_bookItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      size += receiveRewardIds_.CalculateSize(_repeated_receiveRewardIds_codec);
      if (LastCookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastCookId);
      }
      if (LastMultiCookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastMultiCookId);
      }
      size += watchCookIds_.CalculateSize(_repeated_watchCookIds_codec);
      size += bookItems_.CalculateSize(_repeated_bookItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            receiveRewardIds_.AddEntriesFrom(input, _repeated_receiveRewardIds_codec);
            break;
          }
          case 24: {
            LastCookId = input.ReadUInt32();
            break;
          }
          case 32: {
            LastMultiCookId = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            watchCookIds_.AddEntriesFrom(input, _repeated_watchCookIds_codec);
            break;
          }
          case 50: {
            bookItems_.AddEntriesFrom(input, _repeated_bookItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookScoreUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookScoreUpdateNtf> _parser = new pb::MessageParser<CmdCookScoreUpdateNtf>(() => new CmdCookScoreUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookScoreUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookGetRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookGetRewardReq> _parser = new pb::MessageParser<CmdCookGetRewardReq>(() => new CmdCookGetRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookGetRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardId" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private uint rewardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookGetRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookGetRewardRes> _parser = new pb::MessageParser<CmdCookGetRewardRes>(() => new CmdCookGetRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookGetRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewardId" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private uint rewardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CookBookItem : pb::IMessage {
    private static readonly pb::MessageParser<CookBookItem> _parser = new pb::MessageParser<CookBookItem>(() => new CookBookItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CookBookItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    /// <summary>
    ///料理表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "submitIds" field.</summary>
    public const int SubmitIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_submitIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> submitIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///上交材料(食谱+食材)道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SubmitIds {
      get { return submitIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      submitIds_.WriteTo(output, _repeated_submitIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      size += submitIds_.CalculateSize(_repeated_submitIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            submitIds_.AddEntriesFrom(input, _repeated_submitIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookBookDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookBookDataReq> _parser = new pb::MessageParser<CmdCookBookDataReq>(() => new CmdCookBookDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookBookDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdCookBookDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookBookDataRes> _parser = new pb::MessageParser<CmdCookBookDataRes>(() => new CmdCookBookDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookBookDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "bookItems" field.</summary>
    public const int BookItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CookBookItem> _repeated_bookItems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CookBookItem.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookBookItem> bookItems_ = new pbc::RepeatedField<global::Packet.CookBookItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookBookItem> BookItems {
      get { return bookItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bookItems_.WriteTo(output, _repeated_bookItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bookItems_.CalculateSize(_repeated_bookItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bookItems_.AddEntriesFrom(input, _repeated_bookItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCollectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCollectReq> _parser = new pb::MessageParser<CmdCookCollectReq>(() => new CmdCookCollectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCollectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "submitId" field.</summary>
    public const int SubmitIdFieldNumber = 2;
    private uint submitId_;
    /// <summary>
    ///上交材料的道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubmitId {
      get { return submitId_; }
      set {
        submitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      if (SubmitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubmitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      if (SubmitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubmitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubmitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCollectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCollectRes> _parser = new pb::MessageParser<CmdCookCollectRes>(() => new CmdCookCollectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCollectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "submitId" field.</summary>
    public const int SubmitIdFieldNumber = 2;
    private uint submitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubmitId {
      get { return submitId_; }
      set {
        submitId_ = value;
      }
    }

    /// <summary>Field number for the "cookActive" field.</summary>
    public const int CookActiveFieldNumber = 3;
    private bool cookActive_;
    /// <summary>
    ///是否是制作完美料理激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CookActive {
      get { return cookActive_; }
      set {
        cookActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      if (SubmitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubmitId);
      }
      if (CookActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(CookActive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      if (SubmitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubmitId);
      }
      if (CookActive != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 16: {
            SubmitId = input.ReadUInt32();
            break;
          }
          case 24: {
            CookActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookPrepareReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookPrepareReq> _parser = new pb::MessageParser<CmdCookPrepareReq>(() => new CmdCookPrepareReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookPrepareReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "multi" field.</summary>
    public const int MultiFieldNumber = 1;
    private bool multi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Multi {
      get { return multi_; }
      set {
        multi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Multi != false) {
        output.WriteRawTag(8);
        output.WriteBool(Multi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Multi != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Multi = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///多人投票开始通知
  /// </summary>
  public sealed class CmdCookPrepareNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookPrepareNtf> _parser = new pb::MessageParser<CmdCookPrepareNtf>(() => new CmdCookPrepareNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookPrepareNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdCookPrepareNtf.Types.Member> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdCookPrepareNtf.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdCookPrepareNtf.Types.Member> mems_ = new pbc::RepeatedField<global::Packet.CmdCookPrepareNtf.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdCookPrepareNtf.Types.Member> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdCookPrepareNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Member : pb::IMessage {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private int state_;
        /// <summary>
        /// -1未投， 0=拒绝， 1=同意
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                State = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdCookPrepareConfirmNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookPrepareConfirmNtf> _parser = new pb::MessageParser<CmdCookPrepareConfirmNtf>(() => new CmdCookPrepareConfirmNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookPrepareConfirmNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdCookPrepareConfirmNtf.Types.Member> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdCookPrepareConfirmNtf.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdCookPrepareConfirmNtf.Types.Member> mems_ = new pbc::RepeatedField<global::Packet.CmdCookPrepareConfirmNtf.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdCookPrepareConfirmNtf.Types.Member> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdCookPrepareConfirmNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Member : pb::IMessage {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private int state_;
        /// <summary>
        /// -1未投， 0=拒绝， 1=同意
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                State = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdCookPrepareConfirmOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookPrepareConfirmOpReq> _parser = new pb::MessageParser<CmdCookPrepareConfirmOpReq>(() => new CmdCookPrepareConfirmOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookPrepareConfirmOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    /// 0=拒绝， 1=同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookExchangeReq> _parser = new pb::MessageParser<CmdCookExchangeReq>(() => new CmdCookExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookExchangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 1;
    private uint targetIndex_;
    /// <summary>
    /// 0~2 从上到下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookExchangeConfirmNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookExchangeConfirmNtf> _parser = new pb::MessageParser<CmdCookExchangeConfirmNtf>(() => new CmdCookExchangeConfirmNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookExchangeConfirmNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "fromId" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///发起人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private ulong targetId_;
    /// <summary>
    ///目标人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "cookIndex" field.</summary>
    public const int CookIndexFieldNumber = 3;
    private uint cookIndex_;
    /// <summary>
    ///该玩家当前顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookIndex {
      get { return cookIndex_; }
      set {
        cookIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      if (TargetId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetId);
      }
      if (CookIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CookIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      if (CookIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetId = input.ReadUInt64();
            break;
          }
          case 24: {
            CookIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookExchangeOpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookExchangeOpReq> _parser = new pb::MessageParser<CmdCookExchangeOpReq>(() => new CmdCookExchangeOpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookExchangeOpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    /// 0=拒绝， 1=同意
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookExchangeRefuseNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookExchangeRefuseNtf> _parser = new pb::MessageParser<CmdCookExchangeRefuseNtf>(() => new CmdCookExchangeRefuseNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookExchangeRefuseNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private ulong targetId_;
    /// <summary>
    ///目标人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookExchangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookExchangeNtf> _parser = new pb::MessageParser<CmdCookExchangeNtf>(() => new CmdCookExchangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookExchangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "fromId" field.</summary>
    public const int FromIdFieldNumber = 1;
    private ulong fromId_;
    /// <summary>
    ///发起人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CookStage> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CookStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookStage> mems_ = new pbc::RepeatedField<global::Packet.CookStage>();
    /// <summary>
    ///各阶段玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookStage> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FromId);
      }
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromId);
      }
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt64();
            break;
          }
          case 18: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookSelectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookSelectReq> _parser = new pb::MessageParser<CmdCookSelectReq>(() => new CmdCookSelectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookSelectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    /// <summary>
    ///料理表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookSelectNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookSelectNtf> _parser = new pb::MessageParser<CmdCookSelectNtf>(() => new CmdCookSelectNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookSelectNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "mems" field.</summary>
    public const int MemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CookStage> _repeated_mems_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CookStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookStage> mems_ = new pbc::RepeatedField<global::Packet.CookStage>();
    /// <summary>
    ///各阶段玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookStage> Mems {
      get { return mems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      mems_.WriteTo(output, _repeated_mems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      size += mems_.CalculateSize(_repeated_mems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 18: {
            mems_.AddEntriesFrom(input, _repeated_mems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCookReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCookReq> _parser = new pb::MessageParser<CmdCookCookReq>(() => new CmdCookCookReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCookReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookType" field.</summary>
    public const int CookTypeFieldNumber = 1;
    private uint cookType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookType {
      get { return cookType_; }
      set {
        cookType_ = value;
      }
    }

    /// <summary>Field number for the "freeCook" field.</summary>
    public const int FreeCookFieldNumber = 2;
    private bool freeCook_;
    /// <summary>
    ///是否自由烹饪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeCook {
      get { return freeCook_; }
      set {
        freeCook_ = value;
      }
    }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 3;
    private uint cookId_;
    /// <summary>
    ///料理表id，（若为自由烹饪，上报匹配的料理表id， 未找到对应的填0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CmdCookCookReq.Types.FreeStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CmdCookCookReq.Types.FreeStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdCookCookReq.Types.FreeStage> stages_ = new pbc::RepeatedField<global::Packet.CmdCookCookReq.Types.FreeStage>();
    /// <summary>
    ///若为自由烹饪，需填充每一阶段厨具和食材,否则留空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdCookCookReq.Types.FreeStage> Stages {
      get { return stages_; }
    }

    /// <summary>Field number for the "multiNum" field.</summary>
    public const int MultiNumFieldNumber = 5;
    private uint multiNum_;
    /// <summary>
    ///单次烹饪默认填1， 批量烹饪填充次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MultiNum {
      get { return multiNum_; }
      set {
        multiNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookType);
      }
      if (FreeCook != false) {
        output.WriteRawTag(16);
        output.WriteBool(FreeCook);
      }
      if (CookId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CookId);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
      if (MultiNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MultiNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookType);
      }
      if (FreeCook != false) {
        size += 1 + 1;
      }
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      if (MultiNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MultiNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookType = input.ReadUInt32();
            break;
          }
          case 16: {
            FreeCook = input.ReadBool();
            break;
          }
          case 24: {
            CookId = input.ReadUInt32();
            break;
          }
          case 34: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
          case 40: {
            MultiNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdCookCookReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class FreeStage : pb::IMessage {
        private static readonly pb::MessageParser<FreeStage> _parser = new pb::MessageParser<FreeStage>(() => new FreeStage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FreeStage> Parser { get { return _parser; } }

        /// <summary>Field number for the "toolId" field.</summary>
        public const int ToolIdFieldNumber = 1;
        private uint toolId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ToolId {
          get { return toolId_; }
          set {
            toolId_ = value;
          }
        }

        /// <summary>Field number for the "foodIds" field.</summary>
        public const int FoodIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_foodIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> foodIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> FoodIds {
          get { return foodIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ToolId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(ToolId);
          }
          foodIds_.WriteTo(output, _repeated_foodIds_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ToolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToolId);
          }
          size += foodIds_.CalculateSize(_repeated_foodIds_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ToolId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                foodIds_.AddEntriesFrom(input, _repeated_foodIds_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdCookCookNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCookNtf> _parser = new pb::MessageParser<CmdCookCookNtf>(() => new CmdCookCookNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCookNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookType" field.</summary>
    public const int CookTypeFieldNumber = 1;
    private uint cookType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookType {
      get { return cookType_; }
      set {
        cookType_ = value;
      }
    }

    /// <summary>Field number for the "freeCook" field.</summary>
    public const int FreeCookFieldNumber = 2;
    private bool freeCook_;
    /// <summary>
    ///是否自由烹饪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeCook {
      get { return freeCook_; }
      set {
        freeCook_ = value;
      }
    }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 3;
    private uint cookId_;
    /// <summary>
    /// =0为失败的料理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CookStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CookStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.CookStage> stages_ = new pbc::RepeatedField<global::Packet.CookStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CookStage> Stages {
      get { return stages_; }
    }

    /// <summary>Field number for the "multiNum" field.</summary>
    public const int MultiNumFieldNumber = 5;
    private uint multiNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MultiNum {
      get { return multiNum_; }
      set {
        multiNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookType);
      }
      if (FreeCook != false) {
        output.WriteRawTag(16);
        output.WriteBool(FreeCook);
      }
      if (CookId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CookId);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
      if (MultiNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MultiNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookType);
      }
      if (FreeCook != false) {
        size += 1 + 1;
      }
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      if (MultiNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MultiNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookType = input.ReadUInt32();
            break;
          }
          case 16: {
            FreeCook = input.ReadBool();
            break;
          }
          case 24: {
            CookId = input.ReadUInt32();
            break;
          }
          case 34: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
          case 40: {
            MultiNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookFireOnReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookFireOnReq> _parser = new pb::MessageParser<CmdCookFireOnReq>(() => new CmdCookFireOnReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookFireOnReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdCookFireOnNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookFireOnNtf> _parser = new pb::MessageParser<CmdCookFireOnNtf>(() => new CmdCookFireOnNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookFireOnNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "cookIndex" field.</summary>
    public const int CookIndexFieldNumber = 2;
    private uint cookIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookIndex {
      get { return cookIndex_; }
      set {
        cookIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (CookIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CookIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (CookIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            CookIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookFireOffReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookFireOffReq> _parser = new pb::MessageParser<CmdCookFireOffReq>(() => new CmdCookFireOffReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookFireOffReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fireValue" field.</summary>
    public const int FireValueFieldNumber = 1;
    private uint fireValue_;
    /// <summary>
    ///当前火力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FireValue {
      get { return fireValue_; }
      set {
        fireValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FireValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FireValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FireValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FireValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FireValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookFireOffNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookFireOffNtf> _parser = new pb::MessageParser<CmdCookFireOffNtf>(() => new CmdCookFireOffNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookFireOffNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "cookIndex" field.</summary>
    public const int CookIndexFieldNumber = 2;
    private uint cookIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookIndex {
      get { return cookIndex_; }
      set {
        cookIndex_ = value;
      }
    }

    /// <summary>Field number for the "fireValue" field.</summary>
    public const int FireValueFieldNumber = 3;
    private uint fireValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FireValue {
      get { return fireValue_; }
      set {
        fireValue_ = value;
      }
    }

    /// <summary>Field number for the "stageScore" field.</summary>
    public const int StageScoreFieldNumber = 4;
    private uint stageScore_;
    /// <summary>
    ///当前阶段评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageScore {
      get { return stageScore_; }
      set {
        stageScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (CookIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CookIndex);
      }
      if (FireValue != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FireValue);
      }
      if (StageScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StageScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (CookIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookIndex);
      }
      if (FireValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FireValue);
      }
      if (StageScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            CookIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            FireValue = input.ReadUInt32();
            break;
          }
          case 32: {
            StageScore = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCancelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCancelReq> _parser = new pb::MessageParser<CmdCookCancelReq>(() => new CmdCookCancelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCancelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cliData" field.</summary>
    public const int CliDataFieldNumber = 1;
    private uint cliData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CliData {
      get { return cliData_; }
      set {
        cliData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CliData != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CliData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CliData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CliData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CliData = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCancelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCancelNtf> _parser = new pb::MessageParser<CmdCookCancelNtf>(() => new CmdCookCancelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCancelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///取消的人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "cliData" field.</summary>
    public const int CliDataFieldNumber = 2;
    private uint cliData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CliData {
      get { return cliData_; }
      set {
        cliData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (CliData != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CliData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (CliData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CliData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            CliData = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookCookEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookCookEndNtf> _parser = new pb::MessageParser<CmdCookCookEndNtf>(() => new CmdCookCookEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookCookEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "freeCook" field.</summary>
    public const int FreeCookFieldNumber = 1;
    private bool freeCook_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeCook {
      get { return freeCook_; }
      set {
        freeCook_ = value;
      }
    }

    /// <summary>Field number for the "multi" field.</summary>
    public const int MultiFieldNumber = 2;
    private bool multi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Multi {
      get { return multi_; }
      set {
        multi_ = value;
      }
    }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 5;
    private uint cookId_;
    /// <summary>
    ///本次制作的食谱（可能为0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "lastCookId" field.</summary>
    public const int LastCookIdFieldNumber = 3;
    private uint lastCookId_;
    /// <summary>
    ///单人或多人上次食谱烹饪id（可能为0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastCookId {
      get { return lastCookId_; }
      set {
        lastCookId_ = value;
      }
    }

    /// <summary>Field number for the "cookScore" field.</summary>
    public const int CookScoreFieldNumber = 4;
    private uint cookScore_;
    /// <summary>
    ///评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookScore {
      get { return cookScore_; }
      set {
        cookScore_ = value;
      }
    }

    /// <summary>Field number for the "forceEnd" field.</summary>
    public const int ForceEndFieldNumber = 6;
    private bool forceEnd_;
    /// <summary>
    ///强制结束（需关闭)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceEnd {
      get { return forceEnd_; }
      set {
        forceEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FreeCook != false) {
        output.WriteRawTag(8);
        output.WriteBool(FreeCook);
      }
      if (Multi != false) {
        output.WriteRawTag(16);
        output.WriteBool(Multi);
      }
      if (LastCookId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastCookId);
      }
      if (CookScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CookScore);
      }
      if (CookId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CookId);
      }
      if (ForceEnd != false) {
        output.WriteRawTag(48);
        output.WriteBool(ForceEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCook != false) {
        size += 1 + 1;
      }
      if (Multi != false) {
        size += 1 + 1;
      }
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      if (LastCookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastCookId);
      }
      if (CookScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookScore);
      }
      if (ForceEnd != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FreeCook = input.ReadBool();
            break;
          }
          case 16: {
            Multi = input.ReadBool();
            break;
          }
          case 24: {
            LastCookId = input.ReadUInt32();
            break;
          }
          case 32: {
            CookScore = input.ReadUInt32();
            break;
          }
          case 40: {
            CookId = input.ReadUInt32();
            break;
          }
          case 48: {
            ForceEnd = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookReturnPrepareReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookReturnPrepareReq> _parser = new pb::MessageParser<CmdCookReturnPrepareReq>(() => new CmdCookReturnPrepareReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookReturnPrepareReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdCookReturnPrepareNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookReturnPrepareNtf> _parser = new pb::MessageParser<CmdCookReturnPrepareNtf>(() => new CmdCookReturnPrepareNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookReturnPrepareNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdCookUseingFoodNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookUseingFoodNtf> _parser = new pb::MessageParser<CmdCookUseingFoodNtf>(() => new CmdCookUseingFoodNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookUseingFoodNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "food" field.</summary>
    public const int FoodFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdCookUseingFoodNtf.Types.Food> _repeated_food_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdCookUseingFoodNtf.Types.Food.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdCookUseingFoodNtf.Types.Food> food_ = new pbc::RepeatedField<global::Packet.CmdCookUseingFoodNtf.Types.Food>();
    /// <summary>
    ///使用的料理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdCookUseingFoodNtf.Types.Food> Food {
      get { return food_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      food_.WriteTo(output, _repeated_food_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += food_.CalculateSize(_repeated_food_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            food_.AddEntriesFrom(input, _repeated_food_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdCookUseingFoodNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Food : pb::IMessage {
        private static readonly pb::MessageParser<Food> _parser = new pb::MessageParser<Food>(() => new Food());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Food> Parser { get { return _parser; } }

        /// <summary>Field number for the "foodId" field.</summary>
        public const int FoodIdFieldNumber = 1;
        private uint foodId_;
        /// <summary>
        ///道具id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint FoodId {
          get { return foodId_; }
          set {
            foodId_ = value;
          }
        }

        /// <summary>Field number for the "endTime" field.</summary>
        public const int EndTimeFieldNumber = 2;
        private uint endTime_;
        /// <summary>
        ///料理结束时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FoodId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FoodId);
          }
          if (EndTime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(EndTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FoodId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodId);
          }
          if (EndTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FoodId = input.ReadUInt32();
                break;
              }
              case 16: {
                EndTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///使用变大料理通知(角色视野列表广播)
  /// </summary>
  public sealed class CmdCookUseFoodStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookUseFoodStateNtf> _parser = new pb::MessageParser<CmdCookUseFoodStateNtf>(() => new CmdCookUseFoodStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookUseFoodStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "foodId" field.</summary>
    public const int FoodIdFieldNumber = 1;
    private uint foodId_;
    /// <summary>
    ///道具id（id为0代表取消该效果）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FoodId {
      get { return foodId_; }
      set {
        foodId_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///操作角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FoodId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FoodId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FoodId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///使用料理结束
  /// </summary>
  public sealed class CmdCookUseFoodEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookUseFoodEndReq> _parser = new pb::MessageParser<CmdCookUseFoodEndReq>(() => new CmdCookUseFoodEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookUseFoodEndReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "foodId" field.</summary>
    public const int FoodIdFieldNumber = 1;
    private uint foodId_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FoodId {
      get { return foodId_; }
      set {
        foodId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FoodId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FoodId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FoodId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoodId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FoodId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookWatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookWatchReq> _parser = new pb::MessageParser<CmdCookWatchReq>(() => new CmdCookWatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookWatchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 2;
    private bool watch_;
    /// <summary>
    ///关注、取消
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      if (Watch != false) {
        output.WriteRawTag(16);
        output.WriteBool(Watch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      if (Watch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 16: {
            Watch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdCookWatchRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdCookWatchRes> _parser = new pb::MessageParser<CmdCookWatchRes>(() => new CmdCookWatchRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdCookWatchRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "cookId" field.</summary>
    public const int CookIdFieldNumber = 1;
    private uint cookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CookId {
      get { return cookId_; }
      set {
        cookId_ = value;
      }
    }

    /// <summary>Field number for the "watch" field.</summary>
    public const int WatchFieldNumber = 2;
    private bool watch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Watch {
      get { return watch_; }
      set {
        watch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CookId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CookId);
      }
      if (Watch != false) {
        output.WriteRawTag(16);
        output.WriteBool(Watch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CookId);
      }
      if (Watch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CookId = input.ReadUInt32();
            break;
          }
          case 16: {
            Watch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
