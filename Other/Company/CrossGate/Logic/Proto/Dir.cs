// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dir.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum ServerState {
    None = 0,
    Invalid = 10,
    /// <summary>
    ///RED
    /// </summary>
    Full = 1,
    /// <summary>
    ///YELLOW
    /// </summary>
    Busy = 2,
    /// <summary>
    ///GREEN
    /// </summary>
    Fluency = 3,
    RegFull = 4,
  }

  public enum ServerStatus {
    /// <summary>
    ///正常/白名单 用户进入服务器
    /// </summary>
    Open = 0,
    /// <summary>
    ///正常用户显示维护， 白名单用户可以进入维护服务器
    /// </summary>
    Maintaining = 1,
    /// <summary>
    /// 正常用户看不到， 白名单用户可以看到并进入服务器
    /// </summary>
    Allowlist = 2,
  }

  #endregion

  #region Messages
  public sealed class DirRoleInfo : pb::IMessage {
    private static readonly pb::MessageParser<DirRoleInfo> _parser = new pb::MessageParser<DirRoleInfo>(() => new DirRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DirRoleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "role_login" field.</summary>
    public const int RoleLoginFieldNumber = 2;
    private uint roleLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleLogin {
      get { return roleLogin_; }
      set {
        roleLogin_ = value;
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_server" field.</summary>
    public const int RoleServerFieldNumber = 4;
    private uint roleServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleServer {
      get { return roleServer_; }
      set {
        roleServer_ = value;
      }
    }

    /// <summary>Field number for the "role_lv" field.</summary>
    public const int RoleLvFieldNumber = 5;
    private uint roleLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleLv {
      get { return roleLv_; }
      set {
        roleLv_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    /// <summary>
    ///选的英雄id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 7;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleLogin != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleLogin);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoleName);
      }
      if (RoleServer != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RoleServer);
      }
      if (RoleLv != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoleLv);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
      if (Career != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Career);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleLogin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleLogin);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (RoleServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleServer);
      }
      if (RoleLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleLv);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleLogin = input.ReadUInt32();
            break;
          }
          case 26: {
            RoleName = input.ReadString();
            break;
          }
          case 32: {
            RoleServer = input.ReadUInt32();
            break;
          }
          case 40: {
            RoleLv = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 56: {
            Career = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerInfo : pb::IMessage {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "online_num" field.</summary>
    public const int OnlineNumFieldNumber = 2;
    private uint onlineNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineNum {
      get { return onlineNum_; }
      set {
        onlineNum_ = value;
      }
    }

    /// <summary>Field number for the "regist_num" field.</summary>
    public const int RegistNumFieldNumber = 3;
    private uint registNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RegistNum {
      get { return registNum_; }
      set {
        registNum_ = value;
      }
    }

    /// <summary>Field number for the "open_time" field.</summary>
    public const int OpenTimeFieldNumber = 4;
    private uint openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 5;
    private uint updateTime_;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。客户端可以留着逻辑 服务器不会设置了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "create_state" field.</summary>
    public const int CreateStateFieldNumber = 6;
    private uint createState_;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateState {
      get { return createState_; }
      set {
        createState_ = value;
      }
    }

    /// <summary>Field number for the "recommend_state" field.</summary>
    public const int RecommendStateFieldNumber = 7;
    private uint recommendState_;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecommendState {
      get { return recommendState_; }
      set {
        recommendState_ = value;
      }
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int ServerIpFieldNumber = 8;
    private string serverIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 9;
    private uint serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 10;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_state" field.</summary>
    public const int ServerStateFieldNumber = 11;
    private uint serverState_;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerState {
      get { return serverState_; }
      set {
        serverState_ = value;
      }
    }

    /// <summary>Field number for the "is_new_server" field.</summary>
    public const int IsNewServerFieldNumber = 12;
    private uint isNewServer_;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsNewServer {
      get { return isNewServer_; }
      set {
        isNewServer_ = value;
      }
    }

    /// <summary>Field number for the "dirsplayId" field.</summary>
    public const int DirsplayIdFieldNumber = 13;
    private pb::ByteString dirsplayId_ = pb::ByteString.Empty;
    /// <summary>
    ///以下字段都是快手设置得 到时候根据需求对接 也可能不需要
    ///服务器内存对像继承了这个类 这些属性先放这吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DirsplayId {
      get { return dirsplayId_; }
      set {
        dirsplayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 14;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 15;
    private pb::ByteString color_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_no" field.</summary>
    public const int GroupNoFieldNumber = 16;
    private pb::ByteString groupNo_ = pb::ByteString.Empty;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupNo {
      get { return groupNo_; }
      set {
        groupNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 17;
    private pb::ByteString tags_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 18;
    private pb::ByteString weight_ = pb::ByteString.Empty;
    /// <summary>
    ///废弃 功能 #103430【主干】【分组配置（需要下下周接入）】找运营要具体的需求文档。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Weight {
      get { return weight_; }
      set {
        weight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subTitle" field.</summary>
    public const int SubTitleFieldNumber = 19;
    private pb::ByteString subTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SubTitle {
      get { return subTitle_; }
      set {
        subTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mainTainMessage" field.</summary>
    public const int MainTainMessageFieldNumber = 20;
    private pb::ByteString mainTainMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MainTainMessage {
      get { return mainTainMessage_; }
      set {
        mainTainMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closereg" field.</summary>
    public const int CloseregFieldNumber = 21;
    private uint closereg_;
    /// <summary>
    ///1:关闭注册
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Closereg {
      get { return closereg_; }
      set {
        closereg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (OnlineNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OnlineNum);
      }
      if (RegistNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RegistNum);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OpenTime);
      }
      if (UpdateTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UpdateTime);
      }
      if (CreateState != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CreateState);
      }
      if (RecommendState != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RecommendState);
      }
      if (ServerIp.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ServerIp);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ServerPort);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ServerName);
      }
      if (ServerState != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ServerState);
      }
      if (IsNewServer != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IsNewServer);
      }
      if (DirsplayId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(DirsplayId);
      }
      if (Status != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Status);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Color);
      }
      if (GroupNo.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(GroupNo);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(Tags);
      }
      if (Weight.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(Weight);
      }
      if (SubTitle.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(SubTitle);
      }
      if (MainTainMessage.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(MainTainMessage);
      }
      if (Closereg != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Closereg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (OnlineNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineNum);
      }
      if (RegistNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegistNum);
      }
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenTime);
      }
      if (UpdateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdateTime);
      }
      if (CreateState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateState);
      }
      if (RecommendState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecommendState);
      }
      if (ServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIp);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerPort);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (ServerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerState);
      }
      if (IsNewServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsNewServer);
      }
      if (DirsplayId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DirsplayId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Color);
      }
      if (GroupNo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(GroupNo);
      }
      if (Tags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Tags);
      }
      if (Weight.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Weight);
      }
      if (SubTitle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SubTitle);
      }
      if (MainTainMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MainTainMessage);
      }
      if (Closereg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Closereg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 16: {
            OnlineNum = input.ReadUInt32();
            break;
          }
          case 24: {
            RegistNum = input.ReadUInt32();
            break;
          }
          case 32: {
            OpenTime = input.ReadUInt32();
            break;
          }
          case 40: {
            UpdateTime = input.ReadUInt32();
            break;
          }
          case 48: {
            CreateState = input.ReadUInt32();
            break;
          }
          case 56: {
            RecommendState = input.ReadUInt32();
            break;
          }
          case 66: {
            ServerIp = input.ReadString();
            break;
          }
          case 72: {
            ServerPort = input.ReadUInt32();
            break;
          }
          case 82: {
            ServerName = input.ReadString();
            break;
          }
          case 88: {
            ServerState = input.ReadUInt32();
            break;
          }
          case 96: {
            IsNewServer = input.ReadUInt32();
            break;
          }
          case 106: {
            DirsplayId = input.ReadBytes();
            break;
          }
          case 112: {
            Status = input.ReadUInt32();
            break;
          }
          case 122: {
            Color = input.ReadBytes();
            break;
          }
          case 130: {
            GroupNo = input.ReadBytes();
            break;
          }
          case 138: {
            Tags = input.ReadBytes();
            break;
          }
          case 146: {
            Weight = input.ReadBytes();
            break;
          }
          case 154: {
            SubTitle = input.ReadBytes();
            break;
          }
          case 162: {
            MainTainMessage = input.ReadBytes();
            break;
          }
          case 168: {
            Closereg = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerList : pb::IMessage {
    private static readonly pb::MessageParser<ServerList> _parser = new pb::MessageParser<ServerList>(() => new ServerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerList> Parser { get { return _parser; } }

    /// <summary>Field number for the "server_list" field.</summary>
    public const int ServerList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ServerInfo> _repeated_serverList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ServerInfo> serverList_ = new pbc::RepeatedField<global::Packet.ServerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ServerInfo> ServerList_ {
      get { return serverList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverList_.WriteTo(output, _repeated_serverList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverList_.CalculateSize(_repeated_serverList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ServerGroup : pb::IMessage {
    private static readonly pb::MessageParser<ServerGroup> _parser = new pb::MessageParser<ServerGroup>(() => new ServerGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGroup> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupName" field.</summary>
    public const int GroupNameFieldNumber = 1;
    private pb::ByteString groupName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sortNum" field.</summary>
    public const int SortNumFieldNumber = 2;
    private uint sortNum_;
    /// <summary>
    ///分组得排序 正序吧数字越大越在下
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortNum {
      get { return sortNum_; }
      set {
        sortNum_ = value;
      }
    }

    /// <summary>Field number for the "svrIds" field.</summary>
    public const int SvrIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_svrIds_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> svrIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///客户端严格按照这个顺序显示分组中的服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SvrIds {
      get { return svrIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(GroupName);
      }
      if (SortNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SortNum);
      }
      svrIds_.WriteTo(output, _repeated_svrIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupName);
      }
      if (SortNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortNum);
      }
      size += svrIds_.CalculateSize(_repeated_svrIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GroupName = input.ReadBytes();
            break;
          }
          case 16: {
            SortNum = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            svrIds_.AddEntriesFrom(input, _repeated_svrIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ServerGroups : pb::IMessage {
    private static readonly pb::MessageParser<ServerGroups> _parser = new pb::MessageParser<ServerGroups>(() => new ServerGroups());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerGroups> Parser { get { return _parser; } }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ServerGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ServerGroup.Parser);
    private readonly pbc::RepeatedField<global::Packet.ServerGroup> groups_ = new pbc::RepeatedField<global::Packet.ServerGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ServerGroup> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ServerListRes : pb::IMessage {
    private static readonly pb::MessageParser<ServerListRes> _parser = new pb::MessageParser<ServerListRes>(() => new ServerListRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerListRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "server_list" field.</summary>
    public const int ServerListFieldNumber = 1;
    private pb::ByteString serverList_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ServerList {
      get { return serverList_; }
      set {
        serverList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "json_server_list" field.</summary>
    public const int JsonServerListFieldNumber = 3;
    private global::Packet.ServerList jsonServerList_;
    /// <summary>
    ///map&lt;uint64, DirRoleInfo> roles = 2;   // 废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ServerList JsonServerList {
      get { return jsonServerList_; }
      set {
        jsonServerList_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.DirRoleInfo> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.DirRoleInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.DirRoleInfo> roles_ = new pbc::RepeatedField<global::Packet.DirRoleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.DirRoleInfo> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "server_now" field.</summary>
    public const int ServerNowFieldNumber = 5;
    private uint serverNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerNow {
      get { return serverNow_; }
      set {
        serverNow_ = value;
      }
    }

    /// <summary>Field number for the "sever_list2" field.</summary>
    public const int SeverList2FieldNumber = 6;
    private global::Packet.ServerList severList2_;
    /// <summary>
    ///特殊的服务器了服务器列表 客户端收到以后跟上边1字段反序列化之后合成一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ServerList SeverList2 {
      get { return severList2_; }
      set {
        severList2_ = value;
      }
    }

    /// <summary>Field number for the "groupInfo" field.</summary>
    public const int GroupInfoFieldNumber = 7;
    private pb::ByteString groupInfo_ = pb::ByteString.Empty;
    /// <summary>
    ///ServerGroups序列化之后的bytes 分组信息 按理说运营应该配置了所有的服务器 如果上边服务器不在任何一个组里，快手说不显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "json_group_list" field.</summary>
    public const int JsonGroupListFieldNumber = 8;
    private global::Packet.ServerGroups jsonGroupList_;
    /// <summary>
    ///此字段客户端忽略
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ServerGroups JsonGroupList {
      get { return jsonGroupList_; }
      set {
        jsonGroupList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerList.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ServerList);
      }
      if (jsonServerList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(JsonServerList);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (ServerNow != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServerNow);
      }
      if (severList2_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SeverList2);
      }
      if (GroupInfo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(GroupInfo);
      }
      if (jsonGroupList_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(JsonGroupList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerList);
      }
      if (jsonServerList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JsonServerList);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (ServerNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerNow);
      }
      if (severList2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeverList2);
      }
      if (GroupInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupInfo);
      }
      if (jsonGroupList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JsonGroupList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServerList = input.ReadBytes();
            break;
          }
          case 26: {
            if (jsonServerList_ == null) {
              jsonServerList_ = new global::Packet.ServerList();
            }
            input.ReadMessage(jsonServerList_);
            break;
          }
          case 34: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 40: {
            ServerNow = input.ReadUInt32();
            break;
          }
          case 50: {
            if (severList2_ == null) {
              severList2_ = new global::Packet.ServerList();
            }
            input.ReadMessage(severList2_);
            break;
          }
          case 58: {
            GroupInfo = input.ReadBytes();
            break;
          }
          case 66: {
            if (jsonGroupList_ == null) {
              jsonGroupList_ = new global::Packet.ServerGroups();
            }
            input.ReadMessage(jsonGroupList_);
            break;
          }
        }
      }
    }

  }

  public sealed class AccountLoginRes : pb::IMessage {
    private static readonly pb::MessageParser<AccountLoginRes> _parser = new pb::MessageParser<AccountLoginRes>(() => new AccountLoginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountLoginRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverlist" field.</summary>
    public const int ServerlistFieldNumber = 2;
    private global::Packet.ServerListRes serverlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ServerListRes Serverlist {
      get { return serverlist_; }
      set {
        serverlist_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 4;
    private uint ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "errmsg" field.</summary>
    public const int ErrmsgFieldNumber = 5;
    private pb::ByteString errmsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Errmsg {
      get { return errmsg_; }
      set {
        errmsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extensiondata" field.</summary>
    public const int ExtensiondataFieldNumber = 6;
    private pb::ByteString extensiondata_ = pb::ByteString.Empty;
    /// <summary>
    ///额外字段 再转给服务器 用string 省的以后还需要加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Extensiondata {
      get { return extensiondata_; }
      set {
        extensiondata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "htdata" field.</summary>
    public const int HtdataFieldNumber = 7;
    private pb::ByteString htdata_ = pb::ByteString.Empty;
    /// <summary>
    ///港台sdk验证返回数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Htdata {
      get { return htdata_; }
      set {
        htdata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (serverlist_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Serverlist);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ret);
      }
      if (Errmsg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Errmsg);
      }
      if (Extensiondata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Extensiondata);
      }
      if (Htdata.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Htdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (serverlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Serverlist);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (Errmsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Errmsg);
      }
      if (Extensiondata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Extensiondata);
      }
      if (Htdata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Htdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            if (serverlist_ == null) {
              serverlist_ = new global::Packet.ServerListRes();
            }
            input.ReadMessage(serverlist_);
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 32: {
            Ret = input.ReadUInt32();
            break;
          }
          case 42: {
            Errmsg = input.ReadBytes();
            break;
          }
          case 50: {
            Extensiondata = input.ReadBytes();
            break;
          }
          case 58: {
            Htdata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class LoginNoticeRes : pb::IMessage {
    private static readonly pb::MessageParser<LoginNoticeRes> _parser = new pb::MessageParser<LoginNoticeRes>(() => new LoginNoticeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginNoticeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    /// 0 成功 1失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "noticeList" field.</summary>
    public const int NoticeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.LoginNoticeRes.Types.NoticeUnit> _repeated_noticeList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.LoginNoticeRes.Types.NoticeUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.LoginNoticeRes.Types.NoticeUnit> noticeList_ = new pbc::RepeatedField<global::Packet.LoginNoticeRes.Types.NoticeUnit>();
    /// <summary>
    /// 登录公告列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.LoginNoticeRes.Types.NoticeUnit> NoticeList {
      get { return noticeList_; }
    }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 3;
    private pb::ByteString errMsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
      noticeList_.WriteTo(output, _repeated_noticeList_codec);
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ErrMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      size += noticeList_.CalculateSize(_repeated_noticeList_codec);
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ErrMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
          case 18: {
            noticeList_.AddEntriesFrom(input, _repeated_noticeList_codec);
            break;
          }
          case 26: {
            ErrMsg = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LoginNoticeRes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class NoticeUnit : pb::IMessage {
        private static readonly pb::MessageParser<NoticeUnit> _parser = new pb::MessageParser<NoticeUnit>(() => new NoticeUnit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NoticeUnit> Parser { get { return _parser; } }

        /// <summary>Field number for the "noticeId" field.</summary>
        public const int NoticeIdFieldNumber = 1;
        private pb::ByteString noticeId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString NoticeId {
          get { return noticeId_; }
          set {
            noticeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private pb::ByteString title_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 3;
        private pb::ByteString content_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "imgUrl" field.</summary>
        public const int ImgUrlFieldNumber = 4;
        private pb::ByteString imgUrl_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ImgUrl {
          get { return imgUrl_; }
          set {
            imgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 5;
        private uint weight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }

        /// <summary>Field number for the "startTime" field.</summary>
        public const int StartTimeFieldNumber = 6;
        private uint startTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        /// <summary>Field number for the "endTime" field.</summary>
        public const int EndTimeFieldNumber = 7;
        private uint endTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NoticeId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(NoticeId);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Title);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Content);
          }
          if (ImgUrl.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(ImgUrl);
          }
          if (Weight != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Weight);
          }
          if (StartTime != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(StartTime);
          }
          if (EndTime != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(EndTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NoticeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(NoticeId);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Title);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
          }
          if (ImgUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImgUrl);
          }
          if (Weight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
          }
          if (StartTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
          }
          if (EndTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                NoticeId = input.ReadBytes();
                break;
              }
              case 18: {
                Title = input.ReadBytes();
                break;
              }
              case 26: {
                Content = input.ReadBytes();
                break;
              }
              case 34: {
                ImgUrl = input.ReadBytes();
                break;
              }
              case 40: {
                Weight = input.ReadUInt32();
                break;
              }
              case 48: {
                StartTime = input.ReadUInt32();
                break;
              }
              case 56: {
                EndTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
