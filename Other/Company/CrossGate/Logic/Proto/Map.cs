// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum TrigerMonsterCondID {
    None = 0,
    HasQuest = 10001,
    DayNight = 10011,
    Weather = 10021,
    HasBuff = 10031,
    HasItem = 10041,
    ComQuest = 10051,
    ReachCond = 10061,
  }

  public enum CmdMap {
    None = 0,
    AddObjNtf = 1301,
    RemoveObjNtf = 1302,
    RoleMoveReq = 1303,
    RoleMoveCorrect = 1304,
    RoleChgMapReq = 1305,
    RoleEnterNtf = 1307,
    RoleMoveNtf = 1308,
    /// <summary>
    ///请求传送地图(废弃)
    /// </summary>
    TeleportMapReq = 1309,
    TeleportMapRes = 1310,
    /// <summary>
    /// 地图加载完成
    /// </summary>
    LoadOkrpt = 1311,
    NpcTelReq = 1312,
    /// <summary>
    ///同地图的瞬移
    /// </summary>
    SameMapTelNtf = 1313,
    /// <summary>
    ///one season weather ntf
    /// </summary>
    WeatherNtf = 1316,
    /// <summary>
    ///传送失败通知
    /// </summary>
    TeleErrNtf = 1317,
    ChangeRoleCareerRankNtf = 1318,
    ChangeTeamLogoNtf = 1319,
    ChangeMountNtf = 1320,
    ChangeFollowPetNtf = 1321,
    ChangeTeamNtf = 1322,
    ChangeRoleSignNtf = 1323,
    ChangeRoleMoveSpeedNtf = 1324,
    /// <summary>
    /// 请求玩家动作
    /// </summary>
    RoleActionReq = 1325,
    /// <summary>
    /// 通知玩家动作
    /// </summary>
    RoleActionNtf = 1326,
    /// <summary>
    /// 通知玩家持有的族战资源
    /// </summary>
    GuildBattleResourceNtf = 1327,
    /// <summary>
    /// 请求离开副本地图
    /// </summary>
    LeaveCopyMapReq = 1328,
    /// <summary>
    /// 通知玩家族战中队伍数据显示
    /// </summary>
    GuildBattleMapTeamDataNtf = 1329,
    /// <summary>
    /// 通知更新地图家族信息
    /// </summary>
    UpdateMapGuildInfoNtf = 1330,
    /// <summary>
    ///请求读地图信件(没有返回)
    /// </summary>
    ReadMapLetterReq = 1331,
    /// <summary>
    ///请求切资源页签
    /// </summary>
    ChangeResourcePageReq = 1332,
    /// <summary>
    ///推送角色地图数据
    /// </summary>
    RoleMapInfoNtf = 1333,
    /// <summary>
    ///玩家改名同步
    /// </summary>
    RoleRenameNtf = 1334,
    /// <summary>
    ///更新角色勇者团地图全量信息(入团)
    /// </summary>
    UpdateRoleBgroupInfoNtf = 1335,
    /// <summary>
    ///更新角色勇者团地图信息(退团)
    /// </summary>
    UpdateRoleBgroupQuitNtf = 1336,
    /// <summary>
    ///更新角色勇者团地图职位信息
    /// </summary>
    UpdateRoleBgroupPosNtf = 1337,
    /// <summary>
    ///更新角色勇者团地图名字信息
    /// </summary>
    UpdateRoleBgroupNameNtf = 1338,
    /// <summary>
    /// 通知其他玩家新增buff
    /// </summary>
    AddOtherRoleBuffNty = 1339,
    /// <summary>
    /// 通知移除其他玩家buff
    /// </summary>
    RemoveOtherRoleBuffNty = 1340,
    /// <summary>
    /// 通知玩家新增buff
    /// </summary>
    AddRoleBuffNty = 1341,
    /// <summary>
    /// 通知移除玩家buff
    /// </summary>
    RemoveRoleBuffNty = 1342,
    /// <summary>
    /// 通知玩家模块数据
    /// </summary>
    DataNty = 1343,
    /// <summary>
    /// 通知玩家回归标志
    /// </summary>
    RoleReturn = 1344,
  }

  public enum ErrorMap {
    None = 0,
    TeleporterNotExist = 1301,
    /// <summary>
    ///too far away from tel
    /// </summary>
    TeleporterTooFar = 1302,
    /// <summary>
    ///地图不存在
    /// </summary>
    NotExist = 1303,
    /// <summary>
    ///load 地图配置失败
    /// </summary>
    LoadBinError = 1304,
    /// <summary>
    ///未激活
    /// </summary>
    TeleporterNotAc = 1305,
    /// <summary>
    ///移动距离为0
    /// </summary>
    MoveLengthZero = 1306,
    /// <summary>
    ///移动太快
    /// </summary>
    MoveTooFast = 1307,
    /// <summary>
    ///（传送条件不满足）
    /// </summary>
    TeleporterErr = 1308,
    /// <summary>
    /// 不可传送状态
    /// </summary>
    CanNotTel = 1309,
    /// <summary>
    ///客户端移动作弊，请重新上下线
    /// </summary>
    MoveCheat = 1310,
    /// <summary>
    /// 请求角色动作太频繁
    /// </summary>
    ActionTooOften = 1311,
    /// <summary>
    /// 不能离开当前地图
    /// </summary>
    CanNotLeave = 1312,
  }

  public enum RoleSign {
    Null = 0,
    /// <summary>
    ///战斗中
    /// </summary>
    Battle = 1,
    /// <summary>
    ///采集中
    /// </summary>
    Resource = 2,
    /// <summary>
    ///观战中
    /// </summary>
    Watcher = 3,
    /// <summary>
    ///录像中
    /// </summary>
    PlayVideo = 4,
  }

  public enum MapRoleBuffType {
    None = 0,
    /// <summary>
    /// 族战-战斗保护
    /// </summary>
    GuildBattleProtection = 1,
  }

  #endregion

  #region Messages
  public sealed class MapRoleTeamInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapRoleTeamInfo> _parser = new pb::MessageParser<MapRoleTeamInfo>(() => new MapRoleTeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRoleTeamInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 2;
    private ulong leaderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "memNum" field.</summary>
    public const int MemNumFieldNumber = 3;
    private uint memNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemNum {
      get { return memNum_; }
      set {
        memNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LeaderId);
      }
      if (MemNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MemNum);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      if (MemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 16: {
            LeaderId = input.ReadUInt64();
            break;
          }
          case 24: {
            MemNum = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class MapRoleFashionInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapRoleFashionInfo> _parser = new pb::MessageParser<MapRoleFashionInfo>(() => new MapRoleFashionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRoleFashionInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 1;
    private uint fashionId_;
    /// <summary>
    ///穿戴的时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "dyeScheme" field.</summary>
    public const int DyeSchemeFieldNumber = 3;
    private global::Packet.DyeScheme dyeScheme_;
    /// <summary>
    ///染色方案 新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DyeScheme DyeScheme {
      get { return dyeScheme_; }
      set {
        dyeScheme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FashionId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FashionId);
      }
      if (dyeScheme_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DyeScheme);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (dyeScheme_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DyeScheme);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (dyeScheme_ == null) {
              dyeScheme_ = new global::Packet.DyeScheme();
            }
            input.ReadMessage(dyeScheme_);
            break;
          }
        }
      }
    }

  }

  public sealed class MapFashionList : pb::IMessage {
    private static readonly pb::MessageParser<MapFashionList> _parser = new pb::MessageParser<MapFashionList>(() => new MapFashionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapFashionList> Parser { get { return _parser; } }

    /// <summary>Field number for the "fashionInfos" field.</summary>
    public const int FashionInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionInfos_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionInfos {
      get { return fashionInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fashionInfos_.WriteTo(output, _repeated_fashionInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fashionInfos_.CalculateSize(_repeated_fashionInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fashionInfos_.AddEntriesFrom(input, _repeated_fashionInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MessageName : pb::IMessage {
    private static readonly pb::MessageParser<MessageName> _parser = new pb::MessageParser<MessageName>(() => new MessageName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 地图角色定义
  /// </summary>
  public sealed class MapRole : pb::IMessage {
    private static readonly pb::MessageParser<MapRole> _parser = new pb::MessageParser<MapRole>(() => new MapRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 4;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 5;
    private uint career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 7;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 8;
    private global::Packet.MapRoleTeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapRoleTeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "fashionInfo" field.</summary>
    public const int FashionInfoFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionInfo_codec
        = pb::FieldCodec.ForMessage(74, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionInfo_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    /// <summary>
    ///穿戴的时装信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionInfo {
      get { return fashionInfo_; }
    }

    /// <summary>Field number for the "weaponItemID" field.</summary>
    public const int WeaponItemIDFieldNumber = 10;
    private uint weaponItemID_;
    /// <summary>
    /// 主手武器的ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeaponItemID {
      get { return weaponItemID_; }
      set {
        weaponItemID_ = value;
      }
    }

    /// <summary>Field number for the "titleId" field.</summary>
    public const int TitleIdFieldNumber = 11;
    private uint titleId_;
    /// <summary>
    /// 称号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 13;
    private uint careerRank_;
    /// <summary>
    ///人物等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    /// <summary>Field number for the "teamLogo" field.</summary>
    public const int TeamLogoFieldNumber = 14;
    private uint teamLogo_;
    /// <summary>
    /// 队伍logo 队长显示 teamLogoId*10 + flag(1:满员 0:未满员)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamLogo {
      get { return teamLogo_; }
      set {
        teamLogo_ = value;
      }
    }

    /// <summary>Field number for the "mountInfoId" field.</summary>
    public const int MountInfoIdFieldNumber = 15;
    private uint mountInfoId_;
    /// <summary>
    ///坐骑InfoId 宠物infoId*10 + flag(1:满档 0:非满档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountInfoId {
      get { return mountInfoId_; }
      set {
        mountInfoId_ = value;
      }
    }

    /// <summary>Field number for the "scaleFoodId" field.</summary>
    public const int ScaleFoodIdFieldNumber = 17;
    private uint scaleFoodId_;
    /// <summary>
    ///uint32 mountUId = 16;//坐骑UId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScaleFoodId {
      get { return scaleFoodId_; }
      set {
        scaleFoodId_ = value;
      }
    }

    /// <summary>Field number for the "followPetInfo" field.</summary>
    public const int FollowPetInfoFieldNumber = 18;
    private uint followPetInfo_;
    /// <summary>
    ///跟随宠物信息 宠物infoId*10 + flag(1:满档 0:非满档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetInfo {
      get { return followPetInfo_; }
      set {
        followPetInfo_ = value;
      }
    }

    /// <summary>Field number for the "roleSign" field.</summary>
    public const int RoleSignFieldNumber = 20;
    private uint roleSign_;
    /// <summary>
    ///uint32 followPetUId = 19;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleSign {
      get { return roleSign_; }
      set {
        roleSign_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 21;
    private ulong moveSpeed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 22;
    private global::Packet.RoleAction action_;
    /// <summary>
    ///玩家动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "guildInfo" field.</summary>
    public const int GuildInfoFieldNumber = 23;
    private global::Packet.MapGuildInfo guildInfo_;
    /// <summary>
    /// 家族信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapGuildInfo GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "battleMapData" field.</summary>
    public const int BattleMapDataFieldNumber = 24;
    private global::Packet.GuildBattleMapData battleMapData_;
    /// <summary>
    /// 族战地图数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBattleMapData BattleMapData {
      get { return battleMapData_; }
      set {
        battleMapData_ = value;
      }
    }

    /// <summary>Field number for the "petSuitAppearance" field.</summary>
    public const int PetSuitAppearanceFieldNumber = 25;
    private uint petSuitAppearance_;
    /// <summary>
    ///跟随宠物套装InfoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSuitAppearance {
      get { return petSuitAppearance_; }
      set {
        petSuitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "mountPetSuitAppearance" field.</summary>
    public const int MountPetSuitAppearanceFieldNumber = 26;
    private uint mountPetSuitAppearance_;
    /// <summary>
    ///坐骑宠物套装InfoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountPetSuitAppearance {
      get { return mountPetSuitAppearance_; }
      set {
        mountPetSuitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "bgroupInfo" field.</summary>
    public const int BgroupInfoFieldNumber = 27;
    private global::Packet.MapBGroupInfo bgroupInfo_;
    /// <summary>
    ///勇者团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapBGroupInfo BgroupInfo {
      get { return bgroupInfo_; }
      set {
        bgroupInfo_ = value;
      }
    }

    /// <summary>Field number for the "otherBuffData" field.</summary>
    public const int OtherBuffDataFieldNumber = 28;
    private global::Packet.OtherRoleMapBuff otherBuffData_;
    /// <summary>
    /// 地图buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.OtherRoleMapBuff OtherBuffData {
      get { return otherBuffData_; }
      set {
        otherBuffData_ = value;
      }
    }

    /// <summary>Field number for the "followPetBuild" field.</summary>
    public const int FollowPetBuildFieldNumber = 29;
    private uint followPetBuild_;
    /// <summary>
    ///跟随宠物完美改造数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetBuild {
      get { return followPetBuild_; }
      set {
        followPetBuild_ = value;
      }
    }

    /// <summary>Field number for the "mountPetBuild" field.</summary>
    public const int MountPetBuildFieldNumber = 30;
    private uint mountPetBuild_;
    /// <summary>
    ///坐骑宠物完美改造数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountPetBuild {
      get { return mountPetBuild_; }
      set {
        mountPetBuild_ = value;
      }
    }

    /// <summary>Field number for the "isReturn" field.</summary>
    public const int IsReturnFieldNumber = 31;
    private bool isReturn_;
    /// <summary>
    ///玩家是否回归
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReturn {
      get { return isReturn_; }
      set {
        isReturn_ = value;
      }
    }

    /// <summary>Field number for the "followPetSoul" field.</summary>
    public const int FollowPetSoulFieldNumber = 32;
    private bool followPetSoul_;
    /// <summary>
    ///跟宠魂珠外显
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FollowPetSoul {
      get { return followPetSoul_; }
      set {
        followPetSoul_ = value;
      }
    }

    /// <summary>Field number for the "mountPetSoul" field.</summary>
    public const int MountPetSoulFieldNumber = 33;
    private bool mountPetSoul_;
    /// <summary>
    ///骑宠魂珠外显
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MountPetSoul {
      get { return mountPetSoul_; }
      set {
        mountPetSoul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (PosX != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PosY);
      }
      if (Career != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Career);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HeroId);
      }
      if (teamInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TeamInfo);
      }
      fashionInfo_.WriteTo(output, _repeated_fashionInfo_codec);
      if (WeaponItemID != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(WeaponItemID);
      }
      if (TitleId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TitleId);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CareerRank);
      }
      if (TeamLogo != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(TeamLogo);
      }
      if (MountInfoId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MountInfoId);
      }
      if (ScaleFoodId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ScaleFoodId);
      }
      if (FollowPetInfo != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(FollowPetInfo);
      }
      if (RoleSign != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(RoleSign);
      }
      if (MoveSpeed != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(MoveSpeed);
      }
      if (action_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Action);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GuildInfo);
      }
      if (battleMapData_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(BattleMapData);
      }
      if (PetSuitAppearance != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(PetSuitAppearance);
      }
      if (MountPetSuitAppearance != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(MountPetSuitAppearance);
      }
      if (bgroupInfo_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(BgroupInfo);
      }
      if (otherBuffData_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(OtherBuffData);
      }
      if (FollowPetBuild != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(FollowPetBuild);
      }
      if (MountPetBuild != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(MountPetBuild);
      }
      if (IsReturn != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsReturn);
      }
      if (FollowPetSoul != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(FollowPetSoul);
      }
      if (MountPetSoul != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(MountPetSoul);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Career);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      size += fashionInfo_.CalculateSize(_repeated_fashionInfo_codec);
      if (WeaponItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeaponItemID);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      if (TeamLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamLogo);
      }
      if (MountInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountInfoId);
      }
      if (ScaleFoodId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScaleFoodId);
      }
      if (FollowPetInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetInfo);
      }
      if (RoleSign != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RoleSign);
      }
      if (MoveSpeed != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MoveSpeed);
      }
      if (action_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (guildInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (battleMapData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BattleMapData);
      }
      if (PetSuitAppearance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PetSuitAppearance);
      }
      if (MountPetSuitAppearance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MountPetSuitAppearance);
      }
      if (bgroupInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BgroupInfo);
      }
      if (otherBuffData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OtherBuffData);
      }
      if (FollowPetBuild != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetBuild);
      }
      if (MountPetBuild != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MountPetBuild);
      }
      if (IsReturn != false) {
        size += 2 + 1;
      }
      if (FollowPetSoul != false) {
        size += 2 + 1;
      }
      if (MountPetSoul != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            PosX = input.ReadUInt32();
            break;
          }
          case 32: {
            PosY = input.ReadUInt32();
            break;
          }
          case 40: {
            Career = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 66: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Packet.MapRoleTeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 74: {
            fashionInfo_.AddEntriesFrom(input, _repeated_fashionInfo_codec);
            break;
          }
          case 80: {
            WeaponItemID = input.ReadUInt32();
            break;
          }
          case 88: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 104: {
            CareerRank = input.ReadUInt32();
            break;
          }
          case 112: {
            TeamLogo = input.ReadUInt32();
            break;
          }
          case 120: {
            MountInfoId = input.ReadUInt32();
            break;
          }
          case 136: {
            ScaleFoodId = input.ReadUInt32();
            break;
          }
          case 144: {
            FollowPetInfo = input.ReadUInt32();
            break;
          }
          case 160: {
            RoleSign = input.ReadUInt32();
            break;
          }
          case 168: {
            MoveSpeed = input.ReadUInt64();
            break;
          }
          case 178: {
            if (action_ == null) {
              action_ = new global::Packet.RoleAction();
            }
            input.ReadMessage(action_);
            break;
          }
          case 186: {
            if (guildInfo_ == null) {
              guildInfo_ = new global::Packet.MapGuildInfo();
            }
            input.ReadMessage(guildInfo_);
            break;
          }
          case 194: {
            if (battleMapData_ == null) {
              battleMapData_ = new global::Packet.GuildBattleMapData();
            }
            input.ReadMessage(battleMapData_);
            break;
          }
          case 200: {
            PetSuitAppearance = input.ReadUInt32();
            break;
          }
          case 208: {
            MountPetSuitAppearance = input.ReadUInt32();
            break;
          }
          case 218: {
            if (bgroupInfo_ == null) {
              bgroupInfo_ = new global::Packet.MapBGroupInfo();
            }
            input.ReadMessage(bgroupInfo_);
            break;
          }
          case 226: {
            if (otherBuffData_ == null) {
              otherBuffData_ = new global::Packet.OtherRoleMapBuff();
            }
            input.ReadMessage(otherBuffData_);
            break;
          }
          case 232: {
            FollowPetBuild = input.ReadUInt32();
            break;
          }
          case 240: {
            MountPetBuild = input.ReadUInt32();
            break;
          }
          case 248: {
            IsReturn = input.ReadBool();
            break;
          }
          case 256: {
            FollowPetSoul = input.ReadBool();
            break;
          }
          case 264: {
            MountPetSoul = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 家族信息
  /// </summary>
  public sealed class MapGuildInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapGuildInfo> _parser = new pb::MessageParser<MapGuildInfo>(() => new MapGuildInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapGuildInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    /// 家族职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guildId" field.</summary>
    public const int GuildIdFieldNumber = 3;
    private ulong guildId_;
    /// <summary>
    /// 家族id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GuildId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 24: {
            GuildId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///勇者团信息
  /// </summary>
  public sealed class MapBGroupInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapBGroupInfo> _parser = new pb::MessageParser<MapBGroupInfo>(() => new MapBGroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBGroupInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///勇者团Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    ///勇者团职务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///勇者团名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class MapNpc : pb::IMessage {
    private static readonly pb::MessageParser<MapNpc> _parser = new pb::MessageParser<MapNpc>(() => new MapNpc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapNpc> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 4;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "rotationY" field.</summary>
    public const int RotationYFieldNumber = 5;
    private float rotationY_;
    /// <summary>
    ///旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private uint width_;
    /// <summary>
    ///触发区域,客户端判断触发用。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 7;
    private uint height_;
    /// <summary>
    ///区域高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "offX" field.</summary>
    public const int OffXFieldNumber = 8;
    private int offX_;
    /// <summary>
    ///x偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffX {
      get { return offX_; }
      set {
        offX_ = value;
      }
    }

    /// <summary>Field number for the "offY" field.</summary>
    public const int OffYFieldNumber = 9;
    private int offY_;
    /// <summary>
    ///y偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffY {
      get { return offY_; }
      set {
        offY_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 10;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (PosX != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PosY);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotationY);
      }
      if (Width != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Height);
      }
      if (OffX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OffX);
      }
      if (OffY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OffY);
      }
      if (BattleId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (OffX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffX);
      }
      if (OffY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffY);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            PosX = input.ReadUInt32();
            break;
          }
          case 32: {
            PosY = input.ReadUInt32();
            break;
          }
          case 45: {
            RotationY = input.ReadFloat();
            break;
          }
          case 48: {
            Width = input.ReadUInt32();
            break;
          }
          case 56: {
            Height = input.ReadUInt32();
            break;
          }
          case 64: {
            OffX = input.ReadInt32();
            break;
          }
          case 72: {
            OffY = input.ReadInt32();
            break;
          }
          case 80: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapAddObjNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapAddObjNtf> _parser = new pb::MessageParser<CmdMapAddObjNtf>(() => new CmdMapAddObjNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapAddObjNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MapRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MapRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRole> roles_ = new pbc::RepeatedField<global::Packet.MapRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRole> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "npcs" field.</summary>
    public const int NpcsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.MapNpc> _repeated_npcs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.MapNpc.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapNpc> npcs_ = new pbc::RepeatedField<global::Packet.MapNpc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapNpc> Npcs {
      get { return npcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
      npcs_.WriteTo(output, _repeated_npcs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      size += npcs_.CalculateSize(_repeated_npcs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 18: {
            npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeRoleCareerRankNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeRoleCareerRankNtf> _parser = new pb::MessageParser<CmdMapChangeRoleCareerRankNtf>(() => new CmdMapChangeRoleCareerRankNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeRoleCareerRankNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "careerRank" field.</summary>
    public const int CareerRankFieldNumber = 2;
    private uint careerRank_;
    /// <summary>
    ///人物等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CareerRank {
      get { return careerRank_; }
      set {
        careerRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (CareerRank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CareerRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (CareerRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CareerRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            CareerRank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeTeamLogoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeTeamLogoNtf> _parser = new pb::MessageParser<CmdMapChangeTeamLogoNtf>(() => new CmdMapChangeTeamLogoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeTeamLogoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "teamLogo" field.</summary>
    public const int TeamLogoFieldNumber = 2;
    private uint teamLogo_;
    /// <summary>
    ///队伍logo 队长显示 teamLogoId*10 + flag(1:满员 0:未满员)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamLogo {
      get { return teamLogo_; }
      set {
        teamLogo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (TeamLogo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamLogo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (TeamLogo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamLogo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            TeamLogo = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeMountNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeMountNtf> _parser = new pb::MessageParser<CmdMapChangeMountNtf>(() => new CmdMapChangeMountNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeMountNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "mountPetInfoId" field.</summary>
    public const int MountPetInfoIdFieldNumber = 2;
    private uint mountPetInfoId_;
    /// <summary>
    /// 坐骑InfoID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountPetInfoId {
      get { return mountPetInfoId_; }
      set {
        mountPetInfoId_ = value;
      }
    }

    /// <summary>Field number for the "petSuitAppearance" field.</summary>
    public const int PetSuitAppearanceFieldNumber = 4;
    private uint petSuitAppearance_;
    /// <summary>
    ///uint32 mountPetUId = 3; // 坐骑UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSuitAppearance {
      get { return petSuitAppearance_; }
      set {
        petSuitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "mountPetBuild" field.</summary>
    public const int MountPetBuildFieldNumber = 5;
    private uint mountPetBuild_;
    /// <summary>
    ///坐骑宠物完美改造数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountPetBuild {
      get { return mountPetBuild_; }
      set {
        mountPetBuild_ = value;
      }
    }

    /// <summary>Field number for the "mountPetSoul" field.</summary>
    public const int MountPetSoulFieldNumber = 6;
    private bool mountPetSoul_;
    /// <summary>
    ///骑宠需要魂珠外观
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MountPetSoul {
      get { return mountPetSoul_; }
      set {
        mountPetSoul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (MountPetInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MountPetInfoId);
      }
      if (PetSuitAppearance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PetSuitAppearance);
      }
      if (MountPetBuild != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MountPetBuild);
      }
      if (MountPetSoul != false) {
        output.WriteRawTag(48);
        output.WriteBool(MountPetSoul);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (MountPetInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountPetInfoId);
      }
      if (PetSuitAppearance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSuitAppearance);
      }
      if (MountPetBuild != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountPetBuild);
      }
      if (MountPetSoul != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            MountPetInfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            PetSuitAppearance = input.ReadUInt32();
            break;
          }
          case 40: {
            MountPetBuild = input.ReadUInt32();
            break;
          }
          case 48: {
            MountPetSoul = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeFollowPetNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeFollowPetNtf> _parser = new pb::MessageParser<CmdMapChangeFollowPetNtf>(() => new CmdMapChangeFollowPetNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeFollowPetNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "followPetInfo" field.</summary>
    public const int FollowPetInfoFieldNumber = 2;
    private uint followPetInfo_;
    /// <summary>
    ///跟随宠物信息 宠物infoId*10 + flag(1:满档 0:非满档)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetInfo {
      get { return followPetInfo_; }
      set {
        followPetInfo_ = value;
      }
    }

    /// <summary>Field number for the "petSuitAppearance" field.</summary>
    public const int PetSuitAppearanceFieldNumber = 4;
    private uint petSuitAppearance_;
    /// <summary>
    ///uint32 followPetUId = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSuitAppearance {
      get { return petSuitAppearance_; }
      set {
        petSuitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "followPetBuild" field.</summary>
    public const int FollowPetBuildFieldNumber = 5;
    private uint followPetBuild_;
    /// <summary>
    ///跟随宠物完美改造数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FollowPetBuild {
      get { return followPetBuild_; }
      set {
        followPetBuild_ = value;
      }
    }

    /// <summary>Field number for the "followPetSoul" field.</summary>
    public const int FollowPetSoulFieldNumber = 6;
    private bool followPetSoul_;
    /// <summary>
    ///跟宠需要魂珠外观
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FollowPetSoul {
      get { return followPetSoul_; }
      set {
        followPetSoul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (FollowPetInfo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FollowPetInfo);
      }
      if (PetSuitAppearance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PetSuitAppearance);
      }
      if (FollowPetBuild != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FollowPetBuild);
      }
      if (FollowPetSoul != false) {
        output.WriteRawTag(48);
        output.WriteBool(FollowPetSoul);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (FollowPetInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetInfo);
      }
      if (PetSuitAppearance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSuitAppearance);
      }
      if (FollowPetBuild != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FollowPetBuild);
      }
      if (FollowPetSoul != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            FollowPetInfo = input.ReadUInt32();
            break;
          }
          case 32: {
            PetSuitAppearance = input.ReadUInt32();
            break;
          }
          case 40: {
            FollowPetBuild = input.ReadUInt32();
            break;
          }
          case 48: {
            FollowPetSoul = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeRoleMoveSpeedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeRoleMoveSpeedNtf> _parser = new pb::MessageParser<CmdMapChangeRoleMoveSpeedNtf>(() => new CmdMapChangeRoleMoveSpeedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeRoleMoveSpeedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 2;
    private ulong moveSpeed_;
    /// <summary>
    ///移动速度属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (MoveSpeed != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MoveSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (MoveSpeed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MoveSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            MoveSpeed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRemoveObjNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRemoveObjNtf> _parser = new pb::MessageParser<CmdMapRemoveObjNtf>(() => new CmdMapRemoveObjNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRemoveObjNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_role_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> role_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Role {
      get { return role_; }
    }

    /// <summary>Field number for the "npc" field.</summary>
    public const int NpcFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_npc_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> npc_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Npc {
      get { return npc_; }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private uint flag_;
    /// <summary>
    /// 1退出地图（只对npc有效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      role_.WriteTo(output, _repeated_role_codec);
      npc_.WriteTo(output, _repeated_npc_codec);
      if (Flag != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += role_.CalculateSize(_repeated_role_codec);
      size += npc_.CalculateSize(_repeated_npc_codec);
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            role_.AddEntriesFrom(input, _repeated_role_codec);
            break;
          }
          case 18:
          case 16: {
            npc_.AddEntriesFrom(input, _repeated_npc_codec);
            break;
          }
          case 24: {
            Flag = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeTeamNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeTeamNtf> _parser = new pb::MessageParser<CmdMapChangeTeamNtf>(() => new CmdMapChangeTeamNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeTeamNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 1;
    private global::Packet.MapRoleTeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapRoleTeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Packet.MapRoleTeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeRoleSignNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeRoleSignNtf> _parser = new pb::MessageParser<CmdMapChangeRoleSignNtf>(() => new CmdMapChangeRoleSignNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeRoleSignNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleSign" field.</summary>
    public const int RoleSignFieldNumber = 2;
    private uint roleSign_;
    /// <summary>
    ///角色标识 ref: enum RoleSign
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleSign {
      get { return roleSign_; }
      set {
        roleSign_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (RoleSign != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleSign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleSign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            RoleSign = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TeamMemMove : pb::IMessage {
    private static readonly pb::MessageParser<TeamMemMove> _parser = new pb::MessageParser<TeamMemMove>(() => new TeamMemMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemMove> Parser { get { return _parser; } }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadUInt32();
            break;
          }
          case 16: {
            PosY = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleMoveReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleMoveReq> _parser = new pb::MessageParser<CmdMapRoleMoveReq>(() => new CmdMapRoleMoveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleMoveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    /// <summary>
    ///ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "mempos" field.</summary>
    public const int MemposFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TeamMemMove> _repeated_mempos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TeamMemMove.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeamMemMove> mempos_ = new pbc::RepeatedField<global::Packet.TeamMemMove>();
    /// <summary>
    ///队友的移动坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeamMemMove> Mempos {
      get { return mempos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosY);
      }
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
      mempos_.WriteTo(output, _repeated_mempos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      size += mempos_.CalculateSize(_repeated_mempos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadUInt32();
            break;
          }
          case 16: {
            PosY = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
          case 34: {
            mempos_.AddEntriesFrom(input, _repeated_mempos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleMoveNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleMoveNtf> _parser = new pb::MessageParser<CmdMapRoleMoveNtf>(() => new CmdMapRoleMoveNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleMoveNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private uint posX_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private uint posY_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    /// <summary>
    ///废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleMoves" field.</summary>
    public const int RoleMovesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.CmdMapRoleMoveNtf.Types.MoveContent> _repeated_roleMoves_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.CmdMapRoleMoveNtf.Types.MoveContent.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdMapRoleMoveNtf.Types.MoveContent> roleMoves_ = new pbc::RepeatedField<global::Packet.CmdMapRoleMoveNtf.Types.MoveContent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdMapRoleMoveNtf.Types.MoveContent> RoleMoves {
      get { return roleMoves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosY);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      roleMoves_.WriteTo(output, _repeated_roleMoves_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      size += roleMoves_.CalculateSize(_repeated_roleMoves_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadUInt32();
            break;
          }
          case 16: {
            PosY = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 34: {
            roleMoves_.AddEntriesFrom(input, _repeated_roleMoves_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdMapRoleMoveNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class MoveContent : pb::IMessage {
        private static readonly pb::MessageParser<MoveContent> _parser = new pb::MessageParser<MoveContent>(() => new MoveContent());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MoveContent> Parser { get { return _parser; } }

        /// <summary>Field number for the "posX" field.</summary>
        public const int PosXFieldNumber = 1;
        private uint posX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosX {
          get { return posX_; }
          set {
            posX_ = value;
          }
        }

        /// <summary>Field number for the "posY" field.</summary>
        public const int PosYFieldNumber = 2;
        private uint posY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PosY {
          get { return posY_; }
          set {
            posY_ = value;
          }
        }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 3;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PosX != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PosX);
          }
          if (PosY != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PosY);
          }
          if (RoleId != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(RoleId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PosX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
          }
          if (PosY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
          }
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PosX = input.ReadUInt32();
                break;
              }
              case 16: {
                PosY = input.ReadUInt32();
                break;
              }
              case 24: {
                RoleId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdMapRoleMoveCorrect : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleMoveCorrect> _parser = new pb::MessageParser<CmdMapRoleMoveCorrect>(() => new CmdMapRoleMoveCorrect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleMoveCorrect> Parser { get { return _parser; } }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadUInt32();
            break;
          }
          case 16: {
            PosY = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleChgMapReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleChgMapReq> _parser = new pb::MessageParser<CmdMapRoleChgMapReq>(() => new CmdMapRoleChgMapReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleChgMapReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "teleporter" field.</summary>
    public const int TeleporterFieldNumber = 1;
    private uint teleporter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teleporter {
      get { return teleporter_; }
      set {
        teleporter_ = value;
      }
    }

    /// <summary>Field number for the "bUi" field.</summary>
    public const int BUiFieldNumber = 2;
    private bool bUi_;
    /// <summary>
    ///通过npc function传送(评审认为作弊影响不大， 服务器不需验证 )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BUi {
      get { return bUi_; }
      set {
        bUi_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private uint posX_;
    /// <summary>
    ///传送点位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 4;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Teleporter != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Teleporter);
      }
      if (BUi != false) {
        output.WriteRawTag(16);
        output.WriteBool(BUi);
      }
      if (PosX != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Teleporter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teleporter);
      }
      if (BUi != false) {
        size += 1 + 1;
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Teleporter = input.ReadUInt32();
            break;
          }
          case 16: {
            BUi = input.ReadBool();
            break;
          }
          case 24: {
            PosX = input.ReadUInt32();
            break;
          }
          case 32: {
            PosY = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleEnterNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleEnterNtf> _parser = new pb::MessageParser<CmdMapRoleEnterNtf>(() => new CmdMapRoleEnterNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleEnterNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    /// <summary>
    /// 地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 2;
    private uint posX_;
    /// <summary>
    /// 位置x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 3;
    private uint posY_;
    /// <summary>
    /// 位置y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 8;
    private bool first_;
    /// <summary>
    /// 是否是首次进入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosY);
      }
      if (First != false) {
        output.WriteRawTag(64);
        output.WriteBool(First);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (First != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
          case 16: {
            PosX = input.ReadUInt32();
            break;
          }
          case 24: {
            PosY = input.ReadUInt32();
            break;
          }
          case 64: {
            First = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapTeleportMapReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapTeleportMapReq> _parser = new pb::MessageParser<CmdMapTeleportMapReq>(() => new CmdMapTeleportMapReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapTeleportMapReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMapLoadOKRpt : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapLoadOKRpt> _parser = new pb::MessageParser<CmdMapLoadOKRpt>(() => new CmdMapLoadOKRpt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapLoadOKRpt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMapNpcTelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapNpcTelReq> _parser = new pb::MessageParser<CmdMapNpcTelReq>(() => new CmdMapNpcTelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapNpcTelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapSameMapTelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapSameMapTelNtf> _parser = new pb::MessageParser<CmdMapSameMapTelNtf>(() => new CmdMapSameMapTelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapSameMapTelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 2;
    private uint posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 3;
    private uint posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosY);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
          case 16: {
            PosX = input.ReadUInt32();
            break;
          }
          case 24: {
            PosY = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapWeatherNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapWeatherNtf> _parser = new pb::MessageParser<CmdMapWeatherNtf>(() => new CmdMapWeatherNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapWeatherNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "weathers" field.</summary>
    public const int WeathersFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_weathers_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> weathers_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///这一个季节的天气 + 下一个季节的第一个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Weathers {
      get { return weathers_; }
    }

    /// <summary>Field number for the "randomTime" field.</summary>
    public const int RandomTimeFieldNumber = 2;
    private uint randomTime_;
    /// <summary>
    ///服务器当地时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandomTime {
      get { return randomTime_; }
      set {
        randomTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      weathers_.WriteTo(output, _repeated_weathers_codec);
      if (RandomTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RandomTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += weathers_.CalculateSize(_repeated_weathers_codec);
      if (RandomTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            weathers_.AddEntriesFrom(input, _repeated_weathers_codec);
            break;
          }
          case 16: {
            RandomTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapTeleErrNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapTeleErrNtf> _parser = new pb::MessageParser<CmdMapTeleErrNtf>(() => new CmdMapTeleErrNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapTeleErrNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleInfo" field.</summary>
    public const int RoleInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdMapTeleErrNtf.Types.TeleInfo> _repeated_roleInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdMapTeleErrNtf.Types.TeleInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdMapTeleErrNtf.Types.TeleInfo> roleInfo_ = new pbc::RepeatedField<global::Packet.CmdMapTeleErrNtf.Types.TeleInfo>();
    /// <summary>
    ///不满足传送的人员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdMapTeleErrNtf.Types.TeleInfo> RoleInfo {
      get { return roleInfo_; }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 2;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "guildName" field.</summary>
    public const int GuildNameFieldNumber = 3;
    private pb::ByteString guildName_ = pb::ByteString.Empty;
    /// <summary>
    ///目的地家族名，mapId=家族领地时有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roleInfo_.WriteTo(output, _repeated_roleInfo_codec);
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MapId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GuildName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roleInfo_.CalculateSize(_repeated_roleInfo_codec);
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GuildName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roleInfo_.AddEntriesFrom(input, _repeated_roleInfo_codec);
            break;
          }
          case 16: {
            MapId = input.ReadUInt32();
            break;
          }
          case 26: {
            GuildName = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdMapTeleErrNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class TeleInfo : pb::IMessage {
        private static readonly pb::MessageParser<TeleInfo> _parser = new pb::MessageParser<TeleInfo>(() => new TeleInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TeleInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleName" field.</summary>
        public const int RoleNameFieldNumber = 1;
        private pb::ByteString roleName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RoleName {
          get { return roleName_; }
          set {
            roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "needLvl" field.</summary>
        public const int NeedLvlFieldNumber = 2;
        private uint needLvl_;
        /// <summary>
        ///没有要求为0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NeedLvl {
          get { return needLvl_; }
          set {
            needLvl_ = value;
          }
        }

        /// <summary>Field number for the "needTask" field.</summary>
        public const int NeedTaskFieldNumber = 3;
        private uint needTask_;
        /// <summary>
        ///没有要求为0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NeedTask {
          get { return needTask_; }
          set {
            needTask_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(RoleName);
          }
          if (NeedLvl != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NeedLvl);
          }
          if (NeedTask != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(NeedTask);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
          }
          if (NeedLvl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedLvl);
          }
          if (NeedTask != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedTask);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                RoleName = input.ReadBytes();
                break;
              }
              case 16: {
                NeedLvl = input.ReadUInt32();
                break;
              }
              case 24: {
                NeedTask = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 玩家地图动作
  /// </summary>
  public sealed class RoleAction : pb::IMessage {
    private static readonly pb::MessageParser<RoleAction> _parser = new pb::MessageParser<RoleAction>(() => new RoleAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAction> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionid" field.</summary>
    public const int ActionidFieldNumber = 1;
    private uint actionid_;
    /// <summary>
    /// 动作id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actionid {
      get { return actionid_; }
      set {
        actionid_ = value;
      }
    }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 2;
    private uint starttime_;
    /// <summary>
    /// 动作开始的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { return starttime_; }
      set {
        starttime_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private uint direction_;
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actionid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Actionid);
      }
      if (Starttime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Starttime);
      }
      if (Direction != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Direction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actionid);
      }
      if (Starttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttime);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Direction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Actionid = input.ReadUInt32();
            break;
          }
          case 16: {
            Starttime = input.ReadUInt32();
            break;
          }
          case 24: {
            Direction = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleActionReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleActionReq> _parser = new pb::MessageParser<CmdMapRoleActionReq>(() => new CmdMapRoleActionReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleActionReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionid" field.</summary>
    public const int ActionidFieldNumber = 1;
    private uint actionid_;
    /// <summary>
    /// 动作id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actionid {
      get { return actionid_; }
      set {
        actionid_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private uint direction_;
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actionid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Actionid);
      }
      if (Direction != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Direction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actionid);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Direction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Actionid = input.ReadUInt32();
            break;
          }
          case 16: {
            Direction = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleActionNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleActionNtf> _parser = new pb::MessageParser<CmdMapRoleActionNtf>(() => new CmdMapRoleActionNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleActionNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Packet.RoleAction action_;
    /// <summary>
    /// 动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 2;
    private ulong roleid_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (action_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Action);
      }
      if (Roleid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (action_ == null) {
              action_ = new global::Packet.RoleAction();
            }
            input.ReadMessage(action_);
            break;
          }
          case 16: {
            Roleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildBattleMapLeaderExtraData : pb::IMessage {
    private static readonly pb::MessageParser<GuildBattleMapLeaderExtraData> _parser = new pb::MessageParser<GuildBattleMapLeaderExtraData>(() => new GuildBattleMapLeaderExtraData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBattleMapLeaderExtraData> Parser { get { return _parser; } }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 1;
    private uint memberCount_;
    /// <summary>
    /// 队员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 2;
    private uint maxCount_;
    /// <summary>
    /// 最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MemberCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GuildBattleMapData : pb::IMessage {
    private static readonly pb::MessageParser<GuildBattleMapData> _parser = new pb::MessageParser<GuildBattleMapData>(() => new GuildBattleMapData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildBattleMapData> Parser { get { return _parser; } }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 1;
    private global::Packet.GuildBattleMapLeaderExtraData leader_;
    /// <summary>
    /// 队长额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBattleMapLeaderExtraData Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 2;
    private uint camp_;
    /// <summary>
    /// 阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private uint resource_;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (leader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Leader);
      }
      if (Camp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Camp);
      }
      if (Resource != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Resource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (leader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leader);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Camp);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (leader_ == null) {
              leader_ = new global::Packet.GuildBattleMapLeaderExtraData();
            }
            input.ReadMessage(leader_);
            break;
          }
          case 16: {
            Camp = input.ReadUInt32();
            break;
          }
          case 24: {
            Resource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapGuildBattleResourceNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapGuildBattleResourceNtf> _parser = new pb::MessageParser<CmdMapGuildBattleResourceNtf>(() => new CmdMapGuildBattleResourceNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapGuildBattleResourceNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private uint resource_;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Resource != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Resource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resource);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Resource = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// nothing
  /// </summary>
  public sealed class CmdMapLeaveCopyMapReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapLeaveCopyMapReq> _parser = new pb::MessageParser<CmdMapLeaveCopyMapReq>(() => new CmdMapLeaveCopyMapReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapLeaveCopyMapReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdMapGuildBattleMapTeamDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapGuildBattleMapTeamDataNtf> _parser = new pb::MessageParser<CmdMapGuildBattleMapTeamDataNtf>(() => new CmdMapGuildBattleMapTeamDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapGuildBattleMapTeamDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 2;
    private global::Packet.GuildBattleMapLeaderExtraData leader_;
    /// <summary>
    /// 队长数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GuildBattleMapLeaderExtraData Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (leader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Leader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (leader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (leader_ == null) {
              leader_ = new global::Packet.GuildBattleMapLeaderExtraData();
            }
            input.ReadMessage(leader_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapUpdateMapGuildInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapUpdateMapGuildInfoNtf> _parser = new pb::MessageParser<CmdMapUpdateMapGuildInfoNtf>(() => new CmdMapUpdateMapGuildInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapUpdateMapGuildInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "guildInfo" field.</summary>
    public const int GuildInfoFieldNumber = 1;
    private global::Packet.MapGuildInfo guildInfo_;
    /// <summary>
    /// 家族信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapGuildInfo GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildInfo);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (guildInfo_ == null) {
              guildInfo_ = new global::Packet.MapGuildInfo();
            }
            input.ReadMessage(guildInfo_);
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapReadMapLetterReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapReadMapLetterReq> _parser = new pb::MessageParser<CmdMapReadMapLetterReq>(() => new CmdMapReadMapLetterReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapReadMapLetterReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    /// <summary>
    ///地图Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapChangeResourcePageReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapChangeResourcePageReq> _parser = new pb::MessageParser<CmdMapChangeResourcePageReq>(() => new CmdMapChangeResourcePageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapChangeResourcePageReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    /// <summary>
    ///地图Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleMapInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleMapInfoNtf> _parser = new pb::MessageParser<CmdMapRoleMapInfoNtf>(() => new CmdMapRoleMapInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleMapInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "readLetters" field.</summary>
    public const int ReadLettersFieldNumber = 1;
    private pb::ByteString readLetters_ = pb::ByteString.Empty;
    /// <summary>
    ///已读信件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReadLetters {
      get { return readLetters_; }
      set {
        readLetters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resourcePages" field.</summary>
    public const int ResourcePagesFieldNumber = 2;
    private pb::ByteString resourcePages_ = pb::ByteString.Empty;
    /// <summary>
    ///已点资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResourcePages {
      get { return resourcePages_; }
      set {
        resourcePages_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterMaps" field.</summary>
    public const int EnterMapsFieldNumber = 3;
    private pb::ByteString enterMaps_ = pb::ByteString.Empty;
    /// <summary>
    ///去过的地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnterMaps {
      get { return enterMaps_; }
      set {
        enterMaps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadLetters.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ReadLetters);
      }
      if (ResourcePages.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ResourcePages);
      }
      if (EnterMaps.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EnterMaps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadLetters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReadLetters);
      }
      if (ResourcePages.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResourcePages);
      }
      if (EnterMaps.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterMaps);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ReadLetters = input.ReadBytes();
            break;
          }
          case 18: {
            ResourcePages = input.ReadBytes();
            break;
          }
          case 26: {
            EnterMaps = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleRenameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleRenameNtf> _parser = new pb::MessageParser<CmdMapRoleRenameNtf>(() => new CmdMapRoleRenameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleRenameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapUpdateRoleBGroupInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapUpdateRoleBGroupInfoNtf> _parser = new pb::MessageParser<CmdMapUpdateRoleBGroupInfoNtf>(() => new CmdMapUpdateRoleBGroupInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapUpdateRoleBGroupInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.MapBGroupInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapBGroupInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.MapBGroupInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapUpdateRoleBGroupQuitNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapUpdateRoleBGroupQuitNtf> _parser = new pb::MessageParser<CmdMapUpdateRoleBGroupQuitNtf>(() => new CmdMapUpdateRoleBGroupQuitNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapUpdateRoleBGroupQuitNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapUpdateRoleBGroupPosNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapUpdateRoleBGroupPosNtf> _parser = new pb::MessageParser<CmdMapUpdateRoleBGroupPosNtf>(() => new CmdMapUpdateRoleBGroupPosNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapUpdateRoleBGroupPosNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "bgroupPos" field.</summary>
    public const int BgroupPosFieldNumber = 2;
    private uint bgroupPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BgroupPos {
      get { return bgroupPos_; }
      set {
        bgroupPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (BgroupPos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BgroupPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (BgroupPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BgroupPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            BgroupPos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapUpdateRoleBGroupNameNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapUpdateRoleBGroupNameNtf> _parser = new pb::MessageParser<CmdMapUpdateRoleBGroupNameNtf>(() => new CmdMapUpdateRoleBGroupNameNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapUpdateRoleBGroupNameNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "bgroupName" field.</summary>
    public const int BgroupNameFieldNumber = 2;
    private pb::ByteString bgroupName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BgroupName {
      get { return bgroupName_; }
      set {
        bgroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (BgroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BgroupName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (BgroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BgroupName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            BgroupName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class OtherRoleMapBuffUnit : pb::IMessage {
    private static readonly pb::MessageParser<OtherRoleMapBuffUnit> _parser = new pb::MessageParser<OtherRoleMapBuffUnit>(() => new OtherRoleMapBuffUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherRoleMapBuffUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffid" field.</summary>
    public const int BuffidFieldNumber = 1;
    private uint buffid_;
    /// <summary>
    /// buffid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buffid {
      get { return buffid_; }
      set {
        buffid_ = value;
      }
    }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 2;
    private uint expiretime_;
    /// <summary>
    /// 到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_params_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> params_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Buffid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Buffid);
      }
      if (Expiretime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expiretime);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Buffid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buffid);
      }
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Buffid = input.ReadUInt32();
            break;
          }
          case 16: {
            Expiretime = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class OtherRoleMapBuff : pb::IMessage {
    private static readonly pb::MessageParser<OtherRoleMapBuff> _parser = new pb::MessageParser<OtherRoleMapBuff>(() => new OtherRoleMapBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherRoleMapBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "bufflist" field.</summary>
    public const int BufflistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.OtherRoleMapBuffUnit> _repeated_bufflist_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.OtherRoleMapBuffUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.OtherRoleMapBuffUnit> bufflist_ = new pbc::RepeatedField<global::Packet.OtherRoleMapBuffUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.OtherRoleMapBuffUnit> Bufflist {
      get { return bufflist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bufflist_.WriteTo(output, _repeated_bufflist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bufflist_.CalculateSize(_repeated_bufflist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bufflist_.AddEntriesFrom(input, _repeated_bufflist_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMapBuffUnit : pb::IMessage {
    private static readonly pb::MessageParser<RoleMapBuffUnit> _parser = new pb::MessageParser<RoleMapBuffUnit>(() => new RoleMapBuffUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMapBuffUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffid" field.</summary>
    public const int BuffidFieldNumber = 1;
    private uint buffid_;
    /// <summary>
    /// buffid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buffid {
      get { return buffid_; }
      set {
        buffid_ = value;
      }
    }

    /// <summary>Field number for the "expiretime" field.</summary>
    public const int ExpiretimeFieldNumber = 2;
    private uint expiretime_;
    /// <summary>
    /// 到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiretime {
      get { return expiretime_; }
      set {
        expiretime_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_params_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> params_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Buffid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Buffid);
      }
      if (Expiretime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expiretime);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Buffid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buffid);
      }
      if (Expiretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiretime);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Buffid = input.ReadUInt32();
            break;
          }
          case 16: {
            Expiretime = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMapBuff : pb::IMessage {
    private static readonly pb::MessageParser<RoleMapBuff> _parser = new pb::MessageParser<RoleMapBuff>(() => new RoleMapBuff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMapBuff> Parser { get { return _parser; } }

    /// <summary>Field number for the "bufflist" field.</summary>
    public const int BufflistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RoleMapBuffUnit> _repeated_bufflist_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RoleMapBuffUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleMapBuffUnit> bufflist_ = new pbc::RepeatedField<global::Packet.RoleMapBuffUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleMapBuffUnit> Bufflist {
      get { return bufflist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bufflist_.WriteTo(output, _repeated_bufflist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bufflist_.CalculateSize(_repeated_bufflist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bufflist_.AddEntriesFrom(input, _repeated_bufflist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 场景其他角色buff变更, 登录走的是maprole协议
  /// </summary>
  public sealed class CmdMapAddOtherRoleBuffNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapAddOtherRoleBuffNty> _parser = new pb::MessageParser<CmdMapAddOtherRoleBuffNty>(() => new CmdMapAddOtherRoleBuffNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapAddOtherRoleBuffNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 2;
    private global::Packet.RoleMapBuffUnit buff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleMapBuffUnit Buff {
      get { return buff_; }
      set {
        buff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      if (buff_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Buff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      if (buff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (buff_ == null) {
              buff_ = new global::Packet.RoleMapBuffUnit();
            }
            input.ReadMessage(buff_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRemoveOtherRoleBuffNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRemoveOtherRoleBuffNty> _parser = new pb::MessageParser<CmdMapRemoveOtherRoleBuffNty>(() => new CmdMapRemoveOtherRoleBuffNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRemoveOtherRoleBuffNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "buffids" field.</summary>
    public const int BuffidsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_buffids_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> buffids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Buffids {
      get { return buffids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      buffids_.WriteTo(output, _repeated_buffids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      size += buffids_.CalculateSize(_repeated_buffids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            buffids_.AddEntriesFrom(input, _repeated_buffids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主角buff变更
  /// </summary>
  public sealed class CmdMapAddRoleBuffNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapAddRoleBuffNty> _parser = new pb::MessageParser<CmdMapAddRoleBuffNty>(() => new CmdMapAddRoleBuffNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapAddRoleBuffNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 1;
    private global::Packet.RoleMapBuffUnit buff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleMapBuffUnit Buff {
      get { return buff_; }
      set {
        buff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (buff_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Buff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (buff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (buff_ == null) {
              buff_ = new global::Packet.RoleMapBuffUnit();
            }
            input.ReadMessage(buff_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRemoveRoleBuffNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRemoveRoleBuffNty> _parser = new pb::MessageParser<CmdMapRemoveRoleBuffNty>(() => new CmdMapRemoveRoleBuffNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRemoveRoleBuffNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffids" field.</summary>
    public const int BuffidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_buffids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> buffids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Buffids {
      get { return buffids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buffids_.WriteTo(output, _repeated_buffids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buffids_.CalculateSize(_repeated_buffids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            buffids_.AddEntriesFrom(input, _repeated_buffids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapDataNty> _parser = new pb::MessageParser<CmdMapDataNty>(() => new CmdMapDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "buffData" field.</summary>
    public const int BuffDataFieldNumber = 1;
    private global::Packet.RoleMapBuff buffData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleMapBuff BuffData {
      get { return buffData_; }
      set {
        buffData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (buffData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BuffData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (buffData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuffData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (buffData_ == null) {
              buffData_ = new global::Packet.RoleMapBuff();
            }
            input.ReadMessage(buffData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdMapRoleReturn : pb::IMessage {
    private static readonly pb::MessageParser<CmdMapRoleReturn> _parser = new pb::MessageParser<CmdMapRoleReturn>(() => new CmdMapRoleReturn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdMapRoleReturn> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "isReturn" field.</summary>
    public const int IsReturnFieldNumber = 2;
    private bool isReturn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReturn {
      get { return isReturn_; }
      set {
        isReturn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
      if (IsReturn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReturn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      if (IsReturn != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
          case 16: {
            IsReturn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
