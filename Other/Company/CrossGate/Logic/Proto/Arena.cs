// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arena.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///荣耀竞技场模块 协议号3800开始
  /// </summary>
  public enum CmdArena {
    None = 0,
    /// <summary>
    ///获取竞技场基础信息
    /// </summary>
    InfoReq = 3801,
    /// <summary>
    ///获取竞技场基础信息
    /// </summary>
    InfoRes = 3802,
    /// <summary>
    ///获取晋级奖励列表
    /// </summary>
    DanLvUpAwardReq = 3809,
    /// <summary>
    ///获取晋级奖励列表
    /// </summary>
    DanLvUpAwardRes = 3810,
    /// <summary>
    ///领取晋级奖励
    /// </summary>
    GetDanLvUpAwardReq = 3811,
    /// <summary>
    ///领取晋级奖励
    /// </summary>
    GetDanLvUpAwardRes = 3812,
    /// <summary>
    ///赛季奖励结算(下一赛季进入时推送)
    /// </summary>
    SeasonAwardNtf = 3813,
    /// <summary>
    ///战斗结束退送(星级、段位变化，奖励等)
    /// </summary>
    FightEndNtf = 3814,
    /// <summary>
    ///领取今日累胜奖励
    /// </summary>
    GetCumulateAwardReq = 3815,
    /// <summary>
    ///领取今日累胜奖励
    /// </summary>
    GetCumulateAwardRes = 3816,
    /// <summary>
    ///一键领取晋级奖励
    /// </summary>
    GetAllDanUpAwardReq = 3820,
    /// <summary>
    ///一键领取晋级奖励
    /// </summary>
    GetAllDanUpAwardRes = 3821,
    /// <summary>
    ///显示上赛季奖励宝箱
    /// </summary>
    ShowBoxNtf = 3823,
    /// <summary>
    ///获取上赛季宝箱奖励
    /// </summary>
    GetBoxAward = 3824,
  }

  public enum ErrorArena {
    None = 0,
    /// <summary>
    ///活动暂未开启
    /// </summary>
    NotStart = 3801,
    /// <summary>
    ///不在当前活动时间
    /// </summary>
    NotInTime = 3802,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 3803,
    /// <summary>
    ///获取赛区失败
    /// </summary>
    AreaIdErr = 3804,
    /// <summary>
    ///接收段位异常
    /// </summary>
    DanErr = 3805,
    /// <summary>
    ///段位不达标
    /// </summary>
    DanNotEnough = 3806,
    /// <summary>
    ///奖励已领取
    /// </summary>
    AlreadyGetAward = 3807,
    /// <summary>
    ///角色与伙伴的“治疗+咒术”总和不得超过3个
    /// </summary>
    CareerNumErr = 3808,
    /// <summary>
    ///winNum错误
    /// </summary>
    WinNumErr = 3809,
    /// <summary>
    ///次数不足
    /// </summary>
    WinNumNotEnough = 3810,
    /// <summary>
    ///发奖失败
    /// </summary>
    SendAwardErr = 3811,
    /// <summary>
    ///战斗中，不可参加该活动
    /// </summary>
    InFightErr = 3812,
    /// <summary>
    ///组队不可参加该活动
    /// </summary>
    InTeamErr = 3813,
    /// <summary>
    ///功能未开启
    /// </summary>
    FuncNotOpen = 3814,
    /// <summary>
    ///在副本中，不可参加
    /// </summary>
    InInsErr = 3815,
    /// <summary>
    ///已在匹配战斗中
    /// </summary>
    InMatchFight = 3816,
    /// <summary>
    ///错误的赛季id
    /// </summary>
    ErrAreaId = 3817,
    /// <summary>
    ///没有上赛季奖励可领取
    /// </summary>
    NoBoxAward = 3818,
    /// <summary>
    ///超过当日胜场奖励次数
    /// </summary>
    MaxFightWinReward = 3819,
    /// <summary>
    ///不能获取系统当前赛季
    /// </summary>
    CanNotFindSysSeason = 3829,
  }

  public enum ArenaItemReason {
    None = 0,
    /// <summary>
    ///竞技场晋级奖励
    /// </summary>
    DanLv = 3801,
    /// <summary>
    ///竞技场每日累胜奖励
    /// </summary>
    Cumulate = 3802,
    /// <summary>
    ///竞技场上赛季奖励
    /// </summary>
    SeasonAward = 3803,
    /// <summary>
    ///竞技场战斗奖励
    /// </summary>
    FightAward = 3804,
  }

  #endregion

  #region Messages
  public sealed class ArenaWinInfo : pb::IMessage {
    private static readonly pb::MessageParser<ArenaWinInfo> _parser = new pb::MessageParser<ArenaWinInfo>(() => new ArenaWinInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaWinInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 1;
    private int winNum_;
    /// <summary>
    ///胜利次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "canGet" field.</summary>
    public const int CanGetFieldNumber = 2;
    private bool canGet_;
    /// <summary>
    ///是否可领
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGet {
      get { return canGet_; }
      set {
        canGet_ = value;
      }
    }

    /// <summary>Field number for the "isGet" field.</summary>
    public const int IsGetFieldNumber = 3;
    private bool isGet_;
    /// <summary>
    ///是否已领
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinNum);
      }
      if (CanGet != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanGet);
      }
      if (IsGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (CanGet != false) {
        size += 1 + 1;
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinNum = input.ReadInt32();
            break;
          }
          case 16: {
            CanGet = input.ReadBool();
            break;
          }
          case 24: {
            IsGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class ArenaDanInfo : pb::IMessage {
    private static readonly pb::MessageParser<ArenaDanInfo> _parser = new pb::MessageParser<ArenaDanInfo>(() => new ArenaDanInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaDanInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 1;
    private int danLv_;
    /// <summary>
    ///段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    /// <summary>Field number for the "dropId" field.</summary>
    public const int DropIdFieldNumber = 2;
    private int dropId_;
    /// <summary>
    ///掉落id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropId {
      get { return dropId_; }
      set {
        dropId_ = value;
      }
    }

    /// <summary>Field number for the "canGet" field.</summary>
    public const int CanGetFieldNumber = 3;
    private bool canGet_;
    /// <summary>
    ///是否可领
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGet {
      get { return canGet_; }
      set {
        canGet_ = value;
      }
    }

    /// <summary>Field number for the "isGet" field.</summary>
    public const int IsGetFieldNumber = 4;
    private bool isGet_;
    /// <summary>
    ///是否已领
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DanLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DanLv);
      }
      if (DropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropId);
      }
      if (CanGet != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanGet);
      }
      if (IsGet != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DanLv);
      }
      if (DropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropId);
      }
      if (CanGet != false) {
        size += 1 + 1;
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DanLv = input.ReadInt32();
            break;
          }
          case 16: {
            DropId = input.ReadInt32();
            break;
          }
          case 24: {
            CanGet = input.ReadBool();
            break;
          }
          case 32: {
            IsGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdArenaInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaInfoReq> _parser = new pb::MessageParser<CmdArenaInfoReq>(() => new CmdArenaInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdArenaInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaInfoRes> _parser = new pb::MessageParser<CmdArenaInfoRes>(() => new CmdArenaInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageIndex" field.</summary>
    public const int StageIndexFieldNumber = 1;
    private int stageIndex_;
    /// <summary>
    ///第几赛季
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageIndex {
      get { return stageIndex_; }
      set {
        stageIndex_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private uint startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private uint endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 4;
    private int myRank_;
    /// <summary>
    ///自己排名	0 未上榜， > 0 排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "leftSec" field.</summary>
    public const int LeftSecFieldNumber = 5;
    private int leftSec_;
    /// <summary>
    ///剩余秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSec {
      get { return leftSec_; }
      set {
        leftSec_ = value;
      }
    }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 6;
    private int danLv_;
    /// <summary>
    ///段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 7;
    private int star_;
    /// <summary>
    ///星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "winInfo" field.</summary>
    public const int WinInfoFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.ArenaWinInfo> _repeated_winInfo_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.ArenaWinInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ArenaWinInfo> winInfo_ = new pbc::RepeatedField<global::Packet.ArenaWinInfo>();
    /// <summary>
    ///累计胜利情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ArenaWinInfo> WinInfo {
      get { return winInfo_; }
    }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 9;
    private int winNum_;
    /// <summary>
    ///胜利场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 10;
    private int totalNum_;
    /// <summary>
    ///总场数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StageIndex);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndTime);
      }
      if (MyRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MyRank);
      }
      if (LeftSec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LeftSec);
      }
      if (DanLv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DanLv);
      }
      if (Star != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Star);
      }
      winInfo_.WriteTo(output, _repeated_winInfo_codec);
      if (WinNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WinNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageIndex);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyRank);
      }
      if (LeftSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSec);
      }
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DanLv);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      size += winInfo_.CalculateSize(_repeated_winInfo_codec);
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadUInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 32: {
            MyRank = input.ReadInt32();
            break;
          }
          case 40: {
            LeftSec = input.ReadInt32();
            break;
          }
          case 48: {
            DanLv = input.ReadInt32();
            break;
          }
          case 56: {
            Star = input.ReadInt32();
            break;
          }
          case 66: {
            winInfo_.AddEntriesFrom(input, _repeated_winInfo_codec);
            break;
          }
          case 72: {
            WinNum = input.ReadInt32();
            break;
          }
          case 80: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdArenaDanLvUpAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaDanLvUpAwardReq> _parser = new pb::MessageParser<CmdArenaDanLvUpAwardReq>(() => new CmdArenaDanLvUpAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaDanLvUpAwardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdArenaDanLvUpAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaDanLvUpAwardRes> _parser = new pb::MessageParser<CmdArenaDanLvUpAwardRes>(() => new CmdArenaDanLvUpAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaDanLvUpAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardList" field.</summary>
    public const int AwardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ArenaDanInfo> _repeated_awardList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ArenaDanInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ArenaDanInfo> awardList_ = new pbc::RepeatedField<global::Packet.ArenaDanInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ArenaDanInfo> AwardList {
      get { return awardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardList_.WriteTo(output, _repeated_awardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardList_.CalculateSize(_repeated_awardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            awardList_.AddEntriesFrom(input, _repeated_awardList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaGetDanLvUpAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetDanLvUpAwardReq> _parser = new pb::MessageParser<CmdArenaGetDanLvUpAwardReq>(() => new CmdArenaGetDanLvUpAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetDanLvUpAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 1;
    private uint danLv_;
    /// <summary>
    ///领取的段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DanLv != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DanLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DanLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DanLv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaGetDanLvUpAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetDanLvUpAwardRes> _parser = new pb::MessageParser<CmdArenaGetDanLvUpAwardRes>(() => new CmdArenaGetDanLvUpAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetDanLvUpAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 1;
    private uint danLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DanLv != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DanLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DanLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DanLv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaSeasonAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaSeasonAwardNtf> _parser = new pb::MessageParser<CmdArenaSeasonAwardNtf>(() => new CmdArenaSeasonAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaSeasonAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "old_seasonId" field.</summary>
    public const int OldSeasonIdFieldNumber = 1;
    private uint oldSeasonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldSeasonId {
      get { return oldSeasonId_; }
      set {
        oldSeasonId_ = value;
      }
    }

    /// <summary>Field number for the "old_danLv" field.</summary>
    public const int OldDanLvFieldNumber = 2;
    private uint oldDanLv_;
    /// <summary>
    ///上期段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldDanLv {
      get { return oldDanLv_; }
      set {
        oldDanLv_ = value;
      }
    }

    /// <summary>Field number for the "old_star" field.</summary>
    public const int OldStarFieldNumber = 3;
    private uint oldStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldStar {
      get { return oldStar_; }
      set {
        oldStar_ = value;
      }
    }

    /// <summary>Field number for the "new_seasonId" field.</summary>
    public const int NewSeasonIdFieldNumber = 4;
    private uint newSeasonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewSeasonId {
      get { return newSeasonId_; }
      set {
        newSeasonId_ = value;
      }
    }

    /// <summary>Field number for the "new_danLv" field.</summary>
    public const int NewDanLvFieldNumber = 5;
    private uint newDanLv_;
    /// <summary>
    ///本期段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewDanLv {
      get { return newDanLv_; }
      set {
        newDanLv_ = value;
      }
    }

    /// <summary>Field number for the "new_star" field.</summary>
    public const int NewStarFieldNumber = 6;
    private uint newStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewStar {
      get { return newStar_; }
      set {
        newStar_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励数量, size和id一样
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldSeasonId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldSeasonId);
      }
      if (OldDanLv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OldDanLv);
      }
      if (OldStar != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OldStar);
      }
      if (NewSeasonId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NewSeasonId);
      }
      if (NewDanLv != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NewDanLv);
      }
      if (NewStar != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NewStar);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldSeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldSeasonId);
      }
      if (OldDanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldDanLv);
      }
      if (OldStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldStar);
      }
      if (NewSeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewSeasonId);
      }
      if (NewDanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewDanLv);
      }
      if (NewStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewStar);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldSeasonId = input.ReadUInt32();
            break;
          }
          case 16: {
            OldDanLv = input.ReadUInt32();
            break;
          }
          case 24: {
            OldStar = input.ReadUInt32();
            break;
          }
          case 32: {
            NewSeasonId = input.ReadUInt32();
            break;
          }
          case 40: {
            NewDanLv = input.ReadUInt32();
            break;
          }
          case 48: {
            NewStar = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 66:
          case 64: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaFightEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaFightEndNtf> _parser = new pb::MessageParser<CmdArenaFightEndNtf>(() => new CmdArenaFightEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaFightEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "old_danLv" field.</summary>
    public const int OldDanLvFieldNumber = 1;
    private uint oldDanLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldDanLv {
      get { return oldDanLv_; }
      set {
        oldDanLv_ = value;
      }
    }

    /// <summary>Field number for the "old_star" field.</summary>
    public const int OldStarFieldNumber = 2;
    private uint oldStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldStar {
      get { return oldStar_; }
      set {
        oldStar_ = value;
      }
    }

    /// <summary>Field number for the "new_danLv" field.</summary>
    public const int NewDanLvFieldNumber = 3;
    private uint newDanLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewDanLv {
      get { return newDanLv_; }
      set {
        newDanLv_ = value;
      }
    }

    /// <summary>Field number for the "new_star" field.</summary>
    public const int NewStarFieldNumber = 4;
    private uint newStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewStar {
      get { return newStar_; }
      set {
        newStar_ = value;
      }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 5;
    private bool isWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励数量, size和id一样
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldDanLv != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldDanLv);
      }
      if (OldStar != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OldStar);
      }
      if (NewDanLv != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NewDanLv);
      }
      if (NewStar != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NewStar);
      }
      if (IsWin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsWin);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldDanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldDanLv);
      }
      if (OldStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldStar);
      }
      if (NewDanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewDanLv);
      }
      if (NewStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewStar);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldDanLv = input.ReadUInt32();
            break;
          }
          case 16: {
            OldStar = input.ReadUInt32();
            break;
          }
          case 24: {
            NewDanLv = input.ReadUInt32();
            break;
          }
          case 32: {
            NewStar = input.ReadUInt32();
            break;
          }
          case 40: {
            IsWin = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 58:
          case 56: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaGetCumulateAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetCumulateAwardReq> _parser = new pb::MessageParser<CmdArenaGetCumulateAwardReq>(() => new CmdArenaGetCumulateAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetCumulateAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 1;
    private uint winNum_;
    /// <summary>
    ///领奖的累计次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WinNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaGetCumulateAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetCumulateAwardRes> _parser = new pb::MessageParser<CmdArenaGetCumulateAwardRes>(() => new CmdArenaGetCumulateAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetCumulateAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 1;
    private uint winNum_;
    /// <summary>
    ///领奖的累计次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinNum {
      get { return winNum_; }
      set {
        winNum_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///奖励数量, size和id一样
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WinNum);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinNum);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WinNum = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 26:
          case 24: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdArenaMatchDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaMatchDataNtf> _parser = new pb::MessageParser<CmdArenaMatchDataNtf>(() => new CmdArenaMatchDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaMatchDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "dan_lv" field.</summary>
    public const int DanLvFieldNumber = 2;
    private uint danLv_;
    /// <summary>
    ///段位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DanLv {
      get { return danLv_; }
      set {
        danLv_ = value;
      }
    }

    /// <summary>Field number for the "dan_star" field.</summary>
    public const int DanStarFieldNumber = 3;
    private uint danStar_;
    /// <summary>
    ///星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DanStar {
      get { return danStar_; }
      set {
        danStar_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "gamesvrId" field.</summary>
    public const int GamesvrIdFieldNumber = 7;
    private uint gamesvrId_;
    /// <summary>
    ///服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesvrId {
      get { return gamesvrId_; }
      set {
        gamesvrId_ = value;
      }
    }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_partnerId_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> partnerId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PartnerId {
      get { return partnerId_; }
    }

    /// <summary>Field number for the "fashionId" field.</summary>
    public const int FashionIdFieldNumber = 9;
    private uint fashionId_;
    /// <summary>
    ///时装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionId {
      get { return fashionId_; }
      set {
        fashionId_ = value;
      }
    }

    /// <summary>Field number for the "isRobot" field.</summary>
    public const int IsRobotFieldNumber = 10;
    private bool isRobot_;
    /// <summary>
    ///是否机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (DanLv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DanLv);
      }
      if (DanStar != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DanStar);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
      if (GamesvrId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GamesvrId);
      }
      partnerId_.WriteTo(output, _repeated_partnerId_codec);
      if (FashionId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FashionId);
      }
      if (IsRobot != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsRobot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (DanLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DanLv);
      }
      if (DanStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DanStar);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (GamesvrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesvrId);
      }
      size += partnerId_.CalculateSize(_repeated_partnerId_codec);
      if (FashionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionId);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            DanLv = input.ReadUInt32();
            break;
          }
          case 24: {
            DanStar = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadBytes();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 56: {
            GamesvrId = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            partnerId_.AddEntriesFrom(input, _repeated_partnerId_codec);
            break;
          }
          case 72: {
            FashionId = input.ReadUInt32();
            break;
          }
          case 80: {
            IsRobot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdArenaGetAllDanUpAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetAllDanUpAwardReq> _parser = new pb::MessageParser<CmdArenaGetAllDanUpAwardReq>(() => new CmdArenaGetAllDanUpAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetAllDanUpAwardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdArenaGetAllDanUpAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetAllDanUpAwardRes> _parser = new pb::MessageParser<CmdArenaGetAllDanUpAwardRes>(() => new CmdArenaGetAllDanUpAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetAllDanUpAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "danLv" field.</summary>
    public const int DanLvFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_danLv_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> danLv_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DanLv {
      get { return danLv_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      danLv_.WriteTo(output, _repeated_danLv_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += danLv_.CalculateSize(_repeated_danLv_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            danLv_.AddEntriesFrom(input, _repeated_danLv_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdArenaShowBoxNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaShowBoxNtf> _parser = new pb::MessageParser<CmdArenaShowBoxNtf>(() => new CmdArenaShowBoxNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaShowBoxNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///do nothing
  /// </summary>
  public sealed class CmdArenaGetBoxAward : pb::IMessage {
    private static readonly pb::MessageParser<CmdArenaGetBoxAward> _parser = new pb::MessageParser<CmdArenaGetBoxAward>(() => new CmdArenaGetBoxAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdArenaGetBoxAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
