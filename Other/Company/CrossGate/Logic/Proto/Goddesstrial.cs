// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goddesstrial.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///5000+
  /// </summary>
  public enum CmdGoddessTrial {
    None = 0,
    /// <summary>
    ///获取主题不同难度下首通队伍信息
    /// </summary>
    GetTopicFirstTeamReq = 5001,
    GetTopicFirstTeamRes = 5002,
    /// <summary>
    ///获取主题不同难度下本周副本特性
    /// </summary>
    GetTopicPropertyReq = 5003,
    GetTopicPropertyRes = 5004,
    /// <summary>
    ///在副本中发起选择关卡投票请求(队长发起)
    /// </summary>
    SelectStageStartVoteReq = 5005,
    /// <summary>
    ///在副本中发起选择关卡投票返回
    /// </summary>
    SelectStageStartVoteRes = 5006,
    /// <summary>
    ///在副本中选择关卡投票请求
    /// </summary>
    SelectStageVoteReq = 5007,
    /// <summary>
    ///在副本中选择关卡投票返回
    /// </summary>
    SelectStageVoteRes = 5008,
    /// <summary>
    ///在副本中选择关卡投票跟随队长
    /// </summary>
    VoteFollowLeaderReq = 5009,
    VoteFollowLeaderRes = 5010,
    /// <summary>
    ///选择主题难度副本请求
    /// </summary>
    SelectTopicDifficultyReq = 5011,
    SelectTopicDifficultyRes = 5012,
    /// <summary>
    ///获取主题结局数量奖励请求
    /// </summary>
    GetTopicEndAwardReq = 5013,
    GetTopicEndAwardRes = 5014,
    /// <summary>
    ///副本切关请求(队长发起 如果当前是最高关卡,不用发此请求)
    /// </summary>
    InsSwitchStageReq = 5015,
    InsSwitchStageRes = 5016,
    /// <summary>
    ///请求主题难度首通排行榜
    /// </summary>
    TopicDiffiFirstRankReq = 5017,
    TopicDiffiFirstRankRes = 5018,
    /// <summary>
    ///多人投票进副本前,获取全队员最高通关副本信息
    /// </summary>
    GetTeamInsInfoOnVoteInInsReq = 5019,
    GetTeamInsInfoOnVoteInInsRes = 5020,
    /// <summary>
    ///主题副本难度解锁通知
    /// </summary>
    TopicUnlockNtf = 5021,
    /// <summary>
    ///首通队伍增加通知(暂时不用)
    /// </summary>
    TopicFirstTeamNtf = 5022,
    /// <summary>
    ///本周副本特性(暂时不用)
    /// </summary>
    TopicInsPropertyNtf = 5023,
    /// <summary>
    ///在副本中发起选择关卡投票通知
    /// </summary>
    SelectStageStartVoteNtf = 5024,
    /// <summary>
    ///在副本中选择关卡投票过程通知
    /// </summary>
    SelectStageVoteProcessNtf = 5025,
    /// <summary>
    ///在副本中选择关卡投票结果通知
    /// </summary>
    SelectStageVoteEndNtf = 5026,
    /// <summary>
    ///在副本中取消选择关卡投票通知
    /// </summary>
    SelectStageCancelVoteNtf = 5027,
    /// <summary>
    ///玩家副本关卡通关的奖励列表通知
    /// </summary>
    InsStagePassAwardNtf = 5028,
    /// <summary>
    ///首通队员领取首通奖励(gamesvr处理)
    /// </summary>
    GetFirstTeamAwardReq = 5029,
    GetFirstTeamAwardRes = 5030,
    /// <summary>
    ///获取首通排行榜队员详细信息请求(gamesvr处理)
    /// </summary>
    GetFirstRankRoleDetailInfoReq = 5031,
    /// <summary>
    /// </summary>
    GetFirstRankRoleDetailInfoRes = 5032,
    /// <summary>
    ///重置玩家领取奖励信息
    /// </summary>
    ResetInsAwardNtf = 5033,
    /// <summary>
    ///更新奖励次数
    /// </summary>
    UpdateInsAwardNtf = 5034,
  }

  public enum ErrorGoddessTrial {
    None = 0,
    /// <summary>
    ///内部使用
    /// </summary>
    InnerUnlockIdExist = 5001,
    /// <summary>
    ///客户端使用
    /// </summary>
    CsvnotFound = 5011,
    /// <summary>
    ///当前主题难度下不存在首通队伍
    /// </summary>
    NoFirstTeam = 5012,
    /// <summary>
    ///没有此玩法
    /// </summary>
    NoPlayType = 5013,
    /// <summary>
    ///主题不满足条件
    /// </summary>
    TopicNoMeet = 5014,
    /// <summary>
    ///投票发起人不满足要求
    /// </summary>
    VotePromoter = 5015,
    /// <summary>
    ///发起投票失败
    /// </summary>
    StartVote = 5016,
    /// <summary>
    ///投票关卡不满足要求
    /// </summary>
    VoteStageId = 5017,
    /// <summary>
    ///初始化申请投票失败
    /// </summary>
    AddStartVote = 5018,
    /// <summary>
    ///投票人不满足要求
    /// </summary>
    Voter = 5019,
    /// <summary>
    ///不存在此投票
    /// </summary>
    NoVoteId = 5020,
    /// <summary>
    ///不在副本中
    /// </summary>
    NotInIns = 5021,
    /// <summary>
    ///投票失败
    /// </summary>
    Vote = 5022,
    /// <summary>
    ///投票已过期
    /// </summary>
    VoteExpire = 5023,
    /// <summary>
    ///已经跟随队长投票了
    /// </summary>
    HaveFollow = 5024,
    /// <summary>
    ///队长已经投过票了
    /// </summary>
    LeaderHaveVote = 5025,
    /// <summary>
    ///不能取消跟随
    /// </summary>
    NoCancelFollowVote = 5026,
    /// <summary>
    ///不能跟随队长投票
    /// </summary>
    NoFollowVote = 5027,
    /// <summary>
    ///不存在此主题难度
    /// </summary>
    NoTopicDifficulty = 5028,
    /// <summary>
    ///不存在此副本
    /// </summary>
    NoIns = 5029,
    /// <summary>
    ///主题难度已锁定
    /// </summary>
    TopicDifficultyLocked = 5030,
    /// <summary>
    ///没有此主题id
    /// </summary>
    NoTopicId = 5031,
    /// <summary>
    ///已经领取过奖励了
    /// </summary>
    EndNumHaveGivedAward = 5032,
    /// <summary>
    ///非队长不能切关卡
    /// </summary>
    NotLeaderSwitchStage = 5033,
    /// <summary>
    ///副本已结束
    /// </summary>
    InsEnd = 5034,
    /// <summary>
    ///副本关卡未通关
    /// </summary>
    InsStageNotPass = 5035,
    /// <summary>
    ///副本自动切关卡
    /// </summary>
    InsAutoChange = 5036,
    /// <summary>
    ///不存在此排行榜
    /// </summary>
    NoTopicDiffiFirstRank = 5037,
    /// <summary>
    ///多人投票进副本前,获取全队员最高通关副本信息错误
    /// </summary>
    GetTeamInsInfoOnVoteInIns = 5038,
    /// <summary>
    ///不是首通队伍中的队员
    /// </summary>
    NoInFirstTeam = 5039,
    /// <summary>
    ///已经领取首通队伍奖励
    /// </summary>
    FirstTeamAwardGeted = 5040,
    /// <summary>
    ///领取首通队伍奖励失败
    /// </summary>
    FirstTeamAwardGetedFailed = 5041,
  }

  public enum GoddessActiveReason {
    None = 0,
    /// <summary>
    /// 获取主题结局奖励
    /// </summary>
    GetTopicEndAward = 5001,
  }

  #endregion

  #region Messages
  /// <summary>
  ///服务器使用 投票相关信息
  /// </summary>
  public sealed class GoddessTrialVoteData : pb::IMessage {
    private static readonly pb::MessageParser<GoddessTrialVoteData> _parser = new pb::MessageParser<GoddessTrialVoteData>(() => new GoddessTrialVoteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessTrialVoteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端使用 多人进副本投票相关信息
  /// </summary>
  public sealed class GoddessTrialTeamMemData : pb::IMessage {
    private static readonly pb::MessageParser<GoddessTrialTeamMemData> _parser = new pb::MessageParser<GoddessTrialTeamMemData>(() => new GoddessTrialTeamMemData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessTrialTeamMemData> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    /// <summary>
    ///要投票进入的副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///要投票进入的关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "teamData" field.</summary>
    public const int TeamDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.GoddessTrialTeamMemData.Types.OneMemData> _repeated_teamData_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.GoddessTrialTeamMemData.Types.OneMemData.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessTrialTeamMemData.Types.OneMemData> teamData_ = new pbc::RepeatedField<global::Packet.GoddessTrialTeamMemData.Types.OneMemData>();
    /// <summary>
    ///队员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessTrialTeamMemData.Types.OneMemData> TeamData {
      get { return teamData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
      teamData_.WriteTo(output, _repeated_teamData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      size += teamData_.CalculateSize(_repeated_teamData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
          case 26: {
            teamData_.AddEntriesFrom(input, _repeated_teamData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoddessTrialTeamMemData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class OneMemData : pb::IMessage {
        private static readonly pb::MessageParser<OneMemData> _parser = new pb::MessageParser<OneMemData>(() => new OneMemData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OneMemData> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "insId" field.</summary>
        public const int InsIdFieldNumber = 2;
        private uint insId_;
        /// <summary>
        ///副本id  该玩家在该主题难度下的最高进度, 如果是0, 则可认为是从未打过
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InsId {
          get { return insId_; }
          set {
            insId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (InsId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(InsId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (InsId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                InsId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///女神试炼数据
  /// </summary>
  public sealed class GoddessTrialData : pb::IMessage {
    private static readonly pb::MessageParser<GoddessTrialData> _parser = new pb::MessageParser<GoddessTrialData>(() => new GoddessTrialData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessTrialData> Parser { get { return _parser; } }

    /// <summary>Field number for the "selectTopicDiffId" field.</summary>
    public const int SelectTopicDiffIdFieldNumber = 1;
    private uint selectTopicDiffId_;
    /// <summary>
    ///玩家当前选择的主题难度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelectTopicDiffId {
      get { return selectTopicDiffId_; }
      set {
        selectTopicDiffId_ = value;
      }
    }

    /// <summary>Field number for the "randomTopic" field.</summary>
    public const int RandomTopicFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RandomTopic> _repeated_randomTopic_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RandomTopic.Parser);
    private readonly pbc::RepeatedField<global::Packet.RandomTopic> randomTopic_ = new pbc::RepeatedField<global::Packet.RandomTopic>();
    /// <summary>
    ///同一等级段主题随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RandomTopic> RandomTopic {
      get { return randomTopic_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///已经解锁的女神试炼主题表id(该等级主题下已解锁的最高难度)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.GoddessTopicEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.GoddessTopicEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessTopicEntry> entries_ = new pbc::RepeatedField<global::Packet.GoddessTopicEntry>();
    /// <summary>
    ///不同主题难度下玩家副本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessTopicEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "endTopic" field.</summary>
    public const int EndTopicFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.EndTopic> _repeated_endTopic_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.EndTopic.Parser);
    private readonly pbc::RepeatedField<global::Packet.EndTopic> endTopic_ = new pbc::RepeatedField<global::Packet.EndTopic>();
    /// <summary>
    ///主题结局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.EndTopic> EndTopic {
      get { return endTopic_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_awards_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> awards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///女神试炼5关奖励是否领取 index 表示第几关 value 0 表示未领取  1表示已领取(暂时用于日常界面次数统计)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectTopicDiffId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SelectTopicDiffId);
      }
      randomTopic_.WriteTo(output, _repeated_randomTopic_codec);
      id_.WriteTo(output, _repeated_id_codec);
      entries_.WriteTo(output, _repeated_entries_codec);
      endTopic_.WriteTo(output, _repeated_endTopic_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectTopicDiffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelectTopicDiffId);
      }
      size += randomTopic_.CalculateSize(_repeated_randomTopic_codec);
      size += id_.CalculateSize(_repeated_id_codec);
      size += entries_.CalculateSize(_repeated_entries_codec);
      size += endTopic_.CalculateSize(_repeated_endTopic_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SelectTopicDiffId = input.ReadUInt32();
            break;
          }
          case 18: {
            randomTopic_.AddEntriesFrom(input, _repeated_randomTopic_codec);
            break;
          }
          case 26:
          case 24: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 34: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 42: {
            endTopic_.AddEntriesFrom(input, _repeated_endTopic_codec);
            break;
          }
          case 50:
          case 48: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///本副本最后关卡(带选择)投票信息
  /// </summary>
  public sealed class LastFinalInsStageVote : pb::IMessage {
    private static readonly pb::MessageParser<LastFinalInsStageVote> _parser = new pb::MessageParser<LastFinalInsStageVote>(() => new LastFinalInsStageVote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastFinalInsStageVote> Parser { get { return _parser; } }

    /// <summary>Field number for the "insId" field.</summary>
    public const int InsIdFieldNumber = 1;
    private uint insId_;
    /// <summary>
    ///副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsId {
      get { return insId_; }
      set {
        insId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///本副本最后关卡投票的下一个章节副本的初始关卡id, 0则为非法值,没有通关过此副本(援助不算)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///女神试炼具体主题难度下副本数据
  ///比如熊男一家亲简单难度下有5个副本
  /// </summary>
  public sealed class GoddessTopicEntry : pb::IMessage {
    private static readonly pb::MessageParser<GoddessTopicEntry> _parser = new pb::MessageParser<GoddessTopicEntry>(() => new GoddessTopicEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessTopicEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///该主题难度对应的女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "perPassMaxInsId" field.</summary>
    public const int PerPassMaxInsIdFieldNumber = 3;
    private uint perPassMaxInsId_;
    /// <summary>
    ///uint32 lastFinalInsStageVote = 2;//最近上一个副本最后关卡投票的下一个章节副本的初始关卡id, 0则为非法值,没有通关过此副本(援助不算) 废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PerPassMaxInsId {
      get { return perPassMaxInsId_; }
      set {
        perPassMaxInsId_ = value;
      }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.GoddessInsEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.GoddessInsEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessInsEntry> entries_ = new pbc::RepeatedField<global::Packet.GoddessInsEntry>();
    /// <summary>
    ///该主题难度下各个副本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessInsEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "lastFinalInsStageVote" field.</summary>
    public const int LastFinalInsStageVoteFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.LastFinalInsStageVote> _repeated_lastFinalInsStageVote_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.LastFinalInsStageVote.Parser);
    private readonly pbc::RepeatedField<global::Packet.LastFinalInsStageVote> lastFinalInsStageVote_ = new pbc::RepeatedField<global::Packet.LastFinalInsStageVote>();
    /// <summary>
    ///本副本最后关卡带选择投票信息(如果有的话)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.LastFinalInsStageVote> LastFinalInsStageVote {
      get { return lastFinalInsStageVote_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (PerPassMaxInsId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PerPassMaxInsId);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      lastFinalInsStageVote_.WriteTo(output, _repeated_lastFinalInsStageVote_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (PerPassMaxInsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PerPassMaxInsId);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      size += lastFinalInsStageVote_.CalculateSize(_repeated_lastFinalInsStageVote_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            PerPassMaxInsId = input.ReadUInt32();
            break;
          }
          case 34: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 42: {
            lastFinalInsStageVote_.AddEntriesFrom(input, _repeated_lastFinalInsStageVote_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单副本数据
  /// </summary>
  public sealed class GoddessInsEntry : pb::IMessage {
    private static readonly pb::MessageParser<GoddessInsEntry> _parser = new pb::MessageParser<GoddessInsEntry>(() => new GoddessInsEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessInsEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "insId" field.</summary>
    public const int InsIdFieldNumber = 1;
    private uint insId_;
    /// <summary>
    ///副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsId {
      get { return insId_; }
      set {
        insId_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.GoddessInsStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.GoddessInsStage.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessInsStage> stages_ = new pbc::RepeatedField<global::Packet.GoddessInsStage>();
    /// <summary>
    ///所有关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessInsStage> Stages {
      get { return stages_; }
    }

    /// <summary>Field number for the "unlock" field.</summary>
    public const int UnlockFieldNumber = 3;
    private bool unlock_;
    /// <summary>
    ///周期内副本是否解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsId);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
      if (Unlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Unlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsId);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      if (Unlock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsId = input.ReadUInt32();
            break;
          }
          case 18: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
          case 24: {
            Unlock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///副本单关信息
  /// </summary>
  public sealed class GoddessInsStage : pb::IMessage {
    private static readonly pb::MessageParser<GoddessInsStage> _parser = new pb::MessageParser<GoddessInsStage>(() => new GoddessInsStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessInsStage> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同一等级段多主题随机
  /// </summary>
  public sealed class RandomTopic : pb::IMessage {
    private static readonly pb::MessageParser<RandomTopic> _parser = new pb::MessageParser<RandomTopic>(() => new RandomTopic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomTopic> Parser { get { return _parser; } }

    /// <summary>Field number for the "minLevel" field.</summary>
    public const int MinLevelFieldNumber = 1;
    private uint minLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 2;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinLevel);
      }
      if (TopicId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TopicId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLevel);
      }
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            TopicId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主题结局
  /// </summary>
  public sealed class EndTopic : pb::IMessage {
    private static readonly pb::MessageParser<EndTopic> _parser = new pb::MessageParser<EndTopic>(() => new EndTopic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EndTopic> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "givedMaxRec" field.</summary>
    public const int GivedMaxRecFieldNumber = 3;
    private uint givedMaxRec_;
    /// <summary>
    ///结局奖励领取的最大数量记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GivedMaxRec {
      get { return givedMaxRec_; }
      set {
        givedMaxRec_ = value;
      }
    }

    /// <summary>Field number for the "endId" field.</summary>
    public const int EndIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_endId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> endId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///结局id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EndId {
      get { return endId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopicId);
      }
      endId_.WriteTo(output, _repeated_endId_codec);
      if (GivedMaxRec != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GivedMaxRec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      if (GivedMaxRec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GivedMaxRec);
      }
      size += endId_.CalculateSize(_repeated_endId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            endId_.AddEntriesFrom(input, _repeated_endId_codec);
            break;
          }
          case 24: {
            GivedMaxRec = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主题不同难度下显示的队伍信息
  /// </summary>
  public sealed class GoddessTeamEntry : pb::IMessage {
    private static readonly pb::MessageParser<GoddessTeamEntry> _parser = new pb::MessageParser<GoddessTeamEntry>(() => new GoddessTeamEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoddessTeamEntry> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///首通时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "roleList" field.</summary>
    public const int RoleListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.GoddessTeamEntry.Types.Role> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.GoddessTeamEntry.Types.Role.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessTeamEntry.Types.Role> roleList_ = new pbc::RepeatedField<global::Packet.GoddessTeamEntry.Types.Role>();
    /// <summary>
    ///角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessTeamEntry.Types.Role> RoleList {
      get { return roleList_; }
    }

    /// <summary>Field number for the "rolesGetedAward" field.</summary>
    public const int RolesGetedAwardFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_rolesGetedAward_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> rolesGetedAward_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///已领取过奖励的roleid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RolesGetedAward {
      get { return rolesGetedAward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      roleList_.WriteTo(output, _repeated_roleList_codec);
      rolesGetedAward_.WriteTo(output, _repeated_rolesGetedAward_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      size += rolesGetedAward_.CalculateSize(_repeated_rolesGetedAward_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
          case 26: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
          case 34:
          case 32: {
            rolesGetedAward_.AddEntriesFrom(input, _repeated_rolesGetedAward_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoddessTeamEntry message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class Role : pb::IMessage {
        private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Role> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 2;
        private uint score_;
        /// <summary>
        ///综合评分
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private pb::ByteString name_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (Score != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Score);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Score != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 16: {
                Score = input.ReadUInt32();
                break;
              }
              case 26: {
                Name = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///首通排行榜单个玩家信息
  /// </summary>
  public sealed class RankRole : pb::IMessage {
    private static readonly pb::MessageParser<RankRole> _parser = new pb::MessageParser<RankRole>(() => new RankRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private uint score_;
    /// <summary>
    ///综合评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rankTime" field.</summary>
    public const int RankTimeFieldNumber = 3;
    private uint rankTime_;
    /// <summary>
    ///上榜日期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankTime {
      get { return rankTime_; }
      set {
        rankTime_ = value;
      }
    }

    /// <summary>Field number for the "roleName" field.</summary>
    public const int RoleNameFieldNumber = 4;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///人物名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleScore" field.</summary>
    public const int RoleScoreFieldNumber = 5;
    private uint roleScore_;
    /// <summary>
    ///人物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleScore {
      get { return roleScore_; }
      set {
        roleScore_ = value;
      }
    }

    /// <summary>Field number for the "petScore" field.</summary>
    public const int PetScoreFieldNumber = 6;
    private uint petScore_;
    /// <summary>
    ///宠物评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetScore {
      get { return petScore_; }
      set {
        petScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Score);
      }
      if (RankTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RankTime);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoleName);
      }
      if (RoleScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoleScore);
      }
      if (PetScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PetScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (RankTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankTime);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (RoleScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleScore);
      }
      if (PetScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Score = input.ReadUInt32();
            break;
          }
          case 24: {
            RankTime = input.ReadUInt32();
            break;
          }
          case 34: {
            RoleName = input.ReadBytes();
            break;
          }
          case 40: {
            RoleScore = input.ReadUInt32();
            break;
          }
          case 48: {
            PetScore = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主题难度首通排行榜信息
  /// </summary>
  public sealed class TopicDiffiRank : pb::IMessage {
    private static readonly pb::MessageParser<TopicDiffiRank> _parser = new pb::MessageParser<TopicDiffiRank>(() => new TopicDiffiRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicDiffiRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rankList" field.</summary>
    public const int RankListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.RankRole> _repeated_rankList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.RankRole.Parser);
    private readonly pbc::RepeatedField<global::Packet.RankRole> rankList_ = new pbc::RepeatedField<global::Packet.RankRole>();
    /// <summary>
    ///玩家排行信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RankRole> RankList {
      get { return rankList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      rankList_.WriteTo(output, _repeated_rankList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += rankList_.CalculateSize(_repeated_rankList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            rankList_.AddEntriesFrom(input, _repeated_rankList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrialGetTopicFirstTeamReq = 5001; //获取主题不同难度下首通队伍信息
  /// </summary>
  public sealed class CmdGoddessTrialGetTopicFirstTeamReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamReq> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamReq>(() => new CmdGoddessTrialGetTopicFirstTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGoddessTrialGetTopicFirstTeamRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamRes> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamRes>(() => new CmdGoddessTrialGetTopicFirstTeamRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicFirstTeamRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GoddessTeamEntry> _repeated_team_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GoddessTeamEntry.Parser);
    private readonly pbc::RepeatedField<global::Packet.GoddessTeamEntry> team_ = new pbc::RepeatedField<global::Packet.GoddessTeamEntry>();
    /// <summary>
    ///首通队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GoddessTeamEntry> Team {
      get { return team_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      team_.WriteTo(output, _repeated_team_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += team_.CalculateSize(_repeated_team_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            team_.AddEntriesFrom(input, _repeated_team_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetTopicPropertyReq = 5003; //获取主题不同难度下本周副本特性
  /// </summary>
  public sealed class CmdGoddessTrialGetTopicPropertyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicPropertyReq> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicPropertyReq>(() => new CmdGoddessTrialGetTopicPropertyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicPropertyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopicId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGoddessTrialGetTopicPropertyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicPropertyRes> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicPropertyRes>(() => new CmdGoddessTrialGetTopicPropertyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicPropertyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "insAndAISeq" field.</summary>
    public const int InsAndAISeqFieldNumber = 1;
    private uint insAndAISeq_;
    /// <summary>
    ///本周副本被动技能和AI特性序列号 类似数组的index 0 , 1, 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsAndAISeq {
      get { return insAndAISeq_; }
      set {
        insAndAISeq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsAndAISeq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsAndAISeq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsAndAISeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsAndAISeq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsAndAISeq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageStartVoteReq = 5005; //在副本中发起选择关卡投票请求(队长发起)
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageStartVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageStartVoteReq> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageStartVoteReq>(() => new CmdGoddessTrialSelectStageStartVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageStartVoteReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageStartVoteRes = 5006; //在副本中发起选择关卡投票返回
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageStartVoteRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageStartVoteRes> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageStartVoteRes>(() => new CmdGoddessTrialSelectStageStartVoteRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageStartVoteRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageVoteReq = 5007; //在副本中选择关卡投票请求
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageVoteReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageVoteReq> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageVoteReq>(() => new CmdGoddessTrialSelectStageVoteReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageVoteReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 1;
    private uint stageId_;
    /// <summary>
    ///用于验证关卡id index对应的关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    /// <summary>Field number for the "stageIndex" field.</summary>
    public const int StageIndexFieldNumber = 2;
    private uint stageIndex_;
    /// <summary>
    ///投票关卡index 0 1 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageIndex {
      get { return stageIndex_; }
      set {
        stageIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageId);
      }
      if (StageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      if (StageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageVoteRes = 5008; //在副本中选择关卡投票返回
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageVoteRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageVoteRes> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageVoteRes>(() => new CmdGoddessTrialSelectStageVoteRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageVoteRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageIndex" field.</summary>
    public const int StageIndexFieldNumber = 1;
    private uint stageIndex_;
    /// <summary>
    ///投票关卡index 0 1 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageIndex {
      get { return stageIndex_; }
      set {
        stageIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_VoteFollowLeaderReq = 5009; //在副本中选择关卡投票跟随队长
  /// </summary>
  public sealed class CmdGoddessTrialVoteFollowLeaderReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialVoteFollowLeaderReq> _parser = new pb::MessageParser<CmdGoddessTrialVoteFollowLeaderReq>(() => new CmdGoddessTrialVoteFollowLeaderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialVoteFollowLeaderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private uint op_;
    /// <summary>
    ///1 跟随队长 0取消跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Op);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Op);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Op = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_VoteFollowLeaderRes = 5010;
  /// </summary>
  public sealed class CmdGoddessTrialVoteFollowLeaderRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialVoteFollowLeaderRes> _parser = new pb::MessageParser<CmdGoddessTrialVoteFollowLeaderRes>(() => new CmdGoddessTrialVoteFollowLeaderRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialVoteFollowLeaderRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectTopicDifficultyReq = 5011; //选择主题难度副本请求
  /// </summary>
  public sealed class CmdGoddessTrialSelectTopicDifficultyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyReq> _parser = new pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyReq>(() => new CmdGoddessTrialSelectTopicDifficultyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectTopicDifficultyRes = 5012;
  /// </summary>
  public sealed class CmdGoddessTrialSelectTopicDifficultyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyRes> _parser = new pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyRes>(() => new CmdGoddessTrialSelectTopicDifficultyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectTopicDifficultyRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetTopicEndAwardReq = 5013; //获取主题结局数量奖励请求
  /// </summary>
  public sealed class CmdGoddessTrialGetTopicEndAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicEndAwardReq> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicEndAwardReq>(() => new CmdGoddessTrialGetTopicEndAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicEndAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "endNum" field.</summary>
    public const int EndNumFieldNumber = 2;
    private uint endNum_;
    /// <summary>
    ///结局数量对应的奖励(小于此值的数量如果之前没有被领取 则自动领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndNum {
      get { return endNum_; }
      set {
        endNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopicId);
      }
      if (EndNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      if (EndNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadUInt32();
            break;
          }
          case 16: {
            EndNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetTopicEndAwardRes = 5014;
  /// </summary>
  public sealed class CmdGoddessTrialGetTopicEndAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTopicEndAwardRes> _parser = new pb::MessageParser<CmdGoddessTrialGetTopicEndAwardRes>(() => new CmdGoddessTrialGetTopicEndAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTopicEndAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "endNum" field.</summary>
    public const int EndNumFieldNumber = 2;
    private uint endNum_;
    /// <summary>
    ///结局数量对应的奖励(小于此值的数量如果之前没有被领取 则自动领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndNum {
      get { return endNum_; }
      set {
        endNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopicId);
      }
      if (EndNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      if (EndNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadUInt32();
            break;
          }
          case 16: {
            EndNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_InsSwitchStageReq = 5015; //副本切关请求(如果当前是最高关卡,不用发此请求)
  /// </summary>
  public sealed class CmdGoddessTrialInsSwitchStageReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialInsSwitchStageReq> _parser = new pb::MessageParser<CmdGoddessTrialInsSwitchStageReq>(() => new CmdGoddessTrialInsSwitchStageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialInsSwitchStageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_InsSwitchStageRes = 5016;
  /// </summary>
  public sealed class CmdGoddessTrialInsSwitchStageRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialInsSwitchStageRes> _parser = new pb::MessageParser<CmdGoddessTrialInsSwitchStageRes>(() => new CmdGoddessTrialInsSwitchStageRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialInsSwitchStageRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_TopicDiffiFirstRankReq = 5017; //请求主题难度首通排行榜
  /// </summary>
  public sealed class CmdGoddessTrialTopicDiffiFirstRankReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankReq> _parser = new pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankReq>(() => new CmdGoddessTrialTopicDiffiFirstRankReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_TopicDiffiFirstRankRes = 5018;
  /// </summary>
  public sealed class CmdGoddessTrialTopicDiffiFirstRankRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankRes> _parser = new pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankRes>(() => new CmdGoddessTrialTopicDiffiFirstRankRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialTopicDiffiFirstRankRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicDiffiRank" field.</summary>
    public const int TopicDiffiRankFieldNumber = 1;
    private global::Packet.TopicDiffiRank topicDiffiRank_;
    /// <summary>
    ///主题难度下排行榜信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TopicDiffiRank TopicDiffiRank {
      get { return topicDiffiRank_; }
      set {
        topicDiffiRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topicDiffiRank_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopicDiffiRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topicDiffiRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopicDiffiRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (topicDiffiRank_ == null) {
              topicDiffiRank_ = new global::Packet.TopicDiffiRank();
            }
            input.ReadMessage(topicDiffiRank_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetTeamInsInfoOnVoteInInsReq = 5019; //多人投票进副本前,获取全队员最高通关副本信息
  /// </summary>
  public sealed class CmdGoddessTrialGetTeamInsInfoOnVoteInInsReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsReq> _parser = new pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsReq>(() => new CmdGoddessTrialGetTeamInsInfoOnVoteInInsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetTeamInsInfoOnVoteInInsRes = 5020;
  /// </summary>
  public sealed class CmdGoddessTrialGetTeamInsInfoOnVoteInInsRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsRes> _parser = new pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsRes>(() => new CmdGoddessTrialGetTeamInsInfoOnVoteInInsRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetTeamInsInfoOnVoteInInsRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "teamMemInsData" field.</summary>
    public const int TeamMemInsDataFieldNumber = 1;
    private global::Packet.GoddessTrialTeamMemData teamMemInsData_;
    /// <summary>
    ///全队队员最高通关副本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GoddessTrialTeamMemData TeamMemInsData {
      get { return teamMemInsData_; }
      set {
        teamMemInsData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamMemInsData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamMemInsData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamMemInsData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamMemInsData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamMemInsData_ == null) {
              teamMemInsData_ = new global::Packet.GoddessTrialTeamMemData();
            }
            input.ReadMessage(teamMemInsData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetFirstTeamAwardReq = 5029; //首通队员领取首通奖励(gamesvr处理)
  /// </summary>
  public sealed class CmdGoddessTrialGetFirstTeamAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardReq> _parser = new pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardReq>(() => new CmdGoddessTrialGetFirstTeamAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetFirstTeamAwardRes = 5030;
  /// </summary>
  public sealed class CmdGoddessTrialGetFirstTeamAwardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardRes> _parser = new pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardRes>(() => new CmdGoddessTrialGetFirstTeamAwardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetFirstTeamAwardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetFirstRankRoleDetailInfoReq = 5031; //获取首通排行榜队员详细信息请求(gamesvr处理)
  /// </summary>
  public sealed class CmdGoddessTrialGetFirstRankRoleDetailInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoReq> _parser = new pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoReq>(() => new CmdGoddessTrialGetFirstRankRoleDetailInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    ///如果是请求者自己 不用在发这个请求了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_GetFirstRankRoleDetailInfoRes = 5030;
  /// </summary>
  public sealed class CmdGoddessTrialGetFirstRankRoleDetailInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoRes> _parser = new pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoRes>(() => new CmdGoddessTrialGetFirstRankRoleDetailInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialGetFirstRankRoleDetailInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "roleScore" field.</summary>
    public const int RoleScoreFieldNumber = 3;
    private uint roleScore_;
    /// <summary>
    ///人物评分  原排行榜已经有了 这里不再返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleScore {
      get { return roleScore_; }
      set {
        roleScore_ = value;
      }
    }

    /// <summary>Field number for the "petScore" field.</summary>
    public const int PetScoreFieldNumber = 4;
    private uint petScore_;
    /// <summary>
    ///宠物评分 原排行榜已经有了 这里不再返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetScore {
      get { return petScore_; }
      set {
        petScore_ = value;
      }
    }

    /// <summary>Field number for the "heroId" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    /// <summary>
    ///英雄形象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "dressFashionList" field.</summary>
    public const int DressFashionListFieldNumber = 5;
    private global::Packet.MapFashionList dressFashionList_;
    /// <summary>
    ///穿戴的时装数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.MapFashionList DressFashionList {
      get { return dressFashionList_; }
      set {
        dressFashionList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (RoleScore != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RoleScore);
      }
      if (PetScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PetScore);
      }
      if (dressFashionList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DressFashionList);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (RoleScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleScore);
      }
      if (PetScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetScore);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (dressFashionList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DressFashionList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleScore = input.ReadUInt32();
            break;
          }
          case 32: {
            PetScore = input.ReadUInt32();
            break;
          }
          case 42: {
            if (dressFashionList_ == null) {
              dressFashionList_ = new global::Packet.MapFashionList();
            }
            input.ReadMessage(dressFashionList_);
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGoddessTrialTopicUnlockNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialTopicUnlockNtf> _parser = new pb::MessageParser<CmdGoddessTrialTopicUnlockNtf>(() => new CmdGoddessTrialTopicUnlockNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialTopicUnlockNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///女神试炼主题表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGoddessTrialTopicFirstTeamNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialTopicFirstTeamNtf> _parser = new pb::MessageParser<CmdGoddessTrialTopicFirstTeamNtf>(() => new CmdGoddessTrialTopicFirstTeamNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialTopicFirstTeamNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private global::Packet.GoddessTeamEntry team_;
    /// <summary>
    ///首通队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.GoddessTeamEntry Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (team_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Team);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (team_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Team);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (team_ == null) {
              team_ = new global::Packet.GoddessTeamEntry();
            }
            input.ReadMessage(team_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdGoddessTrialTopicInsPropertyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialTopicInsPropertyNtf> _parser = new pb::MessageParser<CmdGoddessTrialTopicInsPropertyNtf>(() => new CmdGoddessTrialTopicInsPropertyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialTopicInsPropertyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "insProperty" field.</summary>
    public const int InsPropertyFieldNumber = 1;
    private uint insProperty_;
    /// <summary>
    ///本周副本特性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InsProperty {
      get { return insProperty_; }
      set {
        insProperty_ = value;
      }
    }

    /// <summary>Field number for the "aiProperty" field.</summary>
    public const int AiPropertyFieldNumber = 2;
    private uint aiProperty_;
    /// <summary>
    ///本周AI特性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AiProperty {
      get { return aiProperty_; }
      set {
        aiProperty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InsProperty != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InsProperty);
      }
      if (AiProperty != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AiProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InsProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InsProperty);
      }
      if (AiProperty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AiProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InsProperty = input.ReadUInt32();
            break;
          }
          case 16: {
            AiProperty = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageStartVoteNtf = 5014; //在副本中开始选择关卡投票通知
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageStartVoteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageStartVoteNtf> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageStartVoteNtf>(() => new CmdGoddessTrialSelectStageStartVoteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageStartVoteNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private uint instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InstanceId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InstanceId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InstanceId = input.ReadUInt32();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageVoteProcessNtf = 5015; //在副本中选择关卡投票过程通知
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageVoteProcessNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageVoteProcessNtf> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageVoteProcessNtf>(() => new CmdGoddessTrialSelectStageVoteProcessNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageVoteProcessNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageIndex" field.</summary>
    public const int StageIndexFieldNumber = 1;
    private uint stageIndex_;
    /// <summary>
    ///投票关卡index 0 1 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageIndex {
      get { return stageIndex_; }
      set {
        stageIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageVoteEndNtf = 5016; //在副本中选择关卡投票结果通知
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageVoteEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageVoteEndNtf> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageVoteEndNtf>(() => new CmdGoddessTrialSelectStageVoteEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageVoteEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "stageIndex" field.</summary>
    public const int StageIndexFieldNumber = 1;
    private uint stageIndex_;
    /// <summary>
    ///投票结果关卡index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageIndex {
      get { return stageIndex_; }
      set {
        stageIndex_ = value;
      }
    }

    /// <summary>Field number for the "voteInfo" field.</summary>
    public const int VoteInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdGoddessTrialSelectStageVoteEndNtf.Types.VoteInfo> _repeated_voteInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdGoddessTrialSelectStageVoteEndNtf.Types.VoteInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdGoddessTrialSelectStageVoteEndNtf.Types.VoteInfo> voteInfo_ = new pbc::RepeatedField<global::Packet.CmdGoddessTrialSelectStageVoteEndNtf.Types.VoteInfo>();
    /// <summary>
    ///投票信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdGoddessTrialSelectStageVoteEndNtf.Types.VoteInfo> VoteInfo {
      get { return voteInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StageIndex);
      }
      voteInfo_.WriteTo(output, _repeated_voteInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageIndex);
      }
      size += voteInfo_.CalculateSize(_repeated_voteInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            voteInfo_.AddEntriesFrom(input, _repeated_voteInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdGoddessTrialSelectStageVoteEndNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class VoteInfo : pb::IMessage {
        private static readonly pb::MessageParser<VoteInfo> _parser = new pb::MessageParser<VoteInfo>(() => new VoteInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<VoteInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "stageIndex" field.</summary>
        public const int StageIndexFieldNumber = 1;
        private uint stageIndex_;
        /// <summary>
        ///投票关卡index 0 1 2
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StageIndex {
          get { return stageIndex_; }
          set {
            stageIndex_ = value;
          }
        }

        /// <summary>Field number for the "voteNum" field.</summary>
        public const int VoteNumFieldNumber = 2;
        private uint voteNum_;
        /// <summary>
        ///投票数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VoteNum {
          get { return voteNum_; }
          set {
            voteNum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StageIndex != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(StageIndex);
          }
          if (VoteNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(VoteNum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StageIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageIndex);
          }
          if (VoteNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoteNum);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                StageIndex = input.ReadUInt32();
                break;
              }
              case 16: {
                VoteNum = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///CmdGoddessTrial_SelectStageCancelVoteNtf = 5017; //在副本中取消选择关卡投票通知
  /// </summary>
  public sealed class CmdGoddessTrialSelectStageCancelVoteNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialSelectStageCancelVoteNtf> _parser = new pb::MessageParser<CmdGoddessTrialSelectStageCancelVoteNtf>(() => new CmdGoddessTrialSelectStageCancelVoteNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialSelectStageCancelVoteNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_InsStagePassAwardNtf = 5028; //玩家副本关卡通关的奖励列表通知
  /// </summary>
  public sealed class CmdGoddessTrialInsStagePassAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialInsStagePassAwardNtf> _parser = new pb::MessageParser<CmdGoddessTrialInsStagePassAwardNtf>(() => new CmdGoddessTrialInsStagePassAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialInsStagePassAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "awardList" field.</summary>
    public const int AwardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_awardList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> awardList_ = new pbc::RepeatedField<global::Packet.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> AwardList {
      get { return awardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awardList_.WriteTo(output, _repeated_awardList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awardList_.CalculateSize(_repeated_awardList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            awardList_.AddEntriesFrom(input, _repeated_awardList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_ResetInsAwardNtf = 5033; //重置玩家领取奖励信息
  /// </summary>
  public sealed class CmdGoddessTrialResetInsAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialResetInsAwardNtf> _parser = new pb::MessageParser<CmdGoddessTrialResetInsAwardNtf>(() => new CmdGoddessTrialResetInsAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialResetInsAwardNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///CmdGoddessTrial_UpdateInsAwardNtf = 5034; //更新奖励次数
  /// </summary>
  public sealed class CmdGoddessTrialUpdateInsAwardNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdGoddessTrialUpdateInsAwardNtf> _parser = new pb::MessageParser<CmdGoddessTrialUpdateInsAwardNtf>(() => new CmdGoddessTrialUpdateInsAwardNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdGoddessTrialUpdateInsAwardNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "topicId" field.</summary>
    public const int TopicIdFieldNumber = 1;
    private uint topicId_;
    /// <summary>
    ///主题id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopicId {
      get { return topicId_; }
      set {
        topicId_ = value;
      }
    }

    /// <summary>Field number for the "awardCount" field.</summary>
    public const int AwardCountFieldNumber = 2;
    private uint awardCount_;
    /// <summary>
    ///已获得的奖励次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwardCount {
      get { return awardCount_; }
      set {
        awardCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopicId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopicId);
      }
      if (AwardCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwardCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopicId);
      }
      if (AwardCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopicId = input.ReadUInt32();
            break;
          }
          case 16: {
            AwardCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
