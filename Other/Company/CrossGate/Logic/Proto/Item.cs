// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///1400 和 8300
  /// </summary>
  public enum CmdItem {
    CmcItemNone = 0,
    /// <summary>
    /// 拉取背包信息, 讲道理任何时候都能调用
    /// </summary>
    PullPackageDataReq = 1401,
    PullPackageDataRes = 1402,
    /// <summary>
    /// 整理背包
    /// </summary>
    SortPackageDataReq = 1403,
    /// <summary>
    /// 从临时背包取出道具到其他普通背包
    /// </summary>
    MergeTemporaryBoxReq = 1405,
    /// <summary>
    /// 解锁box级别, 增加格子数
    /// </summary>
    UnlockBoxLevelReq = 1407,
    UnlockBoxLevelRes = 1408,
    /// <summary>
    /// 清理目标盒子内的所有newIcon
    /// </summary>
    CleanItemNewIconReq = 1409,
    CleanItemNewIconRes = 1410,
    /// <summary>
    /// 使用道具
    /// </summary>
    UseItemReq = 1411,
    UseItemRes = 1412,
    /// <summary>
    /// 售卖道具
    /// </summary>
    SellItemReq = 1413,
    SellItemRes = 1414,
    /// <summary>
    /// 移动到银行
    /// </summary>
    TransformItemReq = 1415,
    /// <summary>
    /// 穿上装备
    /// </summary>
    EquipReq = 1417,
    EquipRes = 1418,
    /// <summary>
    /// 附魔
    /// </summary>
    EnchantEquipmentReq = 1419,
    EnchantEquipmentRes = 1420,
    /// <summary>
    /// 熔炼, 其实就是强化
    /// </summary>
    SmeltEquipmentReq = 1421,
    SmeltEquipmentRes = 1422,
    /// <summary>
    /// 复合合成, 就是淬炼
    /// </summary>
    CompoundEquipmentReq = 1423,
    CompoundEquipmentRes = 1424,
    /// <summary>
    /// 镶嵌宝石
    /// </summary>
    InlayJewelEquipmentReq = 1425,
    InlayJewelEquipmentRes = 1426,
    /// <summary>
    /// 合成宝石
    /// </summary>
    ComposeJewelReq = 1427,
    ComposeJewelRes = 1428,
    /// <summary>
    /// 淬炼精华, 取萃取/榨取之义
    /// </summary>
    ExtractEquipmentReq = 1429,
    ExtractEquipmentRes = 1430,
    /// <summary>
    /// 修复
    /// </summary>
    RepairEquipmentReq = 1431,
    RepairEquipmentRes = 1432,
    /// <summary>
    /// 兑换金币
    /// </summary>
    ExchangeCurrencyReq = 1433,
    ExchangeCurrencyRes = 1434,
    /// <summary>
    /// 打造装备
    /// </summary>
    BuildEquipmentReq = 1435,
    BuildEquipmentRes = 1436,
    /// <summary>
    /// 卸下装备
    /// </summary>
    UnloadEquipmentReq = 1437,
    UnloadEquipmentRes = 1438,
    /// <summary>
    /// 还原熔炼效果
    /// </summary>
    RevertSmeltReq = 1439,
    RevertSmeltRes = 1440,
    /// <summary>
    /// 通过ItemID使用道具
    /// </summary>
    UseItemByItemIdreq = 1441,
    UseItemByItemIdres = 1442,
    /// <summary>
    /// 卸下珠宝
    /// </summary>
    UnloadJewelReq = 1443,
    UnloadJewelRes = 1444,
    /// <summary>
    /// 快速合成宝石
    /// </summary>
    QuickComposeJewelReq = 1445,
    QuickComposeJewelRes = 1446,
    /// <summary>
    /// 广播最新的武器itemID
    /// </summary>
    BroadcastWeaponChangeNtf = 1447,
    /// <summary>
    /// 分解装备请求
    /// </summary>
    DecomposeEquipmentReq = 1448,
    DecomposeEquipmentRes = 1449,
    /// <summary>
    ///分解道具请求
    /// </summary>
    DecomposeItemReq = 1450,
    /// <summary>
    ///分解道具应答
    /// </summary>
    DecomposeItemRes = 1451,
    /// <summary>
    /// 丢弃道具请求
    /// </summary>
    DisCardItemReq = 1452,
    /// <summary>
    /// 丢弃道具应答
    /// </summary>
    DisCardItemRes = 1453,
    /// <summary>
    ///道具合成
    /// </summary>
    ComposeItemReq = 1454,
    /// <summary>
    /// </summary>
    ComposeItemRes = 1455,
    /// <summary>
    /// 使用锻铸替换原来的套装属性
    /// </summary>
    BuildEquipmentUseReq = 1456,
    /// <summary>
    ///可能用不到 上个协议会返回装备得更新
    /// </summary>
    BuildEquipmentUseRes = 1457,
    /// <summary>
    ///装备水晶
    /// </summary>
    EquipCrystalReq = 1458,
    EquipCrystalAck = 1459,
    /// <summary>
    ///兑换水晶
    /// </summary>
    ExchangeCrystalReq = 1460,
    ExchangeCrystalAck = 1461,
    /// <summary>
    ///装备、卸下饰品
    /// </summary>
    OrnamentFitReq = 1462,
    OrnamentFitRes = 1463,
    /// <summary>
    ///升级饰品
    /// </summary>
    OrnamentLvUpReq = 1464,
    OrnamentLvUpRes = 1465,
    /// <summary>
    ///重铸饰品
    /// </summary>
    OrnamentRebuildReq = 1466,
    OrnamentRebuildRes = 1467,
    /// <summary>
    ///分解饰品
    /// </summary>
    OrnamentDecomposeReq = 1468,
    OrnamentDecomposeRes = 1469,
    /// <summary>
    ///一键合成饰品（含额外属性无法使用一键合成）
    /// </summary>
    OrnamentOneKeyLvUpReq = 1470,
    OrnamentOneKeyLvUpRes = 1471,
    /// <summary>
    ///道具每日使用限制
    /// </summary>
    DayLimitUpdateNtf = 1472,
    /// <summary>
    ///自选礼包
    /// </summary>
    OptionalGiftPackReq = 1473,
    /// <summary>
    ///自选礼包返回
    /// </summary>
    OptionalGiftPackRes = 1474,
    /// <summary>
    /// 通知货币冻结
    /// </summary>
    FreezeCurrencyNtf = 1475,
    /// <summary>
    /// 通知货币解冻
    /// </summary>
    UnfreezeCurrencyNtf = 1476,
    /// <summary>
    /// 活力兑换金币请求
    /// </summary>
    EnergyExChangeGoldReq = 1477,
    /// <summary>
    /// 活力兑换金币返回
    /// </summary>
    EnergyExChangeGoldRes = 1478,
    /// <summary>
    /// 鉴定道具
    /// </summary>
    RefreshItemReq = 1479,
    /// <summary>
    ///一键出售道具 
    /// </summary>
    BatchSellReq = 1480,
    /// <summary>
    ///一键分解道具
    /// </summary>
    BatchDeComposeReq = 1481,
    /// <summary>
    ///一件分解返回
    /// </summary>
    BatchDeComposeRes = 1482,
    /// <summary>
    ///一键出售返回
    /// </summary>
    BatchSellRes = 1483,
    /// <summary>
    /// GMT 通知货币强制解冻
    /// </summary>
    ForceUnfreezeCurrencyNtf = 1484,
    /// <summary>
    ///制造宠物装备
    /// </summary>
    BuildPetEquipReq = 1485,
    BuildPetEquipRes = 1486,
    /// <summary>
    ///炼化宠物装备
    /// </summary>
    SmeltPetEquipReq = 1487,
    SmeltPetEquipRes = 1488,
    /// <summary>
    ///装备、卸下宠物装备
    /// </summary>
    FitPetEquipReq = 1489,
    FitPetEquipRes = 1490,
    /// <summary>
    ///分解宠物装备
    /// </summary>
    DecomposePetEquipReq = 1491,
    DecomposePetEquipRes = 1492,
    /// <summary>
    ///饰品重铸锁定
    /// </summary>
    OrnamentLockReq = 1493,
    OrnamentLockRes = 1494,
    /// <summary>
    ///选择宝石等级属性
    /// </summary>
    JewelLevelAttrSelectReq = 1495,
    /// <summary>
    ///选择宝石等级属性返回 
    /// </summary>
    JewelLevelAttrSelectRes = 1496,
    /// <summary>
    ///装备重铸 就是把装备转换成新的同阶装备
    /// </summary>
    RebuildEquipReq = 1497,
    /// <summary>
    ///装备重铸返回
    /// </summary>
    RebuildEquipRes = 1498,
    /// <summary>
    ///装备洗练特效属性
    /// </summary>
    ReFreshEquipEffectReq = 8300,
    /// <summary>
    ///装备洗练特效属性
    /// </summary>
    ReFreshEquipEffectRes = 8301,
    /// <summary>
    ///装备部位升级
    /// </summary>
    BodyEnhanceReq = 8302,
    /// <summary>
    ///装备部位升级
    /// </summary>
    BodyEnhanceRes = 8303,
    /// <summary>
    ///刷新强化等级特效
    /// </summary>
    BodyEnhanceEffectRefreashReq = 8304,
    /// <summary>
    ///刷新强化等级特效    
    /// </summary>
    BodyEnhanceEffectRefreashRes = 8305,
    /// <summary>
    ///给道具上锁
    /// </summary>
    LockItemReq = 8306,
    /// <summary>
    ///道具上锁返回
    /// </summary>
    LockItemRes = 8307,
  }

  public enum ItemActiveReason {
    None = 0,
    CleanNewIcon = 1400,
    /// <summary>
    /// 使用道具
    /// </summary>
    UseItem = 1401,
    /// <summary>
    /// 战斗中使用道具
    /// </summary>
    UseItemBattle = 1402,
    /// <summary>
    /// 伙伴铭文分解
    /// </summary>
    RuneDecompose = 1403,
    /// <summary>
    /// 兑换货币
    /// </summary>
    ExchangeCurrency = 1404,
    /// <summary>
    /// 鉴定道具
    /// </summary>
    RefreshItem = 1405,
    /// <summary>
    /// 出售道具
    /// </summary>
    SellItem = 1406,
    /// <summary>
    /// 改名
    /// </summary>
    RoleRename = 1407,
    /// <summary>
    /// GM删除道具
    /// </summary>
    GmdeleteItem = 1408,
    /// <summary>
    /// GM增加道具
    /// </summary>
    GmaddItem = 1409,
    /// <summary>
    /// 解锁背包等级
    /// </summary>
    UnlockBoxLevel = 1410,
    /// <summary>
    /// 补偿邮件
    /// </summary>
    MailRebate = 1411,
    /// <summary>
    /// 还原熔炼
    /// </summary>
    RevertSmelt = 1412,
    /// <summary>
    /// 装备熔炼
    /// </summary>
    Smelt = 1413,
    /// <summary>
    /// 镶嵌宝石
    /// </summary>
    InlayJewel = 1414,
    /// <summary>
    /// 卸载宝石
    /// </summary>
    UnloadJewel = 1415,
    /// <summary>
    /// 装备附魔
    /// </summary>
    Enchant = 1416,
    /// <summary>
    /// 修理装备
    /// </summary>
    RepairEquipment = 1417,
    /// <summary>
    /// ItemActiveReason_AbradeEquipment = 1418;    // 无效枚举
    /// </summary>
    ComposeJewel = 1419,
    /// <summary>
    /// ItemActiveReason_GMBuildEquipmentSuit = 1420;// 无效枚举
    /// </summary>
    BuildEquipmentSuit = 1421,
    /// <summary>
    /// 无效枚举
    /// </summary>
    EquipEquipment = 1422,
    /// <summary>
    /// 淬炼精华
    /// </summary>
    ExtractEquipment = 1423,
    /// <summary>
    /// 卸下装备
    /// </summary>
    UnloadEquipment = 1424,
    /// <summary>
    /// ItemActiveReason_GMCLearBox = 1425;         // 无效枚举
    /// </summary>
    DecomposeEquip = 1426,
    /// <summary>
    /// 道具分解
    /// </summary>
    DecomposeItem = 1427,
    /// <summary>
    /// 道具丢弃
    /// </summary>
    DisCardItem = 1428,
    /// <summary>
    /// npc好感度治病
    /// </summary>
    RecoverNpc = 1429,
    /// <summary>
    /// npc好感度送礼
    /// </summary>
    NpcGift = 1430,
    /// <summary>
    /// 好感度升阶
    /// </summary>
    FavorabilityUp = 1431,
    /// <summary>
    /// 好感度区域奖励
    /// </summary>
    FavorabilityZone = 1432,
    /// <summary>
    /// 称号套装奖励
    /// </summary>
    TitleSuit = 1433,
    /// <summary>
    /// 道具合成
    /// </summary>
    Compose = 1434,
    /// <summary>
    /// ItemActiveReason_CreateGuild = 1435;        // 无效枚举
    /// ItemActiveReason_GuildSignIn = 1436;        // 无效枚举
    /// ItemActiveReason_GuildDonate = 1437;        // 无效枚举
    /// ItemActiveReason_GuildChangeName = 1438;    // 无效枚举
    /// ItemActiveReason_PayOrderAdd = 1439;        // 无效枚举
    /// </summary>
    DailyActivityAdd = 1440,
    /// <summary>
    /// 问卷星
    /// </summary>
    Wjx = 1441,
    /// <summary>
    /// 礼包码
    /// </summary>
    ExchangeCdkey = 1442,
    /// <summary>
    /// 历练等级提升
    /// </summary>
    ExperienceLvUp = 1443,
    /// <summary>
    /// 历练点重置 
    /// </summary>
    ExperienceReset = 1444,
    /// <summary>
    /// 上交NPC    
    /// </summary>
    GiveNpc = 1445,
    /// <summary>
    /// ItemActiveReason_PowerStone     = 1446;     // 无效枚举
    /// ItemActiveReason_TimeOut        = 1447;     // 无效枚举
    /// </summary>
    TreasureUnlock = 1448,
    /// <summary>
    /// 世界boss   
    /// </summary>
    WildBoss = 1449,
    /// <summary>
    /// ItemActiveReason_Arena          = 1450;     // 无效枚举
    /// </summary>
    LifeSkill = 1451,
    /// <summary>
    /// 聊天
    /// </summary>
    Chat = 1452,
    /// <summary>
    /// ItemActiveReason_TerrorInstance = 1453;     // 无效枚举
    /// </summary>
    Shop = 1454,
    /// <summary>
    /// ItemActiveReason_GoddessTrail   = 1455;     // 无效枚举
    /// </summary>
    CrystalExchange = 1456,
    /// <summary>
    /// 对话选择 
    /// </summary>
    DialogueChoose = 1457,
    /// <summary>
    /// 用户分层调查
    /// </summary>
    LayerReward = 1458,
    /// <summary>
    /// 饰品升级
    /// </summary>
    OrnamentLvUp = 1459,
    /// <summary>
    /// 饰品重铸
    /// </summary>
    OrnamentRebuild = 1460,
    /// <summary>
    /// 饰品分解
    /// </summary>
    OrnamentDecompose = 1461,
    /// <summary>
    /// 穿戴饰品
    /// </summary>
    OrnamentFit = 1462,
    /// <summary>
    ///商店赠送
    /// </summary>
    ShopGift = 1463,
    /// <summary>
    /// 战斗消耗
    /// </summary>
    BattleCost = 1464,
    /// <summary>
    /// 战斗奖励
    /// </summary>
    BattleReward = 1465,
    /// <summary>
    /// ItemActiveReason_HandInCuisineGuild = 1466; //无效枚举
    /// ItemActiveReason_HandInCuisineReward = 1467; //无效枚举
    /// ItemActiveReason_GuildRecover = 1468; //无效枚举
    /// ItemActiveReason_GuildGetIngredient = 1469; //无效枚举
    /// </summary>
    OptionalGift = 1470,
    /// <summary>
    /// ItemActiveReason_GuildPartyHangUp = 1471; //无效枚举
    /// </summary>
    FreezeCurrency = 1472,
    /// <summary>
    /// 解冻货币
    /// </summary>
    UnfreezeCurrency = 1473,
    /// <summary>
    /// 使用道具得一种 使用完客户端会弹界面展示 单独的reason给客户端屏蔽飘字
    /// </summary>
    UseItemDisPlay = 1474,
    /// <summary>
    /// 好友赠送送礼物
    /// </summary>
    SendFriendGift = 1475,
    /// <summary>
    /// 接受好友礼物
    /// </summary>
    ReceiveFriendGift = 1476,
    /// <summary>
    /// 好友列表扩展
    /// </summary>
    ExtendFriendLimit = 1477,
    /// <summary>
    /// 宴请npc
    /// </summary>
    FeastNpc = 1478,
    /// <summary>
    /// 好友赠送送礼物失败返回
    /// </summary>
    SendFriendGiftError = 1479,
    /// <summary>
    ///以下是经验的reason
    /// </summary>
    AddExp = 1480,
    /// <summary>
    /// 活力兑换金币(打工)
    /// </summary>
    EnergyExChangeGold = 1481,
    /// <summary>
    /// 野怪掉落
    /// </summary>
    WildMonsterDrop = 1482,
    /// <summary>
    ///来自于GMT的玩家数据修正接口 旧版接口定义 等待删除
    /// </summary>
    GmtUserDataFix = 1483,
    /// <summary>
    ///绑定手机奖励
    /// </summary>
    BindPhoneAward = 1484,
    /// <summary>
    ///来自于GMT的玩家数据修正接口
    /// </summary>
    GmtRoleItemChange = 1485,
    /// <summary>
    ///代金券
    /// </summary>
    ChargeRebate = 1486,
    /// <summary>
    ///批量一键分解
    /// </summary>
    BatchDecompose = 1487,
    OperateReward = 1488,
    /// <summary>
    ///制造宠物装备
    /// </summary>
    BuildPetEquip = 1489,
    /// <summary>
    ///炼化宠物装备
    /// </summary>
    SmeltPetEquip = 1490,
    /// <summary>
    ///卸下宠物装备
    /// </summary>
    UnloadPetEquip = 1491,
    /// <summary>
    ///分解宠物装备
    /// </summary>
    DecomposePetEquip = 1492,
    Revert = 1493,
    /// <summary>
    ///家族历练方案
    /// </summary>
    ExperiencePlanAdd = 1494,
    /// <summary>
    ///宠物加点方案
    /// </summary>
    PetPointPlanAdd = 1495,
    /// <summary>
    ///宠物修正方案
    /// </summary>
    PetEnhancePointPlanAdd = 1496,
    /// <summary>
    ///装备重铸
    /// </summary>
    EquipRebuild = 1497,
    /// <summary>
    ///洗练特效属性
    /// </summary>
    EquipRefreshEffect = 1498,
    /// <summary>
    ///来自于GMT的玩家道具删除接口
    /// </summary>
    GmtRoleItemDel = 1499,
    /// <summary>
    ///重置特效洗练
    /// </summary>
    EquipRefreshEffectReset = 8300,
    /// <summary>
    ///部位升级 装备精通
    /// </summary>
    BodySlotLevelUp = 8301,
    /// <summary>
    ///退款扣魔币
    /// </summary>
    Refound = 8302,
  }

  public enum ItemType {
    None = 0,
    /// <summary>
    ///宠物
    /// </summary>
    RealPet = 1103,
    /// <summary>
    ///货币
    /// </summary>
    Currency = 2000,
    /// <summary>
    ///宝藏
    /// </summary>
    Treasure = 5000,
    /// <summary>
    ///公会数值
    /// </summary>
    Guild = 10200,
  }

  public enum EquipmentSlot {
    /// <summary>
    /// 空
    /// </summary>
    EquipSlotNone = 0,
    /// <summary>
    /// 武器1, 主手
    /// </summary>
    EquipSlotWeapon1 = 1,
    /// <summary>
    /// 武器2, 大概是盾牌之类的
    /// </summary>
    EquipSlotWeapon2 = 2,
    /// <summary>
    /// 头盔
    /// </summary>
    EquipSlotHead = 3,
    /// <summary>
    /// 衣服
    /// </summary>
    EquipSlotClothes = 4,
    /// <summary>
    /// 鞋
    /// </summary>
    EquipSlotFoot = 5,
    /// <summary>
    /// 护符
    /// </summary>
    EquipSlotAmulet = 6,
    /// <summary>
    ///EQUIP_SLOT_CRYSTAL = 8;     // 水晶 (水晶没有放在EquipmentSlot里)
    /// </summary>
    EquipSlotMax = 7,
  }

  public enum OrnamentSlot {
    /// <summary>
    /// 空
    /// </summary>
    None = 0,
    /// <summary>
    /// 项链
    /// </summary>
    Necklace = 1,
    /// <summary>
    /// 耳环
    /// </summary>
    Earring = 2,
    /// <summary>
    /// 戒指
    /// </summary>
    Ring = 3,
    Max = 4,
  }

  public enum PetEquipSlot {
    /// <summary>
    /// 空
    /// </summary>
    None = 0,
    /// <summary>
    /// 魔纹
    /// </summary>
    Type1 = 1,
    /// <summary>
    /// 魔晶
    /// </summary>
    Type2 = 2,
    /// <summary>
    /// 魔粹
    /// </summary>
    Type3 = 3,
    Max = 4,
  }

  public enum EquipmentColour {
    /// <summary>
    /// 空
    /// </summary>
    EquipColourNone = 0,
    /// <summary>
    ///白色装备
    /// </summary>
    EquipColourWhite = 1,
    /// <summary>
    ///绿色装备
    /// </summary>
    EquipColourGreen = 2,
    /// <summary>
    ///蓝色装备
    /// </summary>
    EquipColourBlue = 3,
    /// <summary>
    ///紫色装备
    /// </summary>
    EquipColourPurple = 4,
    /// <summary>
    ///橙色装备
    /// </summary>
    EquipColourOrange = 5,
  }

  public enum BuildItemType {
    None = 0,
    /// <summary>
    /// 普通打造
    /// </summary>
    Normal = 1,
    /// <summary>
    /// 强化打造
    /// </summary>
    Intensify = 2,
    /// <summary>
    /// 任务奖励
    /// </summary>
    Task = 3,
    /// <summary>
    /// 副本掉落
    /// </summary>
    InstanceDrop = 4,
  }

  public enum BoxIDEnum {
    BoxIdNull = 0,
    /// <summary>
    /// 普通物品
    /// </summary>
    BoxIdNormal = 1,
    /// <summary>
    /// 任务
    /// </summary>
    BoxIdTask = 2,
    /// <summary>
    /// 材料
    /// </summary>
    BoxIdMaterial = 3,
    /// <summary>
    /// 图鉴
    /// </summary>
    BoxIdHandbook = 4,
    /// <summary>
    /// 银行
    /// </summary>
    BoxIdBank = 5,
    /// <summary>
    /// 临时包
    /// </summary>
    BoxIdTemporary = 6,
    /// <summary>
    /// 这里面放金币钻石之类的
    /// </summary>
    BoxIdCurrency = 7,
    /// <summary>
    /// 装备
    /// </summary>
    BoxIdEquipment = 8,
    /// <summary>
    /// 一些要被保存的道具, 比如被镶嵌的宝石之类的(待恢复表)
    /// </summary>
    BoxIdRestore = 9,
    /// <summary>
    /// 隐藏背包, 客户端不会显示这些道具
    /// </summary>
    BoxIdHide = 10,
    /// <summary>
    /// 水晶
    /// </summary>
    BoxIdCrystal = 11,
    /// <summary>
    /// 饰品
    /// </summary>
    BoxIdOrnament = 12,
    /// <summary>
    /// 宠物元核(宠物装备)
    /// </summary>
    BoxIdPetequip = 13,
    /// <summary>
    /// 变身卡
    /// </summary>
    BoxIdShapeshift = 14,
    /// <summary>
    /// 最大BOX_ID
    /// </summary>
    BoxIdMax = 15,
  }

  public enum ErrorItem {
    /// <summary>
    /// SUCCESS !
    /// </summary>
    None = 0,
    /// <summary>
    /// 没找到Box
    /// </summary>
    CannotFoundBox = 1401,
    /// <summary>
    /// 附魔等级不足 附魔材料等级高于装备穿戴等级
    /// </summary>
    EnhantLevelLimit = 1402,
    /// <summary>
    /// 不能创建
    /// </summary>
    CannotCreateItem = 1403,
    /// <summary>
    /// 不能删除
    /// </summary>
    CannotDeleteItem = 1404,
    /// <summary>
    /// 不能更新
    /// </summary>
    CannotUpdateItem = 1405,
    /// <summary>
    /// 不能移动
    /// </summary>
    CannotMoveItem = 1406,
    /// <summary>
    /// 不能找到目标item, 一般是客户端给的uuid不存在
    /// </summary>
    CannotFoundItem = 1407,
    /// <summary>
    /// box不能容纳这个道具, 一般是boxid冲突
    /// </summary>
    BoxCannotContainerTheItem = 1408,
    /// <summary>
    /// 格子满了
    /// </summary>
    BoxHasFull = 1409,
    /// <summary>
    /// 无法提升box等级
    /// </summary>
    CannotUpgradeBoxLevel = 1410,
    /// <summary>
    /// 无法使用这个box里的道具
    /// </summary>
    CannotUseItemFromTheBox = 1411,
    /// <summary>
    /// 道具数量不足
    /// </summary>
    ItemCountNotEnough = 1412,
    /// <summary>
    /// 服务器内部错误
    /// </summary>
    ServerInnerProcessError = 1413,
    /// <summary>
    /// 无法使用该道具
    /// </summary>
    CannotUseTheItem = 1414,
    /// <summary>
    /// 找不到道具的info
    /// </summary>
    CannotFoundTheItemInfo = 1415,
    /// <summary>
    /// slot非法
    /// </summary>
    SlotInvalid = 1416,
    /// <summary>
    /// slot和该装备可放置的slot不一致
    /// </summary>
    SlotNotMatch = 1417,
    /// <summary>
    /// 找不到装备的info
    /// </summary>
    CannotFoundTheEquipInfo = 1418,
    /// <summary>
    /// 打造的级别不合法
    /// </summary>
    BuildTypeInvalid = 1419,
    /// <summary>
    /// 找不到宝石的info
    /// </summary>
    CannotFoundTheJewelInfo = 1420,
    /// <summary>
    /// 不能合成宝石, 满极了
    /// </summary>
    JewelHasBeTheHighestLevel = 1421,
    /// <summary>
    /// 宝石的类型不匹配, 不能镶嵌
    /// </summary>
    InlayJewelTypeNotMatch = 1422,
    /// <summary>
    /// 镶嵌宝石数量过多
    /// </summary>
    InlayJewelTooMany = 1423,
    /// <summary>
    /// 镶嵌宝石类型重复
    /// </summary>
    CannotInlayDuplicateJewelType = 1424,
    /// <summary>
    /// 宝石等级已经到了最大值
    /// </summary>
    JewelLevelHasBeenTheMaxLevel = 1425,
    /// <summary>
    /// 这装备没有属性可以被更改(也许是bug?)
    /// </summary>
    SmeltFailedBecauseNoAttrToChange = 1426,
    /// <summary>
    /// 服务器内部错误, 一般不出现的
    /// </summary>
    ServerError = 1427,
    /// <summary>
    /// 仓库已满
    /// </summary>
    BankHasFull = 1428,
    /// <summary>
    /// 原材料类型错误(一般是附魔打造之类的情况)
    /// </summary>
    SourceMaterialsTypeError = 1429,
    /// <summary>
    /// 这个装备从来就没熔炼过(还原熔炼时的报错)
    /// </summary>
    NoOldSmeltValue = 1430,
    /// <summary>
    /// 没有老的同id的附魔, 无法提升
    /// </summary>
    EnchantIntensifyNoOldElem = 1431,
    /// <summary>
    /// 同时存在的附魔个数太多了
    /// </summary>
    EnchantTooMany = 1432,
    /// <summary>
    /// 附魔值已经到达最大值, 不能附魔了
    /// </summary>
    EnchantValueHasBeenMax = 1433,
    /// <summary>
    /// 无法再降低最大耐久度了
    /// </summary>
    CannotReduceMaxDurability = 1434,
    /// <summary>
    /// 无法再使用更多次的普通修理
    /// </summary>
    CanootDoCommonRepairMoreTimes = 1435,
    /// <summary>
    /// 不能修理0最大耐久副的装备
    /// </summary>
    CannotRepairEquipmentMaxDurabilityZero = 1436,
    /// <summary>
    /// 不能对非随身背包进行操作
    /// </summary>
    CannotOperatorItemInNoCarryBox = 1437,
    /// <summary>
    /// 道具不在随身背包中
    /// </summary>
    ItemNotInCarryBox = 1438,
    /// <summary>
    /// 附魔槽位错误
    /// </summary>
    EnchantSlotError = 1439,
    /// <summary>
    /// 耐久度已经满了
    /// </summary>
    DurabilityHasBeenMaxValue = 1440,
    /// <summary>
    /// 不能同时有相同type_id的装备在身上
    /// </summary>
    CannotEquipDuplicateTypeId = 1441,
    /// <summary>
    /// 装备等级太低, 无法淬炼
    /// </summary>
    LevelTooLowToDoExtract = 1442,
    /// <summary>
    /// 属性索引错误
    /// </summary>
    AttributeIndexError = 1443,
    /// <summary>
    /// 洗点道具不足
    /// </summary>
    RepointItemNotEnough = 1444,
    /// <summary>
    /// 等级太低不能使用道具
    /// </summary>
    TooLowLevelToUseItem = 1445,
    /// <summary>
    /// 打造装备的buildType错误
    /// </summary>
    EquipmentBuildTypeError = 1446,
    BoxInfoNotFound = 1447,
    /// <summary>
    /// 未达到装备等级
    /// </summary>
    EquipLevelLimit = 1448,
    /// <summary>
    ///临时背包满了，单独定义个错误，单独处理
    /// </summary>
    TempBoxFull = 1449,
    /// <summary>
    /// </summary>
    CannotSell = 1450,
    /// <summary>
    /// 找不到打造套装的配置
    /// </summary>
    CannotFoundTheSuitInfo = 1451,
    /// <summary>
    ///没有这种currency 超过了我数组长度
    /// </summary>
    CurrencyMax = 1452,
    /// <summary>
    ///套装打造书跟 装备部位不匹配
    /// </summary>
    SuitInfoSlotWrong = 1453,
    /// <summary>
    ///套装打造，跟已经有的套装一样的，可能点了多次，也可能玩家选错了
    /// </summary>
    SuitHas = 1454,
    /// <summary>
    ///客户端发过来的装备得位置不对 要么客户端作弊了 要么前后端不一致
    /// </summary>
    SlotWrong = 1455,
    /// <summary>
    ///绑定装备无法熔炼
    /// </summary>
    BindCannotSmelt = 1456,
    /// <summary>
    ///绑定装备无法淬炼
    /// </summary>
    BindCannotExtract = 1457,
    /// <summary>
    ///绑定装备无法套装打造
    /// </summary>
    BindCannotBuild = 1458,
    /// <summary>
    ///装备不满足分解条件
    /// </summary>
    EquipmentCannotDecompose = 1459,
    /// <summary>
    ///装备颜色错误
    /// </summary>
    EquipmentColour = 1460,
    /// <summary>
    ///装备分解增加掉落奖励
    /// </summary>
    EquipmentDecomposeAddDropReward = 1461,
    /// <summary>
    ///道具不能分解
    /// </summary>
    ItemCannotDecompose = 1462,
    /// <summary>
    ///道具不能丢弃
    /// </summary>
    ItemCannotDisCard = 1463,
    /// <summary>
    ///找不到合成配方
    /// </summary>
    ItemComposeInfoNotFound = 1464,
    /// <summary>
    ///没有需要的铸造属性·可能是没锻铸也可能是使用过了
    /// </summary>
    ItemUseSuit = 1465,
    /// <summary>
    ///熔炼没达到颜色
    /// </summary>
    ItemSmeltColor = 1466,
    /// <summary>
    ///淬炼没达到颜色标准
    /// </summary>
    ItemExtractColor = 1467,
    /// <summary>
    ///有宝石不能淬炼
    /// </summary>
    ItemExtractHasJewel = 1468,
    /// <summary>
    ///道具系统上锁
    /// </summary>
    ItemBoxLock = 1469,
    /// <summary>
    ///职业不同 客户端判断了 一般不会出现 但是客户端卡的时候也许会出现在服务器
    /// </summary>
    EquipCareerWrong = 1470,
    /// <summary>
    /// 饰品重复 可能客户端没做 所以这个要提示
    /// </summary>
    OrnamentRepeat = 1471,
    /// <summary>
    /// 打造的装备不能出售
    /// </summary>
    BuildEquipCannotSell = 1472,
    /// <summary>
    /// 打造的装备不能分解
    /// </summary>
    NoBuildEquipCannotDc = 1473,
    /// <summary>
    ///普通修理不需要
    /// </summary>
    NoNeedRepair = 1474,
    /// <summary>
    ///使用装备 配置得参数不对
    /// </summary>
    UseFuncParam = 1475,
    /// <summary>
    /// 道具数量不对
    /// </summary>
    CountErr = 1476,
    /// <summary>
    ///水晶不存在
    /// </summary>
    CrystalNotExist = 1477,
    /// <summary>
    ///货币不足
    /// </summary>
    CurrencyNotEnough = 1478,
    /// <summary>
    /// 有宝石的装备不能出售
    /// </summary>
    HasJewelCannotSell = 1479,
    /// <summary>
    /// 找不到饰品的info
    /// </summary>
    CannotFoundTheOrnamentInfo = 1480,
    /// <summary>
    /// 装备饰品类型错误
    /// </summary>
    OrnamentTypeErr = 1481,
    /// <summary>
    /// 饰品已到最大等级
    /// </summary>
    OrnamentLvMax = 1482,
    /// <summary>
    /// 该饰品没有额外属性可重铸
    /// </summary>
    OrnamentNoExtAttr = 1483,
    /// <summary>
    /// 该饰品不可分解
    /// </summary>
    OrnamentNoDecompose = 1484,
    /// <summary>
    /// 需要先脱下该饰品才能分解
    /// </summary>
    OrnamentBodyDecompose = 1485,
    /// <summary>
    /// 饰品操作条件不足
    /// </summary>
    OrnamentNoCondition = 1486,
    /// <summary>
    /// 饰品堆叠类型错误（有额外属性的饰品设置了堆叠会出错）
    /// </summary>
    OrnamentPileType = 1487,
    /// <summary>
    ///客户端计算错误 发过来的数量不对
    /// </summary>
    QuickComposeJewelNum = 1488,
    /// <summary>
    /// 该饰品不可使用一键合成
    /// </summary>
    OrnamentOneKye = 1489,
    /// <summary>
    /// 物品已达到当日最大使用次数
    /// </summary>
    CannotUseOverLimitCount = 1490,
    /// <summary>
    /// 自选礼包发送的索引错误
    /// </summary>
    OptionalGiftPacketIndexError = 1491,
    /// <summary>
    /// 自选礼包参数配置错误
    /// </summary>
    OptionalGiftPacketParamError = 1492,
    /// <summary>
    /// 自选宝箱超过最大开启数量
    /// </summary>
    OptionalGiftPacketOverMaxCount = 1493,
    /// <summary>
    /// 数量为0
    /// </summary>
    ZeroNum = 1494,
    /// <summary>
    /// 冻结过多
    /// </summary>
    FreezeTooMuch = 1495,
    /// <summary>
    /// 无效的解冻时间
    /// </summary>
    InvalidUnfreezeTime = 1496,
    /// <summary>
    /// 道具使用cd
    /// </summary>
    UseCd = 1497,
    /// <summary>
    ///道具已经过期
    /// </summary>
    OutTime = 1498,
    /// <summary>
    ///道具不能被鉴定
    /// </summary>
    CannotRefresh = 1499,
    /// <summary>
    ///货币没有被冻结
    /// </summary>
    CurrencyNotFreeze = 8300,
    /// <summary>
    /// 找不到宠物装备的info
    /// </summary>
    PetEquipInfo = 8301,
    /// <summary>
    /// 该宠物装备不能炼化
    /// </summary>
    PetEquipSmelt = 8302,
    /// <summary>
    /// 装备宠物装备类型错误
    /// </summary>
    PetEquipTypeErr = 8303,
    /// <summary>
    /// 宠物等级太低无法穿戴该装备
    /// </summary>
    PetEquipLevelLimit = 8304,
    /// <summary>
    /// 宠物装备套装info未找到
    /// </summary>
    PetEquipSuitCsvErr = 8305,
    /// <summary>
    /// 饰品锁定条目数已到最大
    /// </summary>
    OrnamentLockMax = 8306,
    /// <summary>
    /// 饰品锁定消耗配置错误
    /// </summary>
    OrnamentLockErr = 8307,
    /// <summary>
    /// 该饰品条目不可解锁
    /// </summary>
    OrnamentNotUnLock = 8308,
    /// <summary>
    ///批量合成超过最大数量
    /// </summary>
    ComposeInfoMoreThanMax = 8309,
    /// <summary>
    ///该装备不能重铸成目标装备
    /// </summary>
    RebuildInfoNotFound = 8310,
    /// <summary>
    ///不能重铸穿在身上的
    /// </summary>
    RebuildInBody = 8311,
    /// <summary>
    ///已经最大等级
    /// </summary>
    SlotLvlMax = 8312,
    /// <summary>
    ///装备材料不对
    /// </summary>
    SlotLvlMateri = 8313,
    /// <summary>
    /// 刷新部位升级特效还没激活
    /// </summary>
    BodyEffectNotActive = 8314,
    /// <summary>
    ///10级以上只有紫色装备以上可以
    /// </summary>
    BodySlotLvlUpPurple = 8315,
    /// <summary>
    ///上锁了，
    /// </summary>
    Locked = 8316,
  }

  public enum RevertSmeltEnum {
    RevertNoneAttr = 0,
    RevertBaseAttr = 1,
    RevertGreenAttr = 2,
  }

  public enum ItemChangeEnum {
    ItemChangeError = 0,
    /// <summary>
    /// 服务器内部使用, 客户端不用处理
    /// </summary>
    ItemChangeSnap = 1,
    /// <summary>
    /// 道具被创建 可能以后和Update合并, 看后来发展
    /// </summary>
    ItemChangeCreate = 2,
    /// <summary>
    /// 道具被删除
    /// </summary>
    ItemChangeDelete = 3,
    /// <summary>
    /// 道具被更新
    /// </summary>
    ItemChangeUpdatetto = 4,
    /// <summary>
    ///转移 原来就属于玩家的 从临时到背包或者从银行到背包 或者从身上到背包
    /// </summary>
    ItemChangeTransport = 5,
  }

  public enum EnchantTypeEnum {
    EnchantTypeConvert = 0,
    EnchantTypeIntensify = 1,
  }

  public enum RepairTypeEnum {
    /// <summary>
    /// 普通修理
    /// </summary>
    RepairTypeCommon = 0,
    /// <summary>
    /// 强化修理
    /// </summary>
    RepairTypeIntensify = 1,
  }

  #endregion

  #region Messages
  public sealed class AttributeRow : pb::IMessage {
    private static readonly pb::MessageParser<AttributeRow> _parser = new pb::MessageParser<AttributeRow>(() => new AttributeRow());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeRow> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "attrType" field.</summary>
    public const int AttrTypeFieldNumber = 3;
    private uint attrType_;
    /// <summary>
    ///表示上边 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrType {
      get { return attrType_; }
      set {
        attrType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (AttrType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttrType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (AttrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            AttrType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AttributeElem : pb::IMessage {
    private static readonly pb::MessageParser<AttributeElem> _parser = new pb::MessageParser<AttributeElem>(() => new AttributeElem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeElem> Parser { get { return _parser; } }

    /// <summary>Field number for the "attrUID" field.</summary>
    public const int AttrUIDFieldNumber = 4;
    private uint attrUID_;
    /// <summary>
    /// 属性uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrUID {
      get { return attrUID_; }
      set {
        attrUID_ = value;
      }
    }

    /// <summary>Field number for the "sourceItemID" field.</summary>
    public const int SourceItemIDFieldNumber = 1;
    private uint sourceItemID_;
    /// <summary>
    /// 来源id, 比如宝石的实际id, green的实际id, effect的实际id, 提示id是由什么东西得到的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceItemID {
      get { return sourceItemID_; }
      set {
        sourceItemID_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private int endTime_;
    /// <summary>
    /// 截止时间(给附魔用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "attr2" field.</summary>
    public const int Attr2FieldNumber = 5;
    private global::Packet.AttributeRow attr2_;
    /// <summary>
    ///还是改掉这个协议 3里边的attr不用了，用这个里边的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.AttributeRow Attr2 {
      get { return attr2_; }
      set {
        attr2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SourceItemID);
      }
      if (EndTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndTime);
      }
      if (AttrUID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttrUID);
      }
      if (attr2_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Attr2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrUID);
      }
      if (SourceItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceItemID);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (attr2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceItemID = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadInt32();
            break;
          }
          case 32: {
            AttrUID = input.ReadUInt32();
            break;
          }
          case 42: {
            if (attr2_ == null) {
              attr2_ = new global::Packet.AttributeRow();
            }
            input.ReadMessage(attr2_);
            break;
          }
        }
      }
    }

  }

  public sealed class RevertSmeltData : pb::IMessage {
    private static readonly pb::MessageParser<RevertSmeltData> _parser = new pb::MessageParser<RevertSmeltData>(() => new RevertSmeltData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevertSmeltData> Parser { get { return _parser; } }

    /// <summary>Field number for the "smeltAttrUID" field.</summary>
    public const int SmeltAttrUIDFieldNumber = 4;
    private uint smeltAttrUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SmeltAttrUID {
      get { return smeltAttrUID_; }
      set {
        smeltAttrUID_ = value;
      }
    }

    /// <summary>Field number for the "oldValue" field.</summary>
    public const int OldValueFieldNumber = 3;
    private int oldValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldValue {
      get { return oldValue_; }
      set {
        oldValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OldValue);
      }
      if (SmeltAttrUID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SmeltAttrUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SmeltAttrUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SmeltAttrUID);
      }
      if (OldValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            OldValue = input.ReadInt32();
            break;
          }
          case 32: {
            SmeltAttrUID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DurabilityData : pb::IMessage {
    private static readonly pb::MessageParser<DurabilityData> _parser = new pb::MessageParser<DurabilityData>(() => new DurabilityData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurabilityData> Parser { get { return _parser; } }

    /// <summary>Field number for the "currentDurability" field.</summary>
    public const int CurrentDurabilityFieldNumber = 1;
    private uint currentDurability_;
    /// <summary>
    /// 当前耐久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentDurability {
      get { return currentDurability_; }
      set {
        currentDurability_ = value;
      }
    }

    /// <summary>Field number for the "maxDurability" field.</summary>
    public const int MaxDurabilityFieldNumber = 2;
    private uint maxDurability_;
    /// <summary>
    /// 最大耐久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDurability {
      get { return maxDurability_; }
      set {
        maxDurability_ = value;
      }
    }

    /// <summary>Field number for the "commonRepairTimes" field.</summary>
    public const int CommonRepairTimesFieldNumber = 3;
    private uint commonRepairTimes_;
    /// <summary>
    /// 已经普通修理过的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CommonRepairTimes {
      get { return commonRepairTimes_; }
      set {
        commonRepairTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentDurability != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrentDurability);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxDurability);
      }
      if (CommonRepairTimes != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CommonRepairTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentDurability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentDurability);
      }
      if (MaxDurability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDurability);
      }
      if (CommonRepairTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommonRepairTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentDurability = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxDurability = input.ReadUInt32();
            break;
          }
          case 24: {
            CommonRepairTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SmeltAttrElem : pb::IMessage {
    private static readonly pb::MessageParser<SmeltAttrElem> _parser = new pb::MessageParser<SmeltAttrElem>(() => new SmeltAttrElem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmeltAttrElem> Parser { get { return _parser; } }

    /// <summary>Field number for the "fromAttrUID" field.</summary>
    public const int FromAttrUIDFieldNumber = 1;
    private uint fromAttrUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromAttrUID {
      get { return fromAttrUID_; }
      set {
        fromAttrUID_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 2;
    private global::Packet.AttributeElem attr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.AttributeElem Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromAttrUID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FromAttrUID);
      }
      if (attr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Attr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromAttrUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromAttrUID);
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromAttrUID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (attr_ == null) {
              attr_ = new global::Packet.AttributeElem();
            }
            input.ReadMessage(attr_);
            break;
          }
        }
      }
    }

  }

  public sealed class Equipment : pb::IMessage {
    private static readonly pb::MessageParser<Equipment> _parser = new pb::MessageParser<Equipment>(() => new Equipment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equipment> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttr" field.</summary>
    public const int BaseAttrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_baseAttr_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> baseAttr_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 基础属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> BaseAttr {
      get { return baseAttr_; }
    }

    /// <summary>Field number for the "greenAttr" field.</summary>
    public const int GreenAttrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_greenAttr_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> greenAttr_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 绿字属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> GreenAttr {
      get { return greenAttr_; }
    }

    /// <summary>Field number for the "effectAttr" field.</summary>
    public const int EffectAttrFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_effectAttr_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> effectAttr_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 生效的特效属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> EffectAttr {
      get { return effectAttr_; }
    }

    /// <summary>Field number for the "effectAttr2" field.</summary>
    public const int EffectAttr2FieldNumber = 22;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_effectAttr2_codec
        = pb::FieldCodec.ForMessage(178, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> effectAttr2_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 当effectAttr2不为空的时候，代表洗练过，effectAttr2就是保存的原来的特效，这样就不需要修改所有用到特效属性的地方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> EffectAttr2 {
      get { return effectAttr2_; }
    }

    /// <summary>Field number for the "enchantAttr" field.</summary>
    public const int EnchantAttrFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_enchantAttr_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> enchantAttr_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// repeated AttributeElem jewelAttr = 4;  // 珠宝属性  (废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> EnchantAttr {
      get { return enchantAttr_; }
    }

    /// <summary>Field number for the "smeltAttr" field.</summary>
    public const int SmeltAttrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.SmeltAttrElem> _repeated_smeltAttr_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.SmeltAttrElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.SmeltAttrElem> smeltAttr_ = new pbc::RepeatedField<global::Packet.SmeltAttrElem>();
    /// <summary>
    /// 熔炼属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SmeltAttrElem> SmeltAttr {
      get { return smeltAttr_; }
    }

    /// <summary>Field number for the "jewelUUID" field.</summary>
    public const int JewelUUIDFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_jewelUUID_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> jewelUUID_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 宝石的infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> JewelUUID {
      get { return jewelUUID_; }
    }

    /// <summary>Field number for the "buildType" field.</summary>
    public const int BuildTypeFieldNumber = 9;
    private uint buildType_;
    /// <summary>
    /// 1: 普通打造, 2: 强化打造
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildType {
      get { return buildType_; }
      set {
        buildType_ = value;
      }
    }

    /// <summary>Field number for the "buildName" field.</summary>
    public const int BuildNameFieldNumber = 20;
    private pb::ByteString buildName_ = pb::ByteString.Empty;
    /// <summary>
    ///打造者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BuildName {
      get { return buildName_; }
      set {
        buildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revertSmeltData" field.</summary>
    public const int RevertSmeltDataFieldNumber = 10;
    private global::Packet.RevertSmeltData revertSmeltData_;
    /// <summary>
    /// 还原时用的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RevertSmeltData RevertSmeltData {
      get { return revertSmeltData_; }
      set {
        revertSmeltData_ = value;
      }
    }

    /// <summary>Field number for the "durabilityData" field.</summary>
    public const int DurabilityDataFieldNumber = 11;
    private global::Packet.DurabilityData durabilityData_;
    /// <summary>
    /// 耐久度相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.DurabilityData DurabilityData {
      get { return durabilityData_; }
      set {
        durabilityData_ = value;
      }
    }

    /// <summary>Field number for the "equipmentAttrUIDTop" field.</summary>
    public const int EquipmentAttrUIDTopFieldNumber = 12;
    private uint equipmentAttrUIDTop_;
    /// <summary>
    /// 属性id的生成器基数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipmentAttrUIDTop {
      get { return equipmentAttrUIDTop_; }
      set {
        equipmentAttrUIDTop_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 13;
    private long score_;
    /// <summary>
    /// 评分  发给客户端的包里面会填值, 存数据库的包里面score为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "suitTypeId" field.</summary>
    public const int SuitTypeIdFieldNumber = 14;
    private uint suitTypeId_;
    /// <summary>
    ///套装类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitTypeId {
      get { return suitTypeId_; }
      set {
        suitTypeId_ = value;
      }
    }

    /// <summary>Field number for the "suitAttr" field.</summary>
    public const int SuitAttrFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_suitAttr_codec
        = pb::FieldCodec.ForMessage(122, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> suitAttr_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 套装属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> SuitAttr {
      get { return suitAttr_; }
    }

    /// <summary>Field number for the "jewelinfoId" field.</summary>
    public const int JewelinfoIdFieldNumber = 16;
    private static readonly pb::FieldCodec<uint> _repeated_jewelinfoId_codec
        = pb::FieldCodec.ForUInt32(130);
    private readonly pbc::RepeatedField<uint> jewelinfoId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> JewelinfoId {
      get { return jewelinfoId_; }
    }

    /// <summary>Field number for the "suitAttrTmp" field.</summary>
    public const int SuitAttrTmpFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Packet.AttributeElem> _repeated_suitAttrTmp_codec
        = pb::FieldCodec.ForMessage(138, global::Packet.AttributeElem.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeElem> suitAttrTmp_ = new pbc::RepeatedField<global::Packet.AttributeElem>();
    /// <summary>
    /// 锻铸出来未使用的套装属性 如果为空说明没有锻铸或者已经替换过了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeElem> SuitAttrTmp {
      get { return suitAttrTmp_; }
    }

    /// <summary>Field number for the "suitTypeIdTmp" field.</summary>
    public const int SuitTypeIdTmpFieldNumber = 18;
    private uint suitTypeIdTmp_;
    /// <summary>
    ///锻铸出来未使用的套装类型 如果为0说明没有锻铸或者已经替换过了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitTypeIdTmp {
      get { return suitTypeIdTmp_; }
      set {
        suitTypeIdTmp_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 19;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "jewelLevleAttrSelect" field.</summary>
    public const int JewelLevleAttrSelectFieldNumber = 21;
    private uint jewelLevleAttrSelect_;
    /// <summary>
    ///宝石总等级属性选择 0，1，2，3 选择得第几个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JewelLevleAttrSelect {
      get { return jewelLevleAttrSelect_; }
      set {
        jewelLevleAttrSelect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseAttr_.WriteTo(output, _repeated_baseAttr_codec);
      greenAttr_.WriteTo(output, _repeated_greenAttr_codec);
      effectAttr_.WriteTo(output, _repeated_effectAttr_codec);
      enchantAttr_.WriteTo(output, _repeated_enchantAttr_codec);
      smeltAttr_.WriteTo(output, _repeated_smeltAttr_codec);
      jewelUUID_.WriteTo(output, _repeated_jewelUUID_codec);
      if (BuildType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BuildType);
      }
      if (revertSmeltData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RevertSmeltData);
      }
      if (durabilityData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DurabilityData);
      }
      if (EquipmentAttrUIDTop != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(EquipmentAttrUIDTop);
      }
      if (Score != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Score);
      }
      if (SuitTypeId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SuitTypeId);
      }
      suitAttr_.WriteTo(output, _repeated_suitAttr_codec);
      jewelinfoId_.WriteTo(output, _repeated_jewelinfoId_codec);
      suitAttrTmp_.WriteTo(output, _repeated_suitAttrTmp_codec);
      if (SuitTypeIdTmp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SuitTypeIdTmp);
      }
      if (Color != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Color);
      }
      if (BuildName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(BuildName);
      }
      if (JewelLevleAttrSelect != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(JewelLevleAttrSelect);
      }
      effectAttr2_.WriteTo(output, _repeated_effectAttr2_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseAttr_.CalculateSize(_repeated_baseAttr_codec);
      size += greenAttr_.CalculateSize(_repeated_greenAttr_codec);
      size += effectAttr_.CalculateSize(_repeated_effectAttr_codec);
      size += effectAttr2_.CalculateSize(_repeated_effectAttr2_codec);
      size += enchantAttr_.CalculateSize(_repeated_enchantAttr_codec);
      size += smeltAttr_.CalculateSize(_repeated_smeltAttr_codec);
      size += jewelUUID_.CalculateSize(_repeated_jewelUUID_codec);
      if (BuildType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildType);
      }
      if (BuildName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BuildName);
      }
      if (revertSmeltData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevertSmeltData);
      }
      if (durabilityData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DurabilityData);
      }
      if (EquipmentAttrUIDTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipmentAttrUIDTop);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (SuitTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitTypeId);
      }
      size += suitAttr_.CalculateSize(_repeated_suitAttr_codec);
      size += jewelinfoId_.CalculateSize(_repeated_jewelinfoId_codec);
      size += suitAttrTmp_.CalculateSize(_repeated_suitAttrTmp_codec);
      if (SuitTypeIdTmp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SuitTypeIdTmp);
      }
      if (Color != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (JewelLevleAttrSelect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(JewelLevleAttrSelect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baseAttr_.AddEntriesFrom(input, _repeated_baseAttr_codec);
            break;
          }
          case 18: {
            greenAttr_.AddEntriesFrom(input, _repeated_greenAttr_codec);
            break;
          }
          case 26: {
            effectAttr_.AddEntriesFrom(input, _repeated_effectAttr_codec);
            break;
          }
          case 42: {
            enchantAttr_.AddEntriesFrom(input, _repeated_enchantAttr_codec);
            break;
          }
          case 50: {
            smeltAttr_.AddEntriesFrom(input, _repeated_smeltAttr_codec);
            break;
          }
          case 58:
          case 56: {
            jewelUUID_.AddEntriesFrom(input, _repeated_jewelUUID_codec);
            break;
          }
          case 72: {
            BuildType = input.ReadUInt32();
            break;
          }
          case 82: {
            if (revertSmeltData_ == null) {
              revertSmeltData_ = new global::Packet.RevertSmeltData();
            }
            input.ReadMessage(revertSmeltData_);
            break;
          }
          case 90: {
            if (durabilityData_ == null) {
              durabilityData_ = new global::Packet.DurabilityData();
            }
            input.ReadMessage(durabilityData_);
            break;
          }
          case 96: {
            EquipmentAttrUIDTop = input.ReadUInt32();
            break;
          }
          case 104: {
            Score = input.ReadInt64();
            break;
          }
          case 112: {
            SuitTypeId = input.ReadUInt32();
            break;
          }
          case 122: {
            suitAttr_.AddEntriesFrom(input, _repeated_suitAttr_codec);
            break;
          }
          case 130:
          case 128: {
            jewelinfoId_.AddEntriesFrom(input, _repeated_jewelinfoId_codec);
            break;
          }
          case 138: {
            suitAttrTmp_.AddEntriesFrom(input, _repeated_suitAttrTmp_codec);
            break;
          }
          case 144: {
            SuitTypeIdTmp = input.ReadUInt32();
            break;
          }
          case 152: {
            Color = input.ReadUInt32();
            break;
          }
          case 162: {
            BuildName = input.ReadBytes();
            break;
          }
          case 168: {
            JewelLevleAttrSelect = input.ReadUInt32();
            break;
          }
          case 178: {
            effectAttr2_.AddEntriesFrom(input, _repeated_effectAttr2_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Essence : pb::IMessage {
    private static readonly pb::MessageParser<Essence> _parser = new pb::MessageParser<Essence>(() => new Essence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Essence> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttrValue" field.</summary>
    public const int BaseAttrValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.AttributeRow> _repeated_baseAttrValue_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.AttributeRow.Parser);
    private readonly pbc::RepeatedField<global::Packet.AttributeRow> baseAttrValue_ = new pbc::RepeatedField<global::Packet.AttributeRow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.AttributeRow> BaseAttrValue {
      get { return baseAttrValue_; }
    }

    /// <summary>Field number for the "mustGreenID" field.</summary>
    public const int MustGreenIDFieldNumber = 2;
    private uint mustGreenID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MustGreenID {
      get { return mustGreenID_; }
      set {
        mustGreenID_ = value;
      }
    }

    /// <summary>Field number for the "greenPlusN" field.</summary>
    public const int GreenPlusNFieldNumber = 3;
    private uint greenPlusN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GreenPlusN {
      get { return greenPlusN_; }
      set {
        greenPlusN_ = value;
      }
    }

    /// <summary>Field number for the "originEffectID" field.</summary>
    public const int OriginEffectIDFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_originEffectID_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> originEffectID_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OriginEffectID {
      get { return originEffectID_; }
    }

    /// <summary>Field number for the "mustgreenIds" field.</summary>
    public const int MustgreenIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_mustgreenIds_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> mustgreenIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> MustgreenIds {
      get { return mustgreenIds_; }
    }

    /// <summary>Field number for the "suitType" field.</summary>
    public const int SuitTypeFieldNumber = 6;
    private uint suitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitType {
      get { return suitType_; }
      set {
        suitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseAttrValue_.WriteTo(output, _repeated_baseAttrValue_codec);
      if (MustGreenID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MustGreenID);
      }
      if (GreenPlusN != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GreenPlusN);
      }
      originEffectID_.WriteTo(output, _repeated_originEffectID_codec);
      mustgreenIds_.WriteTo(output, _repeated_mustgreenIds_codec);
      if (SuitType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SuitType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseAttrValue_.CalculateSize(_repeated_baseAttrValue_codec);
      if (MustGreenID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MustGreenID);
      }
      if (GreenPlusN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreenPlusN);
      }
      size += originEffectID_.CalculateSize(_repeated_originEffectID_codec);
      size += mustgreenIds_.CalculateSize(_repeated_mustgreenIds_codec);
      if (SuitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baseAttrValue_.AddEntriesFrom(input, _repeated_baseAttrValue_codec);
            break;
          }
          case 16: {
            MustGreenID = input.ReadUInt32();
            break;
          }
          case 24: {
            GreenPlusN = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            originEffectID_.AddEntriesFrom(input, _repeated_originEffectID_codec);
            break;
          }
          case 42:
          case 40: {
            mustgreenIds_.AddEntriesFrom(input, _repeated_mustgreenIds_codec);
            break;
          }
          case 48: {
            SuitType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Crystal : pb::IMessage {
    private static readonly pb::MessageParser<Crystal> _parser = new pb::MessageParser<Crystal>(() => new Crystal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Crystal> Parser { get { return _parser; } }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 1;
    private uint durability_;
    /// <summary>
    ///耐久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Durability != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Durability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Durability);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Durability = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Item : pb::IMessage {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 道具实例的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    /// 道具表里的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "showNewIcon" field.</summary>
    public const int ShowNewIconFieldNumber = 4;
    private bool showNewIcon_;
    /// <summary>
    /// 是否现实"新"图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowNewIcon {
      get { return showNewIcon_; }
      set {
        showNewIcon_ = value;
      }
    }

    /// <summary>Field number for the "bind" field.</summary>
    public const int BindFieldNumber = 5;
    private bool bind_;
    /// <summary>
    /// 是否显示"绑"图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bind {
      get { return bind_; }
      set {
        bind_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private uint position_;
    /// <summary>
    /// 在背包中的位置, 从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 7;
    private global::Packet.Equipment equipment_;
    /// <summary>
    /// 之后是扩展字段, 比如宝石镶嵌之类的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Equipment Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    /// <summary>Field number for the "essence" field.</summary>
    public const int EssenceFieldNumber = 8;
    private global::Packet.Essence essence_;
    /// <summary>
    /// 如果是淬炼精华, 则填充这个字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Essence Essence {
      get { return essence_; }
      set {
        essence_ = value;
      }
    }

    /// <summary>Field number for the "marketendtime" field.</summary>
    public const int MarketendtimeFieldNumber = 9;
    private int marketendtime_;
    /// <summary>
    ///交易行禁售时间 -1 代表永久禁售 0代表没限制 其他代表截至时间戳 / 86400 所以客户端要乘以86400再用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Marketendtime {
      get { return marketendtime_; }
      set {
        marketendtime_ = value;
      }
    }

    /// <summary>Field number for the "crystal" field.</summary>
    public const int CrystalFieldNumber = 10;
    private global::Packet.Crystal crystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Crystal Crystal {
      get { return crystal_; }
      set {
        crystal_ = value;
      }
    }

    /// <summary>Field number for the "ornament" field.</summary>
    public const int OrnamentFieldNumber = 11;
    private global::Packet.Ornament ornament_;
    /// <summary>
    /// 如果是饰品, 则填充这个字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Ornament Ornament {
      get { return ornament_; }
      set {
        ornament_ = value;
      }
    }

    /// <summary>Field number for the "outTime" field.</summary>
    public const int OutTimeFieldNumber = 12;
    private uint outTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 13;
    private ulong roleId_;
    /// <summary>
    ///恢复道具用 埋得时候把玩家id埋进去，防止运营乱恢复
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "petEquip" field.</summary>
    public const int PetEquipFieldNumber = 14;
    private global::Packet.PetEquip petEquip_;
    /// <summary>
    /// 如果是宠物装备, 则填充这个字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetEquip PetEquip {
      get { return petEquip_; }
      set {
        petEquip_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 15;
    private bool islocked_;
    /// <summary>
    ///是否加锁了，加锁有些系统不能消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (ShowNewIcon != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShowNewIcon);
      }
      if (Bind != false) {
        output.WriteRawTag(40);
        output.WriteBool(Bind);
      }
      if (Position != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Position);
      }
      if (equipment_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Equipment);
      }
      if (essence_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Essence);
      }
      if (Marketendtime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Marketendtime);
      }
      if (crystal_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Crystal);
      }
      if (ornament_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Ornament);
      }
      if (OutTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(OutTime);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(RoleId);
      }
      if (petEquip_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PetEquip);
      }
      if (Islocked != false) {
        output.WriteRawTag(120);
        output.WriteBool(Islocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (ShowNewIcon != false) {
        size += 1 + 1;
      }
      if (Bind != false) {
        size += 1 + 1;
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (equipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (essence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Essence);
      }
      if (Marketendtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Marketendtime);
      }
      if (crystal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Crystal);
      }
      if (ornament_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ornament);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutTime);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (petEquip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetEquip);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            ShowNewIcon = input.ReadBool();
            break;
          }
          case 40: {
            Bind = input.ReadBool();
            break;
          }
          case 48: {
            Position = input.ReadUInt32();
            break;
          }
          case 58: {
            if (equipment_ == null) {
              equipment_ = new global::Packet.Equipment();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 66: {
            if (essence_ == null) {
              essence_ = new global::Packet.Essence();
            }
            input.ReadMessage(essence_);
            break;
          }
          case 72: {
            Marketendtime = input.ReadInt32();
            break;
          }
          case 82: {
            if (crystal_ == null) {
              crystal_ = new global::Packet.Crystal();
            }
            input.ReadMessage(crystal_);
            break;
          }
          case 90: {
            if (ornament_ == null) {
              ornament_ = new global::Packet.Ornament();
            }
            input.ReadMessage(ornament_);
            break;
          }
          case 96: {
            OutTime = input.ReadUInt32();
            break;
          }
          case 104: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 114: {
            if (petEquip_ == null) {
              petEquip_ = new global::Packet.PetEquip();
            }
            input.ReadMessage(petEquip_);
            break;
          }
          case 120: {
            Islocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class BoxArea : pb::IMessage {
    private static readonly pb::MessageParser<BoxArea> _parser = new pb::MessageParser<BoxArea>(() => new BoxArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxArea> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private int boxID_;
    /// <summary>
    /// type: enum BoxIDEnum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    /// <summary>Field number for the "boxLevel" field.</summary>
    public const int BoxLevelFieldNumber = 2;
    private int boxLevel_;
    /// <summary>
    /// 解锁格子的级别, 这个会在策划的表里有对应概念
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxLevel {
      get { return boxLevel_; }
      set {
        boxLevel_ = value;
      }
    }

    /// <summary>Field number for the "cellCount" field.</summary>
    public const int CellCountFieldNumber = 3;
    private int cellCount_;
    /// <summary>
    /// cellCount其实可由unlockLevel推导
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellCount {
      get { return cellCount_; }
      set {
        cellCount_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> item_ = new pbc::RepeatedField<global::Packet.Item>();
    /// <summary>
    /// 现有的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxID);
      }
      if (BoxLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoxLevel);
      }
      if (CellCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CellCount);
      }
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxID);
      }
      if (BoxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxLevel);
      }
      if (CellCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellCount);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadInt32();
            break;
          }
          case 16: {
            BoxLevel = input.ReadInt32();
            break;
          }
          case 24: {
            CellCount = input.ReadInt32();
            break;
          }
          case 34: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 给GM用的
  /// </summary>
  public sealed class GMAddItemRequest : pb::IMessage {
    private static readonly pb::MessageParser<GMAddItemRequest> _parser = new pb::MessageParser<GMAddItemRequest>(() => new GMAddItemRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMAddItemRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Item.Parser);
    private readonly pbc::RepeatedField<global::Packet.Item> item_ = new pbc::RepeatedField<global::Packet.Item>();
    /// <summary>
    /// 一个📔数组, 也就是可以同时添加多个, 如果有一个不成功就全部不成功, 体现了"事务"概念
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ItemChangeInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemChangeInfo> _parser = new pb::MessageParser<ItemChangeInfo>(() => new ItemChangeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemChangeInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Packet.Item item_;
    /// <summary>
    /// 更改后的最终结果, 如果是delete, 那么item.count会是0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "changeType" field.</summary>
    public const int ChangeTypeFieldNumber = 2;
    private uint changeType_;
    /// <summary>
    /// type: enum ItemChangeEnum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "boxId" field.</summary>
    public const int BoxIdFieldNumber = 4;
    private uint boxId_;
    /// <summary>
    /// type: enum BoxIDEnum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChangeType);
      }
      if (BoxId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BoxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeType);
      }
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 16: {
            ChangeType = input.ReadUInt32();
            break;
          }
          case 32: {
            BoxId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ItemChangeCountData : pb::IMessage {
    private static readonly pb::MessageParser<ItemChangeCountData> _parser = new pb::MessageParser<ItemChangeCountData>(() => new ItemChangeCountData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemChangeCountData> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private uint itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "changeCount" field.</summary>
    public const int ChangeCountFieldNumber = 2;
    private long changeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChangeCount {
      get { return changeCount_; }
      set {
        changeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemID);
      }
      if (ChangeCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChangeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      if (ChangeCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadUInt32();
            break;
          }
          case 16: {
            ChangeCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 本协议可能直接发送给客户端, 也可能被外部协议包裹后发送给客户端, 看后来发展
  /// </summary>
  public sealed class PackageChangeNotify : pb::IMessage {
    private static readonly pb::MessageParser<PackageChangeNotify> _parser = new pb::MessageParser<PackageChangeNotify>(() => new PackageChangeNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageChangeNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxArea" field.</summary>
    public const int BoxAreaFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BoxArea> _repeated_boxArea_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BoxArea.Parser);
    private readonly pbc::RepeatedField<global::Packet.BoxArea> boxArea_ = new pbc::RepeatedField<global::Packet.BoxArea>();
    /// <summary>
    /// 应用的顺序: 先使用boxArea, 再合并change
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BoxArea> BoxArea {
      get { return boxArea_; }
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ItemChangeInfo> _repeated_change_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ItemChangeInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ItemChangeInfo> change_ = new pbc::RepeatedField<global::Packet.ItemChangeInfo>();
    /// <summary>
    /// 本次操作道具更改的序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ItemChangeInfo> Change {
      get { return change_; }
    }

    /// <summary>Field number for the "changeCount" field.</summary>
    public const int ChangeCountFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.ItemChangeCountData> _repeated_changeCount_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.ItemChangeCountData.Parser);
    private readonly pbc::RepeatedField<global::Packet.ItemChangeCountData> changeCount_ = new pbc::RepeatedField<global::Packet.ItemChangeCountData>();
    /// <summary>
    /// 新道具的list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ItemChangeCountData> ChangeCount {
      get { return changeCount_; }
    }

    /// <summary>Field number for the "newEquipmentUUID" field.</summary>
    public const int NewEquipmentUUIDFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_newEquipmentUUID_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> newEquipmentUUID_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 新获取装备的uuid列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> NewEquipmentUUID {
      get { return newEquipmentUUID_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private uint reason_;
    /// <summary>
    ///道具获取失去的原因客户端可以根据这个做一些特殊需求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "currencys" field.</summary>
    public const int CurrencysFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_currencys_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> currencys_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///全部的货币，相当于从1拿出来的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Currencys {
      get { return currencys_; }
    }

    /// <summary>Field number for the "currencychange" field.</summary>
    public const int CurrencychangeFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.ItemChangeCountData> _repeated_currencychange_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.ItemChangeCountData.Parser);
    private readonly pbc::RepeatedField<global::Packet.ItemChangeCountData> currencychange_ = new pbc::RepeatedField<global::Packet.ItemChangeCountData>();
    /// <summary>
    ///改变的的货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ItemChangeCountData> Currencychange {
      get { return currencychange_; }
    }

    /// <summary>Field number for the "frozen" field.</summary>
    public const int FrozenFieldNumber = 8;
    private global::Packet.FrozenCurrency frozen_;
    /// <summary>
    /// 货币冻结数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FrozenCurrency Frozen {
      get { return frozen_; }
      set {
        frozen_ = value;
      }
    }

    /// <summary>Field number for the "slotEnhanceLevel" field.</summary>
    public const int SlotEnhanceLevelFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_slotEnhanceLevel_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> slotEnhanceLevel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///部位升级等级序列  数组大小为5 参考EquipmentSlot对应1、3、4、5、6这几个部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SlotEnhanceLevel {
      get { return slotEnhanceLevel_; }
    }

    /// <summary>Field number for the "slotEnhanceExp" field.</summary>
    public const int SlotEnhanceExpFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_slotEnhanceExp_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> slotEnhanceExp_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///部位敬仰序列  数组大小为5 参考EquipmentSlot对应1、3、4、5、6这几个部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SlotEnhanceExp {
      get { return slotEnhanceExp_; }
    }

    /// <summary>Field number for the "bodyEffect" field.</summary>
    public const int BodyEffectFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_bodyEffect_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> bodyEffect_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///身体上的特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BodyEffect {
      get { return bodyEffect_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boxArea_.WriteTo(output, _repeated_boxArea_codec);
      change_.WriteTo(output, _repeated_change_codec);
      changeCount_.WriteTo(output, _repeated_changeCount_codec);
      newEquipmentUUID_.WriteTo(output, _repeated_newEquipmentUUID_codec);
      if (Reason != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Reason);
      }
      currencys_.WriteTo(output, _repeated_currencys_codec);
      currencychange_.WriteTo(output, _repeated_currencychange_codec);
      if (frozen_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Frozen);
      }
      slotEnhanceLevel_.WriteTo(output, _repeated_slotEnhanceLevel_codec);
      slotEnhanceExp_.WriteTo(output, _repeated_slotEnhanceExp_codec);
      bodyEffect_.WriteTo(output, _repeated_bodyEffect_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boxArea_.CalculateSize(_repeated_boxArea_codec);
      size += change_.CalculateSize(_repeated_change_codec);
      size += changeCount_.CalculateSize(_repeated_changeCount_codec);
      size += newEquipmentUUID_.CalculateSize(_repeated_newEquipmentUUID_codec);
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      size += currencys_.CalculateSize(_repeated_currencys_codec);
      size += currencychange_.CalculateSize(_repeated_currencychange_codec);
      if (frozen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frozen);
      }
      size += slotEnhanceLevel_.CalculateSize(_repeated_slotEnhanceLevel_codec);
      size += slotEnhanceExp_.CalculateSize(_repeated_slotEnhanceExp_codec);
      size += bodyEffect_.CalculateSize(_repeated_bodyEffect_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            boxArea_.AddEntriesFrom(input, _repeated_boxArea_codec);
            break;
          }
          case 18: {
            change_.AddEntriesFrom(input, _repeated_change_codec);
            break;
          }
          case 26: {
            changeCount_.AddEntriesFrom(input, _repeated_changeCount_codec);
            break;
          }
          case 34:
          case 32: {
            newEquipmentUUID_.AddEntriesFrom(input, _repeated_newEquipmentUUID_codec);
            break;
          }
          case 40: {
            Reason = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            currencys_.AddEntriesFrom(input, _repeated_currencys_codec);
            break;
          }
          case 58: {
            currencychange_.AddEntriesFrom(input, _repeated_currencychange_codec);
            break;
          }
          case 66: {
            if (frozen_ == null) {
              frozen_ = new global::Packet.FrozenCurrency();
            }
            input.ReadMessage(frozen_);
            break;
          }
          case 74:
          case 72: {
            slotEnhanceLevel_.AddEntriesFrom(input, _repeated_slotEnhanceLevel_codec);
            break;
          }
          case 82:
          case 80: {
            slotEnhanceExp_.AddEntriesFrom(input, _repeated_slotEnhanceExp_codec);
            break;
          }
          case 90:
          case 88: {
            bodyEffect_.AddEntriesFrom(input, _repeated_bodyEffect_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_PullPackageDataReq = 1401;
  /// </summary>
  public sealed class CmdItemPullPackageDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemPullPackageDataReq> _parser = new pb::MessageParser<CmdItemPullPackageDataReq>(() => new CmdItemPullPackageDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemPullPackageDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_SortPackageDataReq = 1403;  // 整理背包
  /// </summary>
  public sealed class CmdItemSortPackageDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSortPackageDataReq> _parser = new pb::MessageParser<CmdItemSortPackageDataReq>(() => new CmdItemSortPackageDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSortPackageDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private uint boxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_MergeTemporaryBoxReq = 1405;  // 从临时背包取出道具到其他普通背包
  /// </summary>
  public sealed class CmdItemMergeTemporaryBoxReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemMergeTemporaryBoxReq> _parser = new pb::MessageParser<CmdItemMergeTemporaryBoxReq>(() => new CmdItemMergeTemporaryBoxReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemMergeTemporaryBoxReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnlockBoxLevelReq = 1407;     // 解锁box级别, 增加格子数
  /// </summary>
  public sealed class CmdItemUnlockBoxLevelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnlockBoxLevelReq> _parser = new pb::MessageParser<CmdItemUnlockBoxLevelReq>(() => new CmdItemUnlockBoxLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnlockBoxLevelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private uint boxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    /// <summary>Field number for the "toLevel" field.</summary>
    public const int ToLevelFieldNumber = 2;
    private uint toLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToLevel {
      get { return toLevel_; }
      set {
        toLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxID);
      }
      if (ToLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxID);
      }
      if (ToLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadUInt32();
            break;
          }
          case 16: {
            ToLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnlockBoxLevelRes = 1408;
  /// </summary>
  public sealed class CmdItemUnlockBoxLevelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnlockBoxLevelRes> _parser = new pb::MessageParser<CmdItemUnlockBoxLevelRes>(() => new CmdItemUnlockBoxLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnlockBoxLevelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private uint boxID_;
    /// <summary>
    /// 请求时的boxid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    /// <summary>Field number for the "boxLevel" field.</summary>
    public const int BoxLevelFieldNumber = 2;
    private uint boxLevel_;
    /// <summary>
    /// 升级后的Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxLevel {
      get { return boxLevel_; }
      set {
        boxLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxID);
      }
      if (BoxLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoxLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxID);
      }
      if (BoxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadUInt32();
            break;
          }
          case 16: {
            BoxLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_CleanItemNewIconReq = 1409;   // 清理目标盒子内的所有newIcon
  /// </summary>
  public sealed class CmdItemCleanItemNewIconReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemCleanItemNewIconReq> _parser = new pb::MessageParser<CmdItemCleanItemNewIconReq>(() => new CmdItemCleanItemNewIconReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemCleanItemNewIconReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 1;
    private uint boxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoxID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_CleanItemNewIconRes = 1410;
  /// </summary>
  public sealed class CmdItemCleanItemNewIconRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemCleanItemNewIconRes> _parser = new pb::MessageParser<CmdItemCleanItemNewIconRes>(() => new CmdItemCleanItemNewIconRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemCleanItemNewIconRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "boxID" field.</summary>
    public const int BoxIDFieldNumber = 2;
    private uint boxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxID {
      get { return boxID_; }
      set {
        boxID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoxID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            BoxID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UseItemReq = 1411;            // 使用道具
  /// </summary>
  public sealed class CmdItemUseItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUseItemReq> _parser = new pb::MessageParser<CmdItemUseItemReq>(() => new CmdItemUseItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUseItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 要使用哪个道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    /// 使用多少个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UseItemRes = 1412;
  /// </summary>
  public sealed class CmdItemUseItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUseItemRes> _parser = new pb::MessageParser<CmdItemUseItemRes>(() => new CmdItemUseItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUseItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private global::Packet.CmdItemUseItemReq req_;
    /// <summary>
    /// 原样返回CmdItemUseItemReq 这个字段不填充了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdItemUseItemReq Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///使用道具获得道具infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///使用道具获得道具数量跟2size相等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 4;
    private uint infoId_;
    /// <summary>
    ///给客户端表现用 0表示这次使用没有成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (req_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Req);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
      if (InfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (req_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Req);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (req_ == null) {
              req_ = new global::Packet.CmdItemUseItemReq();
            }
            input.ReadMessage(req_);
            break;
          }
          case 18:
          case 16: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 26:
          case 24: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
          case 32: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_SellItemReq = 1413;           // 售卖道具
  /// </summary>
  public sealed class CmdItemSellItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSellItemReq> _parser = new pb::MessageParser<CmdItemSellItemReq>(() => new CmdItemSellItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSellItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_SellItemRes = 1414;
  /// </summary>
  public sealed class CmdItemSellItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSellItemRes> _parser = new pb::MessageParser<CmdItemSellItemRes>(() => new CmdItemSellItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSellItemRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_TransformItemReq = 1415;            // 移动到银行
  /// </summary>
  public sealed class CmdItemTransformItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemTransformItemReq> _parser = new pb::MessageParser<CmdItemTransformItemReq>(() => new CmdItemTransformItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemTransformItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "toBoxID" field.</summary>
    public const int ToBoxIDFieldNumber = 2;
    private uint toBoxID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBoxID {
      get { return toBoxID_; }
      set {
        toBoxID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private uint position_;
    /// <summary>
    ///背包位置，银行服务器没做uuid得索引，客户端把位置发过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "npcUId" field.</summary>
    public const int NpcUIdFieldNumber = 4;
    private ulong npcUId_;
    /// <summary>
    ///银行npc唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcUId {
      get { return npcUId_; }
      set {
        npcUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (ToBoxID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToBoxID);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Position);
      }
      if (NpcUId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NpcUId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (ToBoxID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBoxID);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (NpcUId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcUId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            ToBoxID = input.ReadUInt32();
            break;
          }
          case 24: {
            Position = input.ReadUInt32();
            break;
          }
          case 32: {
            NpcUId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_EquipReq = 1417;              // 穿上装备
  /// </summary>
  public sealed class CmdItemEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEquipReq> _parser = new pb::MessageParser<CmdItemEquipReq>(() => new CmdItemEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 1;
    private uint equipSlot_;
    /// <summary>
    /// 要穿戴的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// 要穿的装备的uuid   如果uuid=0, 则是卸下, 如果本来有穿戴, 则是替换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "isTransJewel" field.</summary>
    public const int IsTransJewelFieldNumber = 3;
    private bool isTransJewel_;
    /// <summary>
    ///是否要转移宝石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTransJewel {
      get { return isTransJewel_; }
      set {
        isTransJewel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipSlot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EquipSlot);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
      if (IsTransJewel != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTransJewel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipSlot);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (IsTransJewel != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipSlot = input.ReadUInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 24: {
            IsTransJewel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_EquipRes = 1418;
  /// </summary>
  public sealed class CmdItemEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEquipRes> _parser = new pb::MessageParser<CmdItemEquipRes>(() => new CmdItemEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEquipRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_EnchantEquipmentReq = 1419;   // 附魔
  /// </summary>
  public sealed class CmdItemEnchantEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEnchantEquipmentReq> _parser = new pb::MessageParser<CmdItemEnchantEquipmentReq>(() => new CmdItemEnchantEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEnchantEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipUUID" field.</summary>
    public const int EquipUUIDFieldNumber = 1;
    private ulong equipUUID_;
    /// <summary>
    /// 装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUUID {
      get { return equipUUID_; }
      set {
        equipUUID_ = value;
      }
    }

    /// <summary>Field number for the "runeUUID" field.</summary>
    public const int RuneUUIDFieldNumber = 2;
    private ulong runeUUID_;
    /// <summary>
    /// 符文的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RuneUUID {
      get { return runeUUID_; }
      set {
        runeUUID_ = value;
      }
    }

    /// <summary>Field number for the "enchantType" field.</summary>
    public const int EnchantTypeFieldNumber = 3;
    private uint enchantType_;
    /// <summary>
    /// 附魔类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnchantType {
      get { return enchantType_; }
      set {
        enchantType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipUUID);
      }
      if (RuneUUID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RuneUUID);
      }
      if (EnchantType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EnchantType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUUID);
      }
      if (RuneUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RuneUUID);
      }
      if (EnchantType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnchantType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            RuneUUID = input.ReadUInt64();
            break;
          }
          case 24: {
            EnchantType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_EnchantEquipmentRes = 1420;   // 附魔
  /// </summary>
  public sealed class CmdItemEnchantEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEnchantEquipmentRes> _parser = new pb::MessageParser<CmdItemEnchantEquipmentRes>(() => new CmdItemEnchantEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEnchantEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_SmeltEquipmentReq = 1421;     // 熔炼, 其实就是强化
  /// </summary>
  public sealed class CmdItemSmeltEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSmeltEquipmentReq> _parser = new pb::MessageParser<CmdItemSmeltEquipmentReq>(() => new CmdItemSmeltEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSmeltEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_SmeltEquipmentReq = 1422;     // 熔炼, 其实就是强化
  /// </summary>
  public sealed class CmdItemSmeltEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSmeltEquipmentRes> _parser = new pb::MessageParser<CmdItemSmeltEquipmentRes>(() => new CmdItemSmeltEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSmeltEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_CompoundEquipmentReq = 1423;  // 复合合成, 就是淬炼
  /// </summary>
  public sealed class CmdItemCompoundEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemCompoundEquipmentReq> _parser = new pb::MessageParser<CmdItemCompoundEquipmentReq>(() => new CmdItemCompoundEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemCompoundEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipmentUUID" field.</summary>
    public const int EquipmentUUIDFieldNumber = 1;
    private ulong equipmentUUID_;
    /// <summary>
    /// 装备uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipmentUUID {
      get { return equipmentUUID_; }
      set {
        equipmentUUID_ = value;
      }
    }

    /// <summary>Field number for the "essenceUUID" field.</summary>
    public const int EssenceUUIDFieldNumber = 2;
    private ulong essenceUUID_;
    /// <summary>
    /// 精华uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EssenceUUID {
      get { return essenceUUID_; }
      set {
        essenceUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipmentUUID);
      }
      if (EssenceUUID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EssenceUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipmentUUID);
      }
      if (EssenceUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EssenceUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            EssenceUUID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_CompoundEquipmentRes = 1424;  // 复合合成, 就是淬炼
  /// </summary>
  public sealed class CmdItemCompoundEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemCompoundEquipmentRes> _parser = new pb::MessageParser<CmdItemCompoundEquipmentRes>(() => new CmdItemCompoundEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemCompoundEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_InlayJewelEquipmentReq = 1425;  // 镶嵌宝石
  /// </summary>
  public sealed class CmdItemInlayJewelEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemInlayJewelEquipmentReq> _parser = new pb::MessageParser<CmdItemInlayJewelEquipmentReq>(() => new CmdItemInlayJewelEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemInlayJewelEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipmentUUID" field.</summary>
    public const int EquipmentUUIDFieldNumber = 1;
    private ulong equipmentUUID_;
    /// <summary>
    /// 装备uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipmentUUID {
      get { return equipmentUUID_; }
      set {
        equipmentUUID_ = value;
      }
    }

    /// <summary>Field number for the "jewelUUID" field.</summary>
    public const int JewelUUIDFieldNumber = 2;
    private ulong jewelUUID_;
    /// <summary>
    /// 宝石uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong JewelUUID {
      get { return jewelUUID_; }
      set {
        jewelUUID_ = value;
      }
    }

    /// <summary>Field number for the "jewelAttrIndex" field.</summary>
    public const int JewelAttrIndexFieldNumber = 3;
    private uint jewelAttrIndex_;
    /// <summary>
    /// 镶嵌的位置索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JewelAttrIndex {
      get { return jewelAttrIndex_; }
      set {
        jewelAttrIndex_ = value;
      }
    }

    /// <summary>Field number for the "jewelinfoId" field.</summary>
    public const int JewelinfoIdFieldNumber = 4;
    private uint jewelinfoId_;
    /// <summary>
    ///宝石的infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JewelinfoId {
      get { return jewelinfoId_; }
      set {
        jewelinfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipmentUUID);
      }
      if (JewelUUID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(JewelUUID);
      }
      if (JewelAttrIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JewelAttrIndex);
      }
      if (JewelinfoId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(JewelinfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipmentUUID);
      }
      if (JewelUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JewelUUID);
      }
      if (JewelAttrIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JewelAttrIndex);
      }
      if (JewelinfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JewelinfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            JewelUUID = input.ReadUInt64();
            break;
          }
          case 24: {
            JewelAttrIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            JewelinfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_InlayJewelEquipmentRes = 1426;  // 镶嵌宝石
  /// </summary>
  public sealed class CmdItemInlayJewelEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemInlayJewelEquipmentRes> _parser = new pb::MessageParser<CmdItemInlayJewelEquipmentRes>(() => new CmdItemInlayJewelEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemInlayJewelEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ComposeJewelReq = 1427;         // 合成宝石
  /// </summary>
  public sealed class CmdItemComposeJewelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemComposeJewelReq> _parser = new pb::MessageParser<CmdItemComposeJewelReq>(() => new CmdItemComposeJewelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemComposeJewelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fromItemID" field.</summary>
    public const int FromItemIDFieldNumber = 1;
    private uint fromItemID_;
    /// <summary>
    /// 将要用来合成的宝石的itemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromItemID {
      get { return fromItemID_; }
      set {
        fromItemID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    /// 要合成的数量(不是消耗的数量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FromItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromItemID = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ComposeJewelRes = 1428;         // 合成宝石
  /// </summary>
  public sealed class CmdItemComposeJewelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemComposeJewelRes> _parser = new pb::MessageParser<CmdItemComposeJewelRes>(() => new CmdItemComposeJewelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemComposeJewelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ExtractEquipmentReq = 1429;     // 淬炼精华, 取萃取/榨取之义
  /// </summary>
  public sealed class CmdItemExtractEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExtractEquipmentReq> _parser = new pb::MessageParser<CmdItemExtractEquipmentReq>(() => new CmdItemExtractEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExtractEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 要榨取的装备uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ExtractEquipmentRes = 1430;     // 淬炼精华, 取萃取/榨取之义
  /// </summary>
  public sealed class CmdItemExtractEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExtractEquipmentRes> _parser = new pb::MessageParser<CmdItemExtractEquipmentRes>(() => new CmdItemExtractEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExtractEquipmentRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 新生成的淬炼精化的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_RepairEquipmentReq = 1431;         // 修复
  /// </summary>
  public sealed class CmdItemRepairEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRepairEquipmentReq> _parser = new pb::MessageParser<CmdItemRepairEquipmentReq>(() => new CmdItemRepairEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRepairEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 要修改的道具uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "repairType" field.</summary>
    public const int RepairTypeFieldNumber = 2;
    private uint repairType_;
    /// <summary>
    /// 普通修理还是强化修理  type: RepairTypeEnum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RepairType {
      get { return repairType_; }
      set {
        repairType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (RepairType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RepairType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (RepairType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RepairType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            RepairType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_RepairEquipmentRes = 1432;
  /// </summary>
  public sealed class CmdItemRepairEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRepairEquipmentRes> _parser = new pb::MessageParser<CmdItemRepairEquipmentRes>(() => new CmdItemRepairEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRepairEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ExchangeCurrencyReq = 1433;         // 兑换金币
  /// </summary>
  public sealed class CmdItemExchangeCurrencyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExchangeCurrencyReq> _parser = new pb::MessageParser<CmdItemExchangeCurrencyReq>(() => new CmdItemExchangeCurrencyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExchangeCurrencyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "changeDiamond" field.</summary>
    public const int ChangeDiamondFieldNumber = 1;
    private long changeDiamond_;
    /// <summary>
    /// 且不能超过: MAX_INT32/10000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChangeDiamond {
      get { return changeDiamond_; }
      set {
        changeDiamond_ = value;
      }
    }

    /// <summary>Field number for the "changeGold" field.</summary>
    public const int ChangeGoldFieldNumber = 2;
    private long changeGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChangeGold {
      get { return changeGold_; }
      set {
        changeGold_ = value;
      }
    }

    /// <summary>Field number for the "changeSliver" field.</summary>
    public const int ChangeSliverFieldNumber = 3;
    private long changeSliver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChangeSliver {
      get { return changeSliver_; }
      set {
        changeSliver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeDiamond != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChangeDiamond);
      }
      if (ChangeGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChangeGold);
      }
      if (ChangeSliver != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ChangeSliver);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangeDiamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeDiamond);
      }
      if (ChangeGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeGold);
      }
      if (ChangeSliver != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeSliver);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChangeDiamond = input.ReadInt64();
            break;
          }
          case 16: {
            ChangeGold = input.ReadInt64();
            break;
          }
          case 24: {
            ChangeSliver = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_ExchangeCurrencyRes = 1434;         // 兑换金币
  /// </summary>
  public sealed class CmdItemExchangeCurrencyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExchangeCurrencyRes> _parser = new pb::MessageParser<CmdItemExchangeCurrencyRes>(() => new CmdItemExchangeCurrencyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExchangeCurrencyRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_BuildEquipmentReq                // 打造装备
  /// </summary>
  public sealed class CmdItemBuildEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildEquipmentReq> _parser = new pb::MessageParser<CmdItemBuildEquipmentReq>(() => new CmdItemBuildEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipuuid" field.</summary>
    public const int EquipuuidFieldNumber = 1;
    private ulong equipuuid_;
    /// <summary>
    ///装备得uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Equipuuid {
      get { return equipuuid_; }
      set {
        equipuuid_ = value;
      }
    }

    /// <summary>Field number for the "costItemuuid" field.</summary>
    public const int CostItemuuidFieldNumber = 2;
    private ulong costItemuuid_;
    /// <summary>
    ///消耗的图纸uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CostItemuuid {
      get { return costItemuuid_; }
      set {
        costItemuuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Equipuuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Equipuuid);
      }
      if (CostItemuuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CostItemuuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Equipuuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Equipuuid);
      }
      if (CostItemuuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CostItemuuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Equipuuid = input.ReadUInt64();
            break;
          }
          case 16: {
            CostItemuuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_BuildEquipmentRes
  /// </summary>
  public sealed class CmdItemBuildEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildEquipmentRes> _parser = new pb::MessageParser<CmdItemBuildEquipmentRes>(() => new CmdItemBuildEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnloadEquipmentReq = 1437;      // 卸下装备
  /// </summary>
  public sealed class CmdItemUnloadEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnloadEquipmentReq> _parser = new pb::MessageParser<CmdItemUnloadEquipmentReq>(() => new CmdItemUnloadEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnloadEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnloadEquipmentReq = 1437;      // 卸下装备
  /// </summary>
  public sealed class CmdItemUnloadEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnloadEquipmentRes> _parser = new pb::MessageParser<CmdItemUnloadEquipmentRes>(() => new CmdItemUnloadEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnloadEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_RevertSmeltReq = 1439;          // 还原熔炼效果
  /// </summary>
  public sealed class CmdItemRevertSmeltReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRevertSmeltReq> _parser = new pb::MessageParser<CmdItemRevertSmeltReq>(() => new CmdItemRevertSmeltReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRevertSmeltReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    /// 要还原的装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_RevertSmeltRes = 1440;          // 还原熔炼效果
  /// </summary>
  public sealed class CmdItemRevertSmeltRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRevertSmeltRes> _parser = new pb::MessageParser<CmdItemRevertSmeltRes>(() => new CmdItemRevertSmeltRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRevertSmeltRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UseItemByItemIDReq = 1441;      // 通过ItemID使用道具
  /// </summary>
  public sealed class CmdItemUseItemByItemIDReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUseItemByItemIDReq> _parser = new pb::MessageParser<CmdItemUseItemByItemIDReq>(() => new CmdItemUseItemByItemIDReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUseItemByItemIDReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// ItemID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UseItemByItemIDRes = 1442;      // 通过ItemID使用道具
  /// </summary>
  public sealed class CmdItemUseItemByItemIDRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUseItemByItemIDRes> _parser = new pb::MessageParser<CmdItemUseItemByItemIDRes>(() => new CmdItemUseItemByItemIDRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUseItemByItemIDRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnloadJewelReq = 1443            // 卸下宝石
  /// </summary>
  public sealed class CmdItemUnloadJewelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnloadJewelReq> _parser = new pb::MessageParser<CmdItemUnloadJewelReq>(() => new CmdItemUnloadJewelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnloadJewelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipUUID" field.</summary>
    public const int EquipUUIDFieldNumber = 1;
    private ulong equipUUID_;
    /// <summary>
    /// 装备UUI`D
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUUID {
      get { return equipUUID_; }
      set {
        equipUUID_ = value;
      }
    }

    /// <summary>Field number for the "jewelAttrIndex" field.</summary>
    public const int JewelAttrIndexFieldNumber = 2;
    private uint jewelAttrIndex_;
    /// <summary>
    /// 宝石的uuid, 卸下后应该把宝石从宝石box移动到box1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JewelAttrIndex {
      get { return jewelAttrIndex_; }
      set {
        jewelAttrIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipUUID);
      }
      if (JewelAttrIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(JewelAttrIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUUID);
      }
      if (JewelAttrIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JewelAttrIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            JewelAttrIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_UnloadJewelRes
  /// </summary>
  public sealed class CmdItemUnloadJewelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnloadJewelRes> _parser = new pb::MessageParser<CmdItemUnloadJewelRes>(() => new CmdItemUnloadJewelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnloadJewelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_QuickComposeJewelReq = 1445;    // 快速合成宝石
  /// </summary>
  public sealed class CmdItemQuickComposeJewelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemQuickComposeJewelReq> _parser = new pb::MessageParser<CmdItemQuickComposeJewelReq>(() => new CmdItemQuickComposeJewelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemQuickComposeJewelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "jewelUUID" field.</summary>
    public const int JewelUUIDFieldNumber = 1;
    private ulong jewelUUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong JewelUUID {
      get { return jewelUUID_; }
      set {
        jewelUUID_ = value;
      }
    }

    /// <summary>Field number for the "equipuuid" field.</summary>
    public const int EquipuuidFieldNumber = 2;
    private ulong equipuuid_;
    /// <summary>
    ///装备得uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Equipuuid {
      get { return equipuuid_; }
      set {
        equipuuid_ = value;
      }
    }

    /// <summary>Field number for the "slotIndex" field.</summary>
    public const int SlotIndexFieldNumber = 3;
    private uint slotIndex_;
    /// <summary>
    ///宝石得孔index 从0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    /// <summary>Field number for the "jewellevel" field.</summary>
    public const int JewellevelFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_jewellevel_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> jewellevel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 还是发过来等级吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Jewellevel {
      get { return jewellevel_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_num_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> num_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 对应上边的 客户端发过来界面上右边的序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Num {
      get { return num_; }
    }

    /// <summary>Field number for the "buynum" field.</summary>
    public const int BuynumFieldNumber = 6;
    private uint buynum_;
    /// <summary>
    ///购买数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buynum {
      get { return buynum_; }
      set {
        buynum_ = value;
      }
    }

    /// <summary>Field number for the "tolevel" field.</summary>
    public const int TolevelFieldNumber = 7;
    private uint tolevel_;
    /// <summary>
    ///客户端把想要升到的等级也发过来吧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tolevel {
      get { return tolevel_; }
      set {
        tolevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JewelUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(JewelUUID);
      }
      if (Equipuuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Equipuuid);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SlotIndex);
      }
      jewellevel_.WriteTo(output, _repeated_jewellevel_codec);
      num_.WriteTo(output, _repeated_num_codec);
      if (Buynum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Buynum);
      }
      if (Tolevel != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Tolevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JewelUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JewelUUID);
      }
      if (Equipuuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Equipuuid);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotIndex);
      }
      size += jewellevel_.CalculateSize(_repeated_jewellevel_codec);
      size += num_.CalculateSize(_repeated_num_codec);
      if (Buynum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buynum);
      }
      if (Tolevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tolevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            JewelUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            Equipuuid = input.ReadUInt64();
            break;
          }
          case 24: {
            SlotIndex = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            jewellevel_.AddEntriesFrom(input, _repeated_jewellevel_codec);
            break;
          }
          case 42:
          case 40: {
            num_.AddEntriesFrom(input, _repeated_num_codec);
            break;
          }
          case 48: {
            Buynum = input.ReadUInt32();
            break;
          }
          case 56: {
            Tolevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_QuickComposeJewelRes = 1446;
  /// </summary>
  public sealed class CmdItemQuickComposeJewelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemQuickComposeJewelRes> _parser = new pb::MessageParser<CmdItemQuickComposeJewelRes>(() => new CmdItemQuickComposeJewelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemQuickComposeJewelRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdItemBroadcastWeaponChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBroadcastWeaponChangeNtf> _parser = new pb::MessageParser<CmdItemBroadcastWeaponChangeNtf>(() => new CmdItemBroadcastWeaponChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBroadcastWeaponChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleID" field.</summary>
    public const int RoleIDFieldNumber = 1;
    private ulong roleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private uint itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleID);
      }
      if (ItemID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ItemTuple : pb::IMessage {
    private static readonly pb::MessageParser<ItemTuple> _parser = new pb::MessageParser<ItemTuple>(() => new ItemTuple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemTuple> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private uint itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DecomposeEquipmentReq = 1448;    // 分解装备请求
  /// </summary>
  public sealed class CmdItemDecomposeEquipmentReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposeEquipmentReq> _parser = new pb::MessageParser<CmdItemDecomposeEquipmentReq>(() => new CmdItemDecomposeEquipmentReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposeEquipmentReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipUUID" field.</summary>
    public const int EquipUUIDFieldNumber = 1;
    private ulong equipUUID_;
    /// <summary>
    ///装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUUID {
      get { return equipUUID_; }
      set {
        equipUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipUUID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DecomposeEquipmentRes = 1449;
  /// </summary>
  public sealed class CmdItemDecomposeEquipmentRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposeEquipmentRes> _parser = new pb::MessageParser<CmdItemDecomposeEquipmentRes>(() => new CmdItemDecomposeEquipmentRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposeEquipmentRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DecomposeItemReq = 1450;    //分解道具请求
  /// </summary>
  public sealed class CmdItemDecomposeItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposeItemReq> _parser = new pb::MessageParser<CmdItemDecomposeItemReq>(() => new CmdItemDecomposeItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposeItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemUUID" field.</summary>
    public const int ItemUUIDFieldNumber = 1;
    private ulong itemUUID_;
    /// <summary>
    ///道具的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUUID {
      get { return itemUUID_; }
      set {
        itemUUID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    ///分解的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemUUID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUUID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemUUID = input.ReadUInt64();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DecomposeItemRes = 1451;    //分解道具应答
  /// </summary>
  public sealed class CmdItemDecomposeItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposeItemRes> _parser = new pb::MessageParser<CmdItemDecomposeItemRes>(() => new CmdItemDecomposeItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposeItemRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DisCardItemReq = 1452;    // 丢弃道具请求(整组丢弃)
  /// </summary>
  public sealed class CmdItemDisCardItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDisCardItemReq> _parser = new pb::MessageParser<CmdItemDisCardItemReq>(() => new CmdItemDisCardItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDisCardItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemUUID" field.</summary>
    public const int ItemUUIDFieldNumber = 1;
    private ulong itemUUID_;
    /// <summary>
    ///道具的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUUID {
      get { return itemUUID_; }
      set {
        itemUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemUUID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdItem_DisCardItemRes = 1453;    // 丢弃道具应答
  /// </summary>
  public sealed class CmdItemDisCardItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDisCardItemRes> _parser = new pb::MessageParser<CmdItemDisCardItemRes>(() => new CmdItemDisCardItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDisCardItemRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdItemComposeItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemComposeItemReq> _parser = new pb::MessageParser<CmdItemComposeItemReq>(() => new CmdItemComposeItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemComposeItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "composeId" field.</summary>
    public const int ComposeIdFieldNumber = 1;
    private uint composeId_;
    /// <summary>
    ///合成表里边的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ComposeId {
      get { return composeId_; }
      set {
        composeId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    ///合成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ComposeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ComposeId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ComposeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ComposeId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ComposeId = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemComposeItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemComposeItemRes> _parser = new pb::MessageParser<CmdItemComposeItemRes>(() => new CmdItemComposeItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemComposeItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    /// <summary>
    ///合成的道具id 客户端表现可能用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBuildEquipmentUseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildEquipmentUseReq> _parser = new pb::MessageParser<CmdItemBuildEquipmentUseReq>(() => new CmdItemBuildEquipmentUseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildEquipmentUseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipUUID" field.</summary>
    public const int EquipUUIDFieldNumber = 1;
    private ulong equipUUID_;
    /// <summary>
    ///装备得uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EquipUUID {
      get { return equipUUID_; }
      set {
        equipUUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipUUID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EquipUUID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipUUID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EquipUUID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipUUID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///可能不需要 替换会发装备更新
  /// </summary>
  public sealed class CmdItemBuildEquipmentUseRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildEquipmentUseRes> _parser = new pb::MessageParser<CmdItemBuildEquipmentUseRes>(() => new CmdItemBuildEquipmentUseRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildEquipmentUseRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdItemEquipCrystalReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEquipCrystalReq> _parser = new pb::MessageParser<CmdItemEquipCrystalReq>(() => new CmdItemEquipCrystalReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEquipCrystalReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemEquipCrystalAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEquipCrystalAck> _parser = new pb::MessageParser<CmdItemEquipCrystalAck>(() => new CmdItemEquipCrystalAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEquipCrystalAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemExchangeCrystalReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExchangeCrystalReq> _parser = new pb::MessageParser<CmdItemExchangeCrystalReq>(() => new CmdItemExchangeCrystalReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExchangeCrystalReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId1" field.</summary>
    public const int InfoId1FieldNumber = 1;
    private uint infoId1_;
    /// <summary>
    /// 水晶1         
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId1 {
      get { return infoId1_; }
      set {
        infoId1_ = value;
      }
    }

    /// <summary>Field number for the "count1" field.</summary>
    public const int Count1FieldNumber = 2;
    private uint count1_;
    /// <summary>
    /// &lt; 100 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count1 {
      get { return count1_; }
      set {
        count1_ = value;
      }
    }

    /// <summary>Field number for the "infoId2" field.</summary>
    public const int InfoId2FieldNumber = 3;
    private uint infoId2_;
    /// <summary>
    ///水晶2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId2 {
      get { return infoId2_; }
      set {
        infoId2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId1);
      }
      if (Count1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count1);
      }
      if (InfoId2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(InfoId2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId1);
      }
      if (Count1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count1);
      }
      if (InfoId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Count1 = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemExchangeCrystalAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemExchangeCrystalAck> _parser = new pb::MessageParser<CmdItemExchangeCrystalAck>(() => new CmdItemExchangeCrystalAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemExchangeCrystalAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId1" field.</summary>
    public const int InfoId1FieldNumber = 1;
    private int infoId1_;
    /// <summary>
    /// 水晶1         
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoId1 {
      get { return infoId1_; }
      set {
        infoId1_ = value;
      }
    }

    /// <summary>Field number for the "count1" field.</summary>
    public const int Count1FieldNumber = 2;
    private uint count1_;
    /// <summary>
    /// &lt; 100 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count1 {
      get { return count1_; }
      set {
        count1_ = value;
      }
    }

    /// <summary>Field number for the "infoId2" field.</summary>
    public const int InfoId2FieldNumber = 3;
    private int infoId2_;
    /// <summary>
    ///水晶2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoId2 {
      get { return infoId2_; }
      set {
        infoId2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InfoId1);
      }
      if (Count1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count1);
      }
      if (InfoId2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InfoId2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfoId1);
      }
      if (Count1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count1);
      }
      if (InfoId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfoId2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId1 = input.ReadInt32();
            break;
          }
          case 16: {
            Count1 = input.ReadUInt32();
            break;
          }
          case 24: {
            InfoId2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///饰品信息
  /// </summary>
  public sealed class Ornament : pb::IMessage {
    private static readonly pb::MessageParser<Ornament> _parser = new pb::MessageParser<Ornament>(() => new Ornament());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ornament> Parser { get { return _parser; } }

    /// <summary>Field number for the "extAttr" field.</summary>
    public const int ExtAttrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Ornament.Types.ExtAttr> _repeated_extAttr_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Ornament.Types.ExtAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.Ornament.Types.ExtAttr> extAttr_ = new pbc::RepeatedField<global::Packet.Ornament.Types.ExtAttr>();
    /// <summary>
    /// 额外属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Ornament.Types.ExtAttr> ExtAttr {
      get { return extAttr_; }
    }

    /// <summary>Field number for the "highAttrCount" field.</summary>
    public const int HighAttrCountFieldNumber = 2;
    private uint highAttrCount_;
    /// <summary>
    ///高级库条目数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighAttrCount {
      get { return highAttrCount_; }
      set {
        highAttrCount_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private uint score_;
    /// <summary>
    /// 评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "extSkill" field.</summary>
    public const int ExtSkillFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.Ornament.Types.ExtSkill> _repeated_extSkill_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.Ornament.Types.ExtSkill.Parser);
    private readonly pbc::RepeatedField<global::Packet.Ornament.Types.ExtSkill> extSkill_ = new pbc::RepeatedField<global::Packet.Ornament.Types.ExtSkill>();
    /// <summary>
    /// 额外技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Ornament.Types.ExtSkill> ExtSkill {
      get { return extSkill_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private uint color_;
    /// <summary>
    ///品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "lockList" field.</summary>
    public const int LockListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_lockList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> lockList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///锁定的infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LockList {
      get { return lockList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      extAttr_.WriteTo(output, _repeated_extAttr_codec);
      if (HighAttrCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HighAttrCount);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Score);
      }
      extSkill_.WriteTo(output, _repeated_extSkill_codec);
      if (Color != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Color);
      }
      lockList_.WriteTo(output, _repeated_lockList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += extAttr_.CalculateSize(_repeated_extAttr_codec);
      if (HighAttrCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighAttrCount);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      size += extSkill_.CalculateSize(_repeated_extSkill_codec);
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      size += lockList_.CalculateSize(_repeated_lockList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            extAttr_.AddEntriesFrom(input, _repeated_extAttr_codec);
            break;
          }
          case 16: {
            HighAttrCount = input.ReadUInt32();
            break;
          }
          case 24: {
            Score = input.ReadUInt32();
            break;
          }
          case 34: {
            extSkill_.AddEntriesFrom(input, _repeated_extSkill_codec);
            break;
          }
          case 40: {
            Color = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            lockList_.AddEntriesFrom(input, _repeated_lockList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Ornament message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ExtAttr : pb::IMessage {
        private static readonly pb::MessageParser<ExtAttr> _parser = new pb::MessageParser<ExtAttr>(() => new ExtAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExtAttr> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        /// 额外属性表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "attrId" field.</summary>
        public const int AttrIdFieldNumber = 2;
        private uint attrId_;
        /// <summary>
        /// 属性id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrId {
          get { return attrId_; }
          set {
            attrId_ = value;
          }
        }

        /// <summary>Field number for the "attrValue" field.</summary>
        public const int AttrValueFieldNumber = 3;
        private uint attrValue_;
        /// <summary>
        /// 属性值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrValue {
          get { return attrValue_; }
          set {
            attrValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (AttrId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AttrId);
          }
          if (AttrValue != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AttrValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (AttrId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
          }
          if (AttrValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                AttrId = input.ReadUInt32();
                break;
              }
              case 24: {
                AttrValue = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class ExtSkill : pb::IMessage {
        private static readonly pb::MessageParser<ExtSkill> _parser = new pb::MessageParser<ExtSkill>(() => new ExtSkill());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExtSkill> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        /// 额外技能表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "skillId" field.</summary>
        public const int SkillIdFieldNumber = 2;
        private uint skillId_;
        /// <summary>
        /// 技能id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SkillId {
          get { return skillId_; }
          set {
            skillId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (SkillId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SkillId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (SkillId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                SkillId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///装备、卸下饰品
  /// </summary>
  public sealed class CmdItemOrnamentFitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentFitReq> _parser = new pb::MessageParser<CmdItemOrnamentFitReq>(() => new CmdItemOrnamentFitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentFitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ornamentSlot" field.</summary>
    public const int OrnamentSlotFieldNumber = 1;
    private uint ornamentSlot_;
    /// <summary>
    /// 要穿戴的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrnamentSlot {
      get { return ornamentSlot_; }
      set {
        ornamentSlot_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// 要穿的装备的uuid   如果uuid=0, 则是卸下, 如果本来有穿戴, 则是替换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrnamentSlot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OrnamentSlot);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrnamentSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrnamentSlot);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OrnamentSlot = input.ReadUInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentFitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentFitRes> _parser = new pb::MessageParser<CmdItemOrnamentFitRes>(() => new CmdItemOrnamentFitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentFitRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///升级饰品
  /// </summary>
  public sealed class CmdItemOrnamentLvUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentLvUpReq> _parser = new pb::MessageParser<CmdItemOrnamentLvUpReq>(() => new CmdItemOrnamentLvUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentLvUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///升级的饰品uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentLvUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentLvUpRes> _parser = new pb::MessageParser<CmdItemOrnamentLvUpRes>(() => new CmdItemOrnamentLvUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentLvUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///升级的饰品uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    /// <summary>
    ///true-成功，false-失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "newItemUuid" field.</summary>
    public const int NewItemUuidFieldNumber = 3;
    private ulong newItemUuid_;
    /// <summary>
    ///新的饰品uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NewItemUuid {
      get { return newItemUuid_; }
      set {
        newItemUuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (NewItemUuid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NewItemUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (NewItemUuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NewItemUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 24: {
            NewItemUuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重铸饰品
  /// </summary>
  public sealed class CmdItemOrnamentRebuildReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentRebuildReq> _parser = new pb::MessageParser<CmdItemOrnamentRebuildReq>(() => new CmdItemOrnamentRebuildReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentRebuildReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "lockList" field.</summary>
    public const int LockListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_lockList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lockList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///锁定的infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LockList {
      get { return lockList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      lockList_.WriteTo(output, _repeated_lockList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      size += lockList_.CalculateSize(_repeated_lockList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            lockList_.AddEntriesFrom(input, _repeated_lockList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentRebuildRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentRebuildRes> _parser = new pb::MessageParser<CmdItemOrnamentRebuildRes>(() => new CmdItemOrnamentRebuildRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentRebuildRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///分解饰品
  /// </summary>
  public sealed class CmdItemOrnamentDecomposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentDecomposeReq> _parser = new pb::MessageParser<CmdItemOrnamentDecomposeReq>(() => new CmdItemOrnamentDecomposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentDecomposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentDecomposeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentDecomposeRes> _parser = new pb::MessageParser<CmdItemOrnamentDecomposeRes>(() => new CmdItemOrnamentDecomposeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentDecomposeRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///一键合成饰品（含额外属性无法使用一键合成）
  /// </summary>
  public sealed class CmdItemOrnamentOneKeyLvUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentOneKeyLvUpReq> _parser = new pb::MessageParser<CmdItemOrnamentOneKeyLvUpReq>(() => new CmdItemOrnamentOneKeyLvUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentOneKeyLvUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///饰品的infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentOneKeyLvUpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentOneKeyLvUpRes> _parser = new pb::MessageParser<CmdItemOrnamentOneKeyLvUpRes>(() => new CmdItemOrnamentOneKeyLvUpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentOneKeyLvUpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///饰品的infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "hasNewItem" field.</summary>
    public const int HasNewItemFieldNumber = 2;
    private bool hasNewItem_;
    /// <summary>
    ///是否合成了新的饰品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewItem {
      get { return hasNewItem_; }
      set {
        hasNewItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (HasNewItem != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasNewItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (HasNewItem != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            HasNewItem = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemDayLimitUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDayLimitUpdateNtf> _parser = new pb::MessageParser<CmdItemDayLimitUpdateNtf>(() => new CmdItemDayLimitUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDayLimitUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "isUpdateAll" field.</summary>
    public const int IsUpdateAllFieldNumber = 1;
    private bool isUpdateAll_;
    /// <summary>
    ///true:全部更新 false:部分更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpdateAll {
      get { return isUpdateAll_; }
      set {
        isUpdateAll_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdItemDayLimitUpdateNtf.Types.DayLimitInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdItemDayLimitUpdateNtf.Types.DayLimitInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdItemDayLimitUpdateNtf.Types.DayLimitInfo> infos_ = new pbc::RepeatedField<global::Packet.CmdItemDayLimitUpdateNtf.Types.DayLimitInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdItemDayLimitUpdateNtf.Types.DayLimitInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsUpdateAll != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpdateAll);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUpdateAll != false) {
        size += 1 + 1;
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsUpdateAll = input.ReadBool();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdItemDayLimitUpdateNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class DayLimitInfo : pb::IMessage {
        private static readonly pb::MessageParser<DayLimitInfo> _parser = new pb::MessageParser<DayLimitInfo>(() => new DayLimitInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DayLimitInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "useCount" field.</summary>
        public const int UseCountFieldNumber = 2;
        private uint useCount_;
        /// <summary>
        ///累计使用数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UseCount {
          get { return useCount_; }
          set {
            useCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (UseCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(UseCount);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (UseCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseCount);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                UseCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdItemOptionalGiftPackReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOptionalGiftPackReq> _parser = new pb::MessageParser<CmdItemOptionalGiftPackReq>(() => new CmdItemOptionalGiftPackReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOptionalGiftPackReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "optionalInfo" field.</summary>
    public const int OptionalInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdItemOptionalGiftPackReq.Types.singleOptional> _repeated_optionalInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdItemOptionalGiftPackReq.Types.singleOptional.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdItemOptionalGiftPackReq.Types.singleOptional> optionalInfo_ = new pbc::RepeatedField<global::Packet.CmdItemOptionalGiftPackReq.Types.singleOptional>();
    /// <summary>
    ///自选信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdItemOptionalGiftPackReq.Types.singleOptional> OptionalInfo {
      get { return optionalInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      optionalInfo_.WriteTo(output, _repeated_optionalInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      size += optionalInfo_.CalculateSize(_repeated_optionalInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 18: {
            optionalInfo_.AddEntriesFrom(input, _repeated_optionalInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdItemOptionalGiftPackReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class singleOptional : pb::IMessage {
        private static readonly pb::MessageParser<singleOptional> _parser = new pb::MessageParser<singleOptional>(() => new singleOptional());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<singleOptional> Parser { get { return _parser; } }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        /// <summary>
        ///索引
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        /// <summary>
        ///数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdItemOptionalGiftPackRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOptionalGiftPackRes> _parser = new pb::MessageParser<CmdItemOptionalGiftPackRes>(() => new CmdItemOptionalGiftPackRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOptionalGiftPackRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///给客户端表现用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "itemIds" field.</summary>
    public const int ItemIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///获得道具infoId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "itemNums" field.</summary>
    public const int ItemNumsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_itemNums_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> itemNums_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///获得道具数量跟2 size相等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNums {
      get { return itemNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      itemNums_.WriteTo(output, _repeated_itemNums_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += itemNums_.CalculateSize(_repeated_itemNums_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 26:
          case 24: {
            itemNums_.AddEntriesFrom(input, _repeated_itemNums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemFreezeCurrencyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemFreezeCurrencyNtf> _parser = new pb::MessageParser<CmdItemFreezeCurrencyNtf>(() => new CmdItemFreezeCurrencyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemFreezeCurrencyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 1;
    private uint currencyId_;
    /// <summary>
    /// 货币ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.FrozenCurrencyInfo info_;
    /// <summary>
    /// 冻结货币信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.FrozenCurrencyInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrencyId);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrencyId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.FrozenCurrencyInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemUnfreezeCurrencyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemUnfreezeCurrencyNtf> _parser = new pb::MessageParser<CmdItemUnfreezeCurrencyNtf>(() => new CmdItemUnfreezeCurrencyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemUnfreezeCurrencyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "unfreezeTime" field.</summary>
    public const int UnfreezeTimeFieldNumber = 1;
    private uint unfreezeTime_;
    /// <summary>
    /// 解冻时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnfreezeTime {
      get { return unfreezeTime_; }
      set {
        unfreezeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnfreezeTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnfreezeTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnfreezeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnfreezeTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnfreezeTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemForceUnfreezeCurrencyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemForceUnfreezeCurrencyNtf> _parser = new pb::MessageParser<CmdItemForceUnfreezeCurrencyNtf>(() => new CmdItemForceUnfreezeCurrencyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemForceUnfreezeCurrencyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 1;
    private uint currencyId_;
    /// <summary>
    /// 强制解冻货币id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrencyId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrencyId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 被冻结的货币信息
  /// </summary>
  public sealed class FrozenCurrencyInfo : pb::IMessage {
    private static readonly pb::MessageParser<FrozenCurrencyInfo> _parser = new pb::MessageParser<FrozenCurrencyInfo>(() => new FrozenCurrencyInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenCurrencyInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private ulong num_;
    /// <summary>
    /// 冻结金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "unfreezeTime" field.</summary>
    public const int UnfreezeTimeFieldNumber = 2;
    private uint unfreezeTime_;
    /// <summary>
    /// 解冻时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnfreezeTime {
      get { return unfreezeTime_; }
      set {
        unfreezeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Num);
      }
      if (UnfreezeTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnfreezeTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Num);
      }
      if (UnfreezeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnfreezeTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadUInt64();
            break;
          }
          case 16: {
            UnfreezeTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 被冻结的货币信息列表
  /// </summary>
  public sealed class FrozenCurrencyInfoList : pb::IMessage {
    private static readonly pb::MessageParser<FrozenCurrencyInfoList> _parser = new pb::MessageParser<FrozenCurrencyInfoList>(() => new FrozenCurrencyInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenCurrencyInfoList> Parser { get { return _parser; } }

    /// <summary>Field number for the "currencyId" field.</summary>
    public const int CurrencyIdFieldNumber = 1;
    private uint currencyId_;
    /// <summary>
    /// 货币ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.FrozenCurrencyInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.FrozenCurrencyInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.FrozenCurrencyInfo> infos_ = new pbc::RepeatedField<global::Packet.FrozenCurrencyInfo>();
    /// <summary>
    /// 货币冻结信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FrozenCurrencyInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrencyId);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrencyId);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrencyId = input.ReadUInt32();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 货币冻结数据
  /// </summary>
  public sealed class FrozenCurrency : pb::IMessage {
    private static readonly pb::MessageParser<FrozenCurrency> _parser = new pb::MessageParser<FrozenCurrency>(() => new FrozenCurrency());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenCurrency> Parser { get { return _parser; } }

    /// <summary>Field number for the "frozens" field.</summary>
    public const int FrozensFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.FrozenCurrencyInfoList> _repeated_frozens_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.FrozenCurrencyInfoList.Parser);
    private readonly pbc::RepeatedField<global::Packet.FrozenCurrencyInfoList> frozens_ = new pbc::RepeatedField<global::Packet.FrozenCurrencyInfoList>();
    /// <summary>
    /// 货币冻结数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FrozenCurrencyInfoList> Frozens {
      get { return frozens_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frozens_.WriteTo(output, _repeated_frozens_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frozens_.CalculateSize(_repeated_frozens_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frozens_.AddEntriesFrom(input, _repeated_frozens_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 活力兑换金币请求 (打工)
  /// </summary>
  public sealed class CmdItemEnergyExChangeGoldReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEnergyExChangeGoldReq> _parser = new pb::MessageParser<CmdItemEnergyExChangeGoldReq>(() => new CmdItemEnergyExChangeGoldReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEnergyExChangeGoldReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 活力兑换金币返回 (打工)
  /// </summary>
  public sealed class CmdItemEnergyExChangeGoldRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemEnergyExChangeGoldRes> _parser = new pb::MessageParser<CmdItemEnergyExChangeGoldRes>(() => new CmdItemEnergyExChangeGoldRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemEnergyExChangeGoldRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdItemRefreshItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRefreshItemReq> _parser = new pb::MessageParser<CmdItemRefreshItemReq>(() => new CmdItemRefreshItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRefreshItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBatchSellReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBatchSellReq> _parser = new pb::MessageParser<CmdItemBatchSellReq>(() => new CmdItemBatchSellReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBatchSellReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_uuid_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> uuid_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Uuid {
      get { return uuid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uuid_.WriteTo(output, _repeated_uuid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uuid_.CalculateSize(_repeated_uuid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uuid_.AddEntriesFrom(input, _repeated_uuid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBatchSellRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBatchSellRes> _parser = new pb::MessageParser<CmdItemBatchSellRes>(() => new CmdItemBatchSellRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBatchSellRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "addsilvers" field.</summary>
    public const int AddsilversFieldNumber = 1;
    private ulong addsilvers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Addsilvers {
      get { return addsilvers_; }
      set {
        addsilvers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addsilvers != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Addsilvers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addsilvers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Addsilvers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Addsilvers = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBatchDeComposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBatchDeComposeReq> _parser = new pb::MessageParser<CmdItemBatchDeComposeReq>(() => new CmdItemBatchDeComposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBatchDeComposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_uuid_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> uuid_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Uuid {
      get { return uuid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uuid_.WriteTo(output, _repeated_uuid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uuid_.CalculateSize(_repeated_uuid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uuid_.AddEntriesFrom(input, _repeated_uuid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBatchDeComposeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBatchDeComposeRes> _parser = new pb::MessageParser<CmdItemBatchDeComposeRes>(() => new CmdItemBatchDeComposeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBatchDeComposeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_itemid_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> itemid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///分解获得的道具id 道具数量
    ///服务器保证itemid itemnum数组大小一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Itemid {
      get { return itemid_; }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_itemNum_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> itemNum_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ItemNum {
      get { return itemNum_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemid_.WriteTo(output, _repeated_itemid_codec);
      itemNum_.WriteTo(output, _repeated_itemNum_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemid_.CalculateSize(_repeated_itemid_codec);
      size += itemNum_.CalculateSize(_repeated_itemNum_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemid_.AddEntriesFrom(input, _repeated_itemid_codec);
            break;
          }
          case 18:
          case 16: {
            itemNum_.AddEntriesFrom(input, _repeated_itemNum_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///宠物装备
  /// </summary>
  public sealed class PetEquip : pb::IMessage {
    private static readonly pb::MessageParser<PetEquip> _parser = new pb::MessageParser<PetEquip>(() => new PetEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PetEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "baseAttr" field.</summary>
    public const int BaseAttrFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PetEquip.Types.BaseAttr> _repeated_baseAttr_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PetEquip.Types.BaseAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetEquip.Types.BaseAttr> baseAttr_ = new pbc::RepeatedField<global::Packet.PetEquip.Types.BaseAttr>();
    /// <summary>
    ///基础属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetEquip.Types.BaseAttr> BaseAttr {
      get { return baseAttr_; }
    }

    /// <summary>Field number for the "effectAttr" field.</summary>
    public const int EffectAttrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PetEquip.Types.EffectAttr> _repeated_effectAttr_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PetEquip.Types.EffectAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.PetEquip.Types.EffectAttr> effectAttr_ = new pbc::RepeatedField<global::Packet.PetEquip.Types.EffectAttr>();
    /// <summary>
    ///特效属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PetEquip.Types.EffectAttr> EffectAttr {
      get { return effectAttr_; }
    }

    /// <summary>Field number for the "suitSkill" field.</summary>
    public const int SuitSkillFieldNumber = 3;
    private uint suitSkill_;
    /// <summary>
    ///套装技能infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitSkill {
      get { return suitSkill_; }
      set {
        suitSkill_ = value;
      }
    }

    /// <summary>Field number for the "suitAppearance" field.</summary>
    public const int SuitAppearanceFieldNumber = 4;
    private uint suitAppearance_;
    /// <summary>
    ///套装外观infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SuitAppearance {
      get { return suitAppearance_; }
      set {
        suitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private uint score_;
    /// <summary>
    /// 评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private uint color_;
    /// <summary>
    ///品质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "buildName" field.</summary>
    public const int BuildNameFieldNumber = 7;
    private pb::ByteString buildName_ = pb::ByteString.Empty;
    /// <summary>
    ///打造者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BuildName {
      get { return buildName_; }
      set {
        buildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      baseAttr_.WriteTo(output, _repeated_baseAttr_codec);
      effectAttr_.WriteTo(output, _repeated_effectAttr_codec);
      if (SuitSkill != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SuitSkill);
      }
      if (SuitAppearance != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SuitAppearance);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Score);
      }
      if (Color != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Color);
      }
      if (BuildName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(BuildName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += baseAttr_.CalculateSize(_repeated_baseAttr_codec);
      size += effectAttr_.CalculateSize(_repeated_effectAttr_codec);
      if (SuitSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitSkill);
      }
      if (SuitAppearance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuitAppearance);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (BuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BuildName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            baseAttr_.AddEntriesFrom(input, _repeated_baseAttr_codec);
            break;
          }
          case 18: {
            effectAttr_.AddEntriesFrom(input, _repeated_effectAttr_codec);
            break;
          }
          case 24: {
            SuitSkill = input.ReadUInt32();
            break;
          }
          case 32: {
            SuitAppearance = input.ReadUInt32();
            break;
          }
          case 40: {
            Score = input.ReadUInt32();
            break;
          }
          case 48: {
            Color = input.ReadUInt32();
            break;
          }
          case 58: {
            BuildName = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PetEquip message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class BaseAttr : pb::IMessage {
        private static readonly pb::MessageParser<BaseAttr> _parser = new pb::MessageParser<BaseAttr>(() => new BaseAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BaseAttr> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        /// 表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "attrId" field.</summary>
        public const int AttrIdFieldNumber = 2;
        private uint attrId_;
        /// <summary>
        /// 属性id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrId {
          get { return attrId_; }
          set {
            attrId_ = value;
          }
        }

        /// <summary>Field number for the "attrValue" field.</summary>
        public const int AttrValueFieldNumber = 3;
        private int attrValue_;
        /// <summary>
        /// 属性值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttrValue {
          get { return attrValue_; }
          set {
            attrValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (AttrId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AttrId);
          }
          if (AttrValue != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(AttrValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (AttrId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
          }
          if (AttrValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                AttrId = input.ReadUInt32();
                break;
              }
              case 24: {
                AttrValue = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class EffectAttr : pb::IMessage {
        private static readonly pb::MessageParser<EffectAttr> _parser = new pb::MessageParser<EffectAttr>(() => new EffectAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EffectAttr> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoId" field.</summary>
        public const int InfoIdFieldNumber = 1;
        private uint infoId_;
        /// <summary>
        /// 特效表id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InfoId {
          get { return infoId_; }
          set {
            infoId_ = value;
          }
        }

        /// <summary>Field number for the "skillId" field.</summary>
        public const int SkillIdFieldNumber = 2;
        private uint skillId_;
        /// <summary>
        /// 技能id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SkillId {
          get { return skillId_; }
          set {
            skillId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InfoId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(InfoId);
          }
          if (SkillId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SkillId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InfoId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
          }
          if (SkillId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                InfoId = input.ReadUInt32();
                break;
              }
              case 16: {
                SkillId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///制造宠物装备
  /// </summary>
  public sealed class CmdItemBuildPetEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildPetEquipReq> _parser = new pb::MessageParser<CmdItemBuildPetEquipReq>(() => new CmdItemBuildPetEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildPetEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "forgeSpecial" field.</summary>
    public const int ForgeSpecialFieldNumber = 2;
    private uint forgeSpecial_;
    /// <summary>
    ///使用的特殊材料id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ForgeSpecial {
      get { return forgeSpecial_; }
      set {
        forgeSpecial_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ForgeSpecial != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ForgeSpecial);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ForgeSpecial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForgeSpecial);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ForgeSpecial = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemBuildPetEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBuildPetEquipRes> _parser = new pb::MessageParser<CmdItemBuildPetEquipRes>(() => new CmdItemBuildPetEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBuildPetEquipRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///宠物装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///炼化宠物装备
  /// </summary>
  public sealed class CmdItemSmeltPetEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSmeltPetEquipReq> _parser = new pb::MessageParser<CmdItemSmeltPetEquipReq>(() => new CmdItemSmeltPetEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSmeltPetEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///炼化宠物装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    /// <summary>
    ///穿着该装备的宠物uid(不在宠物身上不用填)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "smeltItemId" field.</summary>
    public const int SmeltItemIdFieldNumber = 3;
    private uint smeltItemId_;
    /// <summary>
    ///炼化道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SmeltItemId {
      get { return smeltItemId_; }
      set {
        smeltItemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (SmeltItemId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SmeltItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (SmeltItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SmeltItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 24: {
            SmeltItemId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemSmeltPetEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemSmeltPetEquipRes> _parser = new pb::MessageParser<CmdItemSmeltPetEquipRes>(() => new CmdItemSmeltPetEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemSmeltPetEquipRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///炼化宠物装备的uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    /// <summary>
    ///穿着该装备的宠物uid(不在宠物身上不用填)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 3;
    private global::Packet.Item item_;
    /// <summary>
    ///宠物装备更新（如果是在背包里的走道具更新协议）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (item_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备、卸下宠物装备
  /// </summary>
  public sealed class CmdItemFitPetEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemFitPetEquipReq> _parser = new pb::MessageParser<CmdItemFitPetEquipReq>(() => new CmdItemFitPetEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemFitPetEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 1;
    private uint equipSlot_;
    /// <summary>
    /// 要穿戴的位置(这个目前等于元核类型)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private ulong uuid_;
    /// <summary>
    /// 要穿的装备的uuid   如果uuid=0, 则是卸下, 如果本来有穿戴, 则是替换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 3;
    private uint petUid_;
    /// <summary>
    ///操作的宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipSlot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EquipSlot);
      }
      if (Uuid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Uuid);
      }
      if (PetUid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PetUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipSlot);
      }
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipSlot = input.ReadUInt32();
            break;
          }
          case 16: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 24: {
            PetUid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemFitPetEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemFitPetEquipRes> _parser = new pb::MessageParser<CmdItemFitPetEquipRes>(() => new CmdItemFitPetEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemFitPetEquipRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipSlot" field.</summary>
    public const int EquipSlotFieldNumber = 1;
    private uint equipSlot_;
    /// <summary>
    /// 要穿戴的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EquipSlot {
      get { return equipSlot_; }
      set {
        equipSlot_ = value;
      }
    }

    /// <summary>Field number for the "petUid" field.</summary>
    public const int PetUidFieldNumber = 2;
    private uint petUid_;
    /// <summary>
    ///操作的宠物uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetUid {
      get { return petUid_; }
      set {
        petUid_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 3;
    private global::Packet.Item item_;
    /// <summary>
    ///宠物装备（如果是卸下宠物装备该字段为空）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipSlot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EquipSlot);
      }
      if (PetUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetUid);
      }
      if (item_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EquipSlot);
      }
      if (PetUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetUid);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipSlot = input.ReadUInt32();
            break;
          }
          case 16: {
            PetUid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///分解宠物装备
  /// </summary>
  public sealed class CmdItemDecomposePetEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposePetEquipReq> _parser = new pb::MessageParser<CmdItemDecomposePetEquipReq>(() => new CmdItemDecomposePetEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposePetEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemDecomposePetEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemDecomposePetEquipRes> _parser = new pb::MessageParser<CmdItemDecomposePetEquipRes>(() => new CmdItemDecomposePetEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemDecomposePetEquipRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///饰品重铸锁定
  /// </summary>
  public sealed class CmdItemOrnamentLockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentLockReq> _parser = new pb::MessageParser<CmdItemOrnamentLockReq>(() => new CmdItemOrnamentLockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentLockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    ///操作的属性infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 3;
    private bool lock_;
    /// <summary>
    ///true-锁定，false-解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (Lock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Lock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Lock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Lock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemOrnamentLockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemOrnamentLockRes> _parser = new pb::MessageParser<CmdItemOrnamentLockRes>(() => new CmdItemOrnamentLockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemOrnamentLockRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    ///操作的属性infoid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 3;
    private bool lock_;
    /// <summary>
    ///true-锁定，false-解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (Lock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Lock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Lock != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Lock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemJewelLevelAttrSelectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemJewelLevelAttrSelectReq> _parser = new pb::MessageParser<CmdItemJewelLevelAttrSelectReq>(() => new CmdItemJewelLevelAttrSelectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemJewelLevelAttrSelectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///装备uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "attrIndex" field.</summary>
    public const int AttrIndexFieldNumber = 2;
    private uint attrIndex_;
    /// <summary>
    ///选择0，1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrIndex {
      get { return attrIndex_; }
      set {
        attrIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (AttrIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AttrIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (AttrIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            AttrIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemJewelLevelAttrSelectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemJewelLevelAttrSelectRes> _parser = new pb::MessageParser<CmdItemJewelLevelAttrSelectRes>(() => new CmdItemJewelLevelAttrSelectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemJewelLevelAttrSelectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    /// <summary>
    ///装备uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "attrIndex" field.</summary>
    public const int AttrIndexFieldNumber = 2;
    private uint attrIndex_;
    /// <summary>
    ///选择0，1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrIndex {
      get { return attrIndex_; }
      set {
        attrIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (AttrIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AttrIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (AttrIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            AttrIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemRebuildEquipReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRebuildEquipReq> _parser = new pb::MessageParser<CmdItemRebuildEquipReq>(() => new CmdItemRebuildEquipReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRebuildEquipReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "toinfoId" field.</summary>
    public const int ToinfoIdFieldNumber = 2;
    private uint toinfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToinfoId {
      get { return toinfoId_; }
      set {
        toinfoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (ToinfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToinfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (ToinfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToinfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            ToinfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemRebuildEquipRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemRebuildEquipRes> _parser = new pb::MessageParser<CmdItemRebuildEquipRes>(() => new CmdItemRebuildEquipRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemRebuildEquipRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdItemReFreshEquipEffectReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemReFreshEquipEffectReq> _parser = new pb::MessageParser<CmdItemReFreshEquipEffectReq>(() => new CmdItemReFreshEquipEffectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemReFreshEquipEffectReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "isReset" field.</summary>
    public const int IsResetFieldNumber = 2;
    private bool isReset_;
    /// <summary>
    ///是否是重置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReset {
      get { return isReset_; }
      set {
        isReset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (IsReset != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (IsReset != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            IsReset = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemReFreshEquipEffectRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemReFreshEquipEffectRes> _parser = new pb::MessageParser<CmdItemReFreshEquipEffectRes>(() => new CmdItemReFreshEquipEffectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemReFreshEquipEffectRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::Packet.Item item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::Packet.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备部位升级
  /// </summary>
  public sealed class CmdItemBodyEnhanceReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBodyEnhanceReq> _parser = new pb::MessageParser<CmdItemBodyEnhanceReq>(() => new CmdItemBodyEnhanceReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBodyEnhanceReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private uint slot_;
    /// <summary>
    ///参考上边EquipmentSlot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private ulong itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Slot);
      }
      if (ItemId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      if (ItemId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Slot = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备部位升级
  /// </summary>
  public sealed class CmdItemBodyEnhanceRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBodyEnhanceRes> _parser = new pb::MessageParser<CmdItemBodyEnhanceRes>(() => new CmdItemBodyEnhanceRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBodyEnhanceRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private uint slot_;
    /// <summary>
    ///参考上边EquipmentSlot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    ///经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "slotUpgradeUseLowTimes" field.</summary>
    public const int SlotUpgradeUseLowTimesFieldNumber = 4;
    private uint slotUpgradeUseLowTimes_;
    /// <summary>
    ///本周已经吃紫色以下装备数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotUpgradeUseLowTimes {
      get { return slotUpgradeUseLowTimes_; }
      set {
        slotUpgradeUseLowTimes_ = value;
      }
    }

    /// <summary>Field number for the "slotUpgradeUseLowRefreshLeftTime" field.</summary>
    public const int SlotUpgradeUseLowRefreshLeftTimeFieldNumber = 5;
    private uint slotUpgradeUseLowRefreshLeftTime_;
    /// <summary>
    ///距离本周吃紫色一下装备数量剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotUpgradeUseLowRefreshLeftTime {
      get { return slotUpgradeUseLowRefreshLeftTime_; }
      set {
        slotUpgradeUseLowRefreshLeftTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Slot);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (SlotUpgradeUseLowTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SlotUpgradeUseLowTimes);
      }
      if (SlotUpgradeUseLowRefreshLeftTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SlotUpgradeUseLowRefreshLeftTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (SlotUpgradeUseLowTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotUpgradeUseLowTimes);
      }
      if (SlotUpgradeUseLowRefreshLeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotUpgradeUseLowRefreshLeftTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Slot = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            SlotUpgradeUseLowTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            SlotUpgradeUseLowRefreshLeftTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新强化等级特效
  /// </summary>
  public sealed class CmdItemBodyEnhanceEffectRefreashReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBodyEnhanceEffectRefreashReq> _parser = new pb::MessageParser<CmdItemBodyEnhanceEffectRefreashReq>(() => new CmdItemBodyEnhanceEffectRefreashReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBodyEnhanceEffectRefreashReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///刷新强化等级特效
  /// </summary>
  public sealed class CmdItemBodyEnhanceEffectRefreashRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemBodyEnhanceEffectRefreashRes> _parser = new pb::MessageParser<CmdItemBodyEnhanceEffectRefreashRes>(() => new CmdItemBodyEnhanceEffectRefreashRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemBodyEnhanceEffectRefreashRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "effectId" field.</summary>
    public const int EffectIdFieldNumber = 2;
    private uint effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (EffectId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EffectId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            EffectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemLockItemReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemLockItemReq> _parser = new pb::MessageParser<CmdItemLockItemReq>(() => new CmdItemLockItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemLockItemReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 2;
    private bool islocked_;
    /// <summary>
    ///true 上锁 false解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    /// <summary>Field number for the "petuid" field.</summary>
    public const int PetuidFieldNumber = 3;
    private uint petuid_;
    /// <summary>
    ///如果是宠物身上的原核，把宠物uid发过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petuid {
      get { return petuid_; }
      set {
        petuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Islocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Islocked);
      }
      if (Petuid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Petuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      if (Petuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Islocked = input.ReadBool();
            break;
          }
          case 24: {
            Petuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdItemLockItemRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdItemLockItemRes> _parser = new pb::MessageParser<CmdItemLockItemRes>(() => new CmdItemLockItemRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItemLockItemRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 2;
    private bool islocked_;
    /// <summary>
    ///true 上锁 false解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    /// <summary>Field number for the "petuid" field.</summary>
    public const int PetuidFieldNumber = 3;
    private uint petuid_;
    /// <summary>
    ///如果是宠物身上的原核，把宠物uid发过来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Petuid {
      get { return petuid_; }
      set {
        petuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (Islocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(Islocked);
      }
      if (Petuid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Petuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      if (Petuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Petuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Islocked = input.ReadBool();
            break;
          }
          case 24: {
            Petuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
