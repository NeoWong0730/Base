// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: securelock.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 6200+
  /// </summary>
  public enum CmdSecureLock {
    None = 0,
    /// <summary>
    ///客户端请求数据
    /// </summary>
    InitReq = 6201,
    /// <summary>
    ///返回数据
    /// </summary>
    InitRes = 6202,
    /// <summary>
    ///设置密码
    /// </summary>
    SetPasswordReq = 6203,
    /// <summary>
    ///修改密码
    /// </summary>
    ResetPasswordReq = 6205,
    /// <summary>
    ///修改密码返回
    /// </summary>
    ResetPasswordRes = 6206,
    /// <summary>
    ///强制解锁/取消强制解锁
    /// </summary>
    EnforceResetReq = 6207,
    /// <summary>
    ///强制解锁返回/取消强制解锁返回
    /// </summary>
    EnforceResetRes = 6208,
    /// <summary>
    ///加锁
    /// </summary>
    LockReq = 6209,
    /// <summary>
    ///解锁
    /// </summary>
    UnlockReq = 6211,
    /// <summary>
    /// </summary>
    DataUpdateNtf = 6212,
    /// <summary>
    ///密码错误返回
    /// </summary>
    ErrorCountNtf = 6213,
    /// <summary>
    ///解锁返回
    /// </summary>
    UnlockRes = 6214,
  }

  public enum ErrorSecureLock {
    None = 0,
    /// <summary>
    ///密码长度太短
    /// </summary>
    PasswordLengthShort = 6201,
    /// <summary>
    ///密码长度太长
    /// </summary>
    PasswordLengthLong = 6202,
    /// <summary>
    ///密码错误
    /// </summary>
    PasswordError = 6203,
    /// <summary>
    ///不能重复设置密码
    /// </summary>
    SetRepeat = 6204,
    /// <summary>
    ///首先设置密码才能重置密码
    /// </summary>
    SetPassWordFirst = 6205,
    /// <summary>
    ///旧密码错误设置失败
    /// </summary>
    OldPasswordError = 6206,
    /// <summary>
    ///还没有设置密码
    /// </summary>
    PassWordNone = 6207,
    /// <summary>
    ///此操作需要解除安全锁，请先进行解锁
    /// </summary>
    RefuseOp = 6208,
    /// <summary>
    ///强制解锁期间 只能取消强制解锁 不能进行其它操作
    /// </summary>
    EnforceRefuseOp = 6209,
    /// <summary>
    ///密码错误次数已达到最大 明天重试
    /// </summary>
    MaxErrorCount = 6210,
  }

  #endregion

  #region Messages
  public sealed class SecureLockData : pb::IMessage {
    private static readonly pb::MessageParser<SecureLockData> _parser = new pb::MessageParser<SecureLockData>(() => new SecureLockData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecureLockData> Parser { get { return _parser; } }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private pb::ByteString password_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lockState" field.</summary>
    public const int LockStateFieldNumber = 2;
    private bool lockState_;
    /// <summary>
    ///加锁状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockState {
      get { return lockState_; }
      set {
        lockState_ = value;
      }
    }

    /// <summary>Field number for the "errorCount" field.</summary>
    public const int ErrorCountFieldNumber = 3;
    private int errorCount_;
    /// <summary>
    ///密码错误次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCount {
      get { return errorCount_; }
      set {
        errorCount_ = value;
      }
    }

    /// <summary>Field number for the "enforceUnlockTick" field.</summary>
    public const int EnforceUnlockTickFieldNumber = 4;
    private uint enforceUnlockTick_;
    /// <summary>
    ///强制解锁到期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnforceUnlockTick {
      get { return enforceUnlockTick_; }
      set {
        enforceUnlockTick_ = value;
      }
    }

    /// <summary>Field number for the "resetTick" field.</summary>
    public const int ResetTickFieldNumber = 5;
    private uint resetTick_;
    /// <summary>
    ///跨天重置时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResetTick {
      get { return resetTick_; }
      set {
        resetTick_ = value;
      }
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.SecureLockData.Types.deviceInfo> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.SecureLockData.Types.deviceInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.SecureLockData.Types.deviceInfo> devices_ = new pbc::RepeatedField<global::Packet.SecureLockData.Types.deviceInfo>();
    /// <summary>
    ///常用设备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SecureLockData.Types.deviceInfo> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Password);
      }
      if (LockState != false) {
        output.WriteRawTag(16);
        output.WriteBool(LockState);
      }
      if (ErrorCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrorCount);
      }
      if (EnforceUnlockTick != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EnforceUnlockTick);
      }
      if (ResetTick != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ResetTick);
      }
      devices_.WriteTo(output, _repeated_devices_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (LockState != false) {
        size += 1 + 1;
      }
      if (ErrorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCount);
      }
      if (EnforceUnlockTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnforceUnlockTick);
      }
      if (ResetTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResetTick);
      }
      size += devices_.CalculateSize(_repeated_devices_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadBytes();
            break;
          }
          case 16: {
            LockState = input.ReadBool();
            break;
          }
          case 24: {
            ErrorCount = input.ReadInt32();
            break;
          }
          case 32: {
            EnforceUnlockTick = input.ReadUInt32();
            break;
          }
          case 40: {
            ResetTick = input.ReadUInt32();
            break;
          }
          case 50: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SecureLockData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class deviceInfo : pb::IMessage {
        private static readonly pb::MessageParser<deviceInfo> _parser = new pb::MessageParser<deviceInfo>(() => new deviceInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<deviceInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "deviceId" field.</summary>
        public const int DeviceIdFieldNumber = 1;
        private pb::ByteString deviceId_ = pb::ByteString.Empty;
        /// <summary>
        ///deviceId
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DeviceId {
          get { return deviceId_; }
          set {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timeTick" field.</summary>
        public const int TimeTickFieldNumber = 2;
        private uint timeTick_;
        /// <summary>
        ///最后离开时间戳
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeTick {
          get { return timeTick_; }
          set {
            timeTick_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DeviceId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(DeviceId);
          }
          if (TimeTick != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(TimeTick);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DeviceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeviceId);
          }
          if (TimeTick != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeTick);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                DeviceId = input.ReadBytes();
                break;
              }
              case 16: {
                TimeTick = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///客户端请求数据
  /// </summary>
  public sealed class CmdSecureLockInitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockInitReq> _parser = new pb::MessageParser<CmdSecureLockInitReq>(() => new CmdSecureLockInitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockInitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSecureLockInitRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockInitRes> _parser = new pb::MessageParser<CmdSecureLockInitRes>(() => new CmdSecureLockInitRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockInitRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasPassword" field.</summary>
    public const int HasPasswordFieldNumber = 1;
    private bool hasPassword_;
    /// <summary>
    ///是否有密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return hasPassword_; }
      set {
        hasPassword_ = value;
      }
    }

    /// <summary>Field number for the "lockState" field.</summary>
    public const int LockStateFieldNumber = 2;
    private bool lockState_;
    /// <summary>
    ///加锁状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockState {
      get { return lockState_; }
      set {
        lockState_ = value;
      }
    }

    /// <summary>Field number for the "errorCount" field.</summary>
    public const int ErrorCountFieldNumber = 3;
    private int errorCount_;
    /// <summary>
    ///密码错误次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCount {
      get { return errorCount_; }
      set {
        errorCount_ = value;
      }
    }

    /// <summary>Field number for the "enforceUnlockTick" field.</summary>
    public const int EnforceUnlockTickFieldNumber = 4;
    private uint enforceUnlockTick_;
    /// <summary>
    ///强制解锁到期时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnforceUnlockTick {
      get { return enforceUnlockTick_; }
      set {
        enforceUnlockTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPassword != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasPassword);
      }
      if (LockState != false) {
        output.WriteRawTag(16);
        output.WriteBool(LockState);
      }
      if (ErrorCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrorCount);
      }
      if (EnforceUnlockTick != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EnforceUnlockTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPassword != false) {
        size += 1 + 1;
      }
      if (LockState != false) {
        size += 1 + 1;
      }
      if (ErrorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCount);
      }
      if (EnforceUnlockTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnforceUnlockTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasPassword = input.ReadBool();
            break;
          }
          case 16: {
            LockState = input.ReadBool();
            break;
          }
          case 24: {
            ErrorCount = input.ReadInt32();
            break;
          }
          case 32: {
            EnforceUnlockTick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置密码
  /// </summary>
  public sealed class CmdSecureLockSetPasswordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockSetPasswordReq> _parser = new pb::MessageParser<CmdSecureLockSetPasswordReq>(() => new CmdSecureLockSetPasswordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockSetPasswordReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改密码
  /// </summary>
  public sealed class CmdSecureLockResetPasswordReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockResetPasswordReq> _parser = new pb::MessageParser<CmdSecureLockResetPasswordReq>(() => new CmdSecureLockResetPasswordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockResetPasswordReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newpassword" field.</summary>
    public const int NewpasswordFieldNumber = 2;
    private string newpassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Newpassword {
      get { return newpassword_; }
      set {
        newpassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (Newpassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Newpassword);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Newpassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Newpassword);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
          case 18: {
            Newpassword = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSecureLockResetPasswordRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockResetPasswordRes> _parser = new pb::MessageParser<CmdSecureLockResetPasswordRes>(() => new CmdSecureLockResetPasswordRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockResetPasswordRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///强制解锁/取消强制解锁
  /// </summary>
  public sealed class CmdSecureLockEnforceResetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockEnforceResetReq> _parser = new pb::MessageParser<CmdSecureLockEnforceResetReq>(() => new CmdSecureLockEnforceResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockEnforceResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private uint opType_;
    /// <summary>
    ///1:强制解锁 0:取消强制解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OpType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSecureLockEnforceResetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockEnforceResetRes> _parser = new pb::MessageParser<CmdSecureLockEnforceResetRes>(() => new CmdSecureLockEnforceResetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockEnforceResetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "endTick" field.</summary>
    public const int EndTickFieldNumber = 1;
    private uint endTick_;
    /// <summary>
    ///到期时间戳/取消强制解锁返回0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTick {
      get { return endTick_; }
      set {
        endTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTick != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EndTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EndTick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加锁
  /// </summary>
  public sealed class CmdSecureLockLockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockLockReq> _parser = new pb::MessageParser<CmdSecureLockLockReq>(() => new CmdSecureLockLockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockLockReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///解锁
  /// </summary>
  public sealed class CmdSecureLockUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockUnlockReq> _parser = new pb::MessageParser<CmdSecureLockUnlockReq>(() => new CmdSecureLockUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockUnlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSecureLockUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockUnlockRes> _parser = new pb::MessageParser<CmdSecureLockUnlockRes>(() => new CmdSecureLockUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockUnlockRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdSecureLockErrorCountNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockErrorCountNtf> _parser = new pb::MessageParser<CmdSecureLockErrorCountNtf>(() => new CmdSecureLockErrorCountNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockErrorCountNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "errorCount" field.</summary>
    public const int ErrorCountFieldNumber = 1;
    private uint errorCount_;
    /// <summary>
    ///密码错误次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCount {
      get { return errorCount_; }
      set {
        errorCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ErrorCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdSecureLockDataUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSecureLockDataUpdateNtf> _parser = new pb::MessageParser<CmdSecureLockDataUpdateNtf>(() => new CmdSecureLockDataUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSecureLockDataUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasPassword" field.</summary>
    public const int HasPasswordFieldNumber = 1;
    private bool hasPassword_;
    /// <summary>
    ///是否有密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return hasPassword_; }
      set {
        hasPassword_ = value;
      }
    }

    /// <summary>Field number for the "lockState" field.</summary>
    public const int LockStateFieldNumber = 2;
    private bool lockState_;
    /// <summary>
    ///加锁状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockState {
      get { return lockState_; }
      set {
        lockState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPassword != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasPassword);
      }
      if (LockState != false) {
        output.WriteRawTag(16);
        output.WriteBool(LockState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPassword != false) {
        size += 1 + 1;
      }
      if (LockState != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasPassword = input.ReadBool();
            break;
          }
          case 16: {
            LockState = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
