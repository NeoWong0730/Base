// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activityswitch.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 7700+
  /// </summary>
  public enum CmdActivitySwitch {
    None = 0,
    /// <summary>
    ///活动开关通知
    /// </summary>
    InfoListNtf = 7701,
  }

  public enum ErrorActivitySwitch {
    /// <summary>
    ///正常
    /// </summary>
    None = 0,
    /// <summary>
    ///目前无法执行该操作
    /// </summary>
    Close = 7701,
  }

  public enum ActivityType {
    None = 0,
    /// <summary>
    ///福利-七日登录
    /// </summary>
    Signin = 100,
    /// <summary>
    ///福利-等级礼包
    /// </summary>
    LevelGift = 101,
    /// <summary>
    ///福利-成长基金
    /// </summary>
    GrowthFund = 102,
    /// <summary>
    ///福利-生涯累充
    /// </summary>
    CareerChange = 103,
    /// <summary>
    ///福利-特权
    /// </summary>
    Privilege = 104,
    /// <summary>
    ///福利-每日签到
    /// </summary>
    Sign = 105,
    /// <summary>
    ///福利-火焰鼠礼券
    /// </summary>
    Award = 106,
    /// <summary>
    ///福利-每日礼包
    /// </summary>
    DaliyPacks = 107,
    /// <summary>
    ///首充
    /// </summary>
    FirstCharge = 200,
    /// <summary>
    ///王国战令
    /// </summary>
    BattlePass = 201,
    /// <summary>
    ///十四日目标
    /// </summary>
    ActivityTarget = 202,
    /// <summary>
    ///礼券
    /// </summary>
    Lottery = 203,
    /// <summary>
    ///红包雨
    /// </summary>
    RedEnvelopRain = 204,
    /// <summary>
    ///时装抽奖
    /// </summary>
    FashionActivity = 205,
    /// <summary>
    ///条件礼包
    /// </summary>
    ConditionalGift = 206,
    /// <summary>
    ///交易行
    /// </summary>
    Trade = 301,
  }

  #endregion

  #region Messages
  public sealed class ActivityInfo : pb::IMessage {
    private static readonly pb::MessageParser<ActivityInfo> _parser = new pb::MessageParser<ActivityInfo>(() => new ActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private bool open_;
    /// <summary>
    ///false-关闭，true-开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Open != false) {
        output.WriteRawTag(16);
        output.WriteBool(Open);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动开关通知
  /// </summary>
  public sealed class CmdActivitySwitchInfoListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivitySwitchInfoListNtf> _parser = new pb::MessageParser<CmdActivitySwitchInfoListNtf>(() => new CmdActivitySwitchInfoListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivitySwitchInfoListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoList" field.</summary>
    public const int InfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.ActivityInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.ActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ActivityInfo> infoList_ = new pbc::RepeatedField<global::Packet.ActivityInfo>();
    /// <summary>
    ///活动开关通知
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ActivityInfo> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
