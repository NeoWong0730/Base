// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapcfgclient.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Messages
  public sealed class MapEditorData : pb::IMessage {
    private static readonly pb::MessageParser<MapEditorData> _parser = new pb::MessageParser<MapEditorData>(() => new MapEditorData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapEditorData> Parser { get { return _parser; } }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.MapCfgInfoClient> _repeated_map_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.MapCfgInfoClient.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapCfgInfoClient> map_ = new pbc::RepeatedField<global::Packet.MapCfgInfoClient>();
    /// <summary>
    ///所有地图数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapCfgInfoClient> Map {
      get { return map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      map_.WriteTo(output, _repeated_map_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += map_.CalculateSize(_repeated_map_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            map_.AddEntriesFrom(input, _repeated_map_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MapCfgInfoClient : pb::IMessage {
    private static readonly pb::MessageParser<MapCfgInfoClient> _parser = new pb::MessageParser<MapCfgInfoClient>(() => new MapCfgInfoClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCfgInfoClient> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    /// <summary>
    ///地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    /// <summary>
    ///地图宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    /// <summary>
    ///高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "telInfos" field.</summary>
    public const int TelInfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.TeleporterData> _repeated_telInfos_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.TeleporterData.Parser);
    private readonly pbc::RepeatedField<global::Packet.TeleporterData> telInfos_ = new pbc::RepeatedField<global::Packet.TeleporterData>();
    /// <summary>
    ///所有tel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TeleporterData> TelInfos {
      get { return telInfos_; }
    }

    /// <summary>Field number for the "rigNpcInfos" field.</summary>
    public const int RigNpcInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.RigidNpcData> _repeated_rigNpcInfos_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.RigidNpcData.Parser);
    private readonly pbc::RepeatedField<global::Packet.RigidNpcData> rigNpcInfos_ = new pbc::RepeatedField<global::Packet.RigidNpcData>();
    /// <summary>
    ///所有npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RigidNpcData> RigNpcInfos {
      get { return rigNpcInfos_; }
    }

    /// <summary>Field number for the "monsters" field.</summary>
    public const int MonstersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.TriggerMonsterGrpData> _repeated_monsters_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.TriggerMonsterGrpData.Parser);
    private readonly pbc::RepeatedField<global::Packet.TriggerMonsterGrpData> monsters_ = new pbc::RepeatedField<global::Packet.TriggerMonsterGrpData>();
    /// <summary>
    ///地图每个格子中怪物暗雷 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TriggerMonsterGrpData> Monsters {
      get { return monsters_; }
    }

    /// <summary>Field number for the "safearea" field.</summary>
    public const int SafeareaFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Packet.FightingSafeArea> _repeated_safearea_codec
        = pb::FieldCodec.ForMessage(58, global::Packet.FightingSafeArea.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightingSafeArea> safearea_ = new pbc::RepeatedField<global::Packet.FightingSafeArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightingSafeArea> Safearea {
      get { return safearea_; }
    }

    /// <summary>Field number for the "fblock" field.</summary>
    public const int FblockFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.FightingBlock> _repeated_fblock_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.FightingBlock.Parser);
    private readonly pbc::RepeatedField<global::Packet.FightingBlock> fblock_ = new pbc::RepeatedField<global::Packet.FightingBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.FightingBlock> Fblock {
      get { return fblock_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      telInfos_.WriteTo(output, _repeated_telInfos_codec);
      rigNpcInfos_.WriteTo(output, _repeated_rigNpcInfos_codec);
      monsters_.WriteTo(output, _repeated_monsters_codec);
      safearea_.WriteTo(output, _repeated_safearea_codec);
      fblock_.WriteTo(output, _repeated_fblock_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += telInfos_.CalculateSize(_repeated_telInfos_codec);
      size += rigNpcInfos_.CalculateSize(_repeated_rigNpcInfos_codec);
      size += monsters_.CalculateSize(_repeated_monsters_codec);
      size += safearea_.CalculateSize(_repeated_safearea_codec);
      size += fblock_.CalculateSize(_repeated_fblock_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 34: {
            telInfos_.AddEntriesFrom(input, _repeated_telInfos_codec);
            break;
          }
          case 42: {
            rigNpcInfos_.AddEntriesFrom(input, _repeated_rigNpcInfos_codec);
            break;
          }
          case 50: {
            monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
            break;
          }
          case 58: {
            safearea_.AddEntriesFrom(input, _repeated_safearea_codec);
            break;
          }
          case 66: {
            fblock_.AddEntriesFrom(input, _repeated_fblock_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PosInfoData : pb::IMessage {
    private static readonly pb::MessageParser<PosInfoData> _parser = new pb::MessageParser<PosInfoData>(() => new PosInfoData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PosInfoData> Parser { get { return _parser; } }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadInt32();
            break;
          }
          case 16: {
            PosY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地图跳转
  /// </summary>
  public sealed class TeleporterData : pb::IMessage {
    private static readonly pb::MessageParser<TeleporterData> _parser = new pb::MessageParser<TeleporterData>(() => new TeleporterData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeleporterData> Parser { get { return _parser; } }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 2;
    private uint posX_;
    /// <summary>
    ///目标位置x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 3;
    private uint posY_;
    /// <summary>
    ///目标位置y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "offX" field.</summary>
    public const int OffXFieldNumber = 4;
    private float offX_;
    /// <summary>
    ///偏转坐标，不大于屏幕
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffX {
      get { return offX_; }
      set {
        offX_ = value;
      }
    }

    /// <summary>Field number for the "offY" field.</summary>
    public const int OffYFieldNumber = 5;
    private float offY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffY {
      get { return offY_; }
      set {
        offY_ = value;
      }
    }

    /// <summary>Field number for the "rangeX" field.</summary>
    public const int RangeXFieldNumber = 6;
    private int rangeX_;
    /// <summary>
    ///范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeX {
      get { return rangeX_; }
      set {
        rangeX_ = value;
      }
    }

    /// <summary>Field number for the "rangeY" field.</summary>
    public const int RangeYFieldNumber = 7;
    private int rangeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RangeY {
      get { return rangeY_; }
      set {
        rangeY_ = value;
      }
    }

    /// <summary>Field number for the "condId" field.</summary>
    public const int CondIdFieldNumber = 8;
    private uint condId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CondId {
      get { return condId_; }
      set {
        condId_ = value;
      }
    }

    /// <summary>Field number for the "posInfo" field.</summary>
    public const int PosInfoFieldNumber = 9;
    private global::Packet.PosInfoData posInfo_;
    /// <summary>
    ///跳转点位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PosInfoData PosInfo {
      get { return posInfo_; }
      set {
        posInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MapId);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosY);
      }
      if (OffX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OffX);
      }
      if (OffY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(OffY);
      }
      if (RangeX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RangeX);
      }
      if (RangeY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RangeY);
      }
      if (CondId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CondId);
      }
      if (posInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PosInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosY);
      }
      if (OffX != 0F) {
        size += 1 + 4;
      }
      if (OffY != 0F) {
        size += 1 + 4;
      }
      if (RangeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeX);
      }
      if (RangeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RangeY);
      }
      if (CondId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CondId);
      }
      if (posInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapId = input.ReadUInt32();
            break;
          }
          case 16: {
            PosX = input.ReadUInt32();
            break;
          }
          case 24: {
            PosY = input.ReadUInt32();
            break;
          }
          case 37: {
            OffX = input.ReadFloat();
            break;
          }
          case 45: {
            OffY = input.ReadFloat();
            break;
          }
          case 48: {
            RangeX = input.ReadInt32();
            break;
          }
          case 56: {
            RangeY = input.ReadInt32();
            break;
          }
          case 64: {
            CondId = input.ReadUInt32();
            break;
          }
          case 74: {
            if (posInfo_ == null) {
              posInfo_ = new global::Packet.PosInfoData();
            }
            input.ReadMessage(posInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class RigidNpcData : pb::IMessage {
    private static readonly pb::MessageParser<RigidNpcData> _parser = new pb::MessageParser<RigidNpcData>(() => new RigidNpcData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RigidNpcData> Parser { get { return _parser; } }

    /// <summary>Field number for the "npcId" field.</summary>
    public const int NpcIdFieldNumber = 1;
    private uint npcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    /// <summary>
    ///区域宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    /// <summary>
    ///区域高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "offX" field.</summary>
    public const int OffXFieldNumber = 4;
    private int offX_;
    /// <summary>
    ///x偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffX {
      get { return offX_; }
      set {
        offX_ = value;
      }
    }

    /// <summary>Field number for the "offY" field.</summary>
    public const int OffYFieldNumber = 5;
    private int offY_;
    /// <summary>
    ///y偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffY {
      get { return offY_; }
      set {
        offY_ = value;
      }
    }

    /// <summary>Field number for the "rotaX" field.</summary>
    public const int RotaXFieldNumber = 6;
    private float rotaX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaX {
      get { return rotaX_; }
      set {
        rotaX_ = value;
      }
    }

    /// <summary>Field number for the "rotaY" field.</summary>
    public const int RotaYFieldNumber = 7;
    private float rotaY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaY {
      get { return rotaY_; }
      set {
        rotaY_ = value;
      }
    }

    /// <summary>Field number for the "rotaZ" field.</summary>
    public const int RotaZFieldNumber = 8;
    private float rotaZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaZ {
      get { return rotaZ_; }
      set {
        rotaZ_ = value;
      }
    }

    /// <summary>Field number for the "posInfos" field.</summary>
    public const int PosInfosFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Packet.PosInfoData> _repeated_posInfos_codec
        = pb::FieldCodec.ForMessage(74, global::Packet.PosInfoData.Parser);
    private readonly pbc::RepeatedField<global::Packet.PosInfoData> posInfos_ = new pbc::RepeatedField<global::Packet.PosInfoData>();
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PosInfoData> PosInfos {
      get { return posInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcId);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (OffX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OffX);
      }
      if (OffY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OffY);
      }
      if (RotaX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotaX);
      }
      if (RotaY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotaY);
      }
      if (RotaZ != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotaZ);
      }
      posInfos_.WriteTo(output, _repeated_posInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcId);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (OffX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffX);
      }
      if (OffY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffY);
      }
      if (RotaX != 0F) {
        size += 1 + 4;
      }
      if (RotaY != 0F) {
        size += 1 + 4;
      }
      if (RotaZ != 0F) {
        size += 1 + 4;
      }
      size += posInfos_.CalculateSize(_repeated_posInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NpcId = input.ReadUInt32();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            OffX = input.ReadInt32();
            break;
          }
          case 40: {
            OffY = input.ReadInt32();
            break;
          }
          case 53: {
            RotaX = input.ReadFloat();
            break;
          }
          case 61: {
            RotaY = input.ReadFloat();
            break;
          }
          case 69: {
            RotaZ = input.ReadFloat();
            break;
          }
          case 74: {
            posInfos_.AddEntriesFrom(input, _repeated_posInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class TriggerMonsterGrpData : pb::IMessage {
    private static readonly pb::MessageParser<TriggerMonsterGrpData> _parser = new pb::MessageParser<TriggerMonsterGrpData>(() => new TriggerMonsterGrpData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerMonsterGrpData> Parser { get { return _parser; } }

    /// <summary>Field number for the "monsterGrpId" field.</summary>
    public const int MonsterGrpIdFieldNumber = 1;
    private uint monsterGrpId_;
    /// <summary>
    ///怪物组的id 因为怪物组合要写在另一张表里这里配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterGrpId {
      get { return monsterGrpId_; }
      set {
        monsterGrpId_ = value;
      }
    }

    /// <summary>Field number for the "posInfo" field.</summary>
    public const int PosInfoFieldNumber = 2;
    private global::Packet.PosInfoData posInfo_;
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PosInfoData PosInfo {
      get { return posInfo_; }
      set {
        posInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterGrpId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonsterGrpId);
      }
      if (posInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PosInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterGrpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterGrpId);
      }
      if (posInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MonsterGrpId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (posInfo_ == null) {
              posInfo_ = new global::Packet.PosInfoData();
            }
            input.ReadMessage(posInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class FightingSafeArea : pb::IMessage {
    private static readonly pb::MessageParser<FightingSafeArea> _parser = new pb::MessageParser<FightingSafeArea>(() => new FightingSafeArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightingSafeArea> Parser { get { return _parser; } }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    /// <summary>
    ///区域宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    /// <summary>
    ///区域高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "offx" field.</summary>
    public const int OffxFieldNumber = 3;
    private int offx_;
    /// <summary>
    ///x偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offx {
      get { return offx_; }
      set {
        offx_ = value;
      }
    }

    /// <summary>Field number for the "offy" field.</summary>
    public const int OffyFieldNumber = 4;
    private int offy_;
    /// <summary>
    ///y偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offy {
      get { return offy_; }
      set {
        offy_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 5;
    private int camp_;
    /// <summary>
    ///阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "posInfo" field.</summary>
    public const int PosInfoFieldNumber = 6;
    private global::Packet.PosInfoData posInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PosInfoData PosInfo {
      get { return posInfo_; }
      set {
        posInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Offx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Offx);
      }
      if (Offy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Offy);
      }
      if (Camp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Camp);
      }
      if (posInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PosInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Offx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offx);
      }
      if (Offy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offy);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (posInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Offx = input.ReadInt32();
            break;
          }
          case 32: {
            Offy = input.ReadInt32();
            break;
          }
          case 40: {
            Camp = input.ReadInt32();
            break;
          }
          case 50: {
            if (posInfo_ == null) {
              posInfo_ = new global::Packet.PosInfoData();
            }
            input.ReadMessage(posInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class FightingBlock : pb::IMessage {
    private static readonly pb::MessageParser<FightingBlock> _parser = new pb::MessageParser<FightingBlock>(() => new FightingBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FightingBlock> Parser { get { return _parser; } }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    /// <summary>
    ///区域宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    /// <summary>
    ///区域高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "offx" field.</summary>
    public const int OffxFieldNumber = 3;
    private int offx_;
    /// <summary>
    ///x偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offx {
      get { return offx_; }
      set {
        offx_ = value;
      }
    }

    /// <summary>Field number for the "offy" field.</summary>
    public const int OffyFieldNumber = 4;
    private int offy_;
    /// <summary>
    ///y偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offy {
      get { return offy_; }
      set {
        offy_ = value;
      }
    }

    /// <summary>Field number for the "camp" field.</summary>
    public const int CampFieldNumber = 5;
    private int camp_;
    /// <summary>
    ///阵营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Camp {
      get { return camp_; }
      set {
        camp_ = value;
      }
    }

    /// <summary>Field number for the "posInfo" field.</summary>
    public const int PosInfoFieldNumber = 6;
    private global::Packet.PosInfoData posInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PosInfoData PosInfo {
      get { return posInfo_; }
      set {
        posInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Offx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Offx);
      }
      if (Offy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Offy);
      }
      if (Camp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Camp);
      }
      if (posInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PosInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Offx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offx);
      }
      if (Offy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offy);
      }
      if (Camp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Camp);
      }
      if (posInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Offx = input.ReadInt32();
            break;
          }
          case 32: {
            Offy = input.ReadInt32();
            break;
          }
          case 40: {
            Camp = input.ReadInt32();
            break;
          }
          case 50: {
            if (posInfo_ == null) {
              posInfo_ = new global::Packet.PosInfoData();
            }
            input.ReadMessage(posInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
