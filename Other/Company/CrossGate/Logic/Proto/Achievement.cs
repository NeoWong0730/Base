// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achievement.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 8100
  /// </summary>
  public enum CmdAchievement {
    None = 0,
    Begin = 8100,
    /// <summary>
    /// 上线推送
    /// </summary>
    DataNty = 8101,
    /// <summary>
    /// 请求系统数据
    /// </summary>
    SystemDataReq = 8102,
    /// <summary>
    /// 系统数据返回
    /// </summary>
    SystemDataRes = 8103,
    /// <summary>
    /// 请求领取等级奖励
    /// </summary>
    ReceiveLevelRewardReq = 8104,
    /// <summary>
    /// 领取等级奖励返回
    /// </summary>
    ReceiveLevelRewardRes = 8105,
    /// <summary>
    /// 通知更新基础
    /// </summary>
    UpdateBaseNty = 8106,
    /// <summary>
    /// 通知更新进度
    /// </summary>
    UpdateAchievementNty = 8107,
    /// <summary>
    /// 通知达成成就
    /// </summary>
    FinishAchievementNty = 8108,
  }

  public enum ErrorAchievement {
    None = 0,
    /// <summary>
    /// 找不到配置
    /// </summary>
    ConfigNotFound = 8101,
    /// <summary>
    /// 无效的成就id
    /// </summary>
    InvalidAchievementTid = 8102,
    /// <summary>
    /// 等级不足
    /// </summary>
    LevelDoesNotMeet = 8103,
    /// <summary>
    /// 奖励已领取过
    /// </summary>
    RewardAlreadyReceived = 8104,
    /// <summary>
    /// 没有玩家数据
    /// </summary>
    RoleNotFound = 8105,
    /// <summary>
    /// 该等级没有奖励
    /// </summary>
    NoRewardForThisLevel = 8106,
  }

  public enum AchievementActiveReason {
    None = 0,
    /// <summary>
    /// 达成成就
    /// </summary>
    FinishAchievement = 8101,
    /// <summary>
    /// 领取等级奖励
    /// </summary>
    ReceiveLevelReward = 8102,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 玩家成就合服历史
  /// </summary>
  public sealed class RoleAchievementHistory : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementHistory> _parser = new pb::MessageParser<RoleAchievementHistory>(() => new RoleAchievementHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementHistory> Parser { get { return _parser; } }

    /// <summary>Field number for the "servername" field.</summary>
    public const int ServernameFieldNumber = 1;
    private pb::ByteString servername_ = pb::ByteString.Empty;
    /// <summary>
    /// 区名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Servername {
      get { return servername_; }
      set {
        servername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    /// 达成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Servername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Servername);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Servername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Servername);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Servername = input.ReadBytes();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就单元
  /// </summary>
  public sealed class RoleAchievementUnit : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementUnit> _parser = new pb::MessageParser<RoleAchievementUnit>(() => new RoleAchievementUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 成就id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    /// 达成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.RoleAchievementHistory> _repeated_history_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.RoleAchievementHistory.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleAchievementHistory> history_ = new pbc::RepeatedField<global::Packet.RoleAchievementHistory>();
    /// <summary>
    /// 合服历史达成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleAchievementHistory> History {
      get { return history_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
      history_.WriteTo(output, _repeated_history_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      size += history_.CalculateSize(_repeated_history_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 26: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就值类型-值
  /// </summary>
  public sealed class RoleAchievementValueTypeNumber : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementValueTypeNumber> _parser = new pb::MessageParser<RoleAchievementValueTypeNumber>(() => new RoleAchievementValueTypeNumber());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementValueTypeNumber> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private ulong value_;
    /// <summary>
    /// uint32  value   = 1;    // 成就值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就值类型-集合
  /// </summary>
  public sealed class RoleAchievementValueTypeSet : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementValueTypeSet> _parser = new pb::MessageParser<RoleAchievementValueTypeSet>(() => new RoleAchievementValueTypeSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementValueTypeSet> Parser { get { return _parser; } }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_values_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> values_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 成就项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就值类型
  /// </summary>
  public sealed class RoleAchievementValueType : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementValueType> _parser = new pb::MessageParser<RoleAchievementValueType>(() => new RoleAchievementValueType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementValueType> Parser { get { return _parser; } }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private global::Packet.RoleAchievementValueTypeNumber number_;
    /// <summary>
    /// 成就值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementValueTypeNumber Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 2;
    private global::Packet.RoleAchievementValueTypeSet set_;
    /// <summary>
    /// 成就项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementValueTypeSet Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (number_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Number);
      }
      if (set_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Set);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (number_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Number);
      }
      if (set_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (number_ == null) {
              number_ = new global::Packet.RoleAchievementValueTypeNumber();
            }
            input.ReadMessage(number_);
            break;
          }
          case 18: {
            if (set_ == null) {
              set_ = new global::Packet.RoleAchievementValueTypeSet();
            }
            input.ReadMessage(set_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就基础
  /// </summary>
  public sealed class RoleAchievementBase : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementBase> _parser = new pb::MessageParser<RoleAchievementBase>(() => new RoleAchievementBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就组
  /// </summary>
  public sealed class RoleAchievementGroup : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementGroup> _parser = new pb::MessageParser<RoleAchievementGroup>(() => new RoleAchievementGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementGroup> Parser { get { return _parser; } }

    /// <summary>Field number for the "achievements" field.</summary>
    public const int AchievementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RoleAchievementUnit> _repeated_achievements_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RoleAchievementUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleAchievementUnit> achievements_ = new pbc::RepeatedField<global::Packet.RoleAchievementUnit>();
    /// <summary>
    /// 成就列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleAchievementUnit> Achievements {
      get { return achievements_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Packet.RoleAchievementValueType value_;
    /// <summary>
    /// 成就值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementValueType Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      achievements_.WriteTo(output, _repeated_achievements_codec);
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += achievements_.CalculateSize(_repeated_achievements_codec);
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Packet.RoleAchievementValueType();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就详情
  /// </summary>
  public sealed class RoleAchievementDetail : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementDetail> _parser = new pb::MessageParser<RoleAchievementDetail>(() => new RoleAchievementDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementDetail> Parser { get { return _parser; } }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.RoleAchievementGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.RoleAchievementGroup.Parser);
    private readonly pbc::RepeatedField<global::Packet.RoleAchievementGroup> groups_ = new pbc::RepeatedField<global::Packet.RoleAchievementGroup>();
    /// <summary>
    /// 成就组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.RoleAchievementGroup> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家成就奖励
  /// </summary>
  public sealed class RoleAchievementReward : pb::IMessage {
    private static readonly pb::MessageParser<RoleAchievementReward> _parser = new pb::MessageParser<RoleAchievementReward>(() => new RoleAchievementReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAchievementReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_rewards_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> rewards_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已领取过的奖励(1 &lt;&lt; (等级表id - 1), bit为1表示已领取)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementDataNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementDataNty> _parser = new pb::MessageParser<CmdAchievementDataNty>(() => new CmdAchievementDataNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementDataNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.RoleAchievementBase base_;
    /// <summary>
    /// 基础
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private global::Packet.RoleAchievementDetail detail_;
    /// <summary>
    /// 详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private global::Packet.RoleAchievementReward reward_;
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (detail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Detail);
      }
      if (reward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.RoleAchievementBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (detail_ == null) {
              detail_ = new global::Packet.RoleAchievementDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
          case 26: {
            if (reward_ == null) {
              reward_ = new global::Packet.RoleAchievementReward();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementSystemDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementSystemDataReq> _parser = new pb::MessageParser<CmdAchievementSystemDataReq>(() => new CmdAchievementSystemDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementSystemDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tids" field.</summary>
    public const int TidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_tids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> tids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 成就id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Tids {
      get { return tids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tids_.WriteTo(output, _repeated_tids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tids_.CalculateSize(_repeated_tids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tids_.AddEntriesFrom(input, _repeated_tids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就信息-共享-玩家
  /// </summary>
  public sealed class SystemAchievementInfoSharedRole : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfoSharedRole> _parser = new pb::MessageParser<SystemAchievementInfoSharedRole>(() => new SystemAchievementInfoSharedRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfoSharedRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就信息-共享-家族
  /// </summary>
  public sealed class SystemAchievementInfoSharedFamily : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfoSharedFamily> _parser = new pb::MessageParser<SystemAchievementInfoSharedFamily>(() => new SystemAchievementInfoSharedFamily());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfoSharedFamily> Parser { get { return _parser; } }

    /// <summary>Field number for the "familyId" field.</summary>
    public const int FamilyIdFieldNumber = 1;
    private ulong familyId_;
    /// <summary>
    /// 家族id(0代表家族已不存在)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FamilyId {
      get { return familyId_; }
      set {
        familyId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    /// 家族名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FamilyId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FamilyId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FamilyId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FamilyId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FamilyId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就信息-共享-多人
  /// </summary>
  public sealed class SystemAchievementInfoSharedMulti : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfoSharedMulti> _parser = new pb::MessageParser<SystemAchievementInfoSharedMulti>(() => new SystemAchievementInfoSharedMulti());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfoSharedMulti> Parser { get { return _parser; } }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.SystemAchievementInfoSharedMulti.Types.RoleUnit> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.SystemAchievementInfoSharedMulti.Types.RoleUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.SystemAchievementInfoSharedMulti.Types.RoleUnit> roles_ = new pbc::RepeatedField<global::Packet.SystemAchievementInfoSharedMulti.Types.RoleUnit>();
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SystemAchievementInfoSharedMulti.Types.RoleUnit> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SystemAchievementInfoSharedMulti message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RoleUnit : pb::IMessage {
        private static readonly pb::MessageParser<RoleUnit> _parser = new pb::MessageParser<RoleUnit>(() => new RoleUnit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleUnit> Parser { get { return _parser; } }

        /// <summary>Field number for the "roleId" field.</summary>
        public const int RoleIdFieldNumber = 1;
        private ulong roleId_;
        /// <summary>
        /// 玩家id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private pb::ByteString name_ = pb::ByteString.Empty;
        /// <summary>
        /// 玩家名字
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(RoleId);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Name);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt64();
                break;
              }
              case 18: {
                Name = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 系统成就信息-共享
  /// </summary>
  public sealed class SystemAchievementInfoShared : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfoShared> _parser = new pb::MessageParser<SystemAchievementInfoShared>(() => new SystemAchievementInfoShared());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfoShared> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    /// 达成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private global::Packet.SystemAchievementInfoSharedRole role_;
    /// <summary>
    /// 玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfoSharedRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "family" field.</summary>
    public const int FamilyFieldNumber = 3;
    private global::Packet.SystemAchievementInfoSharedFamily family_;
    /// <summary>
    /// 家族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfoSharedFamily Family {
      get { return family_; }
      set {
        family_ = value;
      }
    }

    /// <summary>Field number for the "multi" field.</summary>
    public const int MultiFieldNumber = 4;
    private global::Packet.SystemAchievementInfoSharedMulti multi_;
    /// <summary>
    /// 多人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfoSharedMulti Multi {
      get { return multi_; }
      set {
        multi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (role_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Role);
      }
      if (family_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Family);
      }
      if (multi_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Multi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (family_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Family);
      }
      if (multi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Multi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 18: {
            if (role_ == null) {
              role_ = new global::Packet.SystemAchievementInfoSharedRole();
            }
            input.ReadMessage(role_);
            break;
          }
          case 26: {
            if (family_ == null) {
              family_ = new global::Packet.SystemAchievementInfoSharedFamily();
            }
            input.ReadMessage(family_);
            break;
          }
          case 34: {
            if (multi_ == null) {
              multi_ = new global::Packet.SystemAchievementInfoSharedMulti();
            }
            input.ReadMessage(multi_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就信息-统计
  /// </summary>
  public sealed class SystemAchievementInfoCount : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfoCount> _parser = new pb::MessageParser<SystemAchievementInfoCount>(() => new SystemAchievementInfoCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfoCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private uint ratio_;
    /// <summary>
    /// 达成比率(万分比)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ratio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ratio);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ratio = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就信息
  /// </summary>
  public sealed class SystemAchievementInfo : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementInfo> _parser = new pb::MessageParser<SystemAchievementInfo>(() => new SystemAchievementInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "shared" field.</summary>
    public const int SharedFieldNumber = 1;
    private global::Packet.SystemAchievementInfoShared shared_;
    /// <summary>
    /// 共享信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfoShared Shared {
      get { return shared_; }
      set {
        shared_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private global::Packet.SystemAchievementInfoCount count_;
    /// <summary>
    /// 统计信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfoCount Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shared_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shared);
      }
      if (count_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shared_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shared);
      }
      if (count_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shared_ == null) {
              shared_ = new global::Packet.SystemAchievementInfoShared();
            }
            input.ReadMessage(shared_);
            break;
          }
          case 18: {
            if (count_ == null) {
              count_ = new global::Packet.SystemAchievementInfoCount();
            }
            input.ReadMessage(count_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 系统成就单元
  /// </summary>
  public sealed class SystemAchievementUnit : pb::IMessage {
    private static readonly pb::MessageParser<SystemAchievementUnit> _parser = new pb::MessageParser<SystemAchievementUnit>(() => new SystemAchievementUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemAchievementUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 成就id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Packet.SystemAchievementInfo info_;
    /// <summary>
    /// 信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SystemAchievementInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Packet.SystemAchievementInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementSystemDataRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementSystemDataRes> _parser = new pb::MessageParser<CmdAchievementSystemDataRes>(() => new CmdAchievementSystemDataRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementSystemDataRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "achievements" field.</summary>
    public const int AchievementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.SystemAchievementUnit> _repeated_achievements_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.SystemAchievementUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.SystemAchievementUnit> achievements_ = new pbc::RepeatedField<global::Packet.SystemAchievementUnit>();
    /// <summary>
    /// 成就列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SystemAchievementUnit> Achievements {
      get { return achievements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      achievements_.WriteTo(output, _repeated_achievements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += achievements_.CalculateSize(_repeated_achievements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementReceiveLevelRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementReceiveLevelRewardReq> _parser = new pb::MessageParser<CmdAchievementReceiveLevelRewardReq>(() => new CmdAchievementReceiveLevelRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementReceiveLevelRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 等级表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementReceiveLevelRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementReceiveLevelRewardRes> _parser = new pb::MessageParser<CmdAchievementReceiveLevelRewardRes>(() => new CmdAchievementReceiveLevelRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementReceiveLevelRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private uint tid_;
    /// <summary>
    /// 等级表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementUpdateBaseNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementUpdateBaseNty> _parser = new pb::MessageParser<CmdAchievementUpdateBaseNty>(() => new CmdAchievementUpdateBaseNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementUpdateBaseNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Packet.RoleAchievementBase base_;
    /// <summary>
    /// 基础
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Packet.RoleAchievementBase();
            }
            input.ReadMessage(base_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementUpdateAchievementNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementUpdateAchievementNty> _parser = new pb::MessageParser<CmdAchievementUpdateAchievementNty>(() => new CmdAchievementUpdateAchievementNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementUpdateAchievementNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "tids" field.</summary>
    public const int TidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_tids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> tids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 成就列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Tids {
      get { return tids_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Packet.RoleAchievementValueType value_;
    /// <summary>
    /// 成就值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.RoleAchievementValueType Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tids_.WriteTo(output, _repeated_tids_codec);
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tids_.CalculateSize(_repeated_tids_codec);
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tids_.AddEntriesFrom(input, _repeated_tids_codec);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Packet.RoleAchievementValueType();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdAchievementFinishAchievementNty : pb::IMessage {
    private static readonly pb::MessageParser<CmdAchievementFinishAchievementNty> _parser = new pb::MessageParser<CmdAchievementFinishAchievementNty>(() => new CmdAchievementFinishAchievementNty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdAchievementFinishAchievementNty> Parser { get { return _parser; } }

    /// <summary>Field number for the "tids" field.</summary>
    public const int TidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_tids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> tids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 成就列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Tids {
      get { return tids_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    /// 达成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tids_.WriteTo(output, _repeated_tids_codec);
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tids_.CalculateSize(_repeated_tids_codec);
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tids_.AddEntriesFrom(input, _repeated_tids_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
