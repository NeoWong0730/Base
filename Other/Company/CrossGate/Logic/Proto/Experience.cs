// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experience.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 4300+
  /// </summary>
  public enum CmdExperience {
    None = 0,
    /// <summary>
    /// 历练信息请求
    /// </summary>
    InfoReq = 4301,
    /// <summary>
    /// 历练信息返回(同步)
    /// </summary>
    InfoAck = 4302,
    /// <summary>
    /// 历练升级请求
    /// </summary>
    UpgradeReq = 4303,
    /// <summary>
    /// 历练升级返回
    /// </summary>
    UpgradeAck = 4304,
    /// <summary>
    /// 历练重置请求
    /// </summary>
    ResetReq = 4305,
    /// <summary>
    /// 历练重置返回
    /// </summary>
    ResetAck = 4306,
    /// <summary>
    /// 历练加点请求
    /// </summary>
    AttrAddReq = 4307,
    /// <summary>
    /// 历练加点返回
    /// </summary>
    AttrAddAck = 4308,
    /// <summary>
    /// 历练等级同步
    /// </summary>
    LevelNtf = 4309,
    /// <summary>
    ///历练信息返回(同步) 新
    /// </summary>
    InfoNewAck = 4310,
    /// <summary>
    ///新开方案
    /// </summary>
    AddNewPlanReq = 4311,
    /// <summary>
    ///新开方案
    /// </summary>
    AddNewPlanRes = 4312,
    /// <summary>
    ///方案重命名
    /// </summary>
    PlanRenameReq = 4313,
    /// <summary>
    ///重命名返回
    /// </summary>
    PlanRenameRes = 4314,
    /// <summary>
    ///使用方案
    /// </summary>
    PlanChangeReq = 4315,
    /// <summary>
    ///使用方案
    /// </summary>
    PlanChangeRes = 4316,
  }

  public enum ErrorExperience {
    None = 0,
    /// <summary>
    /// 加点参数错误
    /// </summary>
    AddPointParamErr = 4301,
    /// <summary>
    /// 历练点不足
    /// </summary>
    AddPointLess = 4302,
    /// <summary>
    /// 历练等级表错误
    /// </summary>
    CsvlevelErr = 4303,
    /// <summary>
    /// 历练属性表错误
    /// </summary>
    CsvattrErr = 4304,
    /// <summary>
    /// 历练层级表错误
    /// </summary>
    CsvrankErr = 4305,
    /// <summary>
    /// 表格重置参数错误
    /// </summary>
    CsvresetParamErr = 4306,
    /// <summary>
    /// 历练等级上限
    /// </summary>
    LevelMax = 4307,
    /// <summary>
    /// 不需要重置
    /// </summary>
    DontNeedReset = 4308,
    /// <summary>
    /// 属性等级上限
    /// </summary>
    AttrLevelMax = 4309,
    /// <summary>
    /// 层级未解锁
    /// </summary>
    RankNotUnlock = 4310,
    /// <summary>
    /// 全局参数历练方案切换配置错误
    /// </summary>
    PlanParamError = 4311,
    /// <summary>
    /// 历练方案达到最大
    /// </summary>
    PlanCountMax = 4312,
    /// <summary>
    /// 未找到方案
    /// </summary>
    PlanIndexNoFind = 4313,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 历练信息
  /// </summary>
  public sealed class ExperienceInfo : pb::IMessage {
    private static readonly pb::MessageParser<ExperienceInfo> _parser = new pb::MessageParser<ExperienceInfo>(() => new ExperienceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperienceInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "indexId" field.</summary>
    public const int IndexIdFieldNumber = 1;
    private uint indexId_;
    /// <summary>
    /// 下标ID (历练属性表ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexId {
      get { return indexId_; }
      set {
        indexId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private uint point_;
    /// <summary>
    /// 点数 (小点点)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "addPoint" field.</summary>
    public const int AddPointFieldNumber = 4;
    private uint addPoint_;
    /// <summary>
    /// 已加点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddPoint {
      get { return addPoint_; }
      set {
        addPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IndexId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IndexId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Point != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Point);
      }
      if (AddPoint != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AddPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IndexId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Point);
      }
      if (AddPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IndexId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Point = input.ReadUInt32();
            break;
          }
          case 32: {
            AddPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed class ExperiencePlanData : pb::IMessage {
    private static readonly pb::MessageParser<ExperiencePlanData> _parser = new pb::MessageParser<ExperiencePlanData>(() => new ExperiencePlanData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperiencePlanData> Parser { get { return _parser; } }

    /// <summary>Field number for the "useCount" field.</summary>
    public const int UseCountFieldNumber = 1;
    private uint useCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseCount {
      get { return useCount_; }
      set {
        useCount_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ExperienceInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ExperienceInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExperienceInfo> info_ = new pbc::RepeatedField<global::Packet.ExperienceInfo>();
    /// <summary>
    /// 历练属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExperienceInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///方案名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseCount);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseCount);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseCount = input.ReadUInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练信息请求
  /// </summary>
  public sealed class CmdExperienceInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceInfoReq> _parser = new pb::MessageParser<CmdExperienceInfoReq>(() => new CmdExperienceInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 历练信息返回
  /// </summary>
  public sealed class CmdExperienceInfoAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceInfoAck> _parser = new pb::MessageParser<CmdExperienceInfoAck>(() => new CmdExperienceInfoAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceInfoAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 历练等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "useCount" field.</summary>
    public const int UseCountFieldNumber = 2;
    private uint useCount_;
    /// <summary>
    /// 已用点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseCount {
      get { return useCount_; }
      set {
        useCount_ = value;
      }
    }

    /// <summary>Field number for the "remainder" field.</summary>
    public const int RemainderFieldNumber = 3;
    private uint remainder_;
    /// <summary>
    /// 剩余点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Remainder {
      get { return remainder_; }
      set {
        remainder_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ExperienceInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ExperienceInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExperienceInfo> info_ = new pbc::RepeatedField<global::Packet.ExperienceInfo>();
    /// <summary>
    /// 历练属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExperienceInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (UseCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseCount);
      }
      if (Remainder != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Remainder);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (UseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseCount);
      }
      if (Remainder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remainder);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            UseCount = input.ReadUInt32();
            break;
          }
          case 24: {
            Remainder = input.ReadUInt32();
            break;
          }
          case 34: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperienceInfoNewAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceInfoNewAck> _parser = new pb::MessageParser<CmdExperienceInfoNewAck>(() => new CmdExperienceInfoNewAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceInfoNewAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 历练等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private uint totalCount_;
    /// <summary>
    /// 总点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "currentPlanIndex" field.</summary>
    public const int CurrentPlanIndexFieldNumber = 3;
    private uint currentPlanIndex_;
    /// <summary>
    /// 当前使用的分配方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentPlanIndex {
      get { return currentPlanIndex_; }
      set {
        currentPlanIndex_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ExperiencePlanData> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ExperiencePlanData.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExperiencePlanData> plans_ = new pbc::RepeatedField<global::Packet.ExperiencePlanData>();
    /// <summary>
    /// 历练方案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExperiencePlanData> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalCount);
      }
      if (CurrentPlanIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurrentPlanIndex);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      if (CurrentPlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPlanIndex);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalCount = input.ReadUInt32();
            break;
          }
          case 24: {
            CurrentPlanIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练升级请求
  /// </summary>
  public sealed class CmdExperienceUpgradeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceUpgradeReq> _parser = new pb::MessageParser<CmdExperienceUpgradeReq>(() => new CmdExperienceUpgradeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceUpgradeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 历练升级返回
  /// </summary>
  public sealed class CmdExperienceUpgradeAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceUpgradeAck> _parser = new pb::MessageParser<CmdExperienceUpgradeAck>(() => new CmdExperienceUpgradeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceUpgradeAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 历练等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private uint totalCount_;
    /// <summary>
    ///总点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练重置请求
  /// </summary>
  public sealed class CmdExperienceResetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceResetReq> _parser = new pb::MessageParser<CmdExperienceResetReq>(() => new CmdExperienceResetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceResetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练重置返回
  /// </summary>
  public sealed class CmdExperienceResetAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceResetAck> _parser = new pb::MessageParser<CmdExperienceResetAck>(() => new CmdExperienceResetAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceResetAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "useCount" field.</summary>
    public const int UseCountFieldNumber = 2;
    private uint useCount_;
    /// <summary>
    ///已使用点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseCount {
      get { return useCount_; }
      set {
        useCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (UseCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UseCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (UseCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            UseCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练加点请求
  /// </summary>
  public sealed class CmdExperienceAttrAddReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceAttrAddReq> _parser = new pb::MessageParser<CmdExperienceAttrAddReq>(() => new CmdExperienceAttrAddReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceAttrAddReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdExperienceAttrAddReq.Types.AttrAddInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdExperienceAttrAddReq.Types.AttrAddInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdExperienceAttrAddReq.Types.AttrAddInfo> info_ = new pbc::RepeatedField<global::Packet.CmdExperienceAttrAddReq.Types.AttrAddInfo>();
    /// <summary>
    /// 历练属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdExperienceAttrAddReq.Types.AttrAddInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 2;
    private uint planIndex_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (PlanIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdExperienceAttrAddReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class AttrAddInfo : pb::IMessage {
        private static readonly pb::MessageParser<AttrAddInfo> _parser = new pb::MessageParser<AttrAddInfo>(() => new AttrAddInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AttrAddInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "indexId" field.</summary>
        public const int IndexIdFieldNumber = 1;
        private uint indexId_;
        /// <summary>
        /// 下标ID (历练属性表ID)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IndexId {
          get { return indexId_; }
          set {
            indexId_ = value;
          }
        }

        /// <summary>Field number for the "point" field.</summary>
        public const int PointFieldNumber = 2;
        private uint point_;
        /// <summary>
        /// 点数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Point {
          get { return point_; }
          set {
            point_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (IndexId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(IndexId);
          }
          if (Point != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Point);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (IndexId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexId);
          }
          if (Point != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Point);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                IndexId = input.ReadUInt32();
                break;
              }
              case 16: {
                Point = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 历练加点返回
  /// </summary>
  public sealed class CmdExperienceAttrAddAck : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceAttrAddAck> _parser = new pb::MessageParser<CmdExperienceAttrAddAck>(() => new CmdExperienceAttrAddAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceAttrAddAck> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 2;
    private global::Packet.ExperiencePlanData plan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ExperiencePlanData Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (plan_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Plan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            if (plan_ == null) {
              plan_ = new global::Packet.ExperiencePlanData();
            }
            input.ReadMessage(plan_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 历练等级同步
  /// </summary>
  public sealed class CmdExperienceLevelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceLevelNtf> _parser = new pb::MessageParser<CmdExperienceLevelNtf>(() => new CmdExperienceLevelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceLevelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    /// 历练等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperienceAddNewPlanReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceAddNewPlanReq> _parser = new pb::MessageParser<CmdExperienceAddNewPlanReq>(() => new CmdExperienceAddNewPlanReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceAddNewPlanReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdExperienceAddNewPlanRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperienceAddNewPlanRes> _parser = new pb::MessageParser<CmdExperienceAddNewPlanRes>(() => new CmdExperienceAddNewPlanRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperienceAddNewPlanRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 2;
    private global::Packet.ExperiencePlanData plan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.ExperiencePlanData Plan {
      get { return plan_; }
      set {
        plan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (plan_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Plan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (plan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            if (plan_ == null) {
              plan_ = new global::Packet.ExperiencePlanData();
            }
            input.ReadMessage(plan_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperiencePlanRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperiencePlanRenameReq> _parser = new pb::MessageParser<CmdExperiencePlanRenameReq>(() => new CmdExperiencePlanRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperiencePlanRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperiencePlanRenameRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperiencePlanRenameRes> _parser = new pb::MessageParser<CmdExperiencePlanRenameRes>(() => new CmdExperiencePlanRenameRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperiencePlanRenameRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    /// <summary>Field number for the "newName" field.</summary>
    public const int NewNameFieldNumber = 2;
    private pb::ByteString newName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            NewName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperiencePlanChangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperiencePlanChangeReq> _parser = new pb::MessageParser<CmdExperiencePlanChangeReq>(() => new CmdExperiencePlanChangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperiencePlanChangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdExperiencePlanChangeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdExperiencePlanChangeRes> _parser = new pb::MessageParser<CmdExperiencePlanChangeRes>(() => new CmdExperiencePlanChangeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExperiencePlanChangeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "planIndex" field.</summary>
    public const int PlanIndexFieldNumber = 1;
    private uint planIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlanIndex {
      get { return planIndex_; }
      set {
        planIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlanIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlanIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlanIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlanIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlanIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
