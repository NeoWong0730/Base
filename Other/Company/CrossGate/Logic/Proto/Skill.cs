// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 2300+
  /// </summary>
  public enum CmdSkill {
    None = 0,
    /// <summary>
    ///升级技能等阶请求
    /// </summary>
    UpdateSkillLevelReq = 2301,
    /// <summary>
    ///升级技能等阶请求应答
    /// </summary>
    UpdateSkillLevelRes = 2302,
    /// <summary>
    ///学习(升阶)被动技能请求
    /// </summary>
    PassiveSkillUpdateReq = 2305,
    /// <summary>
    ///学习(升阶)被动技能请求应答
    /// </summary>
    PassiveSkillUpdateRes = 2306,
    /// <summary>
    ///使用道具增加主动技能熟练度请求
    /// </summary>
    UseItemAddAsexpReq = 2307,
    /// <summary>
    ///使用道具增加主动技能熟练度返回
    /// </summary>
    UseItemAddAsexpRes = 2308,
    /// <summary>
    ///使用道具增加被动技能熟练度请求
    /// </summary>
    UseItemAddPsexpReq = 2309,
    /// <summary>
    ///使用道具增加被动技能熟练度返回
    /// </summary>
    UseItemAddPsexpRes = 2311,
    /// <summary>
    ///技能列表通知
    /// </summary>
    SkillListNtf = 2310,
    /// <summary>
    ///主动技能等级和熟练更新通知
    /// </summary>
    ActiveSkillRankExptNtf = 2312,
    /// <summary>
    ///被动技能等级和熟练更新通知
    /// </summary>
    PassiveSkillRankExptNtf = 2313,
    /// <summary>
    ///点击技能图标
    /// </summary>
    ClickSkillReq = 2314,
    /// <summary>
    /// </summary>
    ClickSkillRes = 2315,
    /// <summary>
    ///遗忘技能请求
    /// </summary>
    ForgetReq = 2316,
    ForgetRes = 2317,
    /// <summary>
    ///一键升级技能
    /// </summary>
    OnSwitchUpdateReq = 2318,
    /// <summary>
    ///技能等级等阶熟练度更新通知
    /// </summary>
    InfoNtf = 2319,
  }

  public enum ErrorSkill {
    None = 0,
    /// <summary>
    ///角色等级不满足
    /// </summary>
    RoleLevel = 2301,
    /// <summary>
    ///前置任务不满足
    /// </summary>
    PreTask = 2302,
    /// <summary>
    ///材料不足
    /// </summary>
    Materials = 2303,
    /// <summary>
    ///获取表失败
    /// </summary>
    Csvnull = 2310,
    /// <summary>
    ///角色不存在
    /// </summary>
    RoleNotExist = 2311,
    /// <summary>
    ///没有学习此技能
    /// </summary>
    NoLearnSkill = 2312,
    /// <summary>
    ///不能升阶此技能(不在该职业可学技能中)
    /// </summary>
    NotUpdateSkill = 2313,
    /// <summary>
    ///已经达到技能最大等阶
    /// </summary>
    SkillMaxRank = 2314,
    /// <summary>
    ///角色没有就职
    /// </summary>
    RoleNoCareer = 2315,
    /// <summary>
    ///角色没有达到要求的职业进阶等级
    /// </summary>
    RoleNoRank = 2316,
    /// <summary>
    ///角色技能没有达到最大等级
    /// </summary>
    RoleNoMaxLevel = 2331,
    /// <summary>
    ///没有此技能
    /// </summary>
    RoleNoSkill = 2332,
    /// <summary>
    ///没有达到技能的最大熟练度
    /// </summary>
    RoleNoMaxLevelExp = 2333,
    /// <summary>
    ///等级和阶以经达到最大值
    /// </summary>
    RoleMaxLevelAndExp = 2334,
    /// <summary>
    ///角色已经就职
    /// </summary>
    RoleHasCareer = 2335,
    /// <summary>
    ///技能遗忘返回道具失败
    /// </summary>
    ForgetSkillAddItem = 2336,
    /// <summary>
    ///升级技能等级失败
    /// </summary>
    AdvanceLevel = 2337,
  }

  public enum SkillActiveReason {
    None = 0,
    /// <summary>
    ///主动技能升阶
    /// </summary>
    ActiveSkillUpdateRank = 2301,
    /// <summary>
    ///被动技能升阶
    /// </summary>
    PassiveSkillUpdateRank = 2302,
    /// <summary>
    ///主动技能升级
    /// </summary>
    ActiveSkillUpdateLevel = 2303,
    /// <summary>
    ///被动技能升级
    /// </summary>
    PassiveSkillUpdateLevel = 2304,
    /// <summary>
    ///增加主动技能熟练度
    /// </summary>
    AddActiveSkillExp = 2305,
    /// <summary>
    ///增加被动技能熟练度
    /// </summary>
    AddPassiveSkillExp = 2306,
    /// <summary>
    ///技能遗忘
    /// </summary>
    SkillForget = 2307,
  }

  #endregion

  #region Messages
  /// <summary>
  ///主动技能相关信息
  /// </summary>
  public sealed class SkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 1;
    private uint skillLevel_;
    /// <summary>
    ///技能阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///技能熟练度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillLevel);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///被动技能相关信息
  /// </summary>
  public sealed class PassiveSkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<PassiveSkillInfo> _parser = new pb::MessageParser<PassiveSkillInfo>(() => new PassiveSkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkillInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 1;
    private uint skillLevel_;
    /// <summary>
    ///技能等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///技能熟练度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillLevel);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级技能等阶请求
  /// </summary>
  public sealed class CmdSkillUpdateSkillLevelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUpdateSkillLevelReq> _parser = new pb::MessageParser<CmdSkillUpdateSkillLevelReq>(() => new CmdSkillUpdateSkillLevelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUpdateSkillLevelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///升级技能等阶请求
  /// </summary>
  public sealed class CmdSkillUpdateSkillLevelRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUpdateSkillLevelRes> _parser = new pb::MessageParser<CmdSkillUpdateSkillLevelRes>(() => new CmdSkillUpdateSkillLevelRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUpdateSkillLevelRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 1;
    private uint skillLevel_;
    /// <summary>
    ///升级后的技能等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillLevel);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家已学习的技能列表通知
  /// </summary>
  public sealed class CmdSkillSkillListNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillSkillListNtf> _parser = new pb::MessageParser<CmdSkillSkillListNtf>(() => new CmdSkillSkillListNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillSkillListNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.SkillInfo> _repeated_skillList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.SkillInfo> skillList_ = new pbc::RepeatedField<global::Packet.SkillInfo>();
    /// <summary>
    ///主动技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SkillInfo> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "passiveSkillList" field.</summary>
    public const int PassiveSkillListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PassiveSkillInfo> _repeated_passiveSkillList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PassiveSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PassiveSkillInfo> passiveSkillList_ = new pbc::RepeatedField<global::Packet.PassiveSkillInfo>();
    /// <summary>
    ///被动技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PassiveSkillInfo> PassiveSkillList {
      get { return passiveSkillList_; }
    }

    /// <summary>Field number for the "clickedSkillList" field.</summary>
    public const int ClickedSkillListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_clickedSkillList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> clickedSkillList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///被点击的技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ClickedSkillList {
      get { return clickedSkillList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillList_.WriteTo(output, _repeated_skillList_codec);
      passiveSkillList_.WriteTo(output, _repeated_passiveSkillList_codec);
      clickedSkillList_.WriteTo(output, _repeated_clickedSkillList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      size += passiveSkillList_.CalculateSize(_repeated_passiveSkillList_codec);
      size += clickedSkillList_.CalculateSize(_repeated_clickedSkillList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 18: {
            passiveSkillList_.AddEntriesFrom(input, _repeated_passiveSkillList_codec);
            break;
          }
          case 26:
          case 24: {
            clickedSkillList_.AddEntriesFrom(input, _repeated_clickedSkillList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdSkill_PassiveSkillUpdateReq  = 2305;//学习(升阶)被动技能请求
  /// </summary>
  public sealed class CmdSkillPassiveSkillUpdateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillPassiveSkillUpdateReq> _parser = new pb::MessageParser<CmdSkillPassiveSkillUpdateReq>(() => new CmdSkillPassiveSkillUpdateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillPassiveSkillUpdateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    /// <summary>
    /// 被动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_PassiveSkillUpdateRes  = 2306;//学习(升阶)被动技能请求
  /// </summary>
  public sealed class CmdSkillPassiveSkillUpdateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillPassiveSkillUpdateRes> _parser = new pb::MessageParser<CmdSkillPassiveSkillUpdateRes>(() => new CmdSkillPassiveSkillUpdateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillPassiveSkillUpdateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 1;
    private uint skillLevel_;
    /// <summary>
    ///学习后的技能等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private uint skillId_;
    /// <summary>
    /// 技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillLevel);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillLevel);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CmdSkill_UseItemAddASExpReq     = 2307;//使用道具增加主动技能熟练度请求
  /// </summary>
  public sealed class CmdSkillUseItemAddASExpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUseItemAddASExpReq> _parser = new pb::MessageParser<CmdSkillUseItemAddASExpReq>(() => new CmdSkillUseItemAddASExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUseItemAddASExpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private uint itemCount_;
    /// <summary>
    ///使用道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_UseItemAddASExpRes     = 2308;//使用道具增加主动技能熟练度返回
  /// </summary>
  public sealed class CmdSkillUseItemAddASExpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUseItemAddASExpRes> _parser = new pb::MessageParser<CmdSkillUseItemAddASExpRes>(() => new CmdSkillUseItemAddASExpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUseItemAddASExpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// CmdSkill_UseItemAddPSExpReq     = 2309;//使用道具增加被动技能熟练度请求
  /// </summary>
  public sealed class CmdSkillUseItemAddPSExpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUseItemAddPSExpReq> _parser = new pb::MessageParser<CmdSkillUseItemAddPSExpReq>(() => new CmdSkillUseItemAddPSExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUseItemAddPSExpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "itemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private uint itemCount_;
    /// <summary>
    ///使用道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_UseItemAddPSExpRes     = 2311;//使用道具增加被动技能熟练度返回
  /// </summary>
  public sealed class CmdSkillUseItemAddPSExpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillUseItemAddPSExpRes> _parser = new pb::MessageParser<CmdSkillUseItemAddPSExpRes>(() => new CmdSkillUseItemAddPSExpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillUseItemAddPSExpRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///    CmdSkill_ClickSkillReq     = 2314;//点击技能图标
  /// </summary>
  public sealed class CmdSkillClickSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillClickSkillReq> _parser = new pb::MessageParser<CmdSkillClickSkillReq>(() => new CmdSkillClickSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillClickSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///    CmdSkill_ClickSkillRes     = 2315;//
  /// </summary>
  public sealed class CmdSkillClickSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillClickSkillRes> _parser = new pb::MessageParser<CmdSkillClickSkillRes>(() => new CmdSkillClickSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillClickSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_ForgetReq         = 2316;//遗忘技能请求
  /// </summary>
  public sealed class CmdSkillForgetReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillForgetReq> _parser = new pb::MessageParser<CmdSkillForgetReq>(() => new CmdSkillForgetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillForgetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_ForgetRes         = 2317;
  /// </summary>
  public sealed class CmdSkillForgetRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillForgetRes> _parser = new pb::MessageParser<CmdSkillForgetRes>(() => new CmdSkillForgetRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillForgetRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_OnSwitchUpdateReq = 2318;//一键升级技能
  /// </summary>
  public sealed class CmdSkillOnSwitchUpdateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillOnSwitchUpdateReq> _parser = new pb::MessageParser<CmdSkillOnSwitchUpdateReq>(() => new CmdSkillOnSwitchUpdateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillOnSwitchUpdateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_InfoNtf = 2319;// 技能等级等阶熟练度更新通知
  /// </summary>
  public sealed class CmdSkillInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillInfoNtf> _parser = new pb::MessageParser<CmdSkillInfoNtf>(() => new CmdSkillInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///技能等阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///技能熟练度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///CmdSkill_ActiveSkillRankExptNtf = 2312;//主动技能等级和熟练更新通知
  /// </summary>
  public sealed class CmdSkillActiveSkillRankExptNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillActiveSkillRankExptNtf> _parser = new pb::MessageParser<CmdSkillActiveSkillRankExptNtf>(() => new CmdSkillActiveSkillRankExptNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillActiveSkillRankExptNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.CmdSkillActiveSkillRankExptNtf.Types.SkillData> _repeated_skillList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.CmdSkillActiveSkillRankExptNtf.Types.SkillData.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdSkillActiveSkillRankExptNtf.Types.SkillData> skillList_ = new pbc::RepeatedField<global::Packet.CmdSkillActiveSkillRankExptNtf.Types.SkillData>();
    /// <summary>
    ///变化的技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdSkillActiveSkillRankExptNtf.Types.SkillData> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "battleChange" field.</summary>
    public const int BattleChangeFieldNumber = 2;
    private bool battleChange_;
    /// <summary>
    ///来源是否为战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BattleChange {
      get { return battleChange_; }
      set {
        battleChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (BattleChange != false) {
        output.WriteRawTag(16);
        output.WriteBool(BattleChange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (BattleChange != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 16: {
            BattleChange = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdSkillActiveSkillRankExptNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class SkillData : pb::IMessage {
        private static readonly pb::MessageParser<SkillData> _parser = new pb::MessageParser<SkillData>(() => new SkillData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SkillData> Parser { get { return _parser; } }

        /// <summary>Field number for the "skillId" field.</summary>
        public const int SkillIdFieldNumber = 1;
        private uint skillId_;
        /// <summary>
        ///主动技能id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SkillId {
          get { return skillId_; }
          set {
            skillId_ = value;
          }
        }

        /// <summary>Field number for the "rank" field.</summary>
        public const int RankFieldNumber = 2;
        private uint rank_;
        /// <summary>
        ///等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Rank {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        /// <summary>Field number for the "exp" field.</summary>
        public const int ExpFieldNumber = 3;
        private uint exp_;
        /// <summary>
        ///熟练度
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Exp {
          get { return exp_; }
          set {
            exp_ = value;
          }
        }

        /// <summary>Field number for the "add" field.</summary>
        public const int AddFieldNumber = 4;
        private uint add_;
        /// <summary>
        ///本次增加值 (4和5字段可能为空)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Add {
          get { return add_; }
          set {
            add_ = value;
          }
        }

        /// <summary>Field number for the "proudAdd" field.</summary>
        public const int ProudAddFieldNumber = 5;
        private uint proudAdd_;
        /// <summary>
        ///得意技加成经验值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ProudAdd {
          get { return proudAdd_; }
          set {
            proudAdd_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SkillId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SkillId);
          }
          if (Rank != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Rank);
          }
          if (Exp != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Exp);
          }
          if (Add != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Add);
          }
          if (ProudAdd != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(ProudAdd);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SkillId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
          }
          if (Rank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
          }
          if (Exp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
          }
          if (Add != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Add);
          }
          if (ProudAdd != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProudAdd);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SkillId = input.ReadUInt32();
                break;
              }
              case 16: {
                Rank = input.ReadUInt32();
                break;
              }
              case 24: {
                Exp = input.ReadUInt32();
                break;
              }
              case 32: {
                Add = input.ReadUInt32();
                break;
              }
              case 40: {
                ProudAdd = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///CmdSkill_PassiveSkillRankExptNtf = 2313;//被动技能等级和熟练更新通知
  /// </summary>
  public sealed class CmdSkillPassiveSkillRankExptNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdSkillPassiveSkillRankExptNtf> _parser = new pb::MessageParser<CmdSkillPassiveSkillRankExptNtf>(() => new CmdSkillPassiveSkillRankExptNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdSkillPassiveSkillRankExptNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    /// <summary>
    ///主动技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private uint rank_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private uint exp_;
    /// <summary>
    ///熟练度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rank);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            Rank = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
