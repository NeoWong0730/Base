// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activitytarget.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  ///6900
  /// </summary>
  public enum CmdActivityTarget {
    None = 0,
    /// <summary>
    /// 活动列表同步
    /// </summary>
    ActListNtf = 6901,
    /// <summary>
    /// 活动数据请求
    /// </summary>
    DataReq = 6902,
    /// <summary>
    /// 活动数据返回
    /// </summary>
    DataRes = 6903,
    /// <summary>
    /// 十四日活动同步
    /// </summary>
    TwoWeekData = 6904,
    /// <summary>
    /// 十四日活动数据更新
    /// </summary>
    TwoWeekDataUpdate = 6905,
    /// <summary>
    /// 十四日活动任务奖励领取请求
    /// </summary>
    TwoWeekTaskRewardReq = 6906,
    /// <summary>
    /// 十四日活动任务奖励领取返回
    /// </summary>
    TwoWeekTaskRewardRes = 6907,
    /// <summary>
    /// 十四日活动积分奖励领取请求
    /// </summary>
    TwoWeekScoreRewardReq = 6908,
    /// <summary>
    /// 十四日活动积分奖励领取返回
    /// </summary>
    TwoWeekScoreRewardRes = 6909,
    /// <summary>
    /// 活动开启请求
    /// </summary>
    ActivityStartReq = 6910,
    /// <summary>
    /// 活动开启返回
    /// </summary>
    ActivityStartRes = 6911,
    /// <summary>
    /// 限时礼包数据同步
    /// </summary>
    LimitGiftDataNtf = 6920,
    /// <summary>
    /// 限时礼包数据更新
    /// </summary>
    LimitGiftDataUpdate = 6921,
    /// <summary>
    /// 限时礼包购买请求
    /// </summary>
    LimitGiftBuyReq = 6922,
    /// <summary>
    /// 限时礼包购买返回
    /// </summary>
    LimitGiftBuyRes = 6923,
    /// <summary>
    /// 限时礼包购买同步(充值成功)
    /// </summary>
    LimitGiftBuyNtf = 6924,
  }

  public enum ErrorActivityTarget {
    None = 0,
    /// <summary>
    /// 活动目标CSV错误
    /// </summary>
    TargetCsverr = 6901,
    /// <summary>
    /// 任务奖励已领取
    /// </summary>
    TargetRewardGot = 6902,
    /// <summary>
    /// 任务目标未完成
    /// </summary>
    TargetProgressLess = 6903,
    /// <summary>
    /// 积分奖励CSV错误
    /// </summary>
    CsvcumulativeErr = 6904,
    /// <summary>
    /// 积分不足
    /// </summary>
    ScoreLess = 6905,
    /// <summary>
    /// 积分奖励已领取
    /// </summary>
    ScoreRewardGot = 6906,
    /// <summary>
    /// 目标类型不合法
    /// </summary>
    TargetTypeErr = 6907,
    /// <summary>
    /// 活动开启CSV错误
    /// </summary>
    CsvactivityTimeErr = 6908,
    /// <summary>
    /// 活动未开启
    /// </summary>
    NotOpen = 6909,
    /// <summary>
    /// 限时礼包无效
    /// </summary>
    LimitGiftInvalid = 6910,
    /// <summary>
    /// 限时礼包过期
    /// </summary>
    LimitGiftTimeOut = 6911,
    /// <summary>
    /// 限时礼包CSV错误
    /// </summary>
    LimitGiftCsverr = 6912,
    /// <summary>
    /// 限时礼包类型错误
    /// </summary>
    LimitGiftTypeErr = 6913,
  }

  public enum ActivityTargetReason {
    None = 0,
    /// <summary>
    /// 活动目标任务奖励
    /// </summary>
    TaskReward = 6901,
    /// <summary>
    /// 活动目标积分奖励
    /// </summary>
    ScoreReward = 6902,
    /// <summary>
    /// 限时礼包购买
    /// </summary>
    LimitGiftBuy = 6903,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 积分奖励
  /// </summary>
  public sealed class ScoreReward : pb::IMessage {
    private static readonly pb::MessageParser<ScoreReward> _parser = new pb::MessageParser<ScoreReward>(() => new ScoreReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "isGot" field.</summary>
    public const int IsGotFieldNumber = 2;
    private bool isGot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGot {
      get { return isGot_; }
      set {
        isGot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (IsGot != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (IsGot != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            IsGot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 目标任务
  /// </summary>
  public sealed class TargetTask : pb::IMessage {
    private static readonly pb::MessageParser<TargetTask> _parser = new pb::MessageParser<TargetTask>(() => new TargetTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetTask> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    /// <summary>
    /// 目标进度 -1:已领取奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekData : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekData> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekData>(() => new CmdActivityTargetTwoWeekData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekData> Parser { get { return _parser; } }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.ScoreReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.ScoreReward.Parser);
    private readonly pbc::RepeatedField<global::Packet.ScoreReward> rewards_ = new pbc::RepeatedField<global::Packet.ScoreReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ScoreReward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.TargetTask> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.TargetTask.Parser);
    private readonly pbc::RepeatedField<global::Packet.TargetTask> taskList_ = new pbc::RepeatedField<global::Packet.TargetTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TargetTask> TaskList {
      get { return taskList_; }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 4;
    private uint days_;
    /// <summary>
    /// 活动开启时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Score);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (Days != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Days);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (Days != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Days);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 26: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 32: {
            Days = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekDataUpdate : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekDataUpdate> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekDataUpdate>(() => new CmdActivityTargetTwoWeekDataUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekDataUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Packet.TargetTask task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.TargetTask Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (task_ == null) {
              task_ = new global::Packet.TargetTask();
            }
            input.ReadMessage(task_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekTaskRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardReq> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardReq>(() => new CmdActivityTargetTwoWeekTaskRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekTaskRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardRes> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardRes>(() => new CmdActivityTargetTwoWeekTaskRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekTaskRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekScoreRewardReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardReq> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardReq>(() => new CmdActivityTargetTwoWeekScoreRewardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetTwoWeekScoreRewardRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardRes> _parser = new pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardRes>(() => new CmdActivityTargetTwoWeekScoreRewardRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetTwoWeekScoreRewardRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetActivityStartReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetActivityStartReq> _parser = new pb::MessageParser<CmdActivityTargetActivityStartReq>(() => new CmdActivityTargetActivityStartReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetActivityStartReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    /// <summary>
    /// 活动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdActivityTargetActivityStartRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetActivityStartRes> _parser = new pb::MessageParser<CmdActivityTargetActivityStartRes>(() => new CmdActivityTargetActivityStartRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetActivityStartRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "actId" field.</summary>
    public const int ActIdFieldNumber = 1;
    private uint actId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActId {
      get { return actId_; }
      set {
        actId_ = value;
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 2;
    private uint days_;
    /// <summary>
    /// 活动开启时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActId);
      }
      if (Days != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Days);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActId);
      }
      if (Days != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Days);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActId = input.ReadUInt32();
            break;
          }
          case 16: {
            Days = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ------------------- 限时礼包 start -------------------
  /// </summary>
  public sealed class LimitGiftInfo : pb::IMessage {
    private static readonly pb::MessageParser<LimitGiftInfo> _parser = new pb::MessageParser<LimitGiftInfo>(() => new LimitGiftInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LimitGiftInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    /// 结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 限时礼包数据同步
  /// </summary>
  public sealed class CmdActivityTargetLimitGiftDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetLimitGiftDataNtf> _parser = new pb::MessageParser<CmdActivityTargetLimitGiftDataNtf>(() => new CmdActivityTargetLimitGiftDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetLimitGiftDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "giftInfos" field.</summary>
    public const int GiftInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.LimitGiftInfo> _repeated_giftInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.LimitGiftInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.LimitGiftInfo> giftInfos_ = new pbc::RepeatedField<global::Packet.LimitGiftInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.LimitGiftInfo> GiftInfos {
      get { return giftInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      giftInfos_.WriteTo(output, _repeated_giftInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += giftInfos_.CalculateSize(_repeated_giftInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            giftInfos_.AddEntriesFrom(input, _repeated_giftInfos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 限时礼包数据更新
  /// </summary>
  public sealed class CmdActivityTargetLimitGiftDataUpdate : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetLimitGiftDataUpdate> _parser = new pb::MessageParser<CmdActivityTargetLimitGiftDataUpdate>(() => new CmdActivityTargetLimitGiftDataUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetLimitGiftDataUpdate> Parser { get { return _parser; } }

    /// <summary>Field number for the "giftInfo" field.</summary>
    public const int GiftInfoFieldNumber = 1;
    private global::Packet.LimitGiftInfo giftInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.LimitGiftInfo GiftInfo {
      get { return giftInfo_; }
      set {
        giftInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (giftInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GiftInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (giftInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (giftInfo_ == null) {
              giftInfo_ = new global::Packet.LimitGiftInfo();
            }
            input.ReadMessage(giftInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 限时礼包购买请求
  /// </summary>
  public sealed class CmdActivityTargetLimitGiftBuyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetLimitGiftBuyReq> _parser = new pb::MessageParser<CmdActivityTargetLimitGiftBuyReq>(() => new CmdActivityTargetLimitGiftBuyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetLimitGiftBuyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 礼包ID    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 限时礼包购买返回
  /// </summary>
  public sealed class CmdActivityTargetLimitGiftBuyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetLimitGiftBuyRes> _parser = new pb::MessageParser<CmdActivityTargetLimitGiftBuyRes>(() => new CmdActivityTargetLimitGiftBuyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetLimitGiftBuyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 限时礼包购买同步(充值成功)
  /// </summary>
  public sealed class CmdActivityTargetLimitGiftBuyNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdActivityTargetLimitGiftBuyNtf> _parser = new pb::MessageParser<CmdActivityTargetLimitGiftBuyNtf>(() => new CmdActivityTargetLimitGiftBuyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdActivityTargetLimitGiftBuyNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 礼包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
