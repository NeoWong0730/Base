// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partner.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  /// <summary>
  /// 2200+
  /// </summary>
  public enum CmdPartner {
    None = 0,
    /// <summary>
    /// 数据通知
    /// </summary>
    DataNtf = 2602,
    /// <summary>
    /// 修改阵型请求
    /// </summary>
    ChangeFormationReq = 2603,
    /// <summary>
    /// 修改阵型
    /// </summary>
    ChangeFormationRes = 2604,
    InfoReq = 2605,
    InfoRes = 2606,
    UnlockReq = 2607,
    UnlockRes = 2608,
    AddExpReq = 2609,
    AddExpRes = 2610,
    InfoNtf = 2611,
    /// <summary>
    /// 符文穿戴请求
    /// </summary>
    RuneDressReq = 2612,
    /// <summary>
    /// 符文穿戴返回
    /// </summary>
    RuneDressRes = 2613,
    /// <summary>
    /// 符文卸载请求
    /// </summary>
    RuneUnloadReq = 2614,
    /// <summary>
    /// 符文卸载返回
    /// </summary>
    RuneUnloadRes = 2615,
    /// <summary>
    /// 符文合成请求
    /// </summary>
    RuneComposeReq = 2616,
    /// <summary>
    /// 符文合成返回
    /// </summary>
    RuneComposeRes = 2617,
    /// <summary>
    /// 符文分解请求
    /// </summary>
    RuneDecomposeReq = 2618,
    /// <summary>
    /// 符文分解返回
    /// </summary>
    RuneDecomposeRes = 2619,
    /// <summary>
    /// 符文增加
    /// </summary>
    RuneAddNtf = 2620,
    /// <summary>
    /// 符文一键卸载请求
    /// </summary>
    RuneUnloadAllReq = 2621,
    /// <summary>
    /// 符文一键卸载返回
    /// </summary>
    RuneUnloadAllRes = 2622,
    /// <summary>
    /// 当前伙伴队伍同步
    /// </summary>
    CurrentTeamNtf = 2623,
    /// <summary>
    /// 符文一键穿戴请求
    /// </summary>
    RuneDressOneKeyReq = 2624,
    /// <summary>
    /// 符文一键穿戴返回
    /// </summary>
    RuneDressOneKeyRes = 2625,
    /// <summary>
    /// 伙伴羁绊变化通知
    /// </summary>
    BondChangeNtf = 2626,
    /// <summary>
    ///兑换点数
    /// </summary>
    ExchangePointReq = 2627,
    /// <summary>
    ///可使用点数更新
    /// </summary>
    PointUpdateNtf = 2628,
    /// <summary>
    ///加点操作
    /// </summary>
    DistributePointReq = 2629,
    /// <summary>
    ///加点操作返回 重置所有加点返回
    /// </summary>
    DistributePointRes = 2630,
    /// <summary>
    ///重置所有加点
    /// </summary>
    ReDistributePointReq = 2631,
    /// <summary>
    ///弃用 用CmdPartner_DistributePointRes返回
    /// </summary>
    ReDistributePointRes = 2632,
    /// <summary>
    ///重置技能
    /// </summary>
    ReRandomSkillReq = 2633,
    /// <summary>
    ///重置技能
    /// </summary>
    ReRandomSkillRes = 2634,
  }

  public enum ErrorPartner {
    None = 0,
    /// <summary>
    /// 请求参数错误
    /// </summary>
    ReqParamErr = 2601,
    /// <summary>
    /// 铭文表错误
    /// </summary>
    CsvruneInfoErr = 2602,
    /// <summary>
    /// 铭文槽位表错误
    /// </summary>
    CsvruneSlotErr = 2603,
    /// <summary>
    /// 铭文合成表错误
    /// </summary>
    CsvruneComposeErr = 2604,
    /// <summary>
    /// 伙伴等级表错误
    /// </summary>
    CsvpartnerLvErr = 2605,
    /// <summary>
    /// 伙伴技能表错误
    /// </summary>
    CsvpartnerSkillErr = 2606,
    /// <summary>
    /// 符文类型与槽位类型不匹配
    /// </summary>
    RuneTypeNotMatch = 2607,
    /// <summary>
    /// 符文等级不匹配
    /// </summary>
    RuneLvNotMatch = 2608,
    /// <summary>
    /// 符文专属错误
    /// </summary>
    RuneExcluseErr = 2609,
    /// <summary>
    /// 没有该伙伴
    /// </summary>
    PartnerNotFind = 2610,
    /// <summary>
    /// 等级不足, 槽位未开启
    /// </summary>
    SlotNotUnlock = 2611,
    /// <summary>
    /// 技能槽位未开启
    /// </summary>
    SkillSlotNotUnlock = 2612,
    /// <summary>
    /// 该槽位为空, 卸载失败
    /// </summary>
    SlotEmpty = 2613,
    /// <summary>
    /// 合成数量超上限
    /// </summary>
    ComposeMax = 2614,
    /// <summary>
    /// 分解数量过多
    /// </summary>
    DecomposeMax = 2615,
    /// <summary>
    /// 符文不足
    /// </summary>
    RuneLess = 2616,
    /// <summary>
    /// 前置任务未完成
    /// </summary>
    StageTaskErr = 2617,
    /// <summary>
    ///超过人物最大等级
    /// </summary>
    MaxRoleLevel = 2618,
    /// <summary>
    ///已经是最大等级
    /// </summary>
    MaxLevel = 2619,
    /// <summary>
    ///超过单次最大兑换点数
    /// </summary>
    MaxExchangePoint = 2620,
    /// <summary>
    ///配置表错误
    /// </summary>
    Csverror = 2621,
    /// <summary>
    ///分配点数数据错误
    /// </summary>
    IndexError = 2622,
    /// <summary>
    ///单条属性分配点数超过上限
    /// </summary>
    PointOverMax = 2623,
    /// <summary>
    ///点数不足
    /// </summary>
    PointNotEnough = 2624,
    /// <summary>
    ///重置技能索引错误
    /// </summary>
    ResetSkillIndexError = 2625,
    /// <summary>
    ///锁定状态的技能不能重置
    /// </summary>
    ResetSkillIsLocked = 2626,
    /// <summary>
    ///当前已分配点数为零
    /// </summary>
    NoNeedDistribute = 2627,
  }

  public enum PartnerActiveReason {
    None = 0,
    /// <summary>
    /// 伙伴解锁
    /// </summary>
    Unlock = 2601,
    /// <summary>
    /// 伙伴加经验
    /// </summary>
    AddExp = 2602,
    /// <summary>
    /// 符文合成
    /// </summary>
    RuneCompose = 2603,
    /// <summary>
    ///兑换伙伴属性强化点数
    /// </summary>
    ExchangePoint = 2604,
    /// <summary>
    ///重置伙伴属性强化
    /// </summary>
    ResetPoint = 2605,
    /// <summary>
    ///重置属性强化技能
    /// </summary>
    RandomSkill = 2606,
  }

  #endregion

  #region Messages
  public sealed class PartnerImproveCount : pb::IMessage {
    private static readonly pb::MessageParser<PartnerImproveCount> _parser = new pb::MessageParser<PartnerImproveCount>(() => new PartnerImproveCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerImproveCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "keyId" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private uint keyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyId {
      get { return keyId_; }
      set {
        keyId_ = value;
      }
    }

    /// <summary>Field number for the "improveCount" field.</summary>
    public const int ImproveCountFieldNumber = 2;
    private uint improveCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImproveCount {
      get { return improveCount_; }
      set {
        improveCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(KeyId);
      }
      if (ImproveCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImproveCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeyId);
      }
      if (ImproveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImproveCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            KeyId = input.ReadUInt32();
            break;
          }
          case 16: {
            ImproveCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PartnerImproveData : pb::IMessage {
    private static readonly pb::MessageParser<PartnerImproveData> _parser = new pb::MessageParser<PartnerImproveData>(() => new PartnerImproveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerImproveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "usePoint" field.</summary>
    public const int UsePointFieldNumber = 1;
    private uint usePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsePoint {
      get { return usePoint_; }
      set {
        usePoint_ = value;
      }
    }

    /// <summary>Field number for the "improveAttrs" field.</summary>
    public const int ImproveAttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PartnerImproveCount> _repeated_improveAttrs_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PartnerImproveCount.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerImproveCount> improveAttrs_ = new pbc::RepeatedField<global::Packet.PartnerImproveCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerImproveCount> ImproveAttrs {
      get { return improveAttrs_; }
    }

    /// <summary>Field number for the "improveSkills" field.</summary>
    public const int ImproveSkillsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PartnerImproveData.Types.ImproveSkillInfo> _repeated_improveSkills_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PartnerImproveData.Types.ImproveSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerImproveData.Types.ImproveSkillInfo> improveSkills_ = new pbc::RepeatedField<global::Packet.PartnerImproveData.Types.ImproveSkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerImproveData.Types.ImproveSkillInfo> ImproveSkills {
      get { return improveSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsePoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UsePoint);
      }
      improveAttrs_.WriteTo(output, _repeated_improveAttrs_codec);
      improveSkills_.WriteTo(output, _repeated_improveSkills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsePoint);
      }
      size += improveAttrs_.CalculateSize(_repeated_improveAttrs_codec);
      size += improveSkills_.CalculateSize(_repeated_improveSkills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UsePoint = input.ReadUInt32();
            break;
          }
          case 18: {
            improveAttrs_.AddEntriesFrom(input, _repeated_improveAttrs_codec);
            break;
          }
          case 26: {
            improveSkills_.AddEntriesFrom(input, _repeated_improveSkills_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PartnerImproveData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ImproveSkillInfo : pb::IMessage {
        private static readonly pb::MessageParser<ImproveSkillInfo> _parser = new pb::MessageParser<ImproveSkillInfo>(() => new ImproveSkillInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImproveSkillInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "skillId" field.</summary>
        public const int SkillIdFieldNumber = 1;
        private uint skillId_;
        /// <summary>
        ///技能ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SkillId {
          get { return skillId_; }
          set {
            skillId_ = value;
          }
        }

        /// <summary>Field number for the "isLocked" field.</summary>
        public const int IsLockedFieldNumber = 2;
        private bool isLocked_;
        /// <summary>
        ///true锁定 否则未锁定
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsLocked {
          get { return isLocked_; }
          set {
            isLocked_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SkillId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SkillId);
          }
          if (IsLocked != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsLocked);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SkillId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
          }
          if (IsLocked != false) {
            size += 1 + 1;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SkillId = input.ReadUInt32();
                break;
              }
              case 16: {
                IsLocked = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class PartnerRunePos : pb::IMessage {
    private static readonly pb::MessageParser<PartnerRunePos> _parser = new pb::MessageParser<PartnerRunePos>(() => new PartnerRunePos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerRunePos> Parser { get { return _parser; } }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_runeId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> runeId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RuneId {
      get { return runeId_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_status_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> status_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 符文新解锁槽的红点，客户端使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runeId_.WriteTo(output, _repeated_runeId_codec);
      status_.WriteTo(output, _repeated_status_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runeId_.CalculateSize(_repeated_runeId_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            runeId_.AddEntriesFrom(input, _repeated_runeId_codec);
            break;
          }
          case 18:
          case 16: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Partner : pb::IMessage {
    private static readonly pb::MessageParser<Partner> _parser = new pb::MessageParser<Partner>(() => new Partner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Partner> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 2;
    private uint infoId_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private ulong exp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "rune" field.</summary>
    public const int RuneFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.PartnerRunePos> _repeated_rune_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.PartnerRunePos.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRunePos> rune_ = new pbc::RepeatedField<global::Packet.PartnerRunePos>();
    /// <summary>
    /// 符文
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRunePos> Rune {
      get { return rune_; }
    }

    /// <summary>Field number for the "totalRuneLv" field.</summary>
    public const int TotalRuneLvFieldNumber = 6;
    private uint totalRuneLv_;
    /// <summary>
    /// 总符文等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRuneLv {
      get { return totalRuneLv_; }
      set {
        totalRuneLv_ = value;
      }
    }

    /// <summary>Field number for the "totalGoldRune" field.</summary>
    public const int TotalGoldRuneFieldNumber = 7;
    private uint totalGoldRune_;
    /// <summary>
    /// 总金符文数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalGoldRune {
      get { return totalGoldRune_; }
      set {
        totalGoldRune_ = value;
      }
    }

    /// <summary>Field number for the "improveData" field.</summary>
    public const int ImproveDataFieldNumber = 8;
    private global::Packet.PartnerImproveData improveData_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PartnerImproveData ImproveData {
      get { return improveData_; }
      set {
        improveData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InfoId);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      rune_.WriteTo(output, _repeated_rune_codec);
      if (TotalRuneLv != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalGoldRune);
      }
      if (improveData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ImproveData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += rune_.CalculateSize(_repeated_rune_codec);
      if (TotalRuneLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalGoldRune);
      }
      if (improveData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImproveData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt64();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 42: {
            rune_.AddEntriesFrom(input, _repeated_rune_codec);
            break;
          }
          case 48: {
            TotalRuneLv = input.ReadUInt32();
            break;
          }
          case 56: {
            TotalGoldRune = input.ReadUInt32();
            break;
          }
          case 66: {
            if (improveData_ == null) {
              improveData_ = new global::Packet.PartnerImproveData();
            }
            input.ReadMessage(improveData_);
            break;
          }
        }
      }
    }

  }

  public sealed class PartnerRune : pb::IMessage {
    private static readonly pb::MessageParser<PartnerRune> _parser = new pb::MessageParser<PartnerRune>(() => new PartnerRune());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerRune> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PartnerFormation : pb::IMessage {
    private static readonly pb::MessageParser<PartnerFormation> _parser = new pb::MessageParser<PartnerFormation>(() => new PartnerFormation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerFormation> Parser { get { return _parser; } }

    /// <summary>Field number for the "pa" field.</summary>
    public const int PaFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_pa_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> pa_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pa {
      get { return pa_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pa_.WriteTo(output, _repeated_pa_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pa_.CalculateSize(_repeated_pa_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            pa_.AddEntriesFrom(input, _repeated_pa_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PartnerBond : pb::IMessage {
    private static readonly pb::MessageParser<PartnerBond> _parser = new pb::MessageParser<PartnerBond>(() => new PartnerBond());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerBond> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///羁绊id      
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///激活进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PartnerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PartnerInfo> _parser = new pb::MessageParser<PartnerInfo>(() => new PartnerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "pa_list" field.</summary>
    public const int PaListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Partner> _repeated_paList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Partner.Parser);
    private readonly pbc::RepeatedField<global::Packet.Partner> paList_ = new pbc::RepeatedField<global::Packet.Partner>();
    /// <summary>
    /// 伙伴数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Partner> PaList {
      get { return paList_; }
    }

    /// <summary>Field number for the "current_index" field.</summary>
    public const int CurrentIndexFieldNumber = 2;
    private uint currentIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentIndex {
      get { return currentIndex_; }
      set {
        currentIndex_ = value;
      }
    }

    /// <summary>Field number for the "fm_list" field.</summary>
    public const int FmListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PartnerFormation> _repeated_fmList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PartnerFormation.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerFormation> fmList_ = new pbc::RepeatedField<global::Packet.PartnerFormation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerFormation> FmList {
      get { return fmList_; }
    }

    /// <summary>Field number for the "runePack" field.</summary>
    public const int RunePackFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runePack_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runePack_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    /// <summary>
    /// 符文背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> RunePack {
      get { return runePack_; }
    }

    /// <summary>Field number for the "bond" field.</summary>
    public const int BondFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.PartnerBond> _repeated_bond_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.PartnerBond.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerBond> bond_ = new pbc::RepeatedField<global::Packet.PartnerBond>();
    /// <summary>
    /// 伙伴羁绊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerBond> Bond {
      get { return bond_; }
    }

    /// <summary>Field number for the "totalPoint" field.</summary>
    public const int TotalPointFieldNumber = 6;
    private uint totalPoint_;
    /// <summary>
    ///属性强化点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPoint {
      get { return totalPoint_; }
      set {
        totalPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paList_.WriteTo(output, _repeated_paList_codec);
      if (CurrentIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrentIndex);
      }
      fmList_.WriteTo(output, _repeated_fmList_codec);
      runePack_.WriteTo(output, _repeated_runePack_codec);
      bond_.WriteTo(output, _repeated_bond_codec);
      if (TotalPoint != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paList_.CalculateSize(_repeated_paList_codec);
      if (CurrentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentIndex);
      }
      size += fmList_.CalculateSize(_repeated_fmList_codec);
      size += runePack_.CalculateSize(_repeated_runePack_codec);
      size += bond_.CalculateSize(_repeated_bond_codec);
      if (TotalPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paList_.AddEntriesFrom(input, _repeated_paList_codec);
            break;
          }
          case 16: {
            CurrentIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            fmList_.AddEntriesFrom(input, _repeated_fmList_codec);
            break;
          }
          case 34: {
            runePack_.AddEntriesFrom(input, _repeated_runePack_codec);
            break;
          }
          case 42: {
            bond_.AddEntriesFrom(input, _repeated_bond_codec);
            break;
          }
          case 48: {
            TotalPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerInfoNtf> _parser = new pb::MessageParser<CmdPartnerInfoNtf>(() => new CmdPartnerInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "pi" field.</summary>
    public const int PiFieldNumber = 1;
    private global::Packet.PartnerInfo pi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PartnerInfo Pi {
      get { return pi_; }
      set {
        pi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pi_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pi_ == null) {
              pi_ = new global::Packet.PartnerInfo();
            }
            input.ReadMessage(pi_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴数据通知
  /// </summary>
  public sealed class CmdPartnerDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerDataNtf> _parser = new pb::MessageParser<CmdPartnerDataNtf>(() => new CmdPartnerDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "pa_list" field.</summary>
    public const int PaListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.Partner> _repeated_paList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.Partner.Parser);
    private readonly pbc::RepeatedField<global::Packet.Partner> paList_ = new pbc::RepeatedField<global::Packet.Partner>();
    /// <summary>
    /// 伙伴数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.Partner> PaList {
      get { return paList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      paList_.WriteTo(output, _repeated_paList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += paList_.CalculateSize(_repeated_paList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            paList_.AddEntriesFrom(input, _repeated_paList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerChangeFormationReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerChangeFormationReq> _parser = new pb::MessageParser<CmdPartnerChangeFormationReq>(() => new CmdPartnerChangeFormationReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerChangeFormationReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "fm_list" field.</summary>
    public const int FmListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PartnerFormation> _repeated_fmList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PartnerFormation.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerFormation> fmList_ = new pbc::RepeatedField<global::Packet.PartnerFormation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerFormation> FmList {
      get { return fmList_; }
    }

    /// <summary>Field number for the "current_index" field.</summary>
    public const int CurrentIndexFieldNumber = 3;
    private uint currentIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentIndex {
      get { return currentIndex_; }
      set {
        currentIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fmList_.WriteTo(output, _repeated_fmList_codec);
      if (CurrentIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurrentIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fmList_.CalculateSize(_repeated_fmList_codec);
      if (CurrentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            fmList_.AddEntriesFrom(input, _repeated_fmList_codec);
            break;
          }
          case 24: {
            CurrentIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerChangeFormationRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerChangeFormationRes> _parser = new pb::MessageParser<CmdPartnerChangeFormationRes>(() => new CmdPartnerChangeFormationRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerChangeFormationRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "fm_list" field.</summary>
    public const int FmListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.PartnerFormation> _repeated_fmList_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.PartnerFormation.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerFormation> fmList_ = new pbc::RepeatedField<global::Packet.PartnerFormation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerFormation> FmList {
      get { return fmList_; }
    }

    /// <summary>Field number for the "current_index" field.</summary>
    public const int CurrentIndexFieldNumber = 4;
    private uint currentIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentIndex {
      get { return currentIndex_; }
      set {
        currentIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fmList_.WriteTo(output, _repeated_fmList_codec);
      if (CurrentIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fmList_.CalculateSize(_repeated_fmList_codec);
      if (CurrentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            fmList_.AddEntriesFrom(input, _repeated_fmList_codec);
            break;
          }
          case 32: {
            CurrentIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerInfoReq> _parser = new pb::MessageParser<CmdPartnerInfoReq>(() => new CmdPartnerInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdPartnerInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerInfoRes> _parser = new pb::MessageParser<CmdPartnerInfoRes>(() => new CmdPartnerInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pi" field.</summary>
    public const int PiFieldNumber = 1;
    private global::Packet.PartnerInfo pi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PartnerInfo Pi {
      get { return pi_; }
      set {
        pi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pi_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pi_ == null) {
              pi_ = new global::Packet.PartnerInfo();
            }
            input.ReadMessage(pi_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerUnlockReq> _parser = new pb::MessageParser<CmdPartnerUnlockReq>(() => new CmdPartnerUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerUnlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "info_id" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerUnlockRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerUnlockRes> _parser = new pb::MessageParser<CmdPartnerUnlockRes>(() => new CmdPartnerUnlockRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerUnlockRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pa" field.</summary>
    public const int PaFieldNumber = 1;
    private global::Packet.Partner pa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Partner Pa {
      get { return pa_; }
      set {
        pa_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pa_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pa);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pa_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pa);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pa_ == null) {
              pa_ = new global::Packet.Partner();
            }
            input.ReadMessage(pa_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerAddExpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerAddExpReq> _parser = new pb::MessageParser<CmdPartnerAddExpReq>(() => new CmdPartnerAddExpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerAddExpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "info_id" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "item_info_id" field.</summary>
    public const int ItemInfoIdFieldNumber = 2;
    private uint itemInfoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemInfoId {
      get { return itemInfoId_; }
      set {
        itemInfoId_ = value;
      }
    }

    /// <summary>Field number for the "item_num" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private uint itemNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (ItemInfoId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemInfoId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ItemNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (ItemInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemInfoId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemInfoId = input.ReadUInt32();
            break;
          }
          case 24: {
            ItemNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerAddExpRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerAddExpRes> _parser = new pb::MessageParser<CmdPartnerAddExpRes>(() => new CmdPartnerAddExpRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerAddExpRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pa" field.</summary>
    public const int PaFieldNumber = 1;
    private global::Packet.Partner pa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Partner Pa {
      get { return pa_; }
      set {
        pa_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pa_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pa);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pa_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pa);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pa_ == null) {
              pa_ = new global::Packet.Partner();
            }
            input.ReadMessage(pa_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文穿戴请求
  /// </summary>
  public sealed class CmdPartnerRuneDressReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDressReq> _parser = new pb::MessageParser<CmdPartnerRuneDressReq>(() => new CmdPartnerRuneDressReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDressReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    /// <summary>
    /// 伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private uint runeId_;
    /// <summary>
    /// 符文
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    /// <summary>Field number for the "posType" field.</summary>
    public const int PosTypeFieldNumber = 3;
    private uint posType_;
    /// <summary>
    /// 槽位类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private uint pos_;
    /// <summary>
    /// 槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      if (RuneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RuneId);
      }
      if (PosType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosType);
      }
      if (Pos != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      if (RuneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneId);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RuneId = input.ReadUInt32();
            break;
          }
          case 24: {
            PosType = input.ReadUInt32();
            break;
          }
          case 32: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文穿戴返回
  /// </summary>
  public sealed class CmdPartnerRuneDressRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDressRes> _parser = new pb::MessageParser<CmdPartnerRuneDressRes>(() => new CmdPartnerRuneDressRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDressRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    /// <summary>
    /// 伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "runeId" field.</summary>
    public const int RuneIdFieldNumber = 2;
    private uint runeId_;
    /// <summary>
    /// 符文
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneId {
      get { return runeId_; }
      set {
        runeId_ = value;
      }
    }

    /// <summary>Field number for the "posType" field.</summary>
    public const int PosTypeFieldNumber = 3;
    private uint posType_;
    /// <summary>
    /// 槽位类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private uint pos_;
    /// <summary>
    /// 槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "runeUnloadId" field.</summary>
    public const int RuneUnloadIdFieldNumber = 5;
    private uint runeUnloadId_;
    /// <summary>
    /// 卸载下的符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneUnloadId {
      get { return runeUnloadId_; }
      set {
        runeUnloadId_ = value;
      }
    }

    /// <summary>Field number for the "totalRuneLv" field.</summary>
    public const int TotalRuneLvFieldNumber = 6;
    private uint totalRuneLv_;
    /// <summary>
    /// 总符文等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRuneLv {
      get { return totalRuneLv_; }
      set {
        totalRuneLv_ = value;
      }
    }

    /// <summary>Field number for the "totalGoldRune" field.</summary>
    public const int TotalGoldRuneFieldNumber = 7;
    private uint totalGoldRune_;
    /// <summary>
    /// 总金符文数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalGoldRune {
      get { return totalGoldRune_; }
      set {
        totalGoldRune_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      if (RuneId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RuneId);
      }
      if (PosType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosType);
      }
      if (Pos != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pos);
      }
      if (RuneUnloadId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RuneUnloadId);
      }
      if (TotalRuneLv != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalGoldRune);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      if (RuneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneId);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (RuneUnloadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneUnloadId);
      }
      if (TotalRuneLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalGoldRune);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 16: {
            RuneId = input.ReadUInt32();
            break;
          }
          case 24: {
            PosType = input.ReadUInt32();
            break;
          }
          case 32: {
            Pos = input.ReadUInt32();
            break;
          }
          case 40: {
            RuneUnloadId = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalRuneLv = input.ReadUInt32();
            break;
          }
          case 56: {
            TotalGoldRune = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文卸载请求
  /// </summary>
  public sealed class CmdPartnerRuneUnloadReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneUnloadReq> _parser = new pb::MessageParser<CmdPartnerRuneUnloadReq>(() => new CmdPartnerRuneUnloadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneUnloadReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    /// <summary>
    /// 伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "posType" field.</summary>
    public const int PosTypeFieldNumber = 2;
    private uint posType_;
    /// <summary>
    /// 槽位类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    /// 槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      if (PosType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosType);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 16: {
            PosType = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文卸载返回
  /// </summary>
  public sealed class CmdPartnerRuneUnloadRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneUnloadRes> _parser = new pb::MessageParser<CmdPartnerRuneUnloadRes>(() => new CmdPartnerRuneUnloadRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneUnloadRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    /// <summary>
    /// 伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "posType" field.</summary>
    public const int PosTypeFieldNumber = 2;
    private uint posType_;
    /// <summary>
    /// 槽位类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_pos_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> pos_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 槽位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "runeUnloadId" field.</summary>
    public const int RuneUnloadIdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_runeUnloadId_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> runeUnloadId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 卸载下的符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RuneUnloadId {
      get { return runeUnloadId_; }
    }

    /// <summary>Field number for the "totalRuneLv" field.</summary>
    public const int TotalRuneLvFieldNumber = 5;
    private uint totalRuneLv_;
    /// <summary>
    /// 总符文等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalRuneLv {
      get { return totalRuneLv_; }
      set {
        totalRuneLv_ = value;
      }
    }

    /// <summary>Field number for the "totalGoldRune" field.</summary>
    public const int TotalGoldRuneFieldNumber = 6;
    private uint totalGoldRune_;
    /// <summary>
    /// 总金符文数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalGoldRune {
      get { return totalGoldRune_; }
      set {
        totalGoldRune_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      if (PosType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PosType);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      runeUnloadId_.WriteTo(output, _repeated_runeUnloadId_codec);
      if (TotalRuneLv != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalGoldRune);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      size += runeUnloadId_.CalculateSize(_repeated_runeUnloadId_codec);
      if (TotalRuneLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalRuneLv);
      }
      if (TotalGoldRune != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalGoldRune);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 16: {
            PosType = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 34:
          case 32: {
            runeUnloadId_.AddEntriesFrom(input, _repeated_runeUnloadId_codec);
            break;
          }
          case 40: {
            TotalRuneLv = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalGoldRune = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文合成请求
  /// </summary>
  public sealed class CmdPartnerRuneComposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneComposeReq> _parser = new pb::MessageParser<CmdPartnerRuneComposeReq>(() => new CmdPartnerRuneComposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneComposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    /// 次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文合成返回
  /// </summary>
  public sealed class CmdPartnerRuneComposeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneComposeRes> _parser = new pb::MessageParser<CmdPartnerRuneComposeRes>(() => new CmdPartnerRuneComposeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneComposeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "runeList" field.</summary>
    public const int RuneListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runeList_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runeList_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    /// <summary>
    /// 符文列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> RuneList {
      get { return runeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runeList_.WriteTo(output, _repeated_runeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runeList_.CalculateSize(_repeated_runeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            runeList_.AddEntriesFrom(input, _repeated_runeList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文分解请求
  /// </summary>
  public sealed class CmdPartnerRuneDecomposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDecomposeReq> _parser = new pb::MessageParser<CmdPartnerRuneDecomposeReq>(() => new CmdPartnerRuneDecomposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDecomposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runes_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    /// <summary>
    /// 符文分解
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> Runes {
      get { return runes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runes_.WriteTo(output, _repeated_runes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runes_.CalculateSize(_repeated_runes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文分解返回
  /// </summary>
  public sealed class CmdPartnerRuneDecomposeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDecomposeRes> _parser = new pb::MessageParser<CmdPartnerRuneDecomposeRes>(() => new CmdPartnerRuneDecomposeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDecomposeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "runeChip" field.</summary>
    public const int RuneChipFieldNumber = 1;
    private uint runeChip_;
    /// <summary>
    /// 分解所得符文碎片
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RuneChip {
      get { return runeChip_; }
      set {
        runeChip_ = value;
      }
    }

    /// <summary>Field number for the "runeInfo" field.</summary>
    public const int RuneInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runeInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runeInfo_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    /// <summary>
    /// 符文背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> RuneInfo {
      get { return runeInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuneChip != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RuneChip);
      }
      runeInfo_.WriteTo(output, _repeated_runeInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuneChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneChip);
      }
      size += runeInfo_.CalculateSize(_repeated_runeInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RuneChip = input.ReadUInt32();
            break;
          }
          case 18: {
            runeInfo_.AddEntriesFrom(input, _repeated_runeInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文增加同步
  /// </summary>
  public sealed class CmdPartnerRuneAddNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneAddNtf> _parser = new pb::MessageParser<CmdPartnerRuneAddNtf>(() => new CmdPartnerRuneAddNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneAddNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// 符文ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文一键卸载请求
  /// </summary>
  public sealed class CmdPartnerRuneUnloadAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneUnloadAllReq> _parser = new pb::MessageParser<CmdPartnerRuneUnloadAllReq>(() => new CmdPartnerRuneUnloadAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneUnloadAllReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文一键卸载返回
  /// </summary>
  public sealed class CmdPartnerRuneUnloadAllRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneUnloadAllRes> _parser = new pb::MessageParser<CmdPartnerRuneUnloadAllRes>(() => new CmdPartnerRuneUnloadAllRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneUnloadAllRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "runePack" field.</summary>
    public const int RunePackFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runePack_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runePack_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    /// <summary>
    /// 符文背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> RunePack {
      get { return runePack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      runePack_.WriteTo(output, _repeated_runePack_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      size += runePack_.CalculateSize(_repeated_runePack_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 18: {
            runePack_.AddEntriesFrom(input, _repeated_runePack_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步当前伙伴队伍
  /// </summary>
  public sealed class CmdPartnerCurrentTeamNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerCurrentTeamNtf> _parser = new pb::MessageParser<CmdPartnerCurrentTeamNtf>(() => new CmdPartnerCurrentTeamNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerCurrentTeamNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_team_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> team_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 当前队伍阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Team {
      get { return team_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      team_.WriteTo(output, _repeated_team_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += team_.CalculateSize(_repeated_team_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            team_.AddEntriesFrom(input, _repeated_team_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 符文一键穿戴请求
  /// </summary>
  public sealed class CmdPartnerRuneDressOneKeyReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDressOneKeyReq> _parser = new pb::MessageParser<CmdPartnerRuneDressOneKeyReq>(() => new CmdPartnerRuneDressOneKeyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDressOneKeyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "partnerId" field.</summary>
    public const int PartnerIdFieldNumber = 1;
    private uint partnerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartnerId {
      get { return partnerId_; }
      set {
        partnerId_ = value;
      }
    }

    /// <summary>Field number for the "runeList" field.</summary>
    public const int RuneListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RuneList> _repeated_runeList_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RuneList.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RuneList> runeList_ = new pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RuneList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RuneList> RuneList {
      get { return runeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartnerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartnerId);
      }
      runeList_.WriteTo(output, _repeated_runeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartnerId);
      }
      size += runeList_.CalculateSize(_repeated_runeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PartnerId = input.ReadUInt32();
            break;
          }
          case 18: {
            runeList_.AddEntriesFrom(input, _repeated_runeList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPartnerRuneDressOneKeyReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RunePos : pb::IMessage {
        private static readonly pb::MessageParser<RunePos> _parser = new pb::MessageParser<RunePos>(() => new RunePos());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RunePos> Parser { get { return _parser; } }

        /// <summary>Field number for the "pos" field.</summary>
        public const int PosFieldNumber = 1;
        private uint pos_;
        /// <summary>
        /// 从0开始, 跟穿戴一致
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Pos {
          get { return pos_; }
          set {
            pos_ = value;
          }
        }

        /// <summary>Field number for the "runeId" field.</summary>
        public const int RuneIdFieldNumber = 2;
        private uint runeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RuneId {
          get { return runeId_; }
          set {
            runeId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Pos != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Pos);
          }
          if (RuneId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RuneId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Pos != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
          }
          if (RuneId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuneId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Pos = input.ReadUInt32();
                break;
              }
              case 16: {
                RuneId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RuneList : pb::IMessage {
        private static readonly pb::MessageParser<RuneList> _parser = new pb::MessageParser<RuneList>(() => new RuneList());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RuneList> Parser { get { return _parser; } }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private uint type_;
        /// <summary>
        /// 页签类型, 从0开始, 跟穿戴一致
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "runes" field.</summary>
        public const int RunesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RunePos> _repeated_runes_codec
            = pb::FieldCodec.ForMessage(18, global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RunePos.Parser);
        private readonly pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RunePos> runes_ = new pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RunePos>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Packet.CmdPartnerRuneDressOneKeyReq.Types.RunePos> Runes {
          get { return runes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Type);
          }
          runes_.WriteTo(output, _repeated_runes_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          size += runes_.CalculateSize(_repeated_runes_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Type = input.ReadUInt32();
                break;
              }
              case 18: {
                runes_.AddEntriesFrom(input, _repeated_runes_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 符文一键穿戴返回
  /// </summary>
  public sealed class CmdPartnerRuneDressOneKeyRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerRuneDressOneKeyRes> _parser = new pb::MessageParser<CmdPartnerRuneDressOneKeyRes>(() => new CmdPartnerRuneDressOneKeyRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerRuneDressOneKeyRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "partner" field.</summary>
    public const int PartnerFieldNumber = 1;
    private global::Packet.Partner partner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.Partner Partner {
      get { return partner_; }
      set {
        partner_ = value;
      }
    }

    /// <summary>Field number for the "runePack" field.</summary>
    public const int RunePackFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.PartnerRune> _repeated_runePack_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.PartnerRune.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerRune> runePack_ = new pbc::RepeatedField<global::Packet.PartnerRune>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerRune> RunePack {
      get { return runePack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Partner);
      }
      runePack_.WriteTo(output, _repeated_runePack_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      size += runePack_.CalculateSize(_repeated_runePack_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (partner_ == null) {
              partner_ = new global::Packet.Partner();
            }
            input.ReadMessage(partner_);
            break;
          }
          case 18: {
            runePack_.AddEntriesFrom(input, _repeated_runePack_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 伙伴羁绊变化通知
  /// </summary>
  public sealed class CmdPartnerBondChangeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerBondChangeNtf> _parser = new pb::MessageParser<CmdPartnerBondChangeNtf>(() => new CmdPartnerBondChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerBondChangeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "bond" field.</summary>
    public const int BondFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.PartnerBond> _repeated_bond_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.PartnerBond.Parser);
    private readonly pbc::RepeatedField<global::Packet.PartnerBond> bond_ = new pbc::RepeatedField<global::Packet.PartnerBond>();
    /// <summary>
    /// 伙伴羁绊
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.PartnerBond> Bond {
      get { return bond_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bond_.WriteTo(output, _repeated_bond_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bond_.CalculateSize(_repeated_bond_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bond_.AddEntriesFrom(input, _repeated_bond_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///兑换点数
  /// </summary>
  public sealed class CmdPartnerExchangePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerExchangePointReq> _parser = new pb::MessageParser<CmdPartnerExchangePointReq>(() => new CmdPartnerExchangePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerExchangePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "addPoint" field.</summary>
    public const int AddPointFieldNumber = 1;
    private uint addPoint_;
    /// <summary>
    ///要兑换的点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddPoint {
      get { return addPoint_; }
      set {
        addPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddPoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AddPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerPointUpdateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerPointUpdateNtf> _parser = new pb::MessageParser<CmdPartnerPointUpdateNtf>(() => new CmdPartnerPointUpdateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerPointUpdateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "nowPoint" field.</summary>
    public const int NowPointFieldNumber = 1;
    private uint nowPoint_;
    /// <summary>
    ///当前可使用点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NowPoint {
      get { return nowPoint_; }
      set {
        nowPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NowPoint != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NowPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NowPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NowPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NowPoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加点操作
  /// </summary>
  public sealed class CmdPartnerDistributePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerDistributePointReq> _parser = new pb::MessageParser<CmdPartnerDistributePointReq>(() => new CmdPartnerDistributePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerDistributePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.CmdPartnerDistributePointReq.Types.DistributePointInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.CmdPartnerDistributePointReq.Types.DistributePointInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.CmdPartnerDistributePointReq.Types.DistributePointInfo> info_ = new pbc::RepeatedField<global::Packet.CmdPartnerDistributePointReq.Types.DistributePointInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.CmdPartnerDistributePointReq.Types.DistributePointInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CmdPartnerDistributePointReq message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class DistributePointInfo : pb::IMessage {
        private static readonly pb::MessageParser<DistributePointInfo> _parser = new pb::MessageParser<DistributePointInfo>(() => new DistributePointInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DistributePointInfo> Parser { get { return _parser; } }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        /// <summary>
        /// 0开始 0-7
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        /// <summary>
        ///次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdPartnerDistributePointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerDistributePointRes> _parser = new pb::MessageParser<CmdPartnerDistributePointRes>(() => new CmdPartnerDistributePointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerDistributePointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Packet.PartnerImproveData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PartnerImproveData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Packet.PartnerImproveData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置所有加点
  /// </summary>
  public sealed class CmdPartnerReDistributePointReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerReDistributePointReq> _parser = new pb::MessageParser<CmdPartnerReDistributePointReq>(() => new CmdPartnerReDistributePointReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerReDistributePointReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///弃用
  /// </summary>
  public sealed class CmdPartnerReDistributePointRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerReDistributePointRes> _parser = new pb::MessageParser<CmdPartnerReDistributePointRes>(() => new CmdPartnerReDistributePointRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerReDistributePointRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Packet.PartnerImproveData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PartnerImproveData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Packet.PartnerImproveData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///重置技能
  /// </summary>
  public sealed class CmdPartnerReRandomSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerReRandomSkillReq> _parser = new pb::MessageParser<CmdPartnerReRandomSkillReq>(() => new CmdPartnerReRandomSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerReRandomSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdPartnerReRandomSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdPartnerReRandomSkillRes> _parser = new pb::MessageParser<CmdPartnerReRandomSkillRes>(() => new CmdPartnerReRandomSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdPartnerReRandomSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "infoId" field.</summary>
    public const int InfoIdFieldNumber = 1;
    private uint infoId_;
    /// <summary>
    ///伙伴ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///0开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(InfoId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
