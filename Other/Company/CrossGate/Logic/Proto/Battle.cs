// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Packet {

  #region Enums
  public enum CmdBattle {
    Zero = 0,
    /// <summary>
    ///开始战斗
    /// </summary>
    StartNtf = 9100,
    /// <summary>
    ///回合执行结果
    /// </summary>
    RoundNtf = 9101,
    /// <summary>
    ///命令请求
    /// </summary>
    CommandReq = 9102,
    CommandRes = 9103,
    /// <summary>
    ///命令广播
    /// </summary>
    CommandNtf = 9104,
    /// <summary>
    ///开始请求
    /// </summary>
    StartReq = 9105,
    StartRes = 9106,
    /// <summary>
    ///开始回合通知
    /// </summary>
    RoundStartNtf = 9107,
    /// <summary>
    ///通知回合演示结束
    /// </summary>
    ShowRoundEndNtf = 9108,
    /// <summary>
    ///回合结束请求
    /// </summary>
    ShowRoundEndReq = 9109,
    ShowRoundEndRes = 9110,
    /// <summary>
    ///恢复战斗
    /// </summary>
    ResumeNtf = 9111,
    /// <summary>
    ///结束战斗
    /// </summary>
    EndReq = 9112,
    /// <summary>
    ///结束战斗
    /// </summary>
    EndRes = 9113,
    /// <summary>
    ///设置自动战斗技能
    /// </summary>
    SetAutoSkillReq = 9114,
    /// <summary>
    ///设置自动战斗技能
    /// </summary>
    SetAutoSkillRes = 9115,
    /// <summary>
    ///自动战斗开始
    /// </summary>
    AutoFightReq = 9116,
    /// <summary>
    ///自动战斗
    /// </summary>
    AutoFightRes = 9117,
    /// <summary>
    ///战斗数据通知
    /// </summary>
    DataNtf = 9118,
    UnitInfoReq = 9119,
    UnitInfoRes = 9120,
    /// <summary>
    ///设置单位
    /// </summary>
    SimulationReq = 9121,
    SimulationRes = 9122,
    /// <summary>
    ///设置完成广播
    /// </summary>
    SimulationNtf = 9123,
    /// <summary>
    ///命令设置
    /// </summary>
    SimulationCommandReq = 9124,
    SimulationCommandRes = 9125,
    /// <summary>
    ///结果广播
    /// </summary>
    SimulationResultNtf = 9126,
    /// <summary>
    ///设置指挥tag
    /// </summary>
    SetTagReq = 9127,
    SetTagRes = 9128,
    SetTagNtf = 9129,
    /// <summary>
    ///暂停战斗
    /// </summary>
    PauseReq = 9130,
    PauseRes = 9131,
    PauseNtf = 9132,
    /// <summary>
    ///	CmdBattle_BaseRoleReq = 9133;	//角色信息请求(废弃)
    ///	CmdBattle_BaseRoleRes = 9134;(废弃)
    /// </summary>
    EndNtf = 9135,
    /// <summary>
    ///ai log	
    /// </summary>
    AilogNtf = 9136,
    /// <summary>
    ///状态指令
    /// </summary>
    CmdStateReq = 9137,
    /// <summary>
    /// </summary>
    CmdStateRes = 9138,
    /// <summary>
    /// </summary>
    CmdStateNtf = 9139,
    /// <summary>
    ///加速
    /// </summary>
    CmdSpeedUpReq = 9140,
    /// <summary>
    /// </summary>
    CmdSpeedUpNtf = 9141,
    /// <summary>
    ///撤退请求
    /// </summary>
    CancelReq = 9142,
    CancelNtf = 9143,
    /// <summary>
    ///设置主角前后排
    /// </summary>
    SetPosTypeReq = 9144,
    SetPosTypeRes = 9145,
    /// <summary>
    ///进入战斗失败提示
    /// </summary>
    EnterFailedNtf = 9146,
    /// <summary>
    ///请求观战
    /// </summary>
    WatchReq = 9147,
    /// <summary>
    /// </summary>
    WatchNtf = 9148,
    /// <summary>
    ///请求退出观战
    /// </summary>
    WatchQuitReq = 9149,
    /// <summary>
    ///恢复战斗时战斗已结束
    /// </summary>
    ResumeEndNtf = 9150,
    /// <summary>
    ///请求积分信息
    /// </summary>
    ScoreInfoReq = 9151,
    ScoreInfoNtf = 9152,
  }

  public enum BattleCommandId {
    CommandZero = 0,
    /// <summary>
    ///普通攻击
    /// </summary>
    CommandNormalAttack = 1,
    /// <summary>
    ///使用技能
    /// </summary>
    CommandCastSkill = 2,
    /// <summary>
    ///宠物操作
    /// </summary>
    CommandPet = 3,
    /// <summary>
    ///防御
    /// </summary>
    CommandDefense = 4,
    /// <summary>
    ///使用道具
    /// </summary>
    CommandUseItem = 5,
    /// <summary>
    ///换位置
    /// </summary>
    CommandChangePos = 6,
    /// <summary>
    ///逃跑
    /// </summary>
    CommandEscape = 7,
  }

  public enum SubCommandPos {
    PosZero = 0,
    /// <summary>
    ///收起宠物
    /// </summary>
    PickUpPet = 1,
    /// <summary>
    ///放下宠物
    /// </summary>
    LayDownPet = 2,
  }

  public enum UnitState {
    /// <summary>
    ///活着
    /// </summary>
    Lived = 0,
    /// <summary>
    ///收起
    /// </summary>
    PickUp = 1,
    /// <summary>
    ///死亡
    /// </summary>
    Dead = 2,
    /// <summary>
    ///逃跑
    /// </summary>
    Escaped = 3,
  }

  public enum UnitType {
    Zero = 0,
    /// <summary>
    ///英雄 2
    /// </summary>
    Hero = 1,
    /// <summary>
    ///宠物 4
    /// </summary>
    Pet = 2,
    /// <summary>
    ///怪物 8
    /// </summary>
    Monster = 3,
    /// <summary>
    ///伙伴 16
    /// </summary>
    Partner = 4,
    /// <summary>
    ///机器人 32
    /// </summary>
    Robot = 5,
  }

  public enum BattleType {
    Zero = 0,
    /// <summary>
    ///pve战斗
    /// </summary>
    Pve = 1,
    /// <summary>
    ///pvp
    /// </summary>
    Pvp = 2,
    /// <summary>
    ///单人PVP
    /// </summary>
    Single = 3,
  }

  public enum WinType {
    Zero = 0,
    /// <summary>
    ///攻击方胜利
    /// </summary>
    Attaker = 1,
    /// <summary>
    ///防守方胜利
    /// </summary>
    Deffender = 2,
    /// <summary>
    ///平局
    /// </summary>
    Draw = 3,
  }

  /// <summary>
  ///这些效果不会同时出现
  /// </summary>
  public enum HitEffectType {
    /// <summary>
    ///正常伤害
    /// </summary>
    Zero = 0,
    /// <summary>
    ///未命中
    /// </summary>
    Miss = 1,
    /// <summary>
    ///暴击
    /// </summary>
    CriticalStrike = 2,
    /// <summary>
    ///免疫
    /// </summary>
    Immune = 3,
    /// <summary>
    ///溅射
    /// </summary>
    Spurting = 4,
    /// <summary>
    ///吸血
    /// </summary>
    Vimpre = 5,
    /// <summary>
    ///护卫 这个左移16bit
    /// </summary>
    Protect = 6,
    /// <summary>
    ///附加伤害
    /// </summary>
    Addtion = 7,
    /// <summary>
    ///魔法不足
    /// </summary>
    Mana = 8,
    /// <summary>
    ///吸血
    /// </summary>
    Vmpare = 9,
    /// <summary>
    ///吸收
    /// </summary>
    Absorb = 10,
    /// <summary>
    ///追击
    /// </summary>
    Chase = 11,
    /// <summary>
    ///反弹
    /// </summary>
    Rebound = 12,
    /// <summary>
    ///能量不足
    /// </summary>
    Energe = 13,
    /// <summary>
    ///失败
    /// </summary>
    Fail = 14,
    /// <summary>
    ///无效
    /// </summary>
    EffectMiss = 15,
    /// <summary>
    ///扣除能量
    /// </summary>
    EnergyChange = 16,
  }

  public enum Replace_type {
    /// <summary>
    /// </summary>
    Normal = 0,
    /// <summary>
    ///附身
    /// </summary>
    Attach = 1,
    /// <summary>
    ///击飞
    /// </summary>
    AttackFly = 2,
    /// <summary>
    ///闪现
    /// </summary>
    Blink = 3,
    /// <summary>
    ///逃跑
    /// </summary>
    Escape = 4,
    /// <summary>
    ///技能击飞
    /// </summary>
    AttackFly2 = 5,
    /// <summary>
    ///死亡
    /// </summary>
    Death = 6,
    /// <summary>
    ///变身
    /// </summary>
    ShapeShift = 7,
  }

  /// <summary>
  ///战斗结束发的flag 用于一些特殊不合逻辑的处理
  /// </summary>
  public enum BattleFlag {
    None = 0,
    GuildBoss = 1,
  }

  public enum BattleEnterFailedReason {
    /// <summary>
    ///道具不足
    /// </summary>
    Item = 0,
  }

  #endregion

  #region Messages
  public sealed class BattleCommand : pb::IMessage {
    private static readonly pb::MessageParser<BattleCommand> _parser = new pb::MessageParser<BattleCommand>(() => new BattleCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private uint roundId_;
    /// <summary>
    ///回合id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "main_cmd" field.</summary>
    public const int MainCmdFieldNumber = 2;
    private uint mainCmd_;
    /// <summary>
    ///主命令	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainCmd {
      get { return mainCmd_; }
      set {
        mainCmd_ = value;
      }
    }

    /// <summary>Field number for the "sub_cmd" field.</summary>
    public const int SubCmdFieldNumber = 3;
    private uint subCmd_;
    /// <summary>
    ///子命令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubCmd {
      get { return subCmd_; }
      set {
        subCmd_ = value;
      }
    }

    /// <summary>Field number for the "src_unit_id" field.</summary>
    public const int SrcUnitIdFieldNumber = 4;
    private uint srcUnitId_;
    /// <summary>
    ///命令源对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUnitId {
      get { return srcUnitId_; }
      set {
        srcUnitId_ = value;
      }
    }

    /// <summary>Field number for the "tar_pos" field.</summary>
    public const int TarPosFieldNumber = 5;
    private int tarPos_;
    /// <summary>
    ///目标位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TarPos {
      get { return tarPos_; }
      set {
        tarPos_ = value;
      }
    }

    /// <summary>Field number for the "action_id" field.</summary>
    public const int ActionIdFieldNumber = 6;
    private uint actionId_;
    /// <summary>
    ///动作id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionId {
      get { return actionId_; }
      set {
        actionId_ = value;
      }
    }

    /// <summary>Field number for the "param_1" field.</summary>
    public const int Param1FieldNumber = 7;
    private uint param1_;
    /// <summary>
    ///技能 ，或者 道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 8;
    private uint battleId_;
    /// <summary>
    ///战斗ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "talk_id" field.</summary>
    public const int TalkIdFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_talkId_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> talkId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///谈话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TalkId {
      get { return talkId_; }
    }

    /// <summary>Field number for the "ai_param" field.</summary>
    public const int AiParamFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_aiParam_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> aiParam_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///ai参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AiParam {
      get { return aiParam_; }
    }

    /// <summary>Field number for the "talk_unitId" field.</summary>
    public const int TalkUnitIdFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_talkUnitId_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> talkUnitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///谈话unitid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TalkUnitId {
      get { return talkUnitId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundId);
      }
      if (MainCmd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MainCmd);
      }
      if (SubCmd != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SubCmd);
      }
      if (SrcUnitId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SrcUnitId);
      }
      if (TarPos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TarPos);
      }
      if (ActionId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ActionId);
      }
      if (Param1 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Param1);
      }
      if (BattleId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BattleId);
      }
      talkId_.WriteTo(output, _repeated_talkId_codec);
      aiParam_.WriteTo(output, _repeated_aiParam_codec);
      talkUnitId_.WriteTo(output, _repeated_talkUnitId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      if (MainCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainCmd);
      }
      if (SubCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubCmd);
      }
      if (SrcUnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUnitId);
      }
      if (TarPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TarPos);
      }
      if (ActionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionId);
      }
      if (Param1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Param1);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += talkId_.CalculateSize(_repeated_talkId_codec);
      size += aiParam_.CalculateSize(_repeated_aiParam_codec);
      size += talkUnitId_.CalculateSize(_repeated_talkUnitId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 16: {
            MainCmd = input.ReadUInt32();
            break;
          }
          case 24: {
            SubCmd = input.ReadUInt32();
            break;
          }
          case 32: {
            SrcUnitId = input.ReadUInt32();
            break;
          }
          case 40: {
            TarPos = input.ReadInt32();
            break;
          }
          case 48: {
            ActionId = input.ReadUInt32();
            break;
          }
          case 56: {
            Param1 = input.ReadUInt32();
            break;
          }
          case 64: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 74:
          case 72: {
            talkId_.AddEntriesFrom(input, _repeated_talkId_codec);
            break;
          }
          case 82:
          case 80: {
            aiParam_.AddEntriesFrom(input, _repeated_aiParam_codec);
            break;
          }
          case 90:
          case 88: {
            talkUnitId_.AddEntriesFrom(input, _repeated_talkUnitId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BattleHpMpChange : pb::IMessage {
    private static readonly pb::MessageParser<BattleHpMpChange> _parser = new pb::MessageParser<BattleHpMpChange>(() => new BattleHpMpChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleHpMpChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 4;
    private int curHp_;
    /// <summary>
    ///当前血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "hit_effect" field.</summary>
    public const int HitEffectFieldNumber = 5;
    private uint hitEffect_;
    /// <summary>
    ///HitEffectType 攻击效果.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitEffect {
      get { return hitEffect_; }
      set {
        hitEffect_ = value;
      }
    }

    /// <summary>Field number for the "damage_addon" field.</summary>
    public const int DamageAddonFieldNumber = 6;
    private int damageAddon_;
    /// <summary>
    ///附加伤害或者减免
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageAddon {
      get { return damageAddon_; }
      set {
        damageAddon_ = value;
      }
    }

    /// <summary>Field number for the "cur_mp" field.</summary>
    public const int CurMpFieldNumber = 7;
    private int curMp_;
    /// <summary>
    ///当前魔量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    /// <summary>Field number for the "hp_change" field.</summary>
    public const int HpChangeFieldNumber = 10;
    private int hpChange_;
    /// <summary>
    ///int32 buff_id = 9;				//伤害buff_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpChange {
      get { return hpChange_; }
      set {
        hpChange_ = value;
      }
    }

    /// <summary>Field number for the "mp_change" field.</summary>
    public const int MpChangeFieldNumber = 11;
    private int mpChange_;
    /// <summary>
    ///魔量变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpChange {
      get { return mpChange_; }
      set {
        mpChange_ = value;
      }
    }

    /// <summary>Field number for the "protect_tar" field.</summary>
    public const int ProtectTarFieldNumber = 12;
    private int protectTar_;
    /// <summary>
    ///护卫角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtectTar {
      get { return protectTar_; }
      set {
        protectTar_ = value;
      }
    }

    /// <summary>Field number for the "skill_round" field.</summary>
    public const int SkillRoundFieldNumber = 13;
    private int skillRound_;
    /// <summary>
    ///技能触发轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillRound {
      get { return skillRound_; }
      set {
        skillRound_ = value;
      }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 14;
    private int passiveId_;
    /// <summary>
    ///被动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "change_type" field.</summary>
    public const int ChangeTypeFieldNumber = 15;
    private int changeType_;
    /// <summary>
    ///血变动0，魔法变动 1  ；都变化2 ，护盾变化3, 血护盾都变4, 气的变化5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeType {
      get { return changeType_; }
      set {
        changeType_ = value;
      }
    }

    /// <summary>Field number for the "src_unit_id" field.</summary>
    public const int SrcUnitIdFieldNumber = 16;
    private uint srcUnitId_;
    /// <summary>
    ///攻击源对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUnitId {
      get { return srcUnitId_; }
      set {
        srcUnitId_ = value;
      }
    }

    /// <summary>Field number for the "cur_shield" field.</summary>
    public const int CurShieldFieldNumber = 17;
    private int curShield_;
    /// <summary>
    ///当前护盾值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurShield {
      get { return curShield_; }
      set {
        curShield_ = value;
      }
    }

    /// <summary>Field number for the "shield_change" field.</summary>
    public const int ShieldChangeFieldNumber = 18;
    private int shieldChange_;
    /// <summary>
    ///护盾变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShieldChange {
      get { return shieldChange_; }
      set {
        shieldChange_ = value;
      }
    }

    /// <summary>Field number for the "cur_gas" field.</summary>
    public const int CurGasFieldNumber = 19;
    private int curGas_;
    /// <summary>
    ///当前气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGas {
      get { return curGas_; }
      set {
        curGas_ = value;
      }
    }

    /// <summary>Field number for the "gas_change" field.</summary>
    public const int GasChangeFieldNumber = 20;
    private int gasChange_;
    /// <summary>
    ///气值变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GasChange {
      get { return gasChange_; }
      set {
        gasChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (CurHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurHp);
      }
      if (HitEffect != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HitEffect);
      }
      if (DamageAddon != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DamageAddon);
      }
      if (CurMp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurMp);
      }
      if (HpChange != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HpChange);
      }
      if (MpChange != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MpChange);
      }
      if (ProtectTar != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ProtectTar);
      }
      if (SkillRound != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SkillRound);
      }
      if (PassiveId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PassiveId);
      }
      if (ChangeType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ChangeType);
      }
      if (SrcUnitId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(SrcUnitId);
      }
      if (CurShield != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CurShield);
      }
      if (ShieldChange != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ShieldChange);
      }
      if (CurGas != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CurGas);
      }
      if (GasChange != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(GasChange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
      }
      if (HitEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HitEffect);
      }
      if (DamageAddon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageAddon);
      }
      if (CurMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMp);
      }
      if (HpChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpChange);
      }
      if (MpChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpChange);
      }
      if (ProtectTar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtectTar);
      }
      if (SkillRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillRound);
      }
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveId);
      }
      if (ChangeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeType);
      }
      if (SrcUnitId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcUnitId);
      }
      if (CurShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurShield);
      }
      if (ShieldChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldChange);
      }
      if (CurGas != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurGas);
      }
      if (GasChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GasChange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 32: {
            CurHp = input.ReadInt32();
            break;
          }
          case 40: {
            HitEffect = input.ReadUInt32();
            break;
          }
          case 48: {
            DamageAddon = input.ReadInt32();
            break;
          }
          case 56: {
            CurMp = input.ReadInt32();
            break;
          }
          case 80: {
            HpChange = input.ReadInt32();
            break;
          }
          case 88: {
            MpChange = input.ReadInt32();
            break;
          }
          case 96: {
            ProtectTar = input.ReadInt32();
            break;
          }
          case 104: {
            SkillRound = input.ReadInt32();
            break;
          }
          case 112: {
            PassiveId = input.ReadInt32();
            break;
          }
          case 120: {
            ChangeType = input.ReadInt32();
            break;
          }
          case 128: {
            SrcUnitId = input.ReadUInt32();
            break;
          }
          case 136: {
            CurShield = input.ReadInt32();
            break;
          }
          case 144: {
            ShieldChange = input.ReadInt32();
            break;
          }
          case 152: {
            CurGas = input.ReadInt32();
            break;
          }
          case 160: {
            GasChange = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleBuffChange : pb::IMessage {
    private static readonly pb::MessageParser<BattleBuffChange> _parser = new pb::MessageParser<BattleBuffChange>(() => new BattleBuffChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleBuffChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "buff_id" field.</summary>
    public const int BuffIdFieldNumber = 2;
    private uint buffId_;
    /// <summary>
    ///buff id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "odd_num" field.</summary>
    public const int OddNumFieldNumber = 3;
    private uint oddNum_;
    /// <summary>
    ///剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OddNum {
      get { return oddNum_; }
      set {
        oddNum_ = value;
      }
    }

    /// <summary>Field number for the "start_round" field.</summary>
    public const int StartRoundFieldNumber = 4;
    private uint startRound_;
    /// <summary>
    ///开始回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartRound {
      get { return startRound_; }
      set {
        startRound_ = value;
      }
    }

    /// <summary>Field number for the "overlay" field.</summary>
    public const int OverlayFieldNumber = 5;
    private uint overlay_;
    /// <summary>
    ///叠加层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Overlay {
      get { return overlay_; }
      set {
        overlay_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 6;
    private uint args_;
    /// <summary>
    ///参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Args {
      get { return args_; }
      set {
        args_ = value;
      }
    }

    /// <summary>Field number for the "fail_add" field.</summary>
    public const int FailAddFieldNumber = 7;
    private uint failAdd_;
    /// <summary>
    ///1失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FailAdd {
      get { return failAdd_; }
      set {
        failAdd_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 14;
    private uint maxHp_;
    /// <summary>
    ///最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "max_mp" field.</summary>
    public const int MaxMpFieldNumber = 15;
    private uint maxMp_;
    /// <summary>
    ///最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 16;
    private uint curHp_;
    /// <summary>
    ///最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "cur_mp" field.</summary>
    public const int CurMpFieldNumber = 17;
    private uint curMp_;
    /// <summary>
    ///最大血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    /// <summary>Field number for the "max_shield" field.</summary>
    public const int MaxShieldFieldNumber = 18;
    private uint maxShield_;
    /// <summary>
    ///最大护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxShield {
      get { return maxShield_; }
      set {
        maxShield_ = value;
      }
    }

    /// <summary>Field number for the "cur_shield" field.</summary>
    public const int CurShieldFieldNumber = 19;
    private uint curShield_;
    /// <summary>
    ///当前护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurShield {
      get { return curShield_; }
      set {
        curShield_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (BuffId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BuffId);
      }
      if (OddNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OddNum);
      }
      if (StartRound != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(StartRound);
      }
      if (Overlay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Overlay);
      }
      if (Args != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Args);
      }
      if (FailAdd != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FailAdd);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MaxHp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MaxMp);
      }
      if (CurHp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CurHp);
      }
      if (CurMp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(CurMp);
      }
      if (MaxShield != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(MaxShield);
      }
      if (CurShield != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(CurShield);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffId);
      }
      if (OddNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OddNum);
      }
      if (StartRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartRound);
      }
      if (Overlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Overlay);
      }
      if (Args != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Args);
      }
      if (FailAdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FailAdd);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMp);
      }
      if (CurHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurHp);
      }
      if (CurMp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurMp);
      }
      if (MaxShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxShield);
      }
      if (CurShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurShield);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            BuffId = input.ReadUInt32();
            break;
          }
          case 24: {
            OddNum = input.ReadUInt32();
            break;
          }
          case 32: {
            StartRound = input.ReadUInt32();
            break;
          }
          case 40: {
            Overlay = input.ReadUInt32();
            break;
          }
          case 48: {
            Args = input.ReadUInt32();
            break;
          }
          case 56: {
            FailAdd = input.ReadUInt32();
            break;
          }
          case 112: {
            MaxHp = input.ReadUInt32();
            break;
          }
          case 120: {
            MaxMp = input.ReadUInt32();
            break;
          }
          case 128: {
            CurHp = input.ReadUInt32();
            break;
          }
          case 136: {
            CurMp = input.ReadUInt32();
            break;
          }
          case 144: {
            MaxShield = input.ReadUInt32();
            break;
          }
          case 152: {
            CurShield = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class UnitPosinfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitPosinfo> _parser = new pb::MessageParser<UnitPosinfo>(() => new UnitPosinfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitPosinfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleUnitChange : pb::IMessage {
    private static readonly pb::MessageParser<BattleUnitChange> _parser = new pb::MessageParser<BattleUnitChange>(() => new BattleUnitChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUnitChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "del_unit_id" field.</summary>
    public const int DelUnitIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_delUnitId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> delUnitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///删除对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DelUnitId {
      get { return delUnitId_; }
    }

    /// <summary>Field number for the "new_units" field.</summary>
    public const int NewUnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleUnit> _repeated_newUnits_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleUnit> newUnits_ = new pbc::RepeatedField<global::Packet.BattleUnit>();
    /// <summary>
    ///行加入对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleUnit> NewUnits {
      get { return newUnits_; }
    }

    /// <summary>Field number for the "del_fail_unit_id" field.</summary>
    public const int DelFailUnitIdFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_delFailUnitId_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> delFailUnitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///删除对象失败id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DelFailUnitId {
      get { return delFailUnitId_; }
    }

    /// <summary>Field number for the "escape_unit_id" field.</summary>
    public const int EscapeUnitIdFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_escapeUnitId_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> escapeUnitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///逃跑单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EscapeUnitId {
      get { return escapeUnitId_; }
    }

    /// <summary>Field number for the "escape_fail_unit_id" field.</summary>
    public const int EscapeFailUnitIdFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_escapeFailUnitId_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> escapeFailUnitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///逃跑失败单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> EscapeFailUnitId {
      get { return escapeFailUnitId_; }
    }

    /// <summary>Field number for the "unit_pos_change" field.</summary>
    public const int UnitPosChangeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.UnitPosinfo> _repeated_unitPosChange_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.UnitPosinfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.UnitPosinfo> unitPosChange_ = new pbc::RepeatedField<global::Packet.UnitPosinfo>();
    /// <summary>
    ///位置变更
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.UnitPosinfo> UnitPosChange {
      get { return unitPosChange_; }
    }

    /// <summary>Field number for the "replace_type" field.</summary>
    public const int ReplaceTypeFieldNumber = 7;
    private uint replaceType_;
    /// <summary>
    ///1 附身  2 击飞  3,闪现 4 逃跑 5技能击飞 6死亡消失 7变身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReplaceType {
      get { return replaceType_; }
      set {
        replaceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      delUnitId_.WriteTo(output, _repeated_delUnitId_codec);
      newUnits_.WriteTo(output, _repeated_newUnits_codec);
      delFailUnitId_.WriteTo(output, _repeated_delFailUnitId_codec);
      escapeUnitId_.WriteTo(output, _repeated_escapeUnitId_codec);
      escapeFailUnitId_.WriteTo(output, _repeated_escapeFailUnitId_codec);
      unitPosChange_.WriteTo(output, _repeated_unitPosChange_codec);
      if (ReplaceType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ReplaceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += delUnitId_.CalculateSize(_repeated_delUnitId_codec);
      size += newUnits_.CalculateSize(_repeated_newUnits_codec);
      size += delFailUnitId_.CalculateSize(_repeated_delFailUnitId_codec);
      size += escapeUnitId_.CalculateSize(_repeated_escapeUnitId_codec);
      size += escapeFailUnitId_.CalculateSize(_repeated_escapeFailUnitId_codec);
      size += unitPosChange_.CalculateSize(_repeated_unitPosChange_codec);
      if (ReplaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReplaceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            delUnitId_.AddEntriesFrom(input, _repeated_delUnitId_codec);
            break;
          }
          case 18: {
            newUnits_.AddEntriesFrom(input, _repeated_newUnits_codec);
            break;
          }
          case 26:
          case 24: {
            delFailUnitId_.AddEntriesFrom(input, _repeated_delFailUnitId_codec);
            break;
          }
          case 34:
          case 32: {
            escapeUnitId_.AddEntriesFrom(input, _repeated_escapeUnitId_codec);
            break;
          }
          case 42:
          case 40: {
            escapeFailUnitId_.AddEntriesFrom(input, _repeated_escapeFailUnitId_codec);
            break;
          }
          case 50: {
            unitPosChange_.AddEntriesFrom(input, _repeated_unitPosChange_codec);
            break;
          }
          case 56: {
            ReplaceType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleStageChange : pb::IMessage {
    private static readonly pb::MessageParser<BattleStageChange> _parser = new pb::MessageParser<BattleStageChange>(() => new BattleStageChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleStageChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "new_stage" field.</summary>
    public const int NewStageFieldNumber = 1;
    private uint newStage_;
    /// <summary>
    ///boss战 新阶段开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewStage {
      get { return newStage_; }
      set {
        newStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewStage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NewStage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewStage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NewStage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattlePassiveTri : pb::IMessage {
    private static readonly pb::MessageParser<BattlePassiveTri> _parser = new pb::MessageParser<BattlePassiveTri>(() => new BattlePassiveTri());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePassiveTri> Parser { get { return _parser; } }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 1;
    private uint passiveId_;
    /// <summary>
    ///被动ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "src_unit_id" field.</summary>
    public const int SrcUnitIdFieldNumber = 2;
    private uint srcUnitId_;
    /// <summary>
    ///被动单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUnitId {
      get { return srcUnitId_; }
      set {
        srcUnitId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_id" field.</summary>
    public const int TriggerIdFieldNumber = 3;
    private uint triggerId_;
    /// <summary>
    ///tigger自增id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TriggerId {
      get { return triggerId_; }
      set {
        triggerId_ = value;
      }
    }

    /// <summary>Field number for the "isPassive" field.</summary>
    public const int IsPassiveFieldNumber = 4;
    private bool isPassive_;
    /// <summary>
    ///被动技能标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassive {
      get { return isPassive_; }
      set {
        isPassive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PassiveId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PassiveId);
      }
      if (SrcUnitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SrcUnitId);
      }
      if (TriggerId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TriggerId);
      }
      if (IsPassive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPassive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassiveId);
      }
      if (SrcUnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUnitId);
      }
      if (TriggerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TriggerId);
      }
      if (IsPassive != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PassiveId = input.ReadUInt32();
            break;
          }
          case 16: {
            SrcUnitId = input.ReadUInt32();
            break;
          }
          case 24: {
            TriggerId = input.ReadUInt32();
            break;
          }
          case 32: {
            IsPassive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleItemChange : pb::IMessage {
    private static readonly pb::MessageParser<BattleItemChange> _parser = new pb::MessageParser<BattleItemChange>(() => new BattleItemChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleItemChange> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    /// <summary>
    ///道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleUnitBase : pb::IMessage {
    private static readonly pb::MessageParser<BattleUnitBase> _parser = new pb::MessageParser<BattleUnitBase>(() => new BattleUnitBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUnitBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 2;
    private uint race_;
    /// <summary>
    ///种族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "shapeShiftId" field.</summary>
    public const int ShapeShiftIdFieldNumber = 3;
    private uint shapeShiftId_;
    /// <summary>
    ///变身id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShapeShiftId {
      get { return shapeShiftId_; }
      set {
        shapeShiftId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (Race != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Race);
      }
      if (ShapeShiftId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ShapeShiftId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Race);
      }
      if (ShapeShiftId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShapeShiftId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            Race = input.ReadUInt32();
            break;
          }
          case 24: {
            ShapeShiftId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每次的效果执行对应中间的一次data，所有单位的数据变化通过data下发，一次data只包含一个变化
  /// </summary>
  public sealed class ExcuteData : pb::IMessage {
    private static readonly pb::MessageParser<ExcuteData> _parser = new pb::MessageParser<ExcuteData>(() => new ExcuteData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExcuteData> Parser { get { return _parser; } }

    /// <summary>Field number for the "hp_change" field.</summary>
    public const int HpChangeFieldNumber = 1;
    private global::Packet.BattleHpMpChange hpChange_;
    /// <summary>
    ///血量变化，攻击效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleHpMpChange HpChange {
      get { return hpChange_; }
      set {
        hpChange_ = value;
      }
    }

    /// <summary>Field number for the "buff_change" field.</summary>
    public const int BuffChangeFieldNumber = 2;
    private global::Packet.BattleBuffChange buffChange_;
    /// <summary>
    ///buff变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleBuffChange BuffChange {
      get { return buffChange_; }
      set {
        buffChange_ = value;
      }
    }

    /// <summary>Field number for the "units_change" field.</summary>
    public const int UnitsChangeFieldNumber = 3;
    private global::Packet.BattleUnitChange unitsChange_;
    /// <summary>
    ///在场单位变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleUnitChange UnitsChange {
      get { return unitsChange_; }
      set {
        unitsChange_ = value;
      }
    }

    /// <summary>Field number for the "stage_change" field.</summary>
    public const int StageChangeFieldNumber = 4;
    private global::Packet.BattleStageChange stageChange_;
    /// <summary>
    ///战斗阶段变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleStageChange StageChange {
      get { return stageChange_; }
      set {
        stageChange_ = value;
      }
    }

    /// <summary>Field number for the "passive_tri" field.</summary>
    public const int PassiveTriFieldNumber = 5;
    private global::Packet.BattlePassiveTri passiveTri_;
    /// <summary>
    ///被动触发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePassiveTri PassiveTri {
      get { return passiveTri_; }
      set {
        passiveTri_ = value;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 6;
    private uint node_;
    /// <summary>
    ///目标节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "extend_id" field.</summary>
    public const int ExtendIdFieldNumber = 7;
    private ulong extendId_;
    /// <summary>
    ///前16位 0 主动效果 1 被动  2 Buff 3技能行动前 4 光环 5反击 6 直接执行技能行为(这个技能没效果但是有表现目前宠物nono)   中16位触发者unit_id    后32 被动触发ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExtendId {
      get { return extendId_; }
      set {
        extendId_ = value;
      }
    }

    /// <summary>Field number for the "bo" field.</summary>
    public const int BoFieldNumber = 8;
    private int bo_;
    /// <summary>
    ///技能连击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bo {
      get { return bo_; }
      set {
        bo_ = value;
      }
    }

    /// <summary>Field number for the "unit_base" field.</summary>
    public const int UnitBaseFieldNumber = 9;
    private global::Packet.BattleUnitBase unitBase_;
    /// <summary>
    ///在场单位基础信息变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleUnitBase UnitBase {
      get { return unitBase_; }
      set {
        unitBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hpChange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HpChange);
      }
      if (buffChange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BuffChange);
      }
      if (unitsChange_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UnitsChange);
      }
      if (stageChange_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StageChange);
      }
      if (passiveTri_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PassiveTri);
      }
      if (Node != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Node);
      }
      if (ExtendId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ExtendId);
      }
      if (Bo != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bo);
      }
      if (unitBase_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UnitBase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hpChange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HpChange);
      }
      if (buffChange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuffChange);
      }
      if (unitsChange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitsChange);
      }
      if (stageChange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StageChange);
      }
      if (passiveTri_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PassiveTri);
      }
      if (Node != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Node);
      }
      if (ExtendId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtendId);
      }
      if (Bo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bo);
      }
      if (unitBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitBase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hpChange_ == null) {
              hpChange_ = new global::Packet.BattleHpMpChange();
            }
            input.ReadMessage(hpChange_);
            break;
          }
          case 18: {
            if (buffChange_ == null) {
              buffChange_ = new global::Packet.BattleBuffChange();
            }
            input.ReadMessage(buffChange_);
            break;
          }
          case 26: {
            if (unitsChange_ == null) {
              unitsChange_ = new global::Packet.BattleUnitChange();
            }
            input.ReadMessage(unitsChange_);
            break;
          }
          case 34: {
            if (stageChange_ == null) {
              stageChange_ = new global::Packet.BattleStageChange();
            }
            input.ReadMessage(stageChange_);
            break;
          }
          case 42: {
            if (passiveTri_ == null) {
              passiveTri_ = new global::Packet.BattlePassiveTri();
            }
            input.ReadMessage(passiveTri_);
            break;
          }
          case 48: {
            Node = input.ReadUInt32();
            break;
          }
          case 56: {
            ExtendId = input.ReadUInt64();
            break;
          }
          case 64: {
            Bo = input.ReadInt32();
            break;
          }
          case 74: {
            if (unitBase_ == null) {
              unitBase_ = new global::Packet.BattleUnitBase();
            }
            input.ReadMessage(unitBase_);
            break;
          }
        }
      }
    }

  }

  public sealed class TalkInfo : pb::IMessage {
    private static readonly pb::MessageParser<TalkInfo> _parser = new pb::MessageParser<TalkInfo>(() => new TalkInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalkInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "talk_id" field.</summary>
    public const int TalkIdFieldNumber = 2;
    private uint talkId_;
    /// <summary>
    ///喊话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TalkId {
      get { return talkId_; }
      set {
        talkId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (TalkId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TalkId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (TalkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TalkId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            TalkId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一次完成的技能释放，具体技能效果在excute_data 列表中
  /// </summary>
  public sealed class ExcuteTurn : pb::IMessage {
    private static readonly pb::MessageParser<ExcuteTurn> _parser = new pb::MessageParser<ExcuteTurn>(() => new ExcuteTurn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExcuteTurn> Parser { get { return _parser; } }

    /// <summary>Field number for the "main_cmd" field.</summary>
    public const int MainCmdFieldNumber = 2;
    private uint mainCmd_;
    /// <summary>
    ///主命令  BattleCommandId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainCmd {
      get { return mainCmd_; }
      set {
        mainCmd_ = value;
      }
    }

    /// <summary>Field number for the "sub_cmd" field.</summary>
    public const int SubCmdFieldNumber = 3;
    private uint subCmd_;
    /// <summary>
    ///子命令  SubCommandPos
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubCmd {
      get { return subCmd_; }
      set {
        subCmd_ = value;
      }
    }

    /// <summary>Field number for the "src_unit" field.</summary>
    public const int SrcUnitFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_srcUnit_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> srcUnit_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///释放源uid    源id数 >= 2 合击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SrcUnit {
      get { return srcUnit_; }
    }

    /// <summary>Field number for the "info_id" field.</summary>
    public const int InfoIdFieldNumber = 5;
    private uint infoId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    /// <summary>Field number for the "tar_pos" field.</summary>
    public const int TarPosFieldNumber = 6;
    private int tarPos_;
    /// <summary>
    /// 目标位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TarPos {
      get { return tarPos_; }
      set {
        tarPos_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_skillId_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> skillId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillId {
      get { return skillId_; }
    }

    /// <summary>Field number for the "passive_id" field.</summary>
    public const int PassiveIdFieldNumber = 8;
    private uint passiveId_;
    /// <summary>
    ///被动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PassiveId {
      get { return passiveId_; }
      set {
        passiveId_ = value;
      }
    }

    /// <summary>Field number for the "talks" field.</summary>
    public const int TalksFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Packet.TalkInfo> _repeated_talks_codec
        = pb::FieldCodec.ForMessage(98, global::Packet.TalkInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.TalkInfo> talks_ = new pbc::RepeatedField<global::Packet.TalkInfo>();
    /// <summary>
    ///喊话信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.TalkInfo> Talks {
      get { return talks_; }
    }

    /// <summary>Field number for the "excute_data" field.</summary>
    public const int ExcuteDataFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Packet.ExcuteData> _repeated_excuteData_codec
        = pb::FieldCodec.ForMessage(106, global::Packet.ExcuteData.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExcuteData> excuteData_ = new pbc::RepeatedField<global::Packet.ExcuteData>();
    /// <summary>
    ///单元变化信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExcuteData> ExcuteData {
      get { return excuteData_; }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 14;
    private uint stage_;
    /// <summary>
    ///阶段 0 执行阶段  1 回合开始 2执行结束阶段 3行动前执行 4连战怪物进场信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "item_change" field.</summary>
    public const int ItemChangeFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Packet.BattleItemChange> _repeated_itemChange_codec
        = pb::FieldCodec.ForMessage(122, global::Packet.BattleItemChange.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleItemChange> itemChange_ = new pbc::RepeatedField<global::Packet.BattleItemChange>();
    /// <summary>
    ///道具变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleItemChange> ItemChange {
      get { return itemChange_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainCmd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MainCmd);
      }
      if (SubCmd != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SubCmd);
      }
      srcUnit_.WriteTo(output, _repeated_srcUnit_codec);
      if (InfoId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(InfoId);
      }
      if (TarPos != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TarPos);
      }
      skillId_.WriteTo(output, _repeated_skillId_codec);
      if (PassiveId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PassiveId);
      }
      talks_.WriteTo(output, _repeated_talks_codec);
      excuteData_.WriteTo(output, _repeated_excuteData_codec);
      if (Stage != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Stage);
      }
      itemChange_.WriteTo(output, _repeated_itemChange_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainCmd);
      }
      if (SubCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubCmd);
      }
      size += srcUnit_.CalculateSize(_repeated_srcUnit_codec);
      if (InfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InfoId);
      }
      if (TarPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TarPos);
      }
      size += skillId_.CalculateSize(_repeated_skillId_codec);
      if (PassiveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PassiveId);
      }
      size += talks_.CalculateSize(_repeated_talks_codec);
      size += excuteData_.CalculateSize(_repeated_excuteData_codec);
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      size += itemChange_.CalculateSize(_repeated_itemChange_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            MainCmd = input.ReadUInt32();
            break;
          }
          case 24: {
            SubCmd = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            srcUnit_.AddEntriesFrom(input, _repeated_srcUnit_codec);
            break;
          }
          case 40: {
            InfoId = input.ReadUInt32();
            break;
          }
          case 48: {
            TarPos = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            skillId_.AddEntriesFrom(input, _repeated_skillId_codec);
            break;
          }
          case 64: {
            PassiveId = input.ReadUInt32();
            break;
          }
          case 98: {
            talks_.AddEntriesFrom(input, _repeated_talks_codec);
            break;
          }
          case 106: {
            excuteData_.AddEntriesFrom(input, _repeated_excuteData_codec);
            break;
          }
          case 112: {
            Stage = input.ReadUInt32();
            break;
          }
          case 122: {
            itemChange_.AddEntriesFrom(input, _repeated_itemChange_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class HeroEnerge : pb::IMessage {
    private static readonly pb::MessageParser<HeroEnerge> _parser = new pb::MessageParser<HeroEnerge>(() => new HeroEnerge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroEnerge> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "energe" field.</summary>
    public const int EnergeFieldNumber = 2;
    private uint energe_;
    /// <summary>
    ///能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energe {
      get { return energe_; }
      set {
        energe_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (Energe != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Energe);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (Energe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Energe);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            Energe = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个回合数据，turns包含多个技能数据，
  /// </summary>
  public sealed class CmdBattleRoundNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleRoundNtf> _parser = new pb::MessageParser<CmdBattleRoundNtf>(() => new CmdBattleRoundNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleRoundNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 1;
    private uint curRound_;
    /// <summary>
    ///当前回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    /// <summary>Field number for the "battle_result" field.</summary>
    public const int BattleResultFieldNumber = 3;
    private uint battleResult_;
    /// <summary>
    ///战斗结果   WinType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleResult {
      get { return battleResult_; }
      set {
        battleResult_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    ///战斗ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ExcuteTurn> _repeated_turns_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ExcuteTurn.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExcuteTurn> turns_ = new pbc::RepeatedField<global::Packet.ExcuteTurn>();
    /// <summary>
    ///执行序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExcuteTurn> Turns {
      get { return turns_; }
    }

    /// <summary>Field number for the "turns_bytes" field.</summary>
    public const int TurnsBytesFieldNumber = 5;
    private pb::ByteString turnsBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TurnsBytes {
      get { return turnsBytes_; }
      set {
        turnsBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurRound != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurRound);
      }
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
      if (BattleResult != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BattleResult);
      }
      turns_.WriteTo(output, _repeated_turns_codec);
      if (TurnsBytes.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(TurnsBytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      if (BattleResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleResult);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += turns_.CalculateSize(_repeated_turns_codec);
      if (TurnsBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TurnsBytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurRound = input.ReadUInt32();
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 24: {
            BattleResult = input.ReadUInt32();
            break;
          }
          case 34: {
            turns_.AddEntriesFrom(input, _repeated_turns_codec);
            break;
          }
          case 42: {
            TurnsBytes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class ElementAttr : pb::IMessage {
    private static readonly pb::MessageParser<ElementAttr> _parser = new pb::MessageParser<ElementAttr>(() => new ElementAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private uint attrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrId = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SkillCDInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillCDInfo> _parser = new pb::MessageParser<SkillCDInfo>(() => new SkillCDInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillCDInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_skillId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> skillId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillId {
      get { return skillId_; }
    }

    /// <summary>Field number for the "last_round" field.</summary>
    public const int LastRoundFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_lastRound_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lastRound_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LastRound {
      get { return lastRound_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skillId_.WriteTo(output, _repeated_skillId_codec);
      lastRound_.WriteTo(output, _repeated_lastRound_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skillId_.CalculateSize(_repeated_skillId_codec);
      size += lastRound_.CalculateSize(_repeated_lastRound_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            skillId_.AddEntriesFrom(input, _repeated_skillId_codec);
            break;
          }
          case 18:
          case 16: {
            lastRound_.AddEntriesFrom(input, _repeated_lastRound_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class ItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "isTeach" field.</summary>
    public const int IsTeachFieldNumber = 3;
    private bool isTeach_;
    /// <summary>
    ///是否教学关携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTeach {
      get { return isTeach_; }
      set {
        isTeach_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (IsTeach != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTeach);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (IsTeach != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTeach = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗单位数据
  /// </summary>
  public sealed class BattleUnit : pb::IMessage {
    private static readonly pb::MessageParser<BattleUnit> _parser = new pb::MessageParser<BattleUnit>(() => new BattleUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 2;
    private uint unitType_;
    /// <summary>
    /// 类型 UnitType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "unit_info_id" field.</summary>
    public const int UnitInfoIdFieldNumber = 3;
    private uint unitInfoId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitInfoId {
      get { return unitInfoId_; }
      set {
        unitInfoId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 4;
    private ulong roleId_;
    /// <summary>
    ///所属角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private int pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "show_over_round" field.</summary>
    public const int ShowOverRoundFieldNumber = 6;
    private uint showOverRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowOverRound {
      get { return showOverRound_; }
      set {
        showOverRound_ = value;
      }
    }

    /// <summary>Field number for the "unit_state" field.</summary>
    public const int UnitStateFieldNumber = 7;
    private uint unitState_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitState {
      get { return unitState_; }
      set {
        unitState_ = value;
      }
    }

    /// <summary>Field number for the "buff_list" field.</summary>
    public const int BuffListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Packet.BattleBuffChange> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(66, global::Packet.BattleBuffChange.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleBuffChange> buffList_ = new pbc::RepeatedField<global::Packet.BattleBuffChange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleBuffChange> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 9;
    private uint maxHp_;
    /// <summary>
    ///最大血
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 10;
    private int curHp_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "max_mp" field.</summary>
    public const int MaxMpFieldNumber = 11;
    private uint maxMp_;
    /// <summary>
    ///最大魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    /// <summary>Field number for the "cur_mp" field.</summary>
    public const int CurMpFieldNumber = 12;
    private int curMp_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurMp {
      get { return curMp_; }
      set {
        curMp_ = value;
      }
    }

    /// <summary>Field number for the "auto_skill_id" field.</summary>
    public const int AutoSkillIdFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_autoSkillId_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> autoSkillId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///自动战斗技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AutoSkillId {
      get { return autoSkillId_; }
    }

    /// <summary>Field number for the "auto_fight" field.</summary>
    public const int AutoFightFieldNumber = 14;
    private int autoFight_;
    /// <summary>
    ///自动战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoFight {
      get { return autoFight_; }
      set {
        autoFight_ = value;
      }
    }

    /// <summary>Field number for the "pet_id" field.</summary>
    public const int PetIdFieldNumber = 15;
    private int petId_;
    /// <summary>
    ///宠物id;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "ele_attr" field.</summary>
    public const int EleAttrFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Packet.ElementAttr> _repeated_eleAttr_codec
        = pb::FieldCodec.ForMessage(130, global::Packet.ElementAttr.Parser);
    private readonly pbc::RepeatedField<global::Packet.ElementAttr> eleAttr_ = new pbc::RepeatedField<global::Packet.ElementAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ElementAttr> EleAttr {
      get { return eleAttr_; }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 17;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "tag_compose_id" field.</summary>
    public const int TagComposeIdFieldNumber = 18;
    private int tagComposeId_;
    /// <summary>
    /// unit_id * 10000 + tag_id * 100 + is_leader * 10 + target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagComposeId {
      get { return tagComposeId_; }
      set {
        tagComposeId_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 19;
    private int side_;
    /// <summary>
    /// 0 attacker 1 deffender
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "sinfo_id" field.</summary>
    public const int SinfoIdFieldNumber = 20;
    private int sinfoId_;
    /// <summary>
    ///模拟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SinfoId {
      get { return sinfoId_; }
      set {
        sinfoId_ = value;
      }
    }

    /// <summary>Field number for the "pet_name" field.</summary>
    public const int PetNameFieldNumber = 21;
    private pb::ByteString petName_ = pb::ByteString.Empty;
    /// <summary>
    ///宠物名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PetName {
      get { return petName_; }
      set {
        petName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weapon_id" field.</summary>
    public const int WeaponIdFieldNumber = 22;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "fashionInfo" field.</summary>
    public const int FashionInfoFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Packet.MapRoleFashionInfo> _repeated_fashionInfo_codec
        = pb::FieldCodec.ForMessage(186, global::Packet.MapRoleFashionInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.MapRoleFashionInfo> fashionInfo_ = new pbc::RepeatedField<global::Packet.MapRoleFashionInfo>();
    /// <summary>
    ///主角时装
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.MapRoleFashionInfo> FashionInfo {
      get { return fashionInfo_; }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 24;
    private pb::ByteString roleName_ = pb::ByteString.Empty;
    /// <summary>
    ///主角名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "energe" field.</summary>
    public const int EnergeFieldNumber = 25;
    private uint energe_;
    /// <summary>
    ///能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energe {
      get { return energe_; }
      set {
        energe_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 26;
    private global::Packet.SkillCDInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.SkillCDInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "full_pet" field.</summary>
    public const int FullPetFieldNumber = 27;
    private uint fullPet_;
    /// <summary>
    ///满档宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FullPet {
      get { return fullPet_; }
      set {
        fullPet_ = value;
      }
    }

    /// <summary>Field number for the "role_career" field.</summary>
    public const int RoleCareerFieldNumber = 28;
    private uint roleCareer_;
    /// <summary>
    ///主角职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleCareer {
      get { return roleCareer_; }
      set {
        roleCareer_ = value;
      }
    }

    /// <summary>Field number for the "iteminfo" field.</summary>
    public const int IteminfoFieldNumber = 29;
    private static readonly pb::FieldCodec<global::Packet.ItemInfo> _repeated_iteminfo_codec
        = pb::FieldCodec.ForMessage(234, global::Packet.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.ItemInfo> iteminfo_ = new pbc::RepeatedField<global::Packet.ItemInfo>();
    /// <summary>
    ///携带道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ItemInfo> Iteminfo {
      get { return iteminfo_; }
    }

    /// <summary>Field number for the "reputationLvl" field.</summary>
    public const int ReputationLvlFieldNumber = 30;
    private uint reputationLvl_;
    /// <summary>
    ///当前声望等级(声望段位等级×100 + 该段位下具体等级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationLvl {
      get { return reputationLvl_; }
      set {
        reputationLvl_ = value;
      }
    }

    /// <summary>Field number for the "reputationVal" field.</summary>
    public const int ReputationValFieldNumber = 31;
    private uint reputationVal_;
    /// <summary>
    ///当前声望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReputationVal {
      get { return reputationVal_; }
      set {
        reputationVal_ = value;
      }
    }

    /// <summary>Field number for the "petSuitAppearance" field.</summary>
    public const int PetSuitAppearanceFieldNumber = 32;
    private uint petSuitAppearance_;
    /// <summary>
    ///宠物套装id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSuitAppearance {
      get { return petSuitAppearance_; }
      set {
        petSuitAppearance_ = value;
      }
    }

    /// <summary>Field number for the "server_unit_Type" field.</summary>
    public const int ServerUnitTypeFieldNumber = 33;
    private uint serverUnitType_;
    /// <summary>
    ///服务端uniType (8模拟真人)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerUnitType {
      get { return serverUnitType_; }
      set {
        serverUnitType_ = value;
      }
    }

    /// <summary>Field number for the "useItemTimes" field.</summary>
    public const int UseItemTimesFieldNumber = 34;
    private static readonly pb::FieldCodec<uint> _repeated_useItemTimes_codec
        = pb::FieldCodec.ForUInt32(274);
    private readonly pbc::RepeatedField<uint> useItemTimes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///使用道具数量(下标0普通药品，1高级药品)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UseItemTimes {
      get { return useItemTimes_; }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 35;
    private uint race_;
    /// <summary>
    ///种族
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "shapeShiftId" field.</summary>
    public const int ShapeShiftIdFieldNumber = 36;
    private uint shapeShiftId_;
    /// <summary>
    ///变身id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShapeShiftId {
      get { return shapeShiftId_; }
      set {
        shapeShiftId_ = value;
      }
    }

    /// <summary>Field number for the "peteffect" field.</summary>
    public const int PeteffectFieldNumber = 37;
    private uint peteffect_;
    /// <summary>
    ///宠物改造特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Peteffect {
      get { return peteffect_; }
      set {
        peteffect_ = value;
      }
    }

    /// <summary>Field number for the "petSoul" field.</summary>
    public const int PetSoulFieldNumber = 38;
    private bool petSoul_;
    /// <summary>
    ///是否拥有满级魂珠特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PetSoul {
      get { return petSoul_; }
      set {
        petSoul_ = value;
      }
    }

    /// <summary>Field number for the "max_shield" field.</summary>
    public const int MaxShieldFieldNumber = 39;
    private uint maxShield_;
    /// <summary>
    ///最大护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxShield {
      get { return maxShield_; }
      set {
        maxShield_ = value;
      }
    }

    /// <summary>Field number for the "cur_shield" field.</summary>
    public const int CurShieldFieldNumber = 40;
    private int curShield_;
    /// <summary>
    ///当前护盾
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurShield {
      get { return curShield_; }
      set {
        curShield_ = value;
      }
    }

    /// <summary>Field number for the "isUseShapeShift" field.</summary>
    public const int IsUseShapeShiftFieldNumber = 41;
    private uint isUseShapeShift_;
    /// <summary>
    ///是否使用变身形象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsUseShapeShift {
      get { return isUseShapeShift_; }
      set {
        isUseShapeShift_ = value;
      }
    }

    /// <summary>Field number for the "max_gas" field.</summary>
    public const int MaxGasFieldNumber = 42;
    private int maxGas_;
    /// <summary>
    ///最大气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxGas {
      get { return maxGas_; }
      set {
        maxGas_ = value;
      }
    }

    /// <summary>Field number for the "cur_gas" field.</summary>
    public const int CurGasFieldNumber = 43;
    private int curGas_;
    /// <summary>
    ///当前气值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurGas {
      get { return curGas_; }
      set {
        curGas_ = value;
      }
    }

    /// <summary>Field number for the "petFashionInfo" field.</summary>
    public const int PetFashionInfoFieldNumber = 44;
    private uint petFashionInfo_;
    /// <summary>
    ///宠物外观 时装ID*10 + 颜色索引(0,1,2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetFashionInfo {
      get { return petFashionInfo_; }
      set {
        petFashionInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (UnitType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnitType);
      }
      if (UnitInfoId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnitInfoId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleId);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pos);
      }
      if (ShowOverRound != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ShowOverRound);
      }
      if (UnitState != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UnitState);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      if (MaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaxHp);
      }
      if (CurHp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CurHp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MaxMp);
      }
      if (CurMp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurMp);
      }
      autoSkillId_.WriteTo(output, _repeated_autoSkillId_codec);
      if (AutoFight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AutoFight);
      }
      if (PetId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PetId);
      }
      eleAttr_.WriteTo(output, _repeated_eleAttr_codec);
      if (Level != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Level);
      }
      if (TagComposeId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TagComposeId);
      }
      if (Side != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Side);
      }
      if (SinfoId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SinfoId);
      }
      if (PetName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(PetName);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WeaponId);
      }
      fashionInfo_.WriteTo(output, _repeated_fashionInfo_codec);
      if (RoleName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(RoleName);
      }
      if (Energe != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Energe);
      }
      if (info_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Info);
      }
      if (FullPet != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(FullPet);
      }
      if (RoleCareer != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(RoleCareer);
      }
      iteminfo_.WriteTo(output, _repeated_iteminfo_codec);
      if (ReputationLvl != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ReputationLvl);
      }
      if (ReputationVal != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(ReputationVal);
      }
      if (PetSuitAppearance != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(PetSuitAppearance);
      }
      if (ServerUnitType != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ServerUnitType);
      }
      useItemTimes_.WriteTo(output, _repeated_useItemTimes_codec);
      if (Race != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Race);
      }
      if (ShapeShiftId != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ShapeShiftId);
      }
      if (Peteffect != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Peteffect);
      }
      if (PetSoul != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(PetSoul);
      }
      if (MaxShield != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(MaxShield);
      }
      if (CurShield != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(CurShield);
      }
      if (IsUseShapeShift != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(IsUseShapeShift);
      }
      if (MaxGas != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(MaxGas);
      }
      if (CurGas != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(CurGas);
      }
      if (PetFashionInfo != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(PetFashionInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (UnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitType);
      }
      if (UnitInfoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitInfoId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (ShowOverRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowOverRound);
      }
      if (UnitState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitState);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHp);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxMp);
      }
      if (CurMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMp);
      }
      size += autoSkillId_.CalculateSize(_repeated_autoSkillId_codec);
      if (AutoFight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoFight);
      }
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PetId);
      }
      size += eleAttr_.CalculateSize(_repeated_eleAttr_codec);
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (TagComposeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TagComposeId);
      }
      if (Side != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (SinfoId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SinfoId);
      }
      if (PetName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PetName);
      }
      if (WeaponId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      size += fashionInfo_.CalculateSize(_repeated_fashionInfo_codec);
      if (RoleName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(RoleName);
      }
      if (Energe != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Energe);
      }
      if (info_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (FullPet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FullPet);
      }
      if (RoleCareer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RoleCareer);
      }
      size += iteminfo_.CalculateSize(_repeated_iteminfo_codec);
      if (ReputationLvl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReputationLvl);
      }
      if (ReputationVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReputationVal);
      }
      if (PetSuitAppearance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PetSuitAppearance);
      }
      if (ServerUnitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServerUnitType);
      }
      size += useItemTimes_.CalculateSize(_repeated_useItemTimes_codec);
      if (Race != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Race);
      }
      if (ShapeShiftId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShapeShiftId);
      }
      if (Peteffect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Peteffect);
      }
      if (PetSoul != false) {
        size += 2 + 1;
      }
      if (MaxShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxShield);
      }
      if (CurShield != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurShield);
      }
      if (IsUseShapeShift != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsUseShapeShift);
      }
      if (MaxGas != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxGas);
      }
      if (CurGas != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurGas);
      }
      if (PetFashionInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PetFashionInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 16: {
            UnitType = input.ReadUInt32();
            break;
          }
          case 24: {
            UnitInfoId = input.ReadUInt32();
            break;
          }
          case 32: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 40: {
            Pos = input.ReadInt32();
            break;
          }
          case 48: {
            ShowOverRound = input.ReadUInt32();
            break;
          }
          case 56: {
            UnitState = input.ReadUInt32();
            break;
          }
          case 66: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 72: {
            MaxHp = input.ReadUInt32();
            break;
          }
          case 80: {
            CurHp = input.ReadInt32();
            break;
          }
          case 88: {
            MaxMp = input.ReadUInt32();
            break;
          }
          case 96: {
            CurMp = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            autoSkillId_.AddEntriesFrom(input, _repeated_autoSkillId_codec);
            break;
          }
          case 112: {
            AutoFight = input.ReadInt32();
            break;
          }
          case 120: {
            PetId = input.ReadInt32();
            break;
          }
          case 130: {
            eleAttr_.AddEntriesFrom(input, _repeated_eleAttr_codec);
            break;
          }
          case 136: {
            Level = input.ReadInt32();
            break;
          }
          case 144: {
            TagComposeId = input.ReadInt32();
            break;
          }
          case 152: {
            Side = input.ReadInt32();
            break;
          }
          case 160: {
            SinfoId = input.ReadInt32();
            break;
          }
          case 170: {
            PetName = input.ReadBytes();
            break;
          }
          case 176: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 186: {
            fashionInfo_.AddEntriesFrom(input, _repeated_fashionInfo_codec);
            break;
          }
          case 194: {
            RoleName = input.ReadBytes();
            break;
          }
          case 200: {
            Energe = input.ReadUInt32();
            break;
          }
          case 210: {
            if (info_ == null) {
              info_ = new global::Packet.SkillCDInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 216: {
            FullPet = input.ReadUInt32();
            break;
          }
          case 224: {
            RoleCareer = input.ReadUInt32();
            break;
          }
          case 234: {
            iteminfo_.AddEntriesFrom(input, _repeated_iteminfo_codec);
            break;
          }
          case 240: {
            ReputationLvl = input.ReadUInt32();
            break;
          }
          case 248: {
            ReputationVal = input.ReadUInt32();
            break;
          }
          case 256: {
            PetSuitAppearance = input.ReadUInt32();
            break;
          }
          case 264: {
            ServerUnitType = input.ReadUInt32();
            break;
          }
          case 274:
          case 272: {
            useItemTimes_.AddEntriesFrom(input, _repeated_useItemTimes_codec);
            break;
          }
          case 280: {
            Race = input.ReadUInt32();
            break;
          }
          case 288: {
            ShapeShiftId = input.ReadUInt32();
            break;
          }
          case 296: {
            Peteffect = input.ReadUInt32();
            break;
          }
          case 304: {
            PetSoul = input.ReadBool();
            break;
          }
          case 312: {
            MaxShield = input.ReadUInt32();
            break;
          }
          case 320: {
            CurShield = input.ReadInt32();
            break;
          }
          case 328: {
            IsUseShapeShift = input.ReadUInt32();
            break;
          }
          case 336: {
            MaxGas = input.ReadInt32();
            break;
          }
          case 344: {
            CurGas = input.ReadInt32();
            break;
          }
          case 352: {
            PetFashionInfo = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗开始，下发单位数据
  /// </summary>
  public sealed class CmdBattleStartNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleStartNtf> _parser = new pb::MessageParser<CmdBattleStartNtf>(() => new CmdBattleStartNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleStartNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleUnit> units_ = new pbc::RepeatedField<global::Packet.BattleUnit>();
    /// <summary>
    ///战斗对象数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleUnit> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 3;
    private uint levelId_;
    /// <summary>
    ///对应关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "uints" field.</summary>
    public const int UintsFieldNumber = 4;
    private global::Packet.BattleUnitChange uints_;
    /// <summary>
    ///战斗单位变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleUnitChange Uints {
      get { return uints_; }
      set {
        uints_ = value;
      }
    }

    /// <summary>Field number for the "monster_group_id" field.</summary>
    public const int MonsterGroupIdFieldNumber = 5;
    private uint monsterGroupId_;
    /// <summary>
    ///怪物组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterGroupId {
      get { return monsterGroupId_; }
      set {
        monsterGroupId_ = value;
      }
    }

    /// <summary>Field number for the "battle_type_id" field.</summary>
    public const int BattleTypeIdFieldNumber = 6;
    private uint battleTypeId_;
    /// <summary>
    ///战斗类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleTypeId {
      get { return battleTypeId_; }
      set {
        battleTypeId_ = value;
      }
    }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 7;
    private global::Packet.BattlePetList pet_;
    /// <summary>
    ///宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePetList Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    /// <summary>Field number for the "show_speed" field.</summary>
    public const int ShowSpeedFieldNumber = 8;
    private uint showSpeed_;
    /// <summary>
    ///播放倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowSpeed {
      get { return showSpeed_; }
      set {
        showSpeed_ = value;
      }
    }

    /// <summary>Field number for the "teachid" field.</summary>
    public const int TeachidFieldNumber = 9;
    private uint teachid_;
    /// <summary>
    ///教学关id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teachid {
      get { return teachid_; }
      set {
        teachid_ = value;
      }
    }

    /// <summary>Field number for the "stageSwitch" field.</summary>
    public const int StageSwitchFieldNumber = 10;
    private uint stageSwitch_;
    /// <summary>
    ///阶段转换阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageSwitch {
      get { return stageSwitch_; }
      set {
        stageSwitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelId);
      }
      if (uints_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Uints);
      }
      if (MonsterGroupId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MonsterGroupId);
      }
      if (BattleTypeId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BattleTypeId);
      }
      if (pet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Pet);
      }
      if (ShowSpeed != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ShowSpeed);
      }
      if (Teachid != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Teachid);
      }
      if (StageSwitch != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(StageSwitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelId);
      }
      if (uints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uints);
      }
      if (MonsterGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterGroupId);
      }
      if (BattleTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleTypeId);
      }
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      if (ShowSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowSpeed);
      }
      if (Teachid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teachid);
      }
      if (StageSwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageSwitch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 24: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 34: {
            if (uints_ == null) {
              uints_ = new global::Packet.BattleUnitChange();
            }
            input.ReadMessage(uints_);
            break;
          }
          case 40: {
            MonsterGroupId = input.ReadUInt32();
            break;
          }
          case 48: {
            BattleTypeId = input.ReadUInt32();
            break;
          }
          case 58: {
            if (pet_ == null) {
              pet_ = new global::Packet.BattlePetList();
            }
            input.ReadMessage(pet_);
            break;
          }
          case 64: {
            ShowSpeed = input.ReadUInt32();
            break;
          }
          case 72: {
            Teachid = input.ReadUInt32();
            break;
          }
          case 80: {
            StageSwitch = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能信息
  /// </summary>
  public sealed class SkillColdDwonInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillColdDwonInfo> _parser = new pb::MessageParser<SkillColdDwonInfo>(() => new SkillColdDwonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillColdDwonInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "last_round" field.</summary>
    public const int LastRoundFieldNumber = 2;
    private int lastRound_;
    /// <summary>
    ///最后一个轮次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRound {
      get { return lastRound_; }
      set {
        lastRound_ = value;
      }
    }

    /// <summary>Field number for the "hero_or_pet" field.</summary>
    public const int HeroOrPetFieldNumber = 3;
    private int heroOrPet_;
    /// <summary>
    /// 1 hero ; 2 pet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroOrPet {
      get { return heroOrPet_; }
      set {
        heroOrPet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (LastRound != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastRound);
      }
      if (HeroOrPet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HeroOrPet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (LastRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRound);
      }
      if (HeroOrPet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroOrPet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            LastRound = input.ReadInt32();
            break;
          }
          case 24: {
            HeroOrPet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattleInfo> _parser = new pb::MessageParser<BattleInfo>(() => new BattleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleUnit> units_ = new pbc::RepeatedField<global::Packet.BattleUnit>();
    /// <summary>
    ///战斗对象数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleUnit> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 3;
    private uint levelId_;
    /// <summary>
    ///对应关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 4;
    private uint curRound_;
    /// <summary>
    ///当前回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    /// <summary>Field number for the "ntf" field.</summary>
    public const int NtfFieldNumber = 5;
    private global::Packet.CmdBattleRoundNtf ntf_;
    /// <summary>
    ///当前回合执行结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdBattleRoundNtf Ntf {
      get { return ntf_; }
      set {
        ntf_ = value;
      }
    }

    /// <summary>Field number for the "battle_state" field.</summary>
    public const int BattleStateFieldNumber = 6;
    private uint battleState_;
    /// <summary>
    ///当前状态 3等待命令状态 ，已经等待 excute_time 秒. 4执行结果状态， ntf 为结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleState {
      get { return battleState_; }
      set {
        battleState_ = value;
      }
    }

    /// <summary>Field number for the "excute_time" field.</summary>
    public const int ExcuteTimeFieldNumber = 7;
    private uint excuteTime_;
    /// <summary>
    ///执行时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExcuteTime {
      get { return excuteTime_; }
      set {
        excuteTime_ = value;
      }
    }

    /// <summary>Field number for the "monster_group_id" field.</summary>
    public const int MonsterGroupIdFieldNumber = 8;
    private uint monsterGroupId_;
    /// <summary>
    ///怪物组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterGroupId {
      get { return monsterGroupId_; }
      set {
        monsterGroupId_ = value;
      }
    }

    /// <summary>Field number for the "battle_type_id" field.</summary>
    public const int BattleTypeIdFieldNumber = 9;
    private uint battleTypeId_;
    /// <summary>
    ///战斗类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleTypeId {
      get { return battleTypeId_; }
      set {
        battleTypeId_ = value;
      }
    }

    /// <summary>Field number for the "cur_stage" field.</summary>
    public const int CurStageFieldNumber = 10;
    private uint curStage_;
    /// <summary>
    ///当前阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "curstage_round" field.</summary>
    public const int CurstageRoundFieldNumber = 11;
    private uint curstageRound_;
    /// <summary>
    ///当前阶段回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurstageRound {
      get { return curstageRound_; }
      set {
        curstageRound_ = value;
      }
    }

    /// <summary>Field number for the "show_speed" field.</summary>
    public const int ShowSpeedFieldNumber = 12;
    private uint showSpeed_;
    /// <summary>
    ///播放倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShowSpeed {
      get { return showSpeed_; }
      set {
        showSpeed_ = value;
      }
    }

    /// <summary>Field number for the "teachid" field.</summary>
    public const int TeachidFieldNumber = 13;
    private uint teachid_;
    /// <summary>
    ///教学关id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Teachid {
      get { return teachid_; }
      set {
        teachid_ = value;
      }
    }

    /// <summary>Field number for the "stageSwitch" field.</summary>
    public const int StageSwitchFieldNumber = 14;
    private uint stageSwitch_;
    /// <summary>
    ///阶段转换阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageSwitch {
      get { return stageSwitch_; }
      set {
        stageSwitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelId);
      }
      if (CurRound != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurRound);
      }
      if (ntf_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ntf);
      }
      if (BattleState != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BattleState);
      }
      if (ExcuteTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ExcuteTime);
      }
      if (MonsterGroupId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MonsterGroupId);
      }
      if (BattleTypeId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BattleTypeId);
      }
      if (CurStage != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CurStage);
      }
      if (CurstageRound != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurstageRound);
      }
      if (ShowSpeed != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ShowSpeed);
      }
      if (Teachid != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Teachid);
      }
      if (StageSwitch != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(StageSwitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelId);
      }
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      if (ntf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ntf);
      }
      if (BattleState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleState);
      }
      if (ExcuteTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExcuteTime);
      }
      if (MonsterGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterGroupId);
      }
      if (BattleTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleTypeId);
      }
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurStage);
      }
      if (CurstageRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurstageRound);
      }
      if (ShowSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowSpeed);
      }
      if (Teachid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Teachid);
      }
      if (StageSwitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageSwitch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 24: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 32: {
            CurRound = input.ReadUInt32();
            break;
          }
          case 42: {
            if (ntf_ == null) {
              ntf_ = new global::Packet.CmdBattleRoundNtf();
            }
            input.ReadMessage(ntf_);
            break;
          }
          case 48: {
            BattleState = input.ReadUInt32();
            break;
          }
          case 56: {
            ExcuteTime = input.ReadUInt32();
            break;
          }
          case 64: {
            MonsterGroupId = input.ReadUInt32();
            break;
          }
          case 72: {
            BattleTypeId = input.ReadUInt32();
            break;
          }
          case 80: {
            CurStage = input.ReadUInt32();
            break;
          }
          case 88: {
            CurstageRound = input.ReadUInt32();
            break;
          }
          case 96: {
            ShowSpeed = input.ReadUInt32();
            break;
          }
          case 104: {
            Teachid = input.ReadUInt32();
            break;
          }
          case 112: {
            StageSwitch = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class WatcherInfo : pb::IMessage {
    private static readonly pb::MessageParser<WatcherInfo> _parser = new pb::MessageParser<WatcherInfo>(() => new WatcherInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatcherInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private uint side_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "bewatchid" field.</summary>
    public const int BewatchidFieldNumber = 2;
    private ulong bewatchid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bewatchid {
      get { return bewatchid_; }
      set {
        bewatchid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Side);
      }
      if (Bewatchid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Bewatchid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (Bewatchid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bewatchid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Side = input.ReadUInt32();
            break;
          }
          case 16: {
            Bewatchid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleWatchNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleWatchNtf> _parser = new pb::MessageParser<CmdBattleWatchNtf>(() => new CmdBattleWatchNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleWatchNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.BattleInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "watchinfo" field.</summary>
    public const int WatchinfoFieldNumber = 2;
    private global::Packet.WatcherInfo watchinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.WatcherInfo Watchinfo {
      get { return watchinfo_; }
      set {
        watchinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (watchinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Watchinfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (watchinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchinfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.BattleInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (watchinfo_ == null) {
              watchinfo_ = new global::Packet.WatcherInfo();
            }
            input.ReadMessage(watchinfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleResumeNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleResumeNtf> _parser = new pb::MessageParser<CmdBattleResumeNtf>(() => new CmdBattleResumeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleResumeNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Packet.BattleInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "scds" field.</summary>
    public const int ScdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.SkillColdDwonInfo> _repeated_scds_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.SkillColdDwonInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.SkillColdDwonInfo> scds_ = new pbc::RepeatedField<global::Packet.SkillColdDwonInfo>();
    /// <summary>
    ///技能冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SkillColdDwonInfo> Scds {
      get { return scds_; }
    }

    /// <summary>Field number for the "pos_type" field.</summary>
    public const int PosTypeFieldNumber = 3;
    private uint posType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 4;
    private global::Packet.BattlePetList pet_;
    /// <summary>
    ///宠物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattlePetList Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    /// <summary>Field number for the "watchinfo" field.</summary>
    public const int WatchinfoFieldNumber = 5;
    private global::Packet.WatcherInfo watchinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.WatcherInfo Watchinfo {
      get { return watchinfo_; }
      set {
        watchinfo_ = value;
      }
    }

    /// <summary>Field number for the "maincds" field.</summary>
    public const int MaincdsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Packet.SkillColdDwonInfo> _repeated_maincds_codec
        = pb::FieldCodec.ForMessage(50, global::Packet.SkillColdDwonInfo.Parser);
    private readonly pbc::RepeatedField<global::Packet.SkillColdDwonInfo> maincds_ = new pbc::RepeatedField<global::Packet.SkillColdDwonInfo>();
    /// <summary>
    ///mainskillid索引的技能冷却
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SkillColdDwonInfo> Maincds {
      get { return maincds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      scds_.WriteTo(output, _repeated_scds_codec);
      if (PosType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PosType);
      }
      if (pet_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pet);
      }
      if (watchinfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Watchinfo);
      }
      maincds_.WriteTo(output, _repeated_maincds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      size += scds_.CalculateSize(_repeated_scds_codec);
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      if (watchinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watchinfo);
      }
      size += maincds_.CalculateSize(_repeated_maincds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Packet.BattleInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            scds_.AddEntriesFrom(input, _repeated_scds_codec);
            break;
          }
          case 24: {
            PosType = input.ReadUInt32();
            break;
          }
          case 34: {
            if (pet_ == null) {
              pet_ = new global::Packet.BattlePetList();
            }
            input.ReadMessage(pet_);
            break;
          }
          case 42: {
            if (watchinfo_ == null) {
              watchinfo_ = new global::Packet.WatcherInfo();
            }
            input.ReadMessage(watchinfo_);
            break;
          }
          case 50: {
            maincds_.AddEntriesFrom(input, _repeated_maincds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleResumeEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleResumeEndNtf> _parser = new pb::MessageParser<CmdBattleResumeEndNtf>(() => new CmdBattleResumeEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleResumeEndNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBattleCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCommandReq> _parser = new pb::MessageParser<CmdBattleCommandReq>(() => new CmdBattleCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCommandReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleCommand> _repeated_cmd_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCommand> cmd_ = new pbc::RepeatedField<global::Packet.BattleCommand>();
    /// <summary>
    ///命令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCommand> Cmd {
      get { return cmd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      cmd_.WriteTo(output, _repeated_cmd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += cmd_.CalculateSize(_repeated_cmd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 18: {
            cmd_.AddEntriesFrom(input, _repeated_cmd_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BattleReplay : pb::IMessage {
    private static readonly pb::MessageParser<BattleReplay> _parser = new pb::MessageParser<BattleReplay>(() => new BattleReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReplay> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_start_ntf" field.</summary>
    public const int BattleStartNtfFieldNumber = 1;
    private pb::ByteString battleStartNtf_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BattleStartNtf {
      get { return battleStartNtf_; }
      set {
        battleStartNtf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round_start_ntf" field.</summary>
    public const int RoundStartNtfFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_roundStartNtf_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> roundStartNtf_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RoundStartNtf {
      get { return roundStartNtf_; }
    }

    /// <summary>Field number for the "round_excute_ntf" field.</summary>
    public const int RoundExcuteNtfFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_roundExcuteNtf_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> roundExcuteNtf_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RoundExcuteNtf {
      get { return roundExcuteNtf_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleStartNtf.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BattleStartNtf);
      }
      roundStartNtf_.WriteTo(output, _repeated_roundStartNtf_codec);
      roundExcuteNtf_.WriteTo(output, _repeated_roundExcuteNtf_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleStartNtf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BattleStartNtf);
      }
      size += roundStartNtf_.CalculateSize(_repeated_roundStartNtf_codec);
      size += roundExcuteNtf_.CalculateSize(_repeated_roundExcuteNtf_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BattleStartNtf = input.ReadBytes();
            break;
          }
          case 18: {
            roundStartNtf_.AddEntriesFrom(input, _repeated_roundStartNtf_codec);
            break;
          }
          case 26: {
            roundExcuteNtf_.AddEntriesFrom(input, _repeated_roundExcuteNtf_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class BattleReplayBytes : pb::IMessage {
    private static readonly pb::MessageParser<BattleReplayBytes> _parser = new pb::MessageParser<BattleReplayBytes>(() => new BattleReplayBytes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReplayBytes> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_replay_bytes" field.</summary>
    public const int BattleReplayBytes_FieldNumber = 1;
    private pb::ByteString battleReplayBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BattleReplayBytes_ {
      get { return battleReplayBytes_; }
      set {
        battleReplayBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleReplayBytes_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BattleReplayBytes_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleReplayBytes_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BattleReplayBytes_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BattleReplayBytes_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleCommandRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCommandRes> _parser = new pb::MessageParser<CmdBattleCommandRes>(() => new CmdBattleCommandRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCommandRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBattleCommandNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCommandNtf> _parser = new pb::MessageParser<CmdBattleCommandNtf>(() => new CmdBattleCommandNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCommandNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleCommand> _repeated_cmd_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCommand> cmd_ = new pbc::RepeatedField<global::Packet.BattleCommand>();
    /// <summary>
    ///攻击命令转发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCommand> Cmd {
      get { return cmd_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cmd_.WriteTo(output, _repeated_cmd_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cmd_.CalculateSize(_repeated_cmd_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cmd_.AddEntriesFrom(input, _repeated_cmd_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleStartReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleStartReq> _parser = new pb::MessageParser<CmdBattleStartReq>(() => new CmdBattleStartReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleStartReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 1;
    private uint levelId_;
    /// <summary>
    ///对应关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleStartRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleStartRes> _parser = new pb::MessageParser<CmdBattleStartRes>(() => new CmdBattleStartRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleStartRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回合开始
  /// </summary>
  public sealed class CmdBattleRoundStartNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleRoundStartNtf> _parser = new pb::MessageParser<CmdBattleRoundStartNtf>(() => new CmdBattleRoundStartNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleRoundStartNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 1;
    private uint curRound_;
    /// <summary>
    ///回合开始广播
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "turns" field.</summary>
    public const int TurnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Packet.ExcuteTurn> _repeated_turns_codec
        = pb::FieldCodec.ForMessage(34, global::Packet.ExcuteTurn.Parser);
    private readonly pbc::RepeatedField<global::Packet.ExcuteTurn> turns_ = new pbc::RepeatedField<global::Packet.ExcuteTurn>();
    /// <summary>
    ///执行序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.ExcuteTurn> Turns {
      get { return turns_; }
    }

    /// <summary>Field number for the "energes" field.</summary>
    public const int EnergesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Packet.HeroEnerge> _repeated_energes_codec
        = pb::FieldCodec.ForMessage(42, global::Packet.HeroEnerge.Parser);
    private readonly pbc::RepeatedField<global::Packet.HeroEnerge> energes_ = new pbc::RepeatedField<global::Packet.HeroEnerge>();
    /// <summary>
    ///执行序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.HeroEnerge> Energes {
      get { return energes_; }
    }

    /// <summary>Field number for the "cur_stage" field.</summary>
    public const int CurStageFieldNumber = 6;
    private uint curStage_;
    /// <summary>
    ///当前阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "curstage_round" field.</summary>
    public const int CurstageRoundFieldNumber = 7;
    private uint curstageRound_;
    /// <summary>
    ///当前阶段回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurstageRound {
      get { return curstageRound_; }
      set {
        curstageRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurRound != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurRound);
      }
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
      turns_.WriteTo(output, _repeated_turns_codec);
      energes_.WriteTo(output, _repeated_energes_codec);
      if (CurStage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurStage);
      }
      if (CurstageRound != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CurstageRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += turns_.CalculateSize(_repeated_turns_codec);
      size += energes_.CalculateSize(_repeated_energes_codec);
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurStage);
      }
      if (CurstageRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurstageRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurRound = input.ReadUInt32();
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 34: {
            turns_.AddEntriesFrom(input, _repeated_turns_codec);
            break;
          }
          case 42: {
            energes_.AddEntriesFrom(input, _repeated_energes_codec);
            break;
          }
          case 48: {
            CurStage = input.ReadUInt32();
            break;
          }
          case 56: {
            CurstageRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///前端展示完成
  /// </summary>
  public sealed class CmdBattleShowRoundEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleShowRoundEndReq> _parser = new pb::MessageParser<CmdBattleShowRoundEndReq>(() => new CmdBattleShowRoundEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleShowRoundEndReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "self_uid" field.</summary>
    public const int SelfUidFieldNumber = 2;
    private uint selfUid_;
    /// <summary>
    ///自己的uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfUid {
      get { return selfUid_; }
      set {
        selfUid_ = value;
      }
    }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 3;
    private uint curRound_;
    /// <summary>
    ///显示完成回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (SelfUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SelfUid);
      }
      if (CurRound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (SelfUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SelfUid);
      }
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            SelfUid = input.ReadUInt32();
            break;
          }
          case 24: {
            CurRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleShowRoundEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleShowRoundEndNtf> _parser = new pb::MessageParser<CmdBattleShowRoundEndNtf>(() => new CmdBattleShowRoundEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleShowRoundEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private uint endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 2;
    private uint battleId_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 3;
    private uint curRound_;
    /// <summary>
    ///结束回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EndTime);
      }
      if (BattleId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleId);
      }
      if (CurRound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 16: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 24: {
            CurRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleShowRoundEndRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleShowRoundEndRes> _parser = new pb::MessageParser<CmdBattleShowRoundEndRes>(() => new CmdBattleShowRoundEndRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleShowRoundEndRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "cur_round" field.</summary>
    public const int CurRoundFieldNumber = 1;
    private uint curRound_;
    /// <summary>
    ///结束回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurRound {
      get { return curRound_; }
      set {
        curRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurRound != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurRound);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRound);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurRound = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleReward : pb::IMessage {
    private static readonly pb::MessageParser<BattleReward> _parser = new pb::MessageParser<BattleReward>(() => new BattleReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReward> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleReward.Types.ItemBase> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleReward.Types.ItemBase.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleReward.Types.ItemBase> items_ = new pbc::RepeatedField<global::Packet.BattleReward.Types.ItemBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleReward.Types.ItemBase> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattleReward.Types.SkillExp> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattleReward.Types.SkillExp.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleReward.Types.SkillExp> skills_ = new pbc::RepeatedField<global::Packet.BattleReward.Types.SkillExp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleReward.Types.SkillExp> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleReward message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class ItemBase : pb::IMessage {
        private static readonly pb::MessageParser<ItemBase> _parser = new pb::MessageParser<ItemBase>(() => new ItemBase());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemBase> Parser { get { return _parser; } }

        /// <summary>Field number for the "infoid" field.</summary>
        public const int InfoidFieldNumber = 1;
        private uint infoid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Infoid {
          get { return infoid_; }
          set {
            infoid_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private uint count_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Infoid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Infoid);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Infoid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Infoid);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Infoid = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class SkillExp : pb::IMessage {
        private static readonly pb::MessageParser<SkillExp> _parser = new pb::MessageParser<SkillExp>(() => new SkillExp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SkillExp> Parser { get { return _parser; } }

        /// <summary>Field number for the "skillid" field.</summary>
        public const int SkillidFieldNumber = 1;
        private uint skillid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Skillid {
          get { return skillid_; }
          set {
            skillid_ = value;
          }
        }

        /// <summary>Field number for the "addexp" field.</summary>
        public const int AddexpFieldNumber = 2;
        private uint addexp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Addexp {
          get { return addexp_; }
          set {
            addexp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Skillid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Skillid);
          }
          if (Addexp != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Addexp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Skillid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
          }
          if (Addexp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Addexp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Skillid = input.ReadUInt32();
                break;
              }
              case 16: {
                Addexp = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///战斗结束
  /// </summary>
  public sealed class CmdBattleEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleEndReq> _parser = new pb::MessageParser<CmdBattleEndReq>(() => new CmdBattleEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleEndReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleEndRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleEndRes> _parser = new pb::MessageParser<CmdBattleEndRes>(() => new CmdBattleEndRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleEndRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 决胜竞技场战斗结算额外展示
  /// </summary>
  public sealed class BattleEndVictoryArena : pb::IMessage {
    private static readonly pb::MessageParser<BattleEndVictoryArena> _parser = new pb::MessageParser<BattleEndVictoryArena>(() => new BattleEndVictoryArena());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEndVictoryArena> Parser { get { return _parser; } }

    /// <summary>Field number for the "rankBefore" field.</summary>
    public const int RankBeforeFieldNumber = 1;
    private uint rankBefore_;
    /// <summary>
    /// 原排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankBefore {
      get { return rankBefore_; }
      set {
        rankBefore_ = value;
      }
    }

    /// <summary>Field number for the "rankAfter" field.</summary>
    public const int RankAfterFieldNumber = 2;
    private uint rankAfter_;
    /// <summary>
    /// 现排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankAfter {
      get { return rankAfter_; }
      set {
        rankAfter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankBefore != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RankBefore);
      }
      if (RankAfter != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RankAfter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankBefore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankBefore);
      }
      if (RankAfter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankAfter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RankBefore = input.ReadUInt32();
            break;
          }
          case 16: {
            RankAfter = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 试炼之门战斗结算额外展示
  /// </summary>
  public sealed class BattleEndTrialGate : pb::IMessage {
    private static readonly pb::MessageParser<BattleEndTrialGate> _parser = new pb::MessageParser<BattleEndTrialGate>(() => new BattleEndTrialGate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEndTrialGate> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private uint stage_;
    /// <summary>
    /// 本次通过的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Stage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 年兽战斗结算额外展示
  /// </summary>
  public sealed class BattleEndMonsterNian : pb::IMessage {
    private static readonly pb::MessageParser<BattleEndMonsterNian> _parser = new pb::MessageParser<BattleEndMonsterNian>(() => new BattleEndMonsterNian());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEndMonsterNian> Parser { get { return _parser; } }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private uint damage_;
    /// <summary>
    /// 造成伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Damage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Damage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///boss资格挑战赛额外展示
  /// </summary>
  public sealed class BattleEndBossTower : pb::IMessage {
    private static readonly pb::MessageParser<BattleEndBossTower> _parser = new pb::MessageParser<BattleEndBossTower>(() => new BattleEndBossTower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEndBossTower> Parser { get { return _parser; } }

    /// <summary>Field number for the "isBoss" field.</summary>
    public const int IsBossFieldNumber = 1;
    private bool isBoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBoss {
      get { return isBoss_; }
      set {
        isBoss_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private uint stageId_;
    /// <summary>
    ///资格赛/boss赛关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBoss != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBoss);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBoss != false) {
        size += 1 + 1;
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBoss = input.ReadBool();
            break;
          }
          case 16: {
            StageId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleEndNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleEndNtf> _parser = new pb::MessageParser<CmdBattleEndNtf>(() => new CmdBattleEndNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleEndNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "npc_id" field.</summary>
    public const int NpcIdFieldNumber = 2;
    private ulong npcId_;
    /// <summary>
    ///npc_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcId {
      get { return npcId_; }
      set {
        npcId_ = value;
      }
    }

    /// <summary>Field number for the "battle_result" field.</summary>
    public const int BattleResultFieldNumber = 3;
    private uint battleResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleResult {
      get { return battleResult_; }
      set {
        battleResult_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private global::Packet.BattleReward rewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleReward Rewards {
      get { return rewards_; }
      set {
        rewards_ = value;
      }
    }

    /// <summary>Field number for the "battleFlag" field.</summary>
    public const int BattleFlagFieldNumber = 5;
    private uint battleFlag_;
    /// <summary>
    ///参考上边的flag 以后别的系统也可以加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleFlag {
      get { return battleFlag_; }
      set {
        battleFlag_ = value;
      }
    }

    /// <summary>Field number for the "victoryArena" field.</summary>
    public const int VictoryArenaFieldNumber = 6;
    private global::Packet.BattleEndVictoryArena victoryArena_;
    /// <summary>
    /// 决胜竞技场
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleEndVictoryArena VictoryArena {
      get { return victoryArena_; }
      set {
        victoryArena_ = value;
      }
    }

    /// <summary>Field number for the "npctid" field.</summary>
    public const int NpctidFieldNumber = 7;
    private uint npctid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npctid {
      get { return npctid_; }
      set {
        npctid_ = value;
      }
    }

    /// <summary>Field number for the "trialGate" field.</summary>
    public const int TrialGateFieldNumber = 8;
    private global::Packet.BattleEndTrialGate trialGate_;
    /// <summary>
    /// 试炼之门
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleEndTrialGate TrialGate {
      get { return trialGate_; }
      set {
        trialGate_ = value;
      }
    }

    /// <summary>Field number for the "monsterNian" field.</summary>
    public const int MonsterNianFieldNumber = 9;
    private global::Packet.BattleEndMonsterNian monsterNian_;
    /// <summary>
    /// 年兽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleEndMonsterNian MonsterNian {
      get { return monsterNian_; }
      set {
        monsterNian_ = value;
      }
    }

    /// <summary>Field number for the "battleTypeId" field.</summary>
    public const int BattleTypeIdFieldNumber = 10;
    private uint battleTypeId_;
    /// <summary>
    ///战斗类型ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleTypeId {
      get { return battleTypeId_; }
      set {
        battleTypeId_ = value;
      }
    }

    /// <summary>Field number for the "bossTower" field.</summary>
    public const int BossTowerFieldNumber = 11;
    private global::Packet.BattleEndBossTower bossTower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleEndBossTower BossTower {
      get { return bossTower_; }
      set {
        bossTower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (NpcId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NpcId);
      }
      if (BattleResult != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BattleResult);
      }
      if (rewards_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rewards);
      }
      if (BattleFlag != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BattleFlag);
      }
      if (victoryArena_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VictoryArena);
      }
      if (Npctid != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Npctid);
      }
      if (trialGate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TrialGate);
      }
      if (monsterNian_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MonsterNian);
      }
      if (BattleTypeId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(BattleTypeId);
      }
      if (bossTower_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(BossTower);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (NpcId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcId);
      }
      if (BattleResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleResult);
      }
      if (rewards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
      }
      if (BattleFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleFlag);
      }
      if (victoryArena_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VictoryArena);
      }
      if (Npctid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npctid);
      }
      if (trialGate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrialGate);
      }
      if (monsterNian_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonsterNian);
      }
      if (BattleTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleTypeId);
      }
      if (bossTower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BossTower);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            NpcId = input.ReadUInt64();
            break;
          }
          case 24: {
            BattleResult = input.ReadUInt32();
            break;
          }
          case 34: {
            if (rewards_ == null) {
              rewards_ = new global::Packet.BattleReward();
            }
            input.ReadMessage(rewards_);
            break;
          }
          case 40: {
            BattleFlag = input.ReadUInt32();
            break;
          }
          case 50: {
            if (victoryArena_ == null) {
              victoryArena_ = new global::Packet.BattleEndVictoryArena();
            }
            input.ReadMessage(victoryArena_);
            break;
          }
          case 56: {
            Npctid = input.ReadUInt32();
            break;
          }
          case 66: {
            if (trialGate_ == null) {
              trialGate_ = new global::Packet.BattleEndTrialGate();
            }
            input.ReadMessage(trialGate_);
            break;
          }
          case 74: {
            if (monsterNian_ == null) {
              monsterNian_ = new global::Packet.BattleEndMonsterNian();
            }
            input.ReadMessage(monsterNian_);
            break;
          }
          case 80: {
            BattleTypeId = input.ReadUInt32();
            break;
          }
          case 90: {
            if (bossTower_ == null) {
              bossTower_ = new global::Packet.BattleEndBossTower();
            }
            input.ReadMessage(bossTower_);
            break;
          }
        }
      }
    }

  }

  public sealed class AutoFight : pb::IMessage {
    private static readonly pb::MessageParser<AutoFight> _parser = new pb::MessageParser<AutoFight>(() => new AutoFight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoFight> Parser { get { return _parser; } }

    /// <summary>Field number for the "hero_skill_id" field.</summary>
    public const int HeroSkillIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_heroSkillId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> heroSkillId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> HeroSkillId {
      get { return heroSkillId_; }
    }

    /// <summary>Field number for the "pet_id" field.</summary>
    public const int PetIdFieldNumber = 2;
    private uint petId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetId {
      get { return petId_; }
      set {
        petId_ = value;
      }
    }

    /// <summary>Field number for the "pet_skill_id" field.</summary>
    public const int PetSkillIdFieldNumber = 3;
    private uint petSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSkillId {
      get { return petSkillId_; }
      set {
        petSkillId_ = value;
      }
    }

    /// <summary>Field number for the "auto_state" field.</summary>
    public const int AutoStateFieldNumber = 4;
    private bool autoState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoState {
      get { return autoState_; }
      set {
        autoState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroSkillId_.WriteTo(output, _repeated_heroSkillId_codec);
      if (PetId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetId);
      }
      if (PetSkillId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PetSkillId);
      }
      if (AutoState != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroSkillId_.CalculateSize(_repeated_heroSkillId_codec);
      if (PetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetId);
      }
      if (PetSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSkillId);
      }
      if (AutoState != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            heroSkillId_.AddEntriesFrom(input, _repeated_heroSkillId_codec);
            break;
          }
          case 16: {
            PetId = input.ReadUInt32();
            break;
          }
          case 24: {
            PetSkillId = input.ReadUInt32();
            break;
          }
          case 32: {
            AutoState = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class BattleData : pb::IMessage {
    private static readonly pb::MessageParser<BattleData> _parser = new pb::MessageParser<BattleData>(() => new BattleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "auto_fight" field.</summary>
    public const int AutoFightFieldNumber = 1;
    private global::Packet.AutoFight autoFight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.AutoFight AutoFight {
      get { return autoFight_; }
      set {
        autoFight_ = value;
      }
    }

    /// <summary>Field number for the "pos_type" field.</summary>
    public const int PosTypeFieldNumber = 2;
    private int posType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (autoFight_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AutoFight);
      }
      if (PosType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (autoFight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoFight);
      }
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (autoFight_ == null) {
              autoFight_ = new global::Packet.AutoFight();
            }
            input.ReadMessage(autoFight_);
            break;
          }
          case 16: {
            PosType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleDataNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleDataNtf> _parser = new pb::MessageParser<CmdBattleDataNtf>(() => new CmdBattleDataNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleDataNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Packet.BattleData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Packet.BattleData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSetAutoSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetAutoSkillReq> _parser = new pb::MessageParser<CmdBattleSetAutoSkillReq>(() => new CmdBattleSetAutoSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetAutoSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "hero_skill_id" field.</summary>
    public const int HeroSkillIdFieldNumber = 1;
    private uint heroSkillId_;
    /// <summary>
    ///主角技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroSkillId {
      get { return heroSkillId_; }
      set {
        heroSkillId_ = value;
      }
    }

    /// <summary>Field number for the "pet_skill_id" field.</summary>
    public const int PetSkillIdFieldNumber = 2;
    private uint petSkillId_;
    /// <summary>
    ///宠物技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSkillId {
      get { return petSkillId_; }
      set {
        petSkillId_ = value;
      }
    }

    /// <summary>Field number for the "hero_skill_id2" field.</summary>
    public const int HeroSkillId2FieldNumber = 3;
    private uint heroSkillId2_;
    /// <summary>
    ///主角技能id2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroSkillId2 {
      get { return heroSkillId2_; }
      set {
        heroSkillId2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroSkillId);
      }
      if (PetSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetSkillId);
      }
      if (HeroSkillId2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroSkillId2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroSkillId);
      }
      if (PetSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSkillId);
      }
      if (HeroSkillId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroSkillId2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroSkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetSkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroSkillId2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSetAutoSkillRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetAutoSkillRes> _parser = new pb::MessageParser<CmdBattleSetAutoSkillRes>(() => new CmdBattleSetAutoSkillRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetAutoSkillRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "hero_skill_id" field.</summary>
    public const int HeroSkillIdFieldNumber = 1;
    private uint heroSkillId_;
    /// <summary>
    ///主角技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroSkillId {
      get { return heroSkillId_; }
      set {
        heroSkillId_ = value;
      }
    }

    /// <summary>Field number for the "pet_skill_id" field.</summary>
    public const int PetSkillIdFieldNumber = 2;
    private uint petSkillId_;
    /// <summary>
    ///宠物技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PetSkillId {
      get { return petSkillId_; }
      set {
        petSkillId_ = value;
      }
    }

    /// <summary>Field number for the "hero_skill_id2" field.</summary>
    public const int HeroSkillId2FieldNumber = 3;
    private uint heroSkillId2_;
    /// <summary>
    ///主角技能id2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroSkillId2 {
      get { return heroSkillId2_; }
      set {
        heroSkillId2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroSkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroSkillId);
      }
      if (PetSkillId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PetSkillId);
      }
      if (HeroSkillId2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroSkillId2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroSkillId);
      }
      if (PetSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSkillId);
      }
      if (HeroSkillId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroSkillId2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroSkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            PetSkillId = input.ReadUInt32();
            break;
          }
          case 24: {
            HeroSkillId2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleAutoFightReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleAutoFightReq> _parser = new pb::MessageParser<CmdBattleAutoFightReq>(() => new CmdBattleAutoFightReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleAutoFightReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "start_auto" field.</summary>
    public const int StartAutoFieldNumber = 1;
    private uint startAuto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartAuto {
      get { return startAuto_; }
      set {
        startAuto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartAuto != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartAuto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartAuto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAuto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartAuto = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleAutoFightRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleAutoFightRes> _parser = new pb::MessageParser<CmdBattleAutoFightRes>(() => new CmdBattleAutoFightRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleAutoFightRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "auto_state" field.</summary>
    public const int AutoStateFieldNumber = 1;
    private bool autoState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoState {
      get { return autoState_; }
      set {
        autoState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoState != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoState != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoState = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求战斗信息
  /// </summary>
  public sealed class CmdBattleUnitInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleUnitInfoReq> _parser = new pb::MessageParser<CmdBattleUnitInfoReq>(() => new CmdBattleUnitInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleUnitInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 2;
    private uint unitId_;
    /// <summary>
    ///战斗单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (UnitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnitId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            UnitId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// buff 被控制回合
  /// </summary>
  public sealed class CmdBattleUnitInfoRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleUnitInfoRes> _parser = new pb::MessageParser<CmdBattleUnitInfoRes>(() => new CmdBattleUnitInfoRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleUnitInfoRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 2;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.BattleBuffChange> _repeated_buff_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.BattleBuffChange.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleBuffChange> buff_ = new pbc::RepeatedField<global::Packet.BattleBuffChange>();
    /// <summary>
    ///buff信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleBuffChange> Buff {
      get { return buff_; }
    }

    /// <summary>Field number for the "control_times" field.</summary>
    public const int ControlTimesFieldNumber = 4;
    private uint controlTimes_;
    /// <summary>
    ///被控制回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ControlTimes {
      get { return controlTimes_; }
      set {
        controlTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnitId);
      }
      buff_.WriteTo(output, _repeated_buff_codec);
      if (ControlTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ControlTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      size += buff_.CalculateSize(_repeated_buff_codec);
      if (ControlTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 26: {
            buff_.AddEntriesFrom(input, _repeated_buff_codec);
            break;
          }
          case 32: {
            ControlTimes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///模拟战斗
  /// </summary>
  public sealed class SimulationUnit : pb::IMessage {
    private static readonly pb::MessageParser<SimulationUnit> _parser = new pb::MessageParser<SimulationUnit>(() => new SimulationUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "u_type" field.</summary>
    public const int UTypeFieldNumber = 1;
    private uint uType_;
    /// <summary>
    ///模拟战类型 1主角，2宠物，3怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UType {
      get { return uType_; }
      set {
        uType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///模板配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UType);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UType);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UType = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置模拟战
  /// </summary>
  public sealed class CmdBattleSimulationReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationReq> _parser = new pb::MessageParser<CmdBattleSimulationReq>(() => new CmdBattleSimulationReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.SimulationUnit> _repeated_unit_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.SimulationUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.SimulationUnit> unit_ = new pbc::RepeatedField<global::Packet.SimulationUnit>();
    /// <summary>
    ///设置模拟战
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.SimulationUnit> Unit {
      get { return unit_; }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    /// <summary>
    ///战斗id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unit_.WriteTo(output, _repeated_unit_codec);
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unit_.CalculateSize(_repeated_unit_codec);
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            unit_.AddEntriesFrom(input, _repeated_unit_codec);
            break;
          }
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSimulationRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationRes> _parser = new pb::MessageParser<CmdBattleSimulationRes>(() => new CmdBattleSimulationRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBattleSimulationNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationNtf> _parser = new pb::MessageParser<CmdBattleSimulationNtf>(() => new CmdBattleSimulationNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleUnit.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleUnit> units_ = new pbc::RepeatedField<global::Packet.BattleUnit>();
    /// <summary>
    ///模拟战单位信息下发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleUnit> Units {
      get { return units_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSimulationCommandReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationCommandReq> _parser = new pb::MessageParser<CmdBattleSimulationCommandReq>(() => new CmdBattleSimulationCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationCommandReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.BattleCommand> _repeated_cmd_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.BattleCommand.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattleCommand> cmd_ = new pbc::RepeatedField<global::Packet.BattleCommand>();
    /// <summary>
    ///攻击命令转发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattleCommand> Cmd {
      get { return cmd_; }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private uint round_;
    /// <summary>
    ///回合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    /// <summary>
    ///战斗ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cmd_.WriteTo(output, _repeated_cmd_codec);
      if (Round != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Round);
      }
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cmd_.CalculateSize(_repeated_cmd_codec);
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cmd_.AddEntriesFrom(input, _repeated_cmd_codec);
            break;
          }
          case 16: {
            Round = input.ReadUInt32();
            break;
          }
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSimulationCommandRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationCommandRes> _parser = new pb::MessageParser<CmdBattleSimulationCommandRes>(() => new CmdBattleSimulationCommandRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationCommandRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///模拟战回合信息
  /// </summary>
  public sealed class CmdBattleSimulationResultNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSimulationResultNtf> _parser = new pb::MessageParser<CmdBattleSimulationResultNtf>(() => new CmdBattleSimulationResultNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSimulationResultNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "ntf" field.</summary>
    public const int NtfFieldNumber = 1;
    private global::Packet.CmdBattleRoundNtf ntf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.CmdBattleRoundNtf Ntf {
      get { return ntf_; }
      set {
        ntf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ntf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ntf);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ntf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ntf);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (ntf_ == null) {
              ntf_ = new global::Packet.CmdBattleRoundNtf();
            }
            input.ReadMessage(ntf_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置TAG
  /// </summary>
  public sealed class CmdBattleSetTagReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetTagReq> _parser = new pb::MessageParser<CmdBattleSetTagReq>(() => new CmdBattleSetTagReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetTagReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "tag_compose_id" field.</summary>
    public const int TagComposeIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_tagComposeId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> tagComposeId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 打标机者unit_id * 10000 + tag_id * 100 + is_leader * 10 + target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TagComposeId {
      get { return tagComposeId_; }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unitId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> unitId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnitId {
      get { return unitId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tagComposeId_.WriteTo(output, _repeated_tagComposeId_codec);
      unitId_.WriteTo(output, _repeated_unitId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tagComposeId_.CalculateSize(_repeated_tagComposeId_codec);
      size += unitId_.CalculateSize(_repeated_unitId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tagComposeId_.AddEntriesFrom(input, _repeated_tagComposeId_codec);
            break;
          }
          case 18:
          case 16: {
            unitId_.AddEntriesFrom(input, _repeated_unitId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSetTagRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetTagRes> _parser = new pb::MessageParser<CmdBattleSetTagRes>(() => new CmdBattleSetTagRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetTagRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///设置tag广播
  /// </summary>
  public sealed class CmdBattleSetTagNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetTagNtf> _parser = new pb::MessageParser<CmdBattleSetTagNtf>(() => new CmdBattleSetTagNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetTagNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "tag_compose_id" field.</summary>
    public const int TagComposeIdFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_tagComposeId_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> tagComposeId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TagComposeId {
      get { return tagComposeId_; }
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unitId_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> unitId_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnitId {
      get { return unitId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tagComposeId_.WriteTo(output, _repeated_tagComposeId_codec);
      unitId_.WriteTo(output, _repeated_unitId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tagComposeId_.CalculateSize(_repeated_tagComposeId_codec);
      size += unitId_.CalculateSize(_repeated_unitId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            tagComposeId_.AddEntriesFrom(input, _repeated_tagComposeId_codec);
            break;
          }
          case 18:
          case 16: {
            unitId_.AddEntriesFrom(input, _repeated_unitId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///暂停战斗
  /// </summary>
  public sealed class CmdBattlePauseReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePauseReq> _parser = new pb::MessageParser<CmdBattlePauseReq>(() => new CmdBattlePauseReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePauseReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "resume" field.</summary>
    public const int ResumeFieldNumber = 1;
    private uint resume_;
    /// <summary>
    /// 0 pause 1 resume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resume {
      get { return resume_; }
      set {
        resume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resume != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Resume);
      }
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (Resume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resume);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resume = input.ReadUInt32();
            break;
          }
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePauseRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePauseRes> _parser = new pb::MessageParser<CmdBattlePauseRes>(() => new CmdBattlePauseRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePauseRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattlePauseNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattlePauseNtf> _parser = new pb::MessageParser<CmdBattlePauseNtf>(() => new CmdBattlePauseNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattlePauseNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleAILogNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleAILogNtf> _parser = new pb::MessageParser<CmdBattleAILogNtf>(() => new CmdBattleAILogNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleAILogNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家命令设置状态
  /// </summary>
  public sealed class CmdBattleCmdStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCmdStateReq> _parser = new pb::MessageParser<CmdBattleCmdStateReq>(() => new CmdBattleCmdStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCmdStateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "unite_id" field.</summary>
    public const int UniteIdFieldNumber = 2;
    private uint uniteId_;
    /// <summary>
    ///单位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UniteId {
      get { return uniteId_; }
      set {
        uniteId_ = value;
      }
    }

    /// <summary>Field number for the "cmdready" field.</summary>
    public const int CmdreadyFieldNumber = 3;
    private uint cmdready_;
    /// <summary>
    /// 0 是不ok  1 是ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmdready {
      get { return cmdready_; }
      set {
        cmdready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (UniteId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UniteId);
      }
      if (Cmdready != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cmdready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (UniteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniteId);
      }
      if (Cmdready != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmdready);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            UniteId = input.ReadUInt32();
            break;
          }
          case 24: {
            Cmdready = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleCmdStateRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCmdStateRes> _parser = new pb::MessageParser<CmdBattleCmdStateRes>(() => new CmdBattleCmdStateRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCmdStateRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "unite_id" field.</summary>
    public const int UniteIdFieldNumber = 2;
    private uint uniteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UniteId {
      get { return uniteId_; }
      set {
        uniteId_ = value;
      }
    }

    /// <summary>Field number for the "cmdready" field.</summary>
    public const int CmdreadyFieldNumber = 3;
    private uint cmdready_;
    /// <summary>
    /// 0 是不ok  1 是ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmdready {
      get { return cmdready_; }
      set {
        cmdready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (UniteId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UniteId);
      }
      if (Cmdready != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cmdready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (UniteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniteId);
      }
      if (Cmdready != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmdready);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            UniteId = input.ReadUInt32();
            break;
          }
          case 24: {
            Cmdready = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleCmdStateNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCmdStateNtf> _parser = new pb::MessageParser<CmdBattleCmdStateNtf>(() => new CmdBattleCmdStateNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCmdStateNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "unite_id" field.</summary>
    public const int UniteIdFieldNumber = 2;
    private uint uniteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UniteId {
      get { return uniteId_; }
      set {
        uniteId_ = value;
      }
    }

    /// <summary>Field number for the "cmdready" field.</summary>
    public const int CmdreadyFieldNumber = 3;
    private uint cmdready_;
    /// <summary>
    /// 0 是不ok  1 是ok
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmdready {
      get { return cmdready_; }
      set {
        cmdready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (UniteId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UniteId);
      }
      if (Cmdready != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cmdready);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (UniteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniteId);
      }
      if (Cmdready != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmdready);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            UniteId = input.ReadUInt32();
            break;
          }
          case 24: {
            Cmdready = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗加速
  /// </summary>
  public sealed class CmdBattleCmdSpeedUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCmdSpeedUpReq> _parser = new pb::MessageParser<CmdBattleCmdSpeedUpReq>(() => new CmdBattleCmdSpeedUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCmdSpeedUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗加速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "speed_time" field.</summary>
    public const int SpeedTimeFieldNumber = 2;
    private uint speedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedTime {
      get { return speedTime_; }
      set {
        speedTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (SpeedTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SpeedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (SpeedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            SpeedTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleCmdSpeedUpNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCmdSpeedUpNtf> _parser = new pb::MessageParser<CmdBattleCmdSpeedUpNtf>(() => new CmdBattleCmdSpeedUpNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCmdSpeedUpNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗加速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "speed_time" field.</summary>
    public const int SpeedTimeFieldNumber = 2;
    private uint speedTime_;
    /// <summary>
    ///当前的播放速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpeedTime {
      get { return speedTime_; }
      set {
        speedTime_ = value;
      }
    }

    /// <summary>Field number for the "next_speed_time" field.</summary>
    public const int NextSpeedTimeFieldNumber = 3;
    private uint nextSpeedTime_;
    /// <summary>
    ///下回合的播放速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextSpeedTime {
      get { return nextSpeedTime_; }
      set {
        nextSpeedTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (SpeedTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SpeedTime);
      }
      if (NextSpeedTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextSpeedTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (SpeedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeedTime);
      }
      if (NextSpeedTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextSpeedTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            SpeedTime = input.ReadUInt32();
            break;
          }
          case 24: {
            NextSpeedTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///撤退
  /// </summary>
  public sealed class CmdBattleCancelReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCancelReq> _parser = new pb::MessageParser<CmdBattleCancelReq>(() => new CmdBattleCancelReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCancelReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleCancelNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleCancelNtf> _parser = new pb::MessageParser<CmdBattleCancelNtf>(() => new CmdBattleCancelNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleCancelNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    ///战斗 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "unit_ids" field.</summary>
    public const int UnitIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_unitIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> unitIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnitIds {
      get { return unitIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      unitIds_.WriteTo(output, _repeated_unitIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += unitIds_.CalculateSize(_repeated_unitIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置主角前后位置
  /// </summary>
  public sealed class CmdBattleSetPosTypeReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetPosTypeReq> _parser = new pb::MessageParser<CmdBattleSetPosTypeReq>(() => new CmdBattleSetPosTypeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetPosTypeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos_type" field.</summary>
    public const int PosTypeFieldNumber = 1;
    private uint posType_;
    /// <summary>
    ///0 默认主角后排 , 1 主角前排
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleSetPosTypeRes : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleSetPosTypeRes> _parser = new pb::MessageParser<CmdBattleSetPosTypeRes>(() => new CmdBattleSetPosTypeRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleSetPosTypeRes> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos_type" field.</summary>
    public const int PosTypeFieldNumber = 1;
    private uint posType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PosType {
      get { return posType_; }
      set {
        posType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PosType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PosType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleEnterFailedNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleEnterFailedNtf> _parser = new pb::MessageParser<CmdBattleEnterFailedNtf>(() => new CmdBattleEnterFailedNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleEnterFailedNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::Packet.BattleEnterFailedReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.BattleEnterFailedReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "monterTeam" field.</summary>
    public const int MonterTeamFieldNumber = 2;
    private uint monterTeam_;
    /// <summary>
    ///遇敌组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonterTeam {
      get { return monterTeam_; }
      set {
        monterTeam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (MonterTeam != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonterTeam);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (MonterTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonterTeam);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::Packet.BattleEnterFailedReason) input.ReadEnum();
            break;
          }
          case 16: {
            MonterTeam = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗内的一个宠物
  /// </summary>
  public sealed class BattlePet : pb::IMessage {
    private static readonly pb::MessageParser<BattlePet> _parser = new pb::MessageParser<BattlePet>(() => new BattlePet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePet> Parser { get { return _parser; } }

    /// <summary>Field number for the "pet" field.</summary>
    public const int PetFieldNumber = 1;
    private global::Packet.PetUnit pet_;
    /// <summary>
    ///宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Packet.PetUnit Pet {
      get { return pet_; }
      set {
        pet_ = value;
      }
    }

    /// <summary>Field number for the "firenum" field.</summary>
    public const int FirenumFieldNumber = 2;
    private uint firenum_;
    /// <summary>
    ///已出战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Firenum {
      get { return firenum_; }
      set {
        firenum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pet);
      }
      if (Firenum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Firenum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
      }
      if (Firenum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Firenum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pet_ == null) {
              pet_ = new global::Packet.PetUnit();
            }
            input.ReadMessage(pet_);
            break;
          }
          case 16: {
            Firenum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗内的宠物列表
  /// </summary>
  public sealed class BattlePetList : pb::IMessage {
    private static readonly pb::MessageParser<BattlePetList> _parser = new pb::MessageParser<BattlePetList>(() => new BattlePetList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePetList> Parser { get { return _parser; } }

    /// <summary>Field number for the "fire" field.</summary>
    public const int FireFieldNumber = 1;
    private uint fire_;
    /// <summary>
    ///当前出战的宠物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    /// <summary>Field number for the "pets" field.</summary>
    public const int PetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Packet.BattlePet> _repeated_pets_codec
        = pb::FieldCodec.ForMessage(18, global::Packet.BattlePet.Parser);
    private readonly pbc::RepeatedField<global::Packet.BattlePet> pets_ = new pbc::RepeatedField<global::Packet.BattlePet>();
    /// <summary>
    ///宠物列表(含出战)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.BattlePet> Pets {
      get { return pets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fire != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fire);
      }
      pets_.WriteTo(output, _repeated_pets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fire);
      }
      size += pets_.CalculateSize(_repeated_pets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fire = input.ReadUInt32();
            break;
          }
          case 18: {
            pets_.AddEntriesFrom(input, _repeated_pets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleWatchReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleWatchReq> _parser = new pb::MessageParser<CmdBattleWatchReq>(() => new CmdBattleWatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleWatchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 1;
    private ulong roleid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roleid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Roleid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roleid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Roleid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roleid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CmdBattleWatchQuitReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleWatchQuitReq> _parser = new pb::MessageParser<CmdBattleWatchQuitReq>(() => new CmdBattleWatchQuitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleWatchQuitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class GroupScore : pb::IMessage {
    private static readonly pb::MessageParser<GroupScore> _parser = new pb::MessageParser<GroupScore>(() => new GroupScore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupScore> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    /// <summary>
    ///组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "totalScore" field.</summary>
    public const int TotalScoreFieldNumber = 2;
    private uint totalScore_;
    /// <summary>
    ///总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "roleScore" field.</summary>
    public const int RoleScoreFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Packet.GroupScore.Types.RoleScore> _repeated_roleScore_codec
        = pb::FieldCodec.ForMessage(26, global::Packet.GroupScore.Types.RoleScore.Parser);
    private readonly pbc::RepeatedField<global::Packet.GroupScore.Types.RoleScore> roleScore_ = new pbc::RepeatedField<global::Packet.GroupScore.Types.RoleScore>();
    /// <summary>
    ///玩家积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GroupScore.Types.RoleScore> RoleScore {
      get { return roleScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalScore);
      }
      roleScore_.WriteTo(output, _repeated_roleScore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalScore);
      }
      size += roleScore_.CalculateSize(_repeated_roleScore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalScore = input.ReadUInt32();
            break;
          }
          case 26: {
            roleScore_.AddEntriesFrom(input, _repeated_roleScore_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GroupScore message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class RoleScore : pb::IMessage {
        private static readonly pb::MessageParser<RoleScore> _parser = new pb::MessageParser<RoleScore>(() => new RoleScore());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoleScore> Parser { get { return _parser; } }

        /// <summary>Field number for the "unitId" field.</summary>
        public const int UnitIdFieldNumber = 1;
        private uint unitId_;
        /// <summary>
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint UnitId {
          get { return unitId_; }
          set {
            unitId_ = value;
          }
        }

        /// <summary>Field number for the "roleHpScore" field.</summary>
        public const int RoleHpScoreFieldNumber = 2;
        private uint roleHpScore_;
        /// <summary>
        ///主角血量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RoleHpScore {
          get { return roleHpScore_; }
          set {
            roleHpScore_ = value;
          }
        }

        /// <summary>Field number for the "roleMpScore" field.</summary>
        public const int RoleMpScoreFieldNumber = 3;
        private uint roleMpScore_;
        /// <summary>
        ///主角蓝量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RoleMpScore {
          get { return roleMpScore_; }
          set {
            roleMpScore_ = value;
          }
        }

        /// <summary>Field number for the "petHpScore" field.</summary>
        public const int PetHpScoreFieldNumber = 4;
        private uint petHpScore_;
        /// <summary>
        ///宠物血量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetHpScore {
          get { return petHpScore_; }
          set {
            petHpScore_ = value;
          }
        }

        /// <summary>Field number for the "petMpScore" field.</summary>
        public const int PetMpScoreFieldNumber = 5;
        private uint petMpScore_;
        /// <summary>
        ///宠物蓝量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetMpScore {
          get { return petMpScore_; }
          set {
            petMpScore_ = value;
          }
        }

        /// <summary>Field number for the "petSummonScore" field.</summary>
        public const int PetSummonScoreFieldNumber = 6;
        private uint petSummonScore_;
        /// <summary>
        ///剩余宠物召唤次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PetSummonScore {
          get { return petSummonScore_; }
          set {
            petSummonScore_ = value;
          }
        }

        /// <summary>Field number for the "itemScore" field.</summary>
        public const int ItemScoreFieldNumber = 7;
        private uint itemScore_;
        /// <summary>
        ///剩余药品使用
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ItemScore {
          get { return itemScore_; }
          set {
            itemScore_ = value;
          }
        }

        /// <summary>Field number for the "specialItemScore" field.</summary>
        public const int SpecialItemScoreFieldNumber = 8;
        private uint specialItemScore_;
        /// <summary>
        ///剩余特殊药品使用
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SpecialItemScore {
          get { return specialItemScore_; }
          set {
            specialItemScore_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UnitId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(UnitId);
          }
          if (RoleHpScore != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RoleHpScore);
          }
          if (RoleMpScore != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(RoleMpScore);
          }
          if (PetHpScore != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(PetHpScore);
          }
          if (PetMpScore != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(PetMpScore);
          }
          if (PetSummonScore != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(PetSummonScore);
          }
          if (ItemScore != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(ItemScore);
          }
          if (SpecialItemScore != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(SpecialItemScore);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UnitId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
          }
          if (RoleHpScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleHpScore);
          }
          if (RoleMpScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleMpScore);
          }
          if (PetHpScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetHpScore);
          }
          if (PetMpScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetMpScore);
          }
          if (PetSummonScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PetSummonScore);
          }
          if (ItemScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemScore);
          }
          if (SpecialItemScore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecialItemScore);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                UnitId = input.ReadUInt32();
                break;
              }
              case 16: {
                RoleHpScore = input.ReadUInt32();
                break;
              }
              case 24: {
                RoleMpScore = input.ReadUInt32();
                break;
              }
              case 32: {
                PetHpScore = input.ReadUInt32();
                break;
              }
              case 40: {
                PetMpScore = input.ReadUInt32();
                break;
              }
              case 48: {
                PetSummonScore = input.ReadUInt32();
                break;
              }
              case 56: {
                ItemScore = input.ReadUInt32();
                break;
              }
              case 64: {
                SpecialItemScore = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CmdBattleScoreInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleScoreInfoReq> _parser = new pb::MessageParser<CmdBattleScoreInfoReq>(() => new CmdBattleScoreInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleScoreInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CmdBattleScoreInfoNtf : pb::IMessage {
    private static readonly pb::MessageParser<CmdBattleScoreInfoNtf> _parser = new pb::MessageParser<CmdBattleScoreInfoNtf>(() => new CmdBattleScoreInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdBattleScoreInfoNtf> Parser { get { return _parser; } }

    /// <summary>Field number for the "groupScore" field.</summary>
    public const int GroupScoreFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Packet.GroupScore> _repeated_groupScore_codec
        = pb::FieldCodec.ForMessage(10, global::Packet.GroupScore.Parser);
    private readonly pbc::RepeatedField<global::Packet.GroupScore> groupScore_ = new pbc::RepeatedField<global::Packet.GroupScore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Packet.GroupScore> GroupScore {
      get { return groupScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupScore_.WriteTo(output, _repeated_groupScore_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupScore_.CalculateSize(_repeated_groupScore_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            groupScore_.AddEntriesFrom(input, _repeated_groupScore_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
